import {
  require_react_dom
} from "./chunk-TH7NCS4R.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof(o) {
      "@babel/helpers - typeof";
      return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
var require_objectWithoutPropertiesLoose = __commonJS({
  "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports, module) {
    function _objectWithoutPropertiesLoose(r, e) {
      if (null == r) return {};
      var t = {};
      for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
        if (-1 !== e.indexOf(n)) continue;
        t[n] = r[n];
      }
      return t;
    }
    module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/objectWithoutProperties.js
var require_objectWithoutProperties = __commonJS({
  "node_modules/@babel/runtime/helpers/objectWithoutProperties.js"(exports, module) {
    var objectWithoutPropertiesLoose = require_objectWithoutPropertiesLoose();
    function _objectWithoutProperties(e, t) {
      if (null == e) return {};
      var o, r, i = objectWithoutPropertiesLoose(e, t);
      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(e);
        for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
      }
      return i;
    }
    module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayWithHoles.js
var require_arrayWithHoles = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayWithHoles.js"(exports, module) {
    function _arrayWithHoles(r) {
      if (Array.isArray(r)) return r;
    }
    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/iterableToArrayLimit.js
var require_iterableToArrayLimit = __commonJS({
  "node_modules/@babel/runtime/helpers/iterableToArrayLimit.js"(exports, module) {
    function _iterableToArrayLimit(r, l) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = false;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
        } catch (r2) {
          o = true, n = r2;
        } finally {
          try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayLikeToArray.js"(exports, module) {
    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
      return n;
    }
    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"(exports, module) {
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;
      }
    }
    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/nonIterableRest.js
var require_nonIterableRest = __commonJS({
  "node_modules/@babel/runtime/helpers/nonIterableRest.js"(exports, module) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/slicedToArray.js
var require_slicedToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/slicedToArray.js"(exports, module) {
    var arrayWithHoles = require_arrayWithHoles();
    var iterableToArrayLimit = require_iterableToArrayLimit();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableRest = require_nonIterableRest();
    function _slicedToArray(r, e) {
      return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();
    }
    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayWithoutHoles.js
var require_arrayWithoutHoles = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayWithoutHoles.js"(exports, module) {
    var arrayLikeToArray = require_arrayLikeToArray();
    function _arrayWithoutHoles(r) {
      if (Array.isArray(r)) return arrayLikeToArray(r);
    }
    module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/iterableToArray.js
var require_iterableToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/iterableToArray.js"(exports, module) {
    function _iterableToArray(r) {
      if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
    }
    module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/nonIterableSpread.js
var require_nonIterableSpread = __commonJS({
  "node_modules/@babel/runtime/helpers/nonIterableSpread.js"(exports, module) {
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toConsumableArray.js
var require_toConsumableArray = __commonJS({
  "node_modules/@babel/runtime/helpers/toConsumableArray.js"(exports, module) {
    var arrayWithoutHoles = require_arrayWithoutHoles();
    var iterableToArray = require_iterableToArray();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableSpread = require_nonIterableSpread();
    function _toConsumableArray(r) {
      return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();
    }
    module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPrimitive.js
var require_toPrimitive = __commonJS({
  "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    function toPrimitive(t, r) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPropertyKey.js
var require_toPropertyKey = __commonJS({
  "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    var toPrimitive = require_toPrimitive();
    function toPropertyKey(t) {
      var i = toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperty(e, r, t) {
      return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
        value: t,
        enumerable: true,
        configurable: true,
        writable: true
      }) : e[r] = t, e;
    }
    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime/helpers/classCallCheck.js"(exports, module) {
    function _classCallCheck(a, n) {
      if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
    }
    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/createClass.js
var require_createClass = __commonJS({
  "node_modules/@babel/runtime/helpers/createClass.js"(exports, module) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
        writable: false
      }), e;
    }
    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/assertThisInitialized.js
var require_assertThisInitialized = __commonJS({
  "node_modules/@babel/runtime/helpers/assertThisInitialized.js"(exports, module) {
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports, module) {
    function _setPrototypeOf(t, e) {
      return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _setPrototypeOf(t, e);
    }
    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/inherits.js
var require_inherits = __commonJS({
  "node_modules/@babel/runtime/helpers/inherits.js"(exports, module) {
    var setPrototypeOf = require_setPrototypeOf();
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, {
        constructor: {
          value: t,
          writable: true,
          configurable: true
        }
      }), Object.defineProperty(t, "prototype", {
        writable: false
      }), e && setPrototypeOf(t, e);
    }
    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var require_possibleConstructorReturn = __commonJS({
  "node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    var assertThisInitialized = require_assertThisInitialized();
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return assertThisInitialized(t);
    }
    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/getPrototypeOf.js
var require_getPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/getPrototypeOf.js"(exports, module) {
    function _getPrototypeOf(t) {
      return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _getPrototypeOf(t);
    }
    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props2, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props2[propName] == null) {
            if (isRequired) {
              if (props2[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props2, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props2, propName, componentName, location, propFullName, secret) {
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props2, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props2[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props2, propName, componentName, location, propFullName) {
          if (!(props2[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props2[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props2, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props2, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props2, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props2, propName, componentName, location, propFullName) {
          if (!isNode(props2[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props2[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props2[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-notify-resize/src/shallowequal.js
var require_shallowequal = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-notify-resize/src/shallowequal.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    function shallowequal(object1, object2) {
      if (object1 === object2) {
        return true;
      }
      if ((0, _typeof2.default)(object1) !== "object" || object1 === null || (0, _typeof2.default)(object2) !== "object" || object2 === null) {
        return false;
      }
      var keys1 = Object.keys(object1);
      var keys2 = Object.keys(object2);
      if (keys1.length !== keys2.length) {
        return false;
      }
      var equal = true;
      for (var i = 0, len = keys1.length; i < len; i++) {
        var key = keys1[i];
        if (object1[key] !== object2[key]) {
          equal = false;
          break;
        }
      }
      return equal;
    }
    var _default = shallowequal;
    exports.default = _default;
  }
});

// node_modules/lodash.debounce/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.debounce/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = debounce;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/debounce/index.js
var require_debounce = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/debounce/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _lodash = _interopRequireDefault(require_lodash());
    var _default = _lodash.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/getGlobal.js
var require_getGlobal = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/getGlobal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getGlobal = getGlobal;
    function getGlobal() {
      return typeof globalThis !== "undefined" ? globalThis : window;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-notify-resize/src/index.js
var require_src = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-notify-resize/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.NotifyResize = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = require_prop_types();
    var _shallowequal = _interopRequireDefault(require_shallowequal());
    var _debounce = _interopRequireDefault(require_debounce());
    var _getGlobal = require_getGlobal();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var STYLE_DISPLAY_NONE = {
      display: "none"
    };
    var emptyFn = function emptyFn2() {
    };
    var immediateFn = function immediateFn2(fn) {
      return fn();
    };
    var notifyResizeStyle = {
      contain: "strict",
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      zIndex: -1,
      overflow: "hidden",
      display: "block",
      pointerEvents: "none",
      opacity: 0,
      direction: "ltr",
      textAlign: "start"
    };
    var expandToolStyle = {
      contain: "strict",
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      overflow: "auto"
    };
    var contractToolStyle = {
      contain: "strict",
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      overflow: "auto"
    };
    var contractToolInnerStyle = {
      contain: "strict",
      position: "absolute",
      top: 0,
      left: 0,
      width: "200%",
      height: "200%"
    };
    var InovuaNotifyResize = function(_React$Component) {
      (0, _inherits2.default)(InovuaNotifyResize2, _React$Component);
      var _super = _createSuper(InovuaNotifyResize2);
      function InovuaNotifyResize2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaNotifyResize2);
        _this = _super.call(this, props2);
        _this.checkResize = _this.checkResize.bind((0, _assertThisInitialized2.default)(_this));
        _this.onResize = _this.onResize.bind((0, _assertThisInitialized2.default)(_this));
        if (props2.notifyResizeDelay > 0) {
          _this.onResize = (0, _debounce.default)(_this.onResize, props2.notifyResizeDelay);
        }
        if (props2.checkResizeDelay > 0) {
          _this.checkResize = (0, _debounce.default)(_this.checkResize, props2.checkResizeDelay);
        }
        _this.refNotifyResize = function(node) {
          _this.notifyResizeNode = node;
        };
        _this.refContractTool = function(node) {
          _this.contractToolNode = node;
        };
        _this.refExpandTool = function(node) {
          _this.expandToolNode = node;
        };
        _this.refExpandToolInner = function(node) {
          _this.expandToolInnerNode = node;
        };
        _this.refContractToolInner = function(node) {
          _this.contractToolInnerNode = node;
        };
        _this.state = {
          notifyResizeWidth: 0,
          notifyResizeHeight: 0,
          expandToolWidth: 0,
          expandToolHeight: 0,
          contractToolWidth: 0,
          contractToolHeight: 0
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaNotifyResize2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          if (typeof nextProps.shouldComponentUpdate === "function") {
            return nextProps.shouldComponentUpdate(nextProps, this.props, nextState, this.state);
          }
          return !(0, _shallowequal.default)(nextState, this.state) || !(0, _shallowequal.default)(nextProps, this.props);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.__willUnmount = true;
          if (this.observer) {
            if (this.observer.unobserve) {
              this.observer.unobserve(this.target);
            }
            if (this.observer.disconnect) {
              this.observer.disconnect();
            }
            delete this.observer;
          }
          delete this.target;
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          return this.notifyResizeNode;
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          this.__willUnmount = false;
          var ResizeObserver2 = globalObject.ResizeObserver || this.props.ResizeObserver;
          if (this.props.useNativeIfAvailable && ResizeObserver2) {
            var node = this.getDOMNode();
            var target = node.parentNode;
            this.target = target;
            var observer = new ResizeObserver2(function(entries) {
              if (_this2.props.onObserverResize) {
                _this2.props.onObserverResize(entries);
              }
              var first = entries[0];
              if (first) {
                _this2.onResize(first.contentRect);
              }
            });
            observer.observe(target);
            this.observer = observer;
          }
          if (typeof this.props.onMount === "function") {
            this.props.onMount(this);
          }
          if (this.observer) {
            return;
          }
          this.resetResizeTool(function() {
            if (_this2.props.notifyOnMount) {
              var _this2$state = _this2.state, width = _this2$state.notifyResizeWidth, height = _this2$state.notifyResizeHeight;
              _this2.onResize({
                width,
                height
              });
            }
          });
        }
      }, {
        key: "render",
        value: function render() {
          var ResizeObserver2 = globalObject.ResizeObserver || this.props.ResizeObserver;
          if (this.props.useNativeIfAvailable && ResizeObserver2) {
            return _react.default.createElement("div", {
              ref: this.refNotifyResize,
              style: STYLE_DISPLAY_NONE,
              "data-name": "@inovua/react-observer-placeholder"
            });
          }
          return _react.default.createElement("div", {
            ref: this.refNotifyResize,
            style: notifyResizeStyle,
            onScroll: this.checkResize
          }, this.renderExpandTool(), this.renderContractTool());
        }
      }, {
        key: "renderExpandTool",
        value: function renderExpandTool() {
          return _react.default.createElement("div", {
            ref: this.refExpandTool,
            style: expandToolStyle
          }, _react.default.createElement("div", {
            ref: this.refExpandToolInner,
            style: {
              position: "absolute",
              top: 0,
              left: 0,
              width: this.state.expandToolWidth,
              height: this.state.expandToolHeight
            }
          }));
        }
      }, {
        key: "renderContractTool",
        value: function renderContractTool() {
          return _react.default.createElement("div", {
            ref: this.refContractTool,
            style: contractToolStyle
          }, _react.default.createElement("div", {
            ref: this.refContractToolInner,
            style: contractToolInnerStyle
          }));
        }
      }, {
        key: "resetResizeTool",
        value: function resetResizeTool(callback) {
          var _this3 = this;
          this.setDimensions(function() {
            _this3.scrollToBottomExpandTool();
            if (typeof callback == "function") {
              callback();
            }
          });
        }
      }, {
        key: "setDimensions",
        value: function setDimensions(callback) {
          var _this4 = this;
          this.getDimensions(function(size) {
            var notifyResizeWidth = size.notifyResizeWidth, notifyResizeHeight = size.notifyResizeHeight;
            if (_this4.__willUnmount) {
              return;
            }
            _this4.setState({
              notifyResizeWidth,
              notifyResizeHeight,
              expandToolWidth: notifyResizeWidth + 1,
              expandToolHeight: notifyResizeHeight + 1
            }, callback);
          });
        }
      }, {
        key: "getDimensions",
        value: function getDimensions(callback) {
          var _this5 = this;
          if (!callback || typeof callback != "function") {
            callback = emptyFn;
          }
          var notifyResize = this.notifyResizeNode;
          if (!notifyResize) {
            return;
          }
          var node = notifyResize.parentElement || notifyResize;
          var size;
          var fn = this.props.useRaf ? requestAnimationFrame : immediateFn;
          fn(function() {
            if (typeof _this5.props.measureSize == "function") {
              size = _this5.props.measureSize(node, notifyResize);
            } else {
              size = {
                width: node.offsetWidth,
                height: node.offsetHeight
              };
            }
            callback({
              notifyResizeWidth: size.width,
              notifyResizeHeight: size.height
            });
          });
        }
      }, {
        key: "scrollToBottomExpandTool",
        value: function scrollToBottomExpandTool(callback) {
          var _this6 = this;
          if (this.notifyResizeNode) {
            requestAnimationFrame(function() {
              var expandTool = _this6.expandToolNode;
              var contractTool = _this6.contractToolNode;
              var expandToolScrollHeight;
              var expandToolScrollWidth;
              var contractToolScrollHeight;
              var contractToolScrollWidth;
              if (expandTool) {
                expandToolScrollHeight = expandTool.scrollHeight;
                expandToolScrollWidth = expandTool.scrollWidth;
              }
              if (contractTool) {
                contractToolScrollHeight = contractTool.scrollHeight;
                contractToolScrollWidth = contractTool.scrollWidth;
              }
              if (expandTool) {
                expandTool.scrollTop = expandToolScrollHeight;
                expandTool.scrollLeft = expandToolScrollWidth;
              }
              if (contractTool) {
                contractTool.scrollTop = contractToolScrollHeight;
                contractTool.scrollLeft = contractToolScrollWidth;
              }
              if (typeof callback == "function") {
                callback();
              }
            });
          }
        }
      }, {
        key: "checkResize",
        value: function checkResize() {
          var _this7 = this;
          this.getDimensions(function(_ref) {
            var notifyResizeWidth = _ref.notifyResizeWidth, notifyResizeHeight = _ref.notifyResizeHeight;
            if (notifyResizeWidth !== _this7.state.notifyResizeWidth || notifyResizeHeight !== _this7.state.notifyResizeHeight) {
              _this7.onResize({
                width: notifyResizeWidth,
                height: notifyResizeHeight
              });
              _this7.resetResizeTool();
            }
          });
        }
      }, {
        key: "onResize",
        value: function onResize(_ref2) {
          var width = _ref2.width, height = _ref2.height;
          if (this.__willUnmount) {
            return;
          }
          if (typeof this.props.onResize === "function") {
            this.props.onResize({
              width,
              height
            });
          }
        }
      }]);
      return InovuaNotifyResize2;
    }(_react.default.Component);
    exports.NotifyResize = InovuaNotifyResize;
    InovuaNotifyResize.defaultProps = {
      useNativeIfAvailable: true,
      useWillChange: false,
      useRaf: true
    };
    InovuaNotifyResize.propTypes = {
      ResizeObserver: _propTypes.func,
      onResize: _propTypes.func,
      onObserverResize: _propTypes.func,
      useNativeIfAvailable: _propTypes.bool,
      onMount: _propTypes.func,
      useWillChange: _propTypes.bool,
      useRaf: _propTypes.bool,
      notifyOnMount: _propTypes.bool,
      notifyResizeDelay: _propTypes.number,
      checkResizeDelay: _propTypes.number
    };
    var _default = InovuaNotifyResize;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/uglified/index.js
var require_uglified = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/uglified/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function myFunction() {
    }
    var _default = myFunction.toString() != "function myFunction(abc) { /* this is a simple comment */ }";
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/isControlledValue.js
var require_isControlledValue = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/isControlledValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(value) {
      return value !== void 0;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/toUpperFirst.js
var require_toUpperFirst = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/toUpperFirst.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(s) {
      return "".concat(s.charAt(0).toUpperCase()).concat(s.substring(1));
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useProperty.js
var require_useProperty = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useProperty.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = require_react();
    var _isControlledValue = _interopRequireDefault(require_isControlledValue());
    var _toUpperFirst = _interopRequireDefault(require_toUpperFirst());
    var emptyFn = function emptyFn2() {
    };
    var useProperty = function useProperty2(props2, propName, defaultValue, config) {
      var context = (0, _react.useContext)(props2.context);
      var PropName = (0, _toUpperFirst.default)(propName);
      var defaultValueFromProps = props2["default".concat(PropName)];
      var defaultValueFromRestoredState = context.state[propName];
      if (defaultValueFromRestoredState !== void 0) {
        defaultValueFromProps = defaultValueFromRestoredState;
      }
      defaultValue = defaultValueFromProps === void 0 ? defaultValue : defaultValueFromProps;
      var _useState = (0, _react.useState)(defaultValue), _useState2 = (0, _slicedToArray2.default)(_useState, 2), stateValue = _useState2[0], setStateProperty = _useState2[1];
      var value = props2[propName];
      var controlled = (0, _isControlledValue.default)(value);
      var onChange = config && config.onChange ? config.onChange : props2["on".concat(PropName, "Change")] || emptyFn;
      var setter = function setter2(value2) {
        context.state[propName] = value2;
        if (!controlled) {
          setStateProperty(value2);
        }
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        onChange.apply(void 0, [value2].concat(args));
      };
      if (!controlled) {
        value = stateValue;
      }
      return [value, setter];
    };
    var _default = useProperty;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/getScrollbarWidth/index.js
var require_getScrollbarWidth = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/getScrollbarWidth/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var document2 = globalObject ? globalObject.document : null;
    var scrollbarWidth;
    var hideNativeScrollbarWidth;
    var _default = function _default2(hideNativeScrollbarIfPossible) {
      if (hideNativeScrollbarIfPossible) {
        if (hideNativeScrollbarWidth !== void 0) {
          return hideNativeScrollbarWidth;
        }
      } else {
        if (scrollbarWidth !== void 0) {
          return scrollbarWidth;
        }
      }
      var result;
      if (document2) {
        var div = document2.createElement("div");
        var divStyle = div.style;
        if (hideNativeScrollbarIfPossible) {
          div.className = "inovua--hide-native-scroll-if-possible";
        }
        divStyle.width = "100px";
        divStyle.height = "100px";
        divStyle.position = "absolute";
        divStyle.visibility = "hidden";
        divStyle.boxSizing = "content-box";
        divStyle.top = "-99999px";
        divStyle.overflow = "scroll";
        divStyle.MsOverflowStyle = "scrollbar";
        document2.body.appendChild(div);
        var inner = document2.createElement("div");
        div.appendChild(inner);
        result = div.offsetWidth - inner.offsetWidth;
        document2.body.removeChild(div);
      } else {
        result = 0;
      }
      if (hideNativeScrollbarIfPossible) {
        hideNativeScrollbarWidth = result;
      }
      return result;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/clamp.js
var require_clamp = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/clamp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(value, min, max) {
      if (min == null) {
        min = value;
      }
      return value < min ? min : max != null && value > max ? max : value;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/hasTouch/index.js
var require_hasTouch = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/hasTouch/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var _default = !!("ontouchstart" in globalObject || globalObject.DocumentTouch && document instanceof DocumentTouch);
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/isMobile/index.js
var require_isMobile = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/isMobile/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _hasTouch = _interopRequireDefault(require_hasTouch());
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var mobileTest = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(globalObject.navigator ? globalObject.navigator.userAgent : "");
    var _default = _hasTouch.default && mobileTest;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-class/autoBind.js
var require_autoBind = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-class/autoBind.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var skipMethods = {
      constructor: 1,
      render: 1,
      shouldComponentUpdate: 1,
      componentWillMount: 1,
      componentDidMount: 1,
      componentWillReceiveProps: 1,
      componentWillUpdate: 1,
      componentDidUpdate: 1,
      componentWillUnmount: 1
    };
    function autoBind(object, filter) {
      var proto = object.constructor.prototype;
      var filterFn = typeof filter == "function" ? filter : filter && (0, _typeof2.default)(filter) == "object" ? function(key) {
        return !filter[key] && skipMethods[key] !== 1 && typeof proto[key] === "function";
      } : function(key) {
        return skipMethods[key] !== 1 && typeof proto[key] === "function";
      };
      var names = Object.getOwnPropertyNames(proto).filter(filterFn);
      names.push("setState");
      names.forEach(function(key) {
        object[key] = object[key].bind(object);
      });
      return object;
    }
    var _default = autoBind;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/raf.js
var require_raf = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/raf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var _default = globalObject.requestAnimationFrame;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/join.js
var require_join = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/join.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var notEmpty = function notEmpty2(x) {
      return !!x && x !== true;
    };
    function _default() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (args.length == 1 && Array.isArray(args[0])) {
        args = args[0];
      }
      return (0, _toConsumableArray2.default)(args).filter(notEmpty).join(" ");
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/common/clamp.js
var require_clamp2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/clamp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function clamp(value, min, max) {
      if (isNaN(value)) {
        return value;
      }
      var minUndefined = typeof min === "undefined";
      var maxUndefined = typeof max === "undefined";
      if (minUndefined && maxUndefined) {
        return value;
      }
      if (minUndefined) {
        if (!maxUndefined) {
          return value > max ? max : value;
        }
      }
      if (maxUndefined) {
        if (!minUndefined) {
          return value < min ? min : value;
        }
      }
      if (min > max) {
        return clamp(value, max, min);
      }
      if (value < min) {
        return min;
      }
      if (value > max) {
        return max;
      }
      return value;
    }
    var _default = clamp;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/debounce.js
var require_debounce2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/debounce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function debounce(func, wait) {
      var _this = this;
      var immediate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var timeout;
      var args;
      var context;
      var timestamp;
      var result;
      var later = function later2() {
        var last = Date.now() - timestamp;
        if (last < wait && last >= 0) {
          timeout = setTimeout(later2, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            if (!timeout) {
              context = null;
              args = null;
            }
          }
        }
      };
      return function() {
        var callNow = immediate && !timeout;
        context = _this;
        for (var _len = arguments.length, internalArgs = new Array(_len), _key = 0; _key < _len; _key++) {
          internalArgs[_key] = arguments[_key];
        }
        args = internalArgs;
        timestamp = Date.now();
        if (!timeout) {
          timeout = setTimeout(later, wait);
        }
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }
        return result;
      };
    }
    var _default = debounce;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/cleanProps.js
var require_cleanProps = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/cleanProps.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function cleanProps(props2, propTypes) {
      if (!props2 || !propTypes) {
        return Object.assign({}, props2);
      }
      var newProps = Object.keys(props2).reduce(function(acc, propName) {
        if (!propTypes[propName]) {
          acc[propName] = props2[propName];
        }
        return acc;
      }, {});
      return newProps;
    }
    var _default = cleanProps;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/isMobile.js
var require_isMobile2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/isMobile.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get() {
        return _isMobile.default;
      }
    });
    var _isMobile = _interopRequireDefault(require_isMobile());
  }
});

// node_modules/@inovua/reactdatagrid-community/common/eventNames.js
var require_eventNames = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/eventNames.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isMobile = _interopRequireDefault(require_isMobile2());
    var _default = _isMobile.default ? {
      onMouseDown: "onTouchStart",
      onMouseUp: "onTouchEnd",
      onMouseMove: "onTouchMove"
    } : {
      onMouseDown: "onMouseDown",
      onMouseUp: "onMouseUp",
      onMouseMove: "onMouseMove"
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-selection-start.js
var require_get_selection_start = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-selection-start.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getSelectionStart;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var document2 = globalObject.document;
    function getSelectionStart(o) {
      if (o.createTextRange && !globalObject.getSelection) {
        var r = document2.selection.createRange().duplicate();
        r.moveEnd("character", o.value.length);
        if (r.text == "") return o.value.length;
        return o.value.lastIndexOf(r.text);
      }
      return o.selectionStart;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-selection-end.js
var require_get_selection_end = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-selection-end.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getSelectionEnd;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var document2 = globalObject.document;
    function getSelectionEnd(o) {
      if (o.createTextRange && !globalObject.getSelection) {
        var r = document2.selection.createRange().duplicate();
        r.moveStart("character", -o.value.length);
        return r.text.length;
      }
      return o.selectionEnd;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-selection-range.js
var require_get_selection_range = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-selection-range.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getSelectedRange;
    var _getSelectionStart = _interopRequireDefault(require_get_selection_start());
    var _getSelectionEnd = _interopRequireDefault(require_get_selection_end());
    function getSelectedRange(dom) {
      var api = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _api$getSelectionEnd = api.getSelectionEnd, getSelectionEnd = _api$getSelectionEnd === void 0 ? _getSelectionEnd.default : _api$getSelectionEnd, _api$getSelectionStar = api.getSelectionStart, getSelectionStart = _api$getSelectionStar === void 0 ? _getSelectionStart.default : _api$getSelectionStar;
      return {
        start: getSelectionStart(dom),
        end: getSelectionEnd(dom)
      };
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/set-caret-position.js
var require_set_caret_position = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/set-caret-position.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = setCaretPosition;
    function setCaretPosition(elem, caretPos) {
      var start = caretPos;
      var end = caretPos;
      if (caretPos && (caretPos.start != void 0 || caretPos.end != void 0)) {
        start = caretPos.start || 0;
        end = caretPos.end || start;
      }
      if (elem != null) {
        if (elem.createTextRange) {
          var range = elem.createTextRange();
          range.moveStart("character", start);
          range.moveEnd("character", end);
          range.select();
        } else {
          elem.setSelectionRange(start, end);
        }
      }
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-decimal-delimiter.js
var require_get_decimal_delimiter = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-decimal-delimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getDecimalDelimiter;
    function getDecimalDelimiter(locale) {
      return 1.1.toLocaleString(locale).replace(/1/g, "") || ".";
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-digit-group-delimiter.js
var require_get_digit_group_delimiter = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-digit-group-delimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getDigitGroupDelimiter;
    function getDigitGroupDelimiter(locale) {
      var number = 1e3;
      return number.toLocaleString(locale).replace(/[01]/g, "") || ",";
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/convert-string-to-number.js
var require_convert_string_to_number = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/convert-string-to-number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convertStringToNumber;
    function convertStringToNumber(stringToConvert) {
      var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _props$decimalDelimit = props2.decimalDelimiter, decimalDelimiter = _props$decimalDelimit === void 0 ? "." : _props$decimalDelimit, _props$digitGroupDeli = props2.digitGroupDelimiter, digitGroupDelimiter = _props$digitGroupDeli === void 0 ? "," : _props$digitGroupDeli, _props$min = props2.min, min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min, _props$max = props2.max, max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max;
      if (digitGroupDelimiter == "") {
        return ",";
      }
      if (!stringToConvert) {
        return NaN;
      }
      var cleanedString = stringToConvert;
      var decmialPosition = cleanedString.lastIndexOf(decimalDelimiter);
      if (decmialPosition !== -1 && decimalDelimiter !== ".") {
        cleanedString = [cleanedString.substring(0, decmialPosition).replace(new RegExp("[\\".concat(digitGroupDelimiter, "]"), "g"), ""), cleanedString.substring(decmialPosition).replace(new RegExp("[\\".concat(decimalDelimiter, "]"), "g"), ".")].join("");
      } else {
        cleanedString = cleanedString.replace(new RegExp("[\\".concat(digitGroupDelimiter, "]"), "g"), "");
      }
      var result = parseFloat(cleanedString, 10);
      if (result < min) {
        result = min;
      }
      if (result > max) {
        result = max;
      }
      return result;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-transformed-string-values.js
var require_get_transformed_string_values = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-transformed-string-values.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.countDecimalDigits = void 0;
    exports.default = getTransformedStringValues;
    exports.getDecimalDelimiterPosition = void 0;
    var _getDecimalDelimiter = _interopRequireDefault(require_get_decimal_delimiter());
    var _getDigitGroupDelimiter = _interopRequireDefault(require_get_digit_group_delimiter());
    var _convertStringToNumber = _interopRequireDefault(require_convert_string_to_number());
    var getDecimalDelimiterPosition = function getDecimalDelimiterPosition2(value, decimalDelimiter) {
      var string = value && value.toString();
      var position = string && string.indexOf(decimalDelimiter);
      return position !== -1 ? position : false;
    };
    exports.getDecimalDelimiterPosition = getDecimalDelimiterPosition;
    var countDecimalDigits = function countDecimalDigits2(string, decimalDelimiter, decimalPosition) {
      var position = decimalPosition || getDecimalDelimiterPosition(string, decimalDelimiter);
      if (isNaN(position)) {
        return 0;
      }
      if (typeof position === "number" && position < string.length) {
        return string.length - position - 1;
      }
      return 0;
    };
    exports.countDecimalDigits = countDecimalDigits;
    function getTransformedStringValues(stringInput) {
      var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var internalApi = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      if (typeof stringInput !== "string") {
        stringInput += "";
      }
      if (!stringInput) {
        return ["", null];
      }
      stringInput = stringInput.replace(/[^0-9\,\.\-\+]/g, "");
      if (stringInput === "-" || stringInput === "-.") {
        return [stringInput, null];
      }
      var locale = props2.locale, _props$min = props2.min, min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min, _props$max = props2.max, max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max, suffix = props2.suffix, prefix = props2.prefix;
      var precision = props2.precision || null;
      if (precision > 20) {
        precision = 20;
      }
      var _internalApi$getDecim = internalApi.getDecimalDelimiter, getDecimalDelimiter = _internalApi$getDecim === void 0 ? _getDecimalDelimiter.default : _internalApi$getDecim, _internalApi$getDigit = internalApi.getDigitGroupDelimiter, getDigitGroupDelimiter = _internalApi$getDigit === void 0 ? _getDigitGroupDelimiter.default : _internalApi$getDigit, _internalApi$convertS = internalApi.convertStringToNumber, convertStringToNumber = _internalApi$convertS === void 0 ? _convertStringToNumber.default : _internalApi$convertS;
      var decimalDelimiter = getDecimalDelimiter(locale);
      if (stringInput === decimalDelimiter) {
        return [stringInput, null];
      }
      var decimalDelimiterPosition = getDecimalDelimiterPosition(stringInput, decimalDelimiter);
      var decimalDigitsInInput = countDecimalDigits(stringInput, decimalDelimiter, decimalDelimiterPosition);
      if (precision || precision === 0 && decimalDigitsInInput > precision) {
        stringInput = stringInput.substring(0, stringInput.length - (decimalDigitsInInput - precision));
      }
      var digitGroupDelimiter = getDigitGroupDelimiter(locale);
      var parsedResult = convertStringToNumber(stringInput, {
        digitGroupDelimiter,
        decimalDelimiter,
        min,
        max
      });
      if (isNaN(parsedResult)) {
        return ["", null];
      }
      var numberWasClamped = parsedResult === min || parsedResult === max;
      if (numberWasClamped) {
        decimalDigitsInInput = 0;
      }
      var formatingOptions = {
        maximumFractionDigits: precision ? Math.min(precision, 20) : 20,
        minimumFractionDigits: Math.min(precision || decimalDigitsInInput, 20)
      };
      var stringRepresentation = parsedResult.toLocaleString(locale, formatingOptions);
      if (!precision && !numberWasClamped && !decimalDigitsInInput && decimalDelimiterPosition === stringInput.length - 1) {
        stringRepresentation += ".";
      }
      if (prefix) {
        stringRepresentation = "".concat(prefix, " ").concat(stringRepresentation);
      }
      if (suffix) {
        stringRepresentation = "".concat(stringRepresentation, " ").concat(suffix);
      }
      return [stringRepresentation, parsedResult];
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/data/countryCurrencyCodes.js
var require_countryCurrencyCodes = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/data/countryCurrencyCodes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = [{
      code: "AED",
      number: "784",
      digits: 2,
      currency: "United Arab Emirates dirham",
      countries: ["united arab emirates"]
    }, {
      code: "AFN",
      number: "971",
      digits: 2,
      currency: "Afghan afghani",
      countries: ["afghanistan"]
    }, {
      code: "ALL",
      number: "008",
      digits: 2,
      currency: "Albanian lek",
      countries: ["albania"]
    }, {
      code: "AMD",
      number: "051",
      digits: 2,
      currency: "Armenian dram",
      countries: ["armenia"]
    }, {
      code: "ANG",
      number: "532",
      digits: 2,
      currency: "Netherlands Antillean guilder",
      countries: ["curaçao", "sint maarten"]
    }, {
      code: "AOA",
      number: "973",
      digits: 2,
      currency: "Angolan kwanza",
      countries: ["angola"]
    }, {
      code: "ARS",
      number: "032",
      digits: 2,
      currency: "Argentine peso",
      countries: ["argentina"]
    }, {
      code: "AUD",
      number: "036",
      digits: 2,
      currency: "Australian dollar",
      countries: ["australia", "australian antarctic territory", "christmas island", "cocos (keeling) islands", "heard and mcdonald islands", "kiribati", "nauru", "norfolk island", "tuvalu"]
    }, {
      code: "AWG",
      number: "533",
      digits: 2,
      currency: "Aruban florin",
      countries: ["aruba"]
    }, {
      code: "AZN",
      number: "944",
      digits: 2,
      currency: "Azerbaijani manat",
      countries: ["azerbaijan"]
    }, {
      code: "BAM",
      number: "977",
      digits: 2,
      currency: "Bosnia and Herzegovina convertible mark",
      countries: ["bosnia and herzegovina"]
    }, {
      code: "BBD",
      number: "052",
      digits: 2,
      currency: "Barbados dollar",
      countries: ["barbados"]
    }, {
      code: "BDT",
      number: "050",
      digits: 2,
      currency: "Bangladeshi taka",
      countries: ["bangladesh"]
    }, {
      code: "BGN",
      number: "975",
      digits: 2,
      currency: "Bulgarian lev",
      countries: ["bulgaria"]
    }, {
      code: "BHD",
      number: "048",
      digits: 3,
      currency: "Bahraini dinar",
      countries: ["bahrain"]
    }, {
      code: "BIF",
      number: "108",
      digits: 0,
      currency: "Burundian franc",
      countries: ["burundi"]
    }, {
      code: "BMD",
      number: "060",
      digits: 2,
      currency: "Bermudian dollar",
      countries: ["bermuda"]
    }, {
      code: "BND",
      number: "096",
      digits: 2,
      currency: "Brunei dollar",
      countries: ["brunei", "singapore"]
    }, {
      code: "BOB",
      number: "068",
      digits: 2,
      currency: "Boliviano",
      countries: ["bolivia"]
    }, {
      code: "BOV",
      number: "984",
      digits: 2,
      currency: "Bolivian Mvdol (funds code)",
      countries: ["bolivia"]
    }, {
      code: "BRL",
      number: "986",
      digits: 2,
      currency: "Brazilian real",
      countries: ["brazil"]
    }, {
      code: "BSD",
      number: "044",
      digits: 2,
      currency: "Bahamian dollar",
      countries: ["bahamas"]
    }, {
      code: "BTN",
      number: "064",
      digits: 2,
      currency: "Bhutanese ngultrum",
      countries: ["bhutan"]
    }, {
      code: "BWP",
      number: "072",
      digits: 2,
      currency: "Botswana pula",
      countries: ["botswana"]
    }, {
      code: "BYR",
      number: "974",
      digits: 0,
      currency: "Belarusian ruble",
      countries: ["belarus"]
    }, {
      code: "BZD",
      number: "084",
      digits: 2,
      currency: "Belize dollar",
      countries: ["belize"]
    }, {
      code: "CAD",
      number: "124",
      digits: 2,
      currency: "Canadian dollar",
      countries: ["canada", "saint pierre and miquelon"]
    }, {
      code: "CDF",
      number: "976",
      digits: 2,
      currency: "Congolese franc",
      countries: ["democratic republic of congo"]
    }, {
      code: "CHE",
      number: "947",
      digits: 2,
      currency: "WIR Euro (complementary currency)",
      countries: ["switzerland"]
    }, {
      code: "CHF",
      number: "756",
      digits: 2,
      currency: "Swiss franc",
      countries: ["switzerland", "liechtenstein"]
    }, {
      code: "CHW",
      number: "948",
      digits: 2,
      currency: "WIR Franc (complementary currency)",
      countries: ["switzerland"]
    }, {
      code: "CLF",
      number: "990",
      digits: 0,
      currency: "Unidad de Fomento (funds code)",
      countries: ["chile"]
    }, {
      code: "CLP",
      number: "152",
      digits: 0,
      currency: "Chilean peso",
      countries: ["chile"]
    }, {
      code: "CNY",
      number: "156",
      digits: 2,
      currency: "Chinese yuan",
      countries: ["china"]
    }, {
      code: "COP",
      number: "170",
      digits: 2,
      currency: "Colombian peso",
      countries: ["colombia"]
    }, {
      code: "COU",
      number: "970",
      digits: 2,
      currency: "Unidad de Valor Real",
      countries: ["colombia"]
    }, {
      code: "CRC",
      number: "188",
      digits: 2,
      currency: "Costa Rican colon",
      countries: ["costa rica"]
    }, {
      code: "CUC",
      number: "931",
      digits: 2,
      currency: "Cuban convertible peso",
      countries: ["cuba"]
    }, {
      code: "CUP",
      number: "192",
      digits: 2,
      currency: "Cuban peso",
      countries: ["cuba"]
    }, {
      code: "CVE",
      number: "132",
      digits: 0,
      currency: "Cape Verde escudo",
      countries: ["cape verde"]
    }, {
      code: "CZK",
      number: "203",
      digits: 2,
      currency: "Czech koruna",
      countries: ["czech republic"]
    }, {
      code: "DJF",
      number: "262",
      digits: 0,
      currency: "Djiboutian franc",
      countries: ["djibouti"]
    }, {
      code: "DKK",
      number: "208",
      digits: 2,
      currency: "Danish krone",
      countries: ["denmark", "faroe islands", "greenland"]
    }, {
      code: "DOP",
      number: "214",
      digits: 2,
      currency: "Dominican peso",
      countries: ["dominican republic"]
    }, {
      code: "DZD",
      number: "012",
      digits: 2,
      currency: "Algerian dinar",
      countries: ["algeria"]
    }, {
      code: "EGP",
      number: "818",
      digits: 2,
      currency: "Egyptian pound",
      countries: ["egypt", "palestinian territories"]
    }, {
      code: "ERN",
      number: "232",
      digits: 2,
      currency: "Eritrean nakfa",
      countries: ["eritrea"]
    }, {
      code: "ETB",
      number: "230",
      digits: 2,
      currency: "Ethiopian birr",
      countries: ["ethiopia"]
    }, {
      code: "EUR",
      number: "978",
      digits: 2,
      currency: "Euro",
      countries: ["andorra", "austria", "belgium", "cyprus", "estonia", "finland", "france", "germany", "greece", "ireland", "italy", "kosovo", "luxembourg", "malta", "monaco", "montenegro", "netherlands", "portugal", "san marino", "slovakia", "slovenia", "spain", "vatican city"]
    }, {
      code: "FJD",
      number: "242",
      digits: 2,
      currency: "Fiji dollar",
      countries: ["fiji"]
    }, {
      code: "FKP",
      number: "238",
      digits: 2,
      currency: "Falkland Islands pound",
      countries: ["falkland islands"]
    }, {
      code: "GBP",
      number: "826",
      digits: 2,
      currency: "Pound sterling",
      countries: ["united kingdom", "british crown dependencies (the  isle of man and the channel islands)", "south georgia and the south sandwich islands", "british antarctic territory", "british indian ocean territory"]
    }, {
      code: "GEL",
      number: "981",
      digits: 2,
      currency: "Georgian lari",
      countries: ["georgia"]
    }, {
      code: "GHS",
      number: "936",
      digits: 2,
      currency: "Ghanaian cedi",
      countries: ["ghana"]
    }, {
      code: "GIP",
      number: "292",
      digits: 2,
      currency: "Gibraltar pound",
      countries: ["gibraltar"]
    }, {
      code: "GMD",
      number: "270",
      digits: 2,
      currency: "Gambian dalasi",
      countries: ["gambia"]
    }, {
      code: "GNF",
      number: "324",
      digits: 0,
      currency: "Guinean franc",
      countries: ["guinea"]
    }, {
      code: "GTQ",
      number: "320",
      digits: 2,
      currency: "Guatemalan quetzal",
      countries: ["guatemala"]
    }, {
      code: "GYD",
      number: "328",
      digits: 2,
      currency: "Guyanese dollar",
      countries: ["guyana"]
    }, {
      code: "HKD",
      number: "344",
      digits: 2,
      currency: "Hong Kong dollar",
      countries: ["hong kong", "macao"]
    }, {
      code: "HNL",
      number: "340",
      digits: 2,
      currency: "Honduran lempira",
      countries: ["honduras"]
    }, {
      code: "HRK",
      number: "191",
      digits: 2,
      currency: "Croatian kuna",
      countries: ["croatia"]
    }, {
      code: "HTG",
      number: "332",
      digits: 2,
      currency: "Haitian gourde",
      countries: ["haiti"]
    }, {
      code: "HUF",
      number: "348",
      digits: 2,
      currency: "Hungarian forint",
      countries: ["hungary"]
    }, {
      code: "IDR",
      number: "360",
      digits: 0,
      currency: "Indonesian rupiah",
      countries: ["indonesia"]
    }, {
      code: "ILS",
      number: "376",
      digits: 2,
      currency: "Israeli new shekel",
      countries: ["israel", "palestinian territories"]
    }, {
      code: "INR",
      number: "356",
      digits: 2,
      currency: "Indian rupee",
      countries: ["india"]
    }, {
      code: "IQD",
      number: "368",
      digits: 3,
      currency: "Iraqi dinar",
      countries: ["iraq"]
    }, {
      code: "IRR",
      number: "364",
      digits: 0,
      currency: "Iranian rial",
      countries: ["iran"]
    }, {
      code: "ISK",
      number: "352",
      digits: 0,
      currency: "Icelandic króna",
      countries: ["iceland"]
    }, {
      code: "JMD",
      number: "388",
      digits: 2,
      currency: "Jamaican dollar",
      countries: ["jamaica"]
    }, {
      code: "JOD",
      number: "400",
      digits: 3,
      currency: "Jordanian dinar",
      countries: ["jordan"]
    }, {
      code: "JPY",
      number: "392",
      digits: 0,
      currency: "Japanese yen",
      countries: ["japan"]
    }, {
      code: "KES",
      number: "404",
      digits: 2,
      currency: "Kenyan shilling",
      countries: ["kenya"]
    }, {
      code: "KGS",
      number: "417",
      digits: 2,
      currency: "Kyrgyzstani som",
      countries: ["kyrgyzstan"]
    }, {
      code: "KHR",
      number: "116",
      digits: 2,
      currency: "Cambodian riel",
      countries: ["cambodia"]
    }, {
      code: "KMF",
      number: "174",
      digits: 0,
      currency: "Comoro franc",
      countries: ["comoros"]
    }, {
      code: "KPW",
      number: "408",
      digits: 0,
      currency: "North Korean won",
      countries: ["north korea"]
    }, {
      code: "KRW",
      number: "410",
      digits: 0,
      currency: "South Korean won",
      countries: ["south korea"]
    }, {
      code: "KWD",
      number: "414",
      digits: 3,
      currency: "Kuwaiti dinar",
      countries: ["kuwait"]
    }, {
      code: "KYD",
      number: "136",
      digits: 2,
      currency: "Cayman Islands dollar",
      countries: ["cayman islands"]
    }, {
      code: "KZT",
      number: "398",
      digits: 2,
      currency: "Kazakhstani tenge",
      countries: ["kazakhstan"]
    }, {
      code: "LAK",
      number: "418",
      digits: 0,
      currency: "Lao kip",
      countries: ["laos"]
    }, {
      code: "LBP",
      number: "422",
      digits: 0,
      currency: "Lebanese pound",
      countries: ["lebanon"]
    }, {
      code: "LKR",
      number: "144",
      digits: 2,
      currency: "Sri Lankan rupee",
      countries: ["sri lanka"]
    }, {
      code: "LRD",
      number: "430",
      digits: 2,
      currency: "Liberian dollar",
      countries: ["liberia"]
    }, {
      code: "LSL",
      number: "426",
      digits: 2,
      currency: "Lesotho loti",
      countries: ["lesotho"]
    }, {
      code: "LTL",
      number: "440",
      digits: 2,
      currency: "Lithuanian litas",
      countries: ["lithuania"]
    }, {
      code: "LVL",
      number: "428",
      digits: 2,
      currency: "Latvian lats",
      countries: ["latvia"]
    }, {
      code: "LYD",
      number: "434",
      digits: 3,
      currency: "Libyan dinar",
      countries: ["libya"]
    }, {
      code: "MAD",
      number: "504",
      digits: 2,
      currency: "Moroccan dirham",
      countries: ["morocco"]
    }, {
      code: "MDL",
      number: "498",
      digits: 2,
      currency: "Moldovan leu",
      countries: ["moldova (except  transnistria)"]
    }, {
      code: "MGA",
      number: "969",
      digits: 0,
      currency: "*[8]	Malagasy ariary",
      countries: ["madagascar"]
    }, {
      code: "MKD",
      number: "807",
      digits: 0,
      currency: "Macedonian denar",
      countries: ["macedonia"]
    }, {
      code: "MMK",
      number: "104",
      digits: 0,
      currency: "Myanma kyat",
      countries: ["myanmar"]
    }, {
      code: "MNT",
      number: "496",
      digits: 2,
      currency: "Mongolian tugrik",
      countries: ["mongolia"]
    }, {
      code: "MOP",
      number: "446",
      digits: 2,
      currency: "Macanese pataca",
      countries: ["macao"]
    }, {
      code: "MRO",
      number: "478",
      digits: 0,
      currency: "*[8]	Mauritanian ouguiya",
      countries: ["mauritania"]
    }, {
      code: "MUR",
      number: "480",
      digits: 2,
      currency: "Mauritian rupee",
      countries: ["mauritius"]
    }, {
      code: "MVR",
      number: "462",
      digits: 2,
      currency: "Maldivian rufiyaa",
      countries: ["maldives"]
    }, {
      code: "MWK",
      number: "454",
      digits: 2,
      currency: "Malawian kwacha",
      countries: ["malawi"]
    }, {
      code: "MXN",
      number: "484",
      digits: 2,
      currency: "Mexican peso",
      countries: ["mexico"]
    }, {
      code: "MXV",
      number: "979",
      digits: 2,
      currency: "Mexican Unidad de Inversion (UDI) (funds code)",
      countries: ["mexico"]
    }, {
      code: "MYR",
      number: "458",
      digits: 2,
      currency: "Malaysian ringgit",
      countries: ["malaysia"]
    }, {
      code: "MZN",
      number: "943",
      digits: 2,
      currency: "Mozambican metical",
      countries: ["mozambique"]
    }, {
      code: "NAD",
      number: "516",
      digits: 2,
      currency: "Namibian dollar",
      countries: ["namibia"]
    }, {
      code: "NGN",
      number: "566",
      digits: 2,
      currency: "Nigerian naira",
      countries: ["nigeria"]
    }, {
      code: "NIO",
      number: "558",
      digits: 2,
      currency: "Nicaraguan córdoba",
      countries: ["nicaragua"]
    }, {
      code: "NOK",
      number: "578",
      digits: 2,
      currency: "Norwegian krone",
      countries: ["norway", "svalbard", "jan mayen", "bouvet island", "queen maud land", "peter i island"]
    }, {
      code: "NPR",
      number: "524",
      digits: 2,
      currency: "Nepalese rupee",
      countries: ["nepal"]
    }, {
      code: "NZD",
      number: "554",
      digits: 2,
      currency: "New Zealand dollar",
      countries: ["cook islands", "new zealand", "niue", "pitcairn", "tokelau", "ross dependency"]
    }, {
      code: "OMR",
      number: "512",
      digits: 3,
      currency: "Omani rial",
      countries: ["oman"]
    }, {
      code: "PAB",
      number: "590",
      digits: 2,
      currency: "Panamanian balboa",
      countries: ["panama"]
    }, {
      code: "PEN",
      number: "604",
      digits: 2,
      currency: "Peruvian nuevo sol",
      countries: ["peru"]
    }, {
      code: "PGK",
      number: "598",
      digits: 2,
      currency: "Papua New Guinean kina",
      countries: ["papua new guinea"]
    }, {
      code: "PHP",
      number: "608",
      digits: 2,
      currency: "Philippine peso",
      countries: ["philippines"]
    }, {
      code: "PKR",
      number: "586",
      digits: 2,
      currency: "Pakistani rupee",
      countries: ["pakistan"]
    }, {
      code: "PLN",
      number: "985",
      digits: 2,
      currency: "Polish złoty",
      countries: ["poland"]
    }, {
      code: "PYG",
      number: "600",
      digits: 0,
      currency: "Paraguayan guaraní",
      countries: ["paraguay"]
    }, {
      code: "QAR",
      number: "634",
      digits: 2,
      currency: "Qatari riyal",
      countries: ["qatar"]
    }, {
      code: "RON",
      number: "946",
      digits: 2,
      currency: "Romanian new leu",
      countries: ["romania"]
    }, {
      code: "RSD",
      number: "941",
      digits: 2,
      currency: "Serbian dinar",
      countries: ["serbia"]
    }, {
      code: "RUB",
      number: "643",
      digits: 2,
      currency: "Russian rouble",
      countries: ["russia", "abkhazia", "south ossetia"]
    }, {
      code: "RWF",
      number: "646",
      digits: 0,
      currency: "Rwandan franc",
      countries: ["rwanda"]
    }, {
      code: "SAR",
      number: "682",
      digits: 2,
      currency: "Saudi riyal",
      countries: ["saudi arabia"]
    }, {
      code: "SBD",
      number: "090",
      digits: 2,
      currency: "Solomon Islands dollar",
      countries: ["solomon islands"]
    }, {
      code: "SCR",
      number: "690",
      digits: 2,
      currency: "Seychelles rupee",
      countries: ["seychelles"]
    }, {
      code: "SDG",
      number: "938",
      digits: 2,
      currency: "Sudanese pound",
      countries: ["sudan"]
    }, {
      code: "SEK",
      number: "752",
      digits: 2,
      currency: "Swedish krona/kronor",
      countries: ["sweden"]
    }, {
      code: "SGD",
      number: "702",
      digits: 2,
      currency: "Singapore dollar",
      countries: ["singapore", "brunei"]
    }, {
      code: "SHP",
      number: "654",
      digits: 2,
      currency: "Saint Helena pound",
      countries: ["saint helena"]
    }, {
      code: "SLL",
      number: "694",
      digits: 0,
      currency: "Sierra Leonean leone",
      countries: ["sierra leone"]
    }, {
      code: "SOS",
      number: "706",
      digits: 2,
      currency: "Somali shilling",
      countries: ["somalia"]
    }, {
      code: "SRD",
      number: "968",
      digits: 2,
      currency: "Surinamese dollar",
      countries: ["suriname"]
    }, {
      code: "SSP",
      number: "728",
      digits: 2,
      currency: "South Sudanese pound",
      countries: ["south sudan"]
    }, {
      code: "STD",
      number: "678",
      digits: 0,
      currency: "São Tomé and Príncipe dobra",
      countries: ["são tomé and príncipe"]
    }, {
      code: "SYP",
      number: "760",
      digits: 2,
      currency: "Syrian pound",
      countries: ["syria"]
    }, {
      code: "SZL",
      number: "748",
      digits: 2,
      currency: "Swazi lilangeni",
      countries: ["swaziland"]
    }, {
      code: "THB",
      number: "764",
      digits: 2,
      currency: "Thai baht",
      countries: ["thailand"]
    }, {
      code: "TJS",
      number: "972",
      digits: 2,
      currency: "Tajikistani somoni",
      countries: ["tajikistan"]
    }, {
      code: "TMT",
      number: "934",
      digits: 2,
      currency: "Turkmenistani manat",
      countries: ["turkmenistan"]
    }, {
      code: "TND",
      number: "788",
      digits: 3,
      currency: "Tunisian dinar",
      countries: ["tunisia"]
    }, {
      code: "TOP",
      number: "776",
      digits: 2,
      currency: "Tongan paʻanga",
      countries: ["tonga"]
    }, {
      code: "TRY",
      number: "949",
      digits: 2,
      currency: "Turkish lira",
      countries: ["turkey", "northern cyprus"]
    }, {
      code: "TTD",
      number: "780",
      digits: 2,
      currency: "Trinidad and Tobago dollar",
      countries: ["trinidad and tobago"]
    }, {
      code: "TWD",
      number: "901",
      digits: 2,
      currency: "New Taiwan dollar",
      countries: ["republic of china (taiwan)"]
    }, {
      code: "TZS",
      number: "834",
      digits: 2,
      currency: "Tanzanian shilling",
      countries: ["tanzania"]
    }, {
      code: "UAH",
      number: "980",
      digits: 2,
      currency: "Ukrainian hryvnia",
      countries: ["ukraine"]
    }, {
      code: "UGX",
      number: "800",
      digits: 2,
      currency: "Ugandan shilling",
      countries: ["uganda"]
    }, {
      code: "USD",
      number: "840",
      digits: 2,
      currency: "United States dollar",
      countries: ["american samoa", "barbados", "bermuda", "british indian ocean territory", "british virgin islands, caribbean netherlands", "ecuador", "el salvador", "guam", "haiti", "marshall islands", "federated states of micronesia", "northern mariana islands", "palau", "panama", "puerto rico", "timor-leste", "turks and caicos islands", "united states", "u.s. virgin islands", "zimbabwe"]
    }, {
      code: "USN",
      number: "997",
      digits: 2,
      currency: "United States dollar (next day) (funds code)",
      countries: ["united states"]
    }, {
      code: "USS",
      number: "998",
      digits: 2,
      currency: "United States dollar",
      countries: ["united states"]
    }, {
      code: "UYI",
      number: "940",
      digits: 0,
      currency: "Uruguay Peso en Unidades Indexadas",
      countries: ["uruguay"]
    }, {
      code: "UYU",
      number: "858",
      digits: 2,
      currency: "Uruguayan peso",
      countries: ["uruguay"]
    }, {
      code: "UZS",
      number: "860",
      digits: 2,
      currency: "Uzbekistan som",
      countries: ["uzbekistan"]
    }, {
      code: "VEF",
      number: "937",
      digits: 2,
      currency: "Venezuelan bolívar",
      countries: ["venezuela"]
    }, {
      code: "VND",
      number: "704",
      digits: 0,
      currency: "Vietnamese dong",
      countries: ["vietnam"]
    }, {
      code: "VUV",
      number: "548",
      digits: 0,
      currency: "Vanuatu vatu",
      countries: ["vanuatu"]
    }, {
      code: "WST",
      number: "882",
      digits: 2,
      currency: "Samoan tala",
      countries: ["samoa"]
    }, {
      code: "XAF",
      number: "950",
      digits: 0,
      currency: "CFA franc BEAC",
      countries: ["cameroon", "central african republic", "republic of the congo", "chad", "equatorial guinea", "gabon"]
    }, {
      code: "XAG",
      number: "961",
      currency: "Silver (one troy ounce)"
    }, {
      code: "XAU",
      number: "959",
      currency: "Gold (one troy ounce)"
    }, {
      code: "XBA",
      number: "955",
      currency: "European Composite Unit (EURCO) (bond market unit)	"
    }, {
      code: "XBB",
      number: "956",
      currency: "European Monetary Unit (E.M.U.-6) (bond market unit)	"
    }, {
      code: "XBC",
      number: "957",
      currency: "European Unit of Account 9 (E.U.A.-9) (bond market unit)	"
    }, {
      code: "XBD",
      number: "958",
      currency: "European Unit of Account 17 (E.U.A.-17) (bond market unit)	"
    }, {
      code: "XBT",
      currency: "Bitcoin"
    }, {
      code: "XCD",
      number: "951",
      digits: 2,
      currency: "East Caribbean dollar",
      countries: ["anguilla", "antigua and barbuda", "dominica", "grenada", "montserrat", "saint kitts and nevis", "saint lucia", "saint vincent and the grenadines"]
    }, {
      code: "XDR",
      number: "960",
      currency: "Special drawing rights",
      countries: ["international monetary fund"]
    }, {
      code: "XFU",
      currency: "UIC franc (special settlement currency)",
      countries: ["international union of railways"]
    }, {
      code: "XOF",
      number: "952",
      digits: 0,
      currency: "CFA franc BCEAO",
      countries: ["benin", "burkina faso", "côte d'ivoire", "guinea-bissau", "mali", "niger", "senegal", "togo"]
    }, {
      code: "XPD",
      number: "964",
      currency: "Palladium (one troy ounce)"
    }, {
      code: "XPF",
      number: "953",
      digits: 0,
      currency: "CFP franc (Franc du Pacifique)",
      countries: ["french polynesia", "new caledonia", "wallis and futuna"]
    }, {
      code: "XPT",
      number: "962",
      currency: "Platinum (one troy ounce)"
    }, {
      code: "XTS",
      number: "963",
      currency: "Code reserved for testing purposes"
    }, {
      code: "XXX",
      number: "999",
      currency: "No currency"
    }, {
      code: "YER",
      number: "886",
      digits: 2,
      currency: "Yemeni rial",
      countries: ["yemen"]
    }, {
      code: "ZAR",
      number: "710",
      digits: 2,
      currency: "South African rand",
      countries: ["south africa"]
    }, {
      code: "ZMW",
      number: "967",
      digits: 2,
      currency: "Zambian kwacha",
      countries: ["zambia"]
    }];
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/data/countries.js
var require_countries = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/data/countries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = [{
      name: "Afghanistan",
      code: "AF"
    }, {
      name: "Åland Islands",
      code: "AX"
    }, {
      name: "Albania",
      code: "AL"
    }, {
      name: "Algeria",
      code: "DZ"
    }, {
      name: "American Samoa",
      code: "AS"
    }, {
      name: "AndorrA",
      code: "AD"
    }, {
      name: "Angola",
      code: "AO"
    }, {
      name: "Anguilla",
      code: "AI"
    }, {
      name: "Antarctica",
      code: "AQ"
    }, {
      name: "Antigua and Barbuda",
      code: "AG"
    }, {
      name: "Argentina",
      code: "AR"
    }, {
      name: "Armenia",
      code: "AM"
    }, {
      name: "Aruba",
      code: "AW"
    }, {
      name: "Australia",
      code: "AU"
    }, {
      name: "Austria",
      code: "AT"
    }, {
      name: "Azerbaijan",
      code: "AZ"
    }, {
      name: "Bahamas",
      code: "BS"
    }, {
      name: "Bahrain",
      code: "BH"
    }, {
      name: "Bangladesh",
      code: "BD"
    }, {
      name: "Barbados",
      code: "BB"
    }, {
      name: "Belarus",
      code: "BY"
    }, {
      name: "Belgium",
      code: "BE"
    }, {
      name: "Belize",
      code: "BZ"
    }, {
      name: "Benin",
      code: "BJ"
    }, {
      name: "Bermuda",
      code: "BM"
    }, {
      name: "Bhutan",
      code: "BT"
    }, {
      name: "Bolivia",
      code: "BO"
    }, {
      name: "Bosnia and Herzegovina",
      code: "BA"
    }, {
      name: "Botswana",
      code: "BW"
    }, {
      name: "Bouvet Island",
      code: "BV"
    }, {
      name: "Brazil",
      code: "BR"
    }, {
      name: "British Indian Ocean Territory",
      code: "IO"
    }, {
      name: "Brunei Darussalam",
      code: "BN"
    }, {
      name: "Bulgaria",
      code: "BG"
    }, {
      name: "Burkina Faso",
      code: "BF"
    }, {
      name: "Burundi",
      code: "BI"
    }, {
      name: "Cambodia",
      code: "KH"
    }, {
      name: "Cameroon",
      code: "CM"
    }, {
      name: "Canada",
      code: "CA"
    }, {
      name: "Cape Verde",
      code: "CV"
    }, {
      name: "Cayman Islands",
      code: "KY"
    }, {
      name: "Central African Republic",
      code: "CF"
    }, {
      name: "Chad",
      code: "TD"
    }, {
      name: "Chile",
      code: "CL"
    }, {
      name: "China",
      code: "CN"
    }, {
      name: "Christmas Island",
      code: "CX"
    }, {
      name: "Cocos (Keeling) Islands",
      code: "CC"
    }, {
      name: "Colombia",
      code: "CO"
    }, {
      name: "Comoros",
      code: "KM"
    }, {
      name: "Congo",
      code: "CG"
    }, {
      name: "Congo, The Democratic Republic of the",
      code: "CD"
    }, {
      name: "Cook Islands",
      code: "CK"
    }, {
      name: "Costa Rica",
      code: "CR"
    }, {
      name: 'Cote D"Ivoire',
      code: "CI"
    }, {
      name: "Croatia",
      code: "HR"
    }, {
      name: "Cuba",
      code: "CU"
    }, {
      name: "Cyprus",
      code: "CY"
    }, {
      name: "Czech Republic",
      code: "CZ"
    }, {
      name: "Denmark",
      code: "DK"
    }, {
      name: "Djibouti",
      code: "DJ"
    }, {
      name: "Dominica",
      code: "DM"
    }, {
      name: "Dominican Republic",
      code: "DO"
    }, {
      name: "Ecuador",
      code: "EC"
    }, {
      name: "Egypt",
      code: "EG"
    }, {
      name: "El Salvador",
      code: "SV"
    }, {
      name: "Equatorial Guinea",
      code: "GQ"
    }, {
      name: "Eritrea",
      code: "ER"
    }, {
      name: "Estonia",
      code: "EE"
    }, {
      name: "Ethiopia",
      code: "ET"
    }, {
      name: "Falkland Islands (Malvinas)",
      code: "FK"
    }, {
      name: "Faroe Islands",
      code: "FO"
    }, {
      name: "Fiji",
      code: "FJ"
    }, {
      name: "Finland",
      code: "FI"
    }, {
      name: "France",
      code: "FR"
    }, {
      name: "French Guiana",
      code: "GF"
    }, {
      name: "French Polynesia",
      code: "PF"
    }, {
      name: "French Southern Territories",
      code: "TF"
    }, {
      name: "Gabon",
      code: "GA"
    }, {
      name: "Gambia",
      code: "GM"
    }, {
      name: "Georgia",
      code: "GE"
    }, {
      name: "Germany",
      code: "DE"
    }, {
      name: "Ghana",
      code: "GH"
    }, {
      name: "Gibraltar",
      code: "GI"
    }, {
      name: "Greece",
      code: "GR"
    }, {
      name: "Greenland",
      code: "GL"
    }, {
      name: "Grenada",
      code: "GD"
    }, {
      name: "Guadeloupe",
      code: "GP"
    }, {
      name: "Guam",
      code: "GU"
    }, {
      name: "Guatemala",
      code: "GT"
    }, {
      name: "Guernsey",
      code: "GG"
    }, {
      name: "Guinea",
      code: "GN"
    }, {
      name: "Guinea-Bissau",
      code: "GW"
    }, {
      name: "Guyana",
      code: "GY"
    }, {
      name: "Haiti",
      code: "HT"
    }, {
      name: "Heard Island and Mcdonald Islands",
      code: "HM"
    }, {
      name: "Holy See (Vatican City State)",
      code: "VA"
    }, {
      name: "Honduras",
      code: "HN"
    }, {
      name: "Hong Kong",
      code: "HK"
    }, {
      name: "Hungary",
      code: "HU"
    }, {
      name: "Iceland",
      code: "IS"
    }, {
      name: "India",
      code: "IN"
    }, {
      name: "Indonesia",
      code: "ID"
    }, {
      name: "Iran, Islamic Republic Of",
      code: "IR"
    }, {
      name: "Iraq",
      code: "IQ"
    }, {
      name: "Ireland",
      code: "IE"
    }, {
      name: "Isle of Man",
      code: "IM"
    }, {
      name: "Israel",
      code: "IL"
    }, {
      name: "Italy",
      code: "IT"
    }, {
      name: "Jamaica",
      code: "JM"
    }, {
      name: "Japan",
      code: "JP"
    }, {
      name: "Jersey",
      code: "JE"
    }, {
      name: "Jordan",
      code: "JO"
    }, {
      name: "Kazakhstan",
      code: "KZ"
    }, {
      name: "Kenya",
      code: "KE"
    }, {
      name: "Kiribati",
      code: "KI"
    }, {
      name: 'Korea, Democratic People"S Republic of',
      code: "KP"
    }, {
      name: "Korea, Republic of",
      code: "KR"
    }, {
      name: "Kuwait",
      code: "KW"
    }, {
      name: "Kyrgyzstan",
      code: "KG"
    }, {
      name: 'Lao People"S Democratic Republic',
      code: "LA"
    }, {
      name: "Latvia",
      code: "LV"
    }, {
      name: "Lebanon",
      code: "LB"
    }, {
      name: "Lesotho",
      code: "LS"
    }, {
      name: "Liberia",
      code: "LR"
    }, {
      name: "Libyan Arab Jamahiriya",
      code: "LY"
    }, {
      name: "Liechtenstein",
      code: "LI"
    }, {
      name: "Lithuania",
      code: "LT"
    }, {
      name: "Luxembourg",
      code: "LU"
    }, {
      name: "Macao",
      code: "MO"
    }, {
      name: "Macedonia, The Former Yugoslav Republic of",
      code: "MK"
    }, {
      name: "Madagascar",
      code: "MG"
    }, {
      name: "Malawi",
      code: "MW"
    }, {
      name: "Malaysia",
      code: "MY"
    }, {
      name: "Maldives",
      code: "MV"
    }, {
      name: "Mali",
      code: "ML"
    }, {
      name: "Malta",
      code: "MT"
    }, {
      name: "Marshall Islands",
      code: "MH"
    }, {
      name: "Martinique",
      code: "MQ"
    }, {
      name: "Mauritania",
      code: "MR"
    }, {
      name: "Mauritius",
      code: "MU"
    }, {
      name: "Mayotte",
      code: "YT"
    }, {
      name: "Mexico",
      code: "MX"
    }, {
      name: "Micronesia, Federated States of",
      code: "FM"
    }, {
      name: "Moldova, Republic of",
      code: "MD"
    }, {
      name: "Monaco",
      code: "MC"
    }, {
      name: "Mongolia",
      code: "MN"
    }, {
      name: "Montserrat",
      code: "MS"
    }, {
      name: "Morocco",
      code: "MA"
    }, {
      name: "Mozambique",
      code: "MZ"
    }, {
      name: "Myanmar",
      code: "MM"
    }, {
      name: "Namibia",
      code: "NA"
    }, {
      name: "Nauru",
      code: "NR"
    }, {
      name: "Nepal",
      code: "NP"
    }, {
      name: "Netherlands",
      code: "NL"
    }, {
      name: "Netherlands Antilles",
      code: "AN"
    }, {
      name: "New Caledonia",
      code: "NC"
    }, {
      name: "New Zealand",
      code: "NZ"
    }, {
      name: "Nicaragua",
      code: "NI"
    }, {
      name: "Niger",
      code: "NE"
    }, {
      name: "Nigeria",
      code: "NG"
    }, {
      name: "Niue",
      code: "NU"
    }, {
      name: "Norfolk Island",
      code: "NF"
    }, {
      name: "Northern Mariana Islands",
      code: "MP"
    }, {
      name: "Norway",
      code: "NO"
    }, {
      name: "Oman",
      code: "OM"
    }, {
      name: "Pakistan",
      code: "PK"
    }, {
      name: "Palau",
      code: "PW"
    }, {
      name: "Palestinian Territory, Occupied",
      code: "PS"
    }, {
      name: "Panama",
      code: "PA"
    }, {
      name: "Papua New Guinea",
      code: "PG"
    }, {
      name: "Paraguay",
      code: "PY"
    }, {
      name: "Peru",
      code: "PE"
    }, {
      name: "Philippines",
      code: "PH"
    }, {
      name: "Pitcairn",
      code: "PN"
    }, {
      name: "Poland",
      code: "PL"
    }, {
      name: "Portugal",
      code: "PT"
    }, {
      name: "Puerto Rico",
      code: "PR"
    }, {
      name: "Qatar",
      code: "QA"
    }, {
      name: "Reunion",
      code: "RE"
    }, {
      name: "Romania",
      code: "RO"
    }, {
      name: "Russian Federation",
      code: "RU"
    }, {
      name: "RWANDA",
      code: "RW"
    }, {
      name: "Saint Helena",
      code: "SH"
    }, {
      name: "Saint Kitts and Nevis",
      code: "KN"
    }, {
      name: "Saint Lucia",
      code: "LC"
    }, {
      name: "Saint Pierre and Miquelon",
      code: "PM"
    }, {
      name: "Saint Vincent and the Grenadines",
      code: "VC"
    }, {
      name: "Samoa",
      code: "WS"
    }, {
      name: "San Marino",
      code: "SM"
    }, {
      name: "Sao Tome and Principe",
      code: "ST"
    }, {
      name: "Saudi Arabia",
      code: "SA"
    }, {
      name: "Senegal",
      code: "SN"
    }, {
      name: "Serbia and Montenegro",
      code: "CS"
    }, {
      name: "Seychelles",
      code: "SC"
    }, {
      name: "Sierra Leone",
      code: "SL"
    }, {
      name: "Singapore",
      code: "SG"
    }, {
      name: "Slovakia",
      code: "SK"
    }, {
      name: "Slovenia",
      code: "SI"
    }, {
      name: "Solomon Islands",
      code: "SB"
    }, {
      name: "Somalia",
      code: "SO"
    }, {
      name: "South Africa",
      code: "ZA"
    }, {
      name: "South Georgia and the South Sandwich Islands",
      code: "GS"
    }, {
      name: "Spain",
      code: "ES"
    }, {
      name: "Sri Lanka",
      code: "LK"
    }, {
      name: "Sudan",
      code: "SD"
    }, {
      name: "Suriname",
      code: "SR"
    }, {
      name: "Svalbard and Jan Mayen",
      code: "SJ"
    }, {
      name: "Swaziland",
      code: "SZ"
    }, {
      name: "Sweden",
      code: "SE"
    }, {
      name: "Switzerland",
      code: "CH"
    }, {
      name: "Syrian Arab Republic",
      code: "SY"
    }, {
      name: "Taiwan, Province of China",
      code: "TW"
    }, {
      name: "Tajikistan",
      code: "TJ"
    }, {
      name: "Tanzania, United Republic of",
      code: "TZ"
    }, {
      name: "Thailand",
      code: "TH"
    }, {
      name: "Timor-Leste",
      code: "TL"
    }, {
      name: "Togo",
      code: "TG"
    }, {
      name: "Tokelau",
      code: "TK"
    }, {
      name: "Tonga",
      code: "TO"
    }, {
      name: "Trinidad and Tobago",
      code: "TT"
    }, {
      name: "Tunisia",
      code: "TN"
    }, {
      name: "Turkey",
      code: "TR"
    }, {
      name: "Turkmenistan",
      code: "TM"
    }, {
      name: "Turks and Caicos Islands",
      code: "TC"
    }, {
      name: "Tuvalu",
      code: "TV"
    }, {
      name: "Uganda",
      code: "UG"
    }, {
      name: "Ukraine",
      code: "UA"
    }, {
      name: "United Arab Emirates",
      code: "AE"
    }, {
      name: "United Kingdom",
      code: "GB"
    }, {
      name: "United States",
      code: "US"
    }, {
      name: "United States Minor Outlying Islands",
      code: "UM"
    }, {
      name: "Uruguay",
      code: "UY"
    }, {
      name: "Uzbekistan",
      code: "UZ"
    }, {
      name: "Vanuatu",
      code: "VU"
    }, {
      name: "Venezuela",
      code: "VE"
    }, {
      name: "Viet Nam",
      code: "VN"
    }, {
      name: "Virgin Islands, British",
      code: "VG"
    }, {
      name: "Virgin Islands, U.S.",
      code: "VI"
    }, {
      name: "Wallis and Futuna",
      code: "WF"
    }, {
      name: "Western Sahara",
      code: "EH"
    }, {
      name: "Yemen",
      code: "YE"
    }, {
      name: "Zambia",
      code: "ZM"
    }, {
      name: "Zimbabwe",
      code: "ZW"
    }];
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/find.js
var require_find = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/find.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function find(collection, test) {
      if (!Array.isArray(collection)) {
        return null;
      }
      if (collection.length === 0) {
        return null;
      }
      if (Array.prototype.find) {
        return collection.find(test);
      }
      if (typeof test !== "function") {
        return null;
      }
      var needle;
      for (var i = 0, len = collection.length; i < len; i++) {
        var item = collection[i];
        if (test(item)) {
          needle = item;
          break;
        }
      }
      return needle;
    }
    var _default = find;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-currency-for-country-code.js
var require_get_currency_for_country_code = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-currency-for-country-code.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getCurrencyForCountryCode;
    var _countryCurrencyCodes = _interopRequireDefault(require_countryCurrencyCodes());
    var _countries = _interopRequireDefault(require_countries());
    var _find = _interopRequireDefault(require_find());
    var countriesByCountryCode = _countries.default.reduce(function(accumulator, country) {
      accumulator[country.code] = country.name;
      accumulator[country.code.toLowerCase()] = country.name;
      return accumulator;
    }, {});
    function getCurrencyForCountryCode(locale) {
      var currencyDisplay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "symbol";
      var code = locale.split("-")[1];
      var countryNameByCode = countriesByCountryCode[code];
      if (countryNameByCode) {
        var country = countriesByCountryCode[code] && countriesByCountryCode[code].toLowerCase();
        var currency = (0, _find.default)(_countryCurrencyCodes.default, function(countryCode) {
          return (countryCode.countries || []).indexOf(country) !== -1;
        });
        if (currency) {
          return new Number(1).toLocaleString(locale, {
            style: "currency",
            currency: currency.code,
            currencyDisplay
          }).replace(/[0-9\.\,]/g, "");
        }
        return "";
      } else {
        console.error("Cannot get currency based on country code. Country ".concat(code, " not found."));
        return "";
      }
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/NumberInput.js
var require_NumberInput = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/NumberInput.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _autoBind = _interopRequireDefault(require_autoBind());
    var _hasTouch = _interopRequireDefault(require_hasTouch());
    var _raf = _interopRequireDefault(require_raf());
    var _join = _interopRequireDefault(require_join());
    var _clamp = _interopRequireDefault(require_clamp2());
    var _debounce = _interopRequireDefault(require_debounce2());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _eventNames = _interopRequireDefault(require_eventNames());
    var _getSelectionRange = _interopRequireDefault(require_get_selection_range());
    var _getSelectionStart2 = _interopRequireDefault(require_get_selection_start());
    var _setCaretPosition = _interopRequireDefault(require_set_caret_position());
    var _getDecimalDelimiter = _interopRequireDefault(require_get_decimal_delimiter());
    var _getTransformedStringValues2 = _interopRequireWildcard(require_get_transformed_string_values());
    var _getCurrencyForCountryCode = _interopRequireDefault(require_get_currency_for_country_code());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var preventDefault = function preventDefault2(e) {
      return e.preventDefault();
    };
    var emptyObject = {};
    var isNumeric = function isNumeric2(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };
    var getArrowClasses = function getArrowClasses2(spinDirection, props2) {
      var upArrowClass = (0, _join.default)("".concat(props2.rootClassName, "__spinner-arrow"), "".concat(props2.rootClassName, "__spinner-arrow--up"), spinDirection === 1 && "".concat(props2.rootClassName, "__spinner-arrow--active"));
      var downArrowClass = (0, _join.default)("".concat(props2.rootClassName, "__spinner-arrow"), "".concat(props2.rootClassName, "__spinner-arrow--down"), spinDirection === -1 && "".concat(props2.rootClassName, "__spinner-arrow--active"));
      return {
        upArrowClass,
        downArrowClass
      };
    };
    var getClearButtonClassNames = function getClearButtonClassNames2(props2) {
      var clearButtonClassName = (0, _join.default)("".concat(props2.rootClassName, "__clear-button"), "".concat(props2.rootClassName, "__clear-button--").concat(props2.rtl ? "rtl" : "ltr"), props2.clearButtonClassName);
      return {
        clearButtonClassName
      };
    };
    var toUpperFirst = function toUpperFirst2(str) {
      return str ? str.charAt(0).toUpperCase() + str.substring(1) : "";
    };
    var isFloat = function isFloat2(n) {
      return Number(n) === n && n % 1 !== 0;
    };
    var isFloatString = function isFloatString2(n) {
      var str = "".concat(n);
      return isFloat(str) || isNumeric(str) && str.indexOf(".") !== -1;
    };
    var checkPositive = function checkPositive2(value, _ref4) {
      var allowNegative = _ref4.allowNegative;
      if (allowNegative === false) {
        return isNumeric(value) && value * 1 >= 0;
      }
    };
    var getFormatedValue = function getFormatedValue2(value, props2) {
      if (value || value === 0) {
        var locale = props2.locale, prefix = props2.prefix, suffix = props2.suffix, minValue = props2.minValue, maxValue = props2.maxValue, precision = props2.precision;
        return (0, _getTransformedStringValues2.default)(value, {
          locale,
          precision,
          min: minValue,
          max: maxValue,
          prefix,
          suffix
        })[0];
      }
    };
    var getCurrentValue = function getCurrentValue2(props2, state) {
      var value = props2.value, defaultValue = props2.defaultValue;
      var formattedValue = state.formattedValue;
      if (value != null) {
        return value;
      }
      if (formattedValue == null) {
        return getFormatedValue(defaultValue, props2);
      }
      return formattedValue;
    };
    var isControlled = function isControlled2(props2) {
      return props2.value !== void 0;
    };
    var isControlledPrecision = function isControlledPrecision2(props2) {
      return props2.precision === 0 || !!props2.precision;
    };
    var getSuffix = function getSuffix2(props2) {
      var suffix = props2.suffix, format = props2.format, currencySymbol = props2.currencySymbol, currencyPosition = props2.currencyPosition, locale = props2.locale;
      if (suffix) {
        return suffix;
      }
      if (format === "currency" && currencyPosition === "end") {
        if (currencySymbol) {
          return currencySymbol;
        }
        return (0, _getCurrencyForCountryCode.default)(locale || (globalObject.navigator ? globalObject.navigator.language : ""));
      }
      if (format === "percentage") {
        return "%";
      }
    };
    var getPrefix = function getPrefix2(props2) {
      var prefix = props2.prefix, format = props2.format, currencySymbol = props2.currencySymbol, currencyPosition = props2.currencyPosition, locale = props2.locale;
      if (prefix) {
        return prefix;
      }
      if (format === "currency" && currencyPosition === "start") {
        if (currencySymbol) {
          return currencySymbol;
        }
        return (0, _getCurrencyForCountryCode.default)(locale || (globalObject.navigator ? globalObject.navigator.language : ""));
      }
    };
    var selectionContainsPosition = function selectionContainsPosition2(selection, position) {
      if (selection.start === selection.end) {
        return false;
      }
      return selection.start <= position && selection.end > position;
    };
    var InovuaNumericInput = function(_Component) {
      (0, _inherits2.default)(InovuaNumericInput2, _Component);
      var _super = _createSuper(InovuaNumericInput2);
      function InovuaNumericInput2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaNumericInput2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderClearIcon", function(svgProps) {
          var result;
          if (_this.props.renderClearIcon && typeof _this.props.renderClearIcon === "function") {
            result = _this.props.renderClearIcon({
              width: svgProps.width,
              height: svgProps.height
            });
          }
          if (result === void 0) {
            result = _react.default.createElement("svg", {
              style: _objectSpread({}, svgProps),
              viewBox: "0 0 10 10"
            }, _react.default.createElement("path", {
              fill: "none",
              fillRule: "evenodd",
              strokeLinecap: "round",
              strokeWidth: "1.33",
              d: "M1 1l8 8m0-8L1 9"
            }));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderArrowUpIcon", function(svgProps) {
          var height = svgProps.height;
          var result;
          if (_this.props.renderArrowUpIcon && typeof _this.props.renderArrowUpIcon === "function") {
            result = _this.props.renderArrowUpIcon(_objectSpread({}, svgProps));
          }
          if (result === void 0) {
            result = _react.default.createElement("svg", {
              style: _objectSpread(_objectSpread({}, svgProps), {}, {
                height: height / 2
              }),
              viewBox: "0 0 10 5"
            }, _react.default.createElement("path", {
              fillRule: "evenodd",
              d: "M5.262.262l4.106 4.106c.144.144.144.379 0 .524-.07.069-.164.108-.262.108H.894c-.204 0-.37-.166-.37-.37 0-.099.039-.193.108-.262L4.738.262c.145-.145.38-.145.524 0z"
            }));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderArrowDownIcon", function(svgProps) {
          var height = svgProps.height;
          var result;
          if (_this.props.renderArrowDownIcon && typeof _this.props.renderArrowDownIcon === "function") {
            result = _this.props.renderArrowDownIcon(_objectSpread({}, svgProps));
          }
          if (result === void 0) {
            result = _react.default.createElement("svg", {
              style: _objectSpread(_objectSpread({}, svgProps), {}, {
                height: height / 2
              }),
              viewBox: "0 0 10 5"
            }, _react.default.createElement("path", {
              fillRule: "evenodd",
              d: "M4.738 4.738L.632.632C.488.488.488.253.632.108.702.04.796 0 .894 0h8.212c.204 0 .37.166.37.37 0 .099-.039.193-.108.262L5.262 4.738c-.145.145-.38.145-.524 0z"
            }));
          }
          return result;
        });
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
        var value = isControlled(props2) ? props2.value : props2.defaultValue;
        if (props2.triggerChangeOnSpinDelay > 0) {
          _this.setValueOnSpin = (0, _debounce.default)(_this.setValueOnSpin, props2.triggerChangeOnSpinDelay);
        }
        _this.state = {
          value,
          focused: false,
          formattedValue: getFormatedValue(value, props2),
          spinDirection: null,
          intermediateValue: null
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaNumericInput2, [{
        key: "setInputRef",
        value: function setInputRef(el) {
          this.input = el;
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props, state = this.state;
          var toolPosition = props2.toolPosition;
          var _this$p = this.p = this.getProps(props2, state), formattedValue = _this$p.formattedValue, enableSpinnerTools = _this$p.enableSpinnerTools, className = _this$p.className, style = _this$p.style, enableClearButton = _this$p.enableClearButton, wrapperProps = _this$p.wrapperProps;
          var min = props2.mim;
          if (min === void 0 && !props2.allowNegative) {
            min = 0;
          }
          var currentValue = state.focused ? this.p.value : this.p.formattedValue;
          if (currentValue == null) {
            currentValue = "";
          }
          var inputProps = props2.inputProps || emptyObject;
          var inputClassName = (0, _join.default)("".concat(props2.rootClassName, "__input"), inputProps.className);
          var input = _react.default.createElement("input", _objectSpread(_objectSpread({
            size: Math.max(1, props2.size || 0),
            placeholder: this.props.placeholder
          }, inputProps), {}, {
            ref: this.setInputRef,
            type: "text",
            key: "input",
            className: inputClassName,
            disabled: props2.disabled,
            value: currentValue,
            onWheel: this.handleWheel,
            onKeyDown: this.handleKeyDown,
            onKeyUp: this.handleKeyUp,
            onChange: this.handleChange,
            min
          }));
          var clearButtonWrapper = this.renderClearButtonWrapper();
          var spinnerToolWrapper = this.renderSpinnerToolsWrapper();
          var inputDisplay = [input, clearButtonWrapper, spinnerToolWrapper];
          if (toolPosition === "start") {
            inputDisplay = [spinnerToolWrapper, clearButtonWrapper, input];
          }
          if (enableSpinnerTools === false) {
            inputDisplay = [input, spinnerToolWrapper, clearButtonWrapper];
          }
          if (toolPosition === "start" && enableSpinnerTools === false) {
            inputDisplay = [clearButtonWrapper, input, spinnerToolWrapper];
          }
          var propsToWrapper = (0, _cleanProps.default)(wrapperProps, InovuaNumericInput2.propTypes);
          return _react.default.createElement("div", _objectSpread(_objectSpread({}, propsToWrapper), {}, {
            className: (0, _join.default)(className, wrapperProps ? wrapperProps.className : null),
            style: wrapperProps && wrapperProps.style ? _objectSpread(_objectSpread({}, style), wrapperProps.style) : style,
            onBlur: this.handleBlur,
            onFocus: this.handleFocus
          }), inputDisplay);
        }
      }, {
        key: "renderClearButtonWrapper",
        value: function renderClearButtonWrapper() {
          var props2 = this.props, state = this.state;
          var enableClearButton = this.props.enableClearButton;
          var _this$p2 = this.p, clearButtonColor = _this$p2.clearButtonColor, clearButtonStyle = _this$p2.clearButtonStyle, clearButtonSize = _this$p2.clearButtonSize;
          var value = isControlled(props2) ? props2.value : state.value;
          var hasValue = state.intermediateValue != null ? true : value !== "" && value != null;
          var clearButtonWrapperClassName = (0, _join.default)("".concat(props2.rootClassName, "__clear-button-wrapper"), (!hasValue || !enableClearButton) && "".concat(props2.rootClassName, "__clear-button-wrapper--hidden"));
          return _react.default.createElement("div", {
            key: "clearButton",
            className: clearButtonWrapperClassName
          }, this.renderClearButton(_objectSpread({
            clearButtonColor,
            clearButtonStyle,
            clearButtonSize
          }, getClearButtonClassNames(props2))));
        }
      }, {
        key: "renderClearButton",
        value: function renderClearButton(config) {
          var clearButtonColor = config.clearButtonColor, clearButtonStyle = config.clearButtonStyle, clearButtonClassName = config.clearButtonClassName, clearButtonSize = config.clearButtonSize;
          var svgProps = {};
          var tabIndex = this.props.acceptClearToolFocus ? 0 : -1;
          if (clearButtonColor) {
            svgProps.fill = clearButtonColor;
          }
          if (clearButtonSize) {
            if (Array.isArray(clearButtonSize)) {
              svgProps.width = clearButtonSize[0];
              svgProps.height = clearButtonSize[1];
            } else {
              svgProps.width = clearButtonSize;
              svgProps.height = clearButtonSize;
            }
          }
          return _react.default.createElement("button", {
            key: "clearButton",
            type: "button",
            onClick: this.handleClearButtonClick,
            onMouseDown: preventDefault,
            className: clearButtonClassName,
            style: _objectSpread({}, clearButtonStyle),
            tabIndex
          }, this.renderClearIcon(svgProps));
        }
      }, {
        key: "renderSpinnerToolsWrapper",
        value: function renderSpinnerToolsWrapper() {
          var props2 = this.props;
          var enableSpinnerTools = props2.enableSpinnerTools, rtl = props2.rtl;
          var _this$p3 = this.p, arrowColor = _this$p3.arrowColor, arrowStyle = _this$p3.arrowStyle, arrowUpStyle = _this$p3.arrowUpStyle, arrowDownStyle = _this$p3.arrowDownStyle, spinDirection = _this$p3.spinDirection, arrowSize = _this$p3.arrowSize;
          var spinnerToolsWrapperClassName = enableSpinnerTools ? "".concat(props2.rootClassName, "__spinner-wrapper ").concat(props2.rootClassName, "__spinner-wrapper--").concat(rtl ? "rtl" : "ltr") : "".concat(props2.rootClassName, "__spinner-wrapper-hidden ").concat(props2.rootClassName, "__spinner-wrapper-hidden--").concat(rtl ? "rtl" : "ltr");
          return _react.default.createElement("div", {
            key: "spinnerTool",
            className: spinnerToolsWrapperClassName
          }, this.renderSpinnerTools(_objectSpread({
            arrowColor,
            arrowStyle,
            arrowUpStyle,
            arrowDownStyle,
            spinDirection,
            arrowSize
          }, getArrowClasses(spinDirection, props2))));
        }
      }, {
        key: "renderSpinnerTools",
        value: function renderSpinnerTools(config) {
          var arrowColor = config.arrowColor, arrowStyle = config.arrowStyle, arrowUpStyle = config.arrowUpStyle, arrowDownStyle = config.arrowDownStyle, upArrowClass = config.upArrowClass, downArrowClass = config.downArrowClass, arrowSize = config.arrowSize;
          var svgProps = {};
          if (arrowColor) {
            svgProps.fill = arrowColor;
          }
          if (arrowSize) {
            if (Array.isArray(arrowSize)) {
              svgProps.width = arrowSize[0];
              svgProps.height = arrowSize[1];
            } else {
              svgProps.width = arrowSize;
              svgProps.height = arrowSize;
            }
          }
          var arrowEvents = this.getArrowEvents();
          return [_react.default.createElement("span", _objectSpread(_objectSpread({
            key: "up"
          }, arrowEvents.upEvents), {}, {
            className: upArrowClass,
            style: _objectSpread(_objectSpread({}, arrowStyle), arrowUpStyle)
          }), this.renderArrowUpIcon(svgProps)), _react.default.createElement("span", _objectSpread(_objectSpread({
            key: "down"
          }, arrowEvents.downEvents), {}, {
            className: downArrowClass,
            style: _objectSpread(_objectSpread({}, arrowStyle), arrowDownStyle)
          }), this.renderArrowDownIcon(svgProps))];
        }
      }, {
        key: "getArrowEvents",
        value: function getArrowEvents() {
          return {
            upEvents: (0, _defineProperty2.default)({}, _eventNames.default.onMouseDown, this.handleArrowDown.bind(this, 1)),
            downEvents: (0, _defineProperty2.default)({}, _eventNames.default.onMouseDown, this.handleArrowDown.bind(this, -1))
          };
        }
      }, {
        key: "handleClearButtonClick",
        value: function handleClearButtonClick(event2) {
          this.setState({
            focused: true
          });
          this.setValue(null);
          this.focus();
        }
      }, {
        key: "handleArrowDown",
        value: function handleArrowDown(shiftStep, event2) {
          var _this2 = this;
          event2.preventDefault();
          var step = this.props.step;
          var target = _hasTouch.default ? event2.target : window;
          var eventName = _hasTouch.default ? "touchend" : "click";
          var onUpEvent = function onUpEvent2() {
            _this2.handleMouseUp();
            target.removeEventListener(eventName, onUpEvent2, true);
          };
          target.addEventListener(eventName, onUpEvent, true);
          var shiftKey = event2.shiftKey;
          var direction = shiftStep > 0 ? 1 : -1;
          var spinConfig = {
            step: Math.abs(step)
          };
          this.stepTo(direction, spinConfig);
          this.handleArrowDownTimeoutId = setTimeout(function() {
            _this2.setState({
              shiftKey,
              spinDirection: direction
            });
            _this2.startSpin(direction, spinConfig);
          }, 300);
        }
      }, {
        key: "handleMouseUp",
        value: function handleMouseUp() {
          this.stopSpin();
          this.setState({
            spinDirection: null,
            shiftKey: null
          });
        }
      }, {
        key: "getTransformedStringValues",
        value: function getTransformedStringValues(value) {
          var _this$p4 = this.p, suffix = _this$p4.suffix, prefix = _this$p4.prefix, locale = _this$p4.locale, precision = _this$p4.precision, isControlledPrecision2 = _this$p4.isControlledPrecision, minValue = _this$p4.minValue, maxValue = _this$p4.maxValue;
          return (0, _getTransformedStringValues2.default)(value, {
            locale,
            precision: isControlledPrecision2 && precision,
            min: minValue,
            max: maxValue,
            suffix,
            prefix
          });
        }
      }, {
        key: "handleFocus",
        value: function handleFocus(event2) {
          var onFocus = this.props.onFocus;
          if (event2.target != this.input) {
            return;
          }
          this.setState({
            focused: true
          });
          if (this.props.inputProps && this.props.inputProps.onFocus) {
            this.props.inputProps.onFocus(event2);
          }
          if (onFocus) {
            onFocus(event2);
          }
        }
      }, {
        key: "handleBlur",
        value: function handleBlur(event2) {
          this.setState({
            focused: false
          });
          if (this.isSpinning()) {
            this.stopSpin();
          }
          if (this.state.intermediateValue != null) {
            var value = (0, _clamp.default)(parseFloat(this.state.intermediateValue), this.props.minValue, this.props.maxValue);
            if (!this.props.allowEmpty && (isNaN(value) || value == null)) {
              value = this.props.valueOnEmpty !== void 0 ? this.props.valueOnEmpty : this.props.minValue || 0;
            }
            this.setValue(value);
          }
          if (this.props.inputProps && this.props.inputProps.onBlur) {
            this.props.inputProps.onBlur(event2);
          }
          var onBlur = this.props.onBlur;
          if (onBlur) {
            onBlur(event2);
          }
        }
      }, {
        key: "handleChange",
        value: function handleChange(event2) {
          event2.stopPropagation();
          if (this.props.inputProps && this.props.inputProps.onChange) {
            this.props.inputProps.onChange(event2);
          }
          var value = event2.target.value;
          this.setValue(value);
        }
      }, {
        key: "setValue",
        value: function setValue(value) {
          var _ref5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, silent = _ref5.silent;
          if (this.props.allowNegative && value === "-") {
            this.setIntermediateValue(value);
            return;
          }
          if (this.props.allowFloat && value === ".") {
            this.setIntermediateValue(value);
            return;
          }
          if (this.props.allowFloat && this.props.allowNegative && value === "-.") {
            this.setIntermediateValue(value);
            return;
          }
          var parseResult = parseFloat(value);
          var parsedValue = isNaN(parseResult) ? null : (0, _clamp.default)(parseResult, this.props.minValue, this.props.maxValue);
          var isSameRepresentation = parsedValue === null || "".concat(value) === parsedValue.toString();
          if (!this.props.allowEmpty && parsedValue === null) {
            this.setIntermediateValue(value || "");
            return;
          }
          if (isSameRepresentation) {
            this.setIntermediateValue(null);
            this.onChange(parsedValue);
          } else {
            this.setIntermediateValue(value);
          }
        }
      }, {
        key: "setIntermediateValue",
        value: function setIntermediateValue(intermediateValue, callback) {
          if (intermediateValue === this.state.intermediateValue) {
            return;
          }
          this.setState({
            intermediateValue
          });
        }
      }, {
        key: "onChange",
        value: function onChange(value) {
          if (!isControlled(this.props)) {
            this.setState({
              value
            });
          }
          var allowNegative = this.props.allowNegative;
          var isPositive = checkPositive(value, {
            allowNegative
          });
          if (!allowNegative && !isPositive) {
            return;
          }
          if (this.props.onChange) {
            this.props.onChange(value);
          }
        }
      }, {
        key: "handleBackspaceKeyDown",
        value: function handleBackspaceKeyDown(event2) {
          var _this3 = this;
          var _this$p5 = this.p, isControlledPrecision2 = _this$p5.isControlledPrecision, currentValue = _this$p5.currentValue, decimalDelimiter = _this$p5.decimalDelimiter;
          if (isControlledPrecision2) {
            var currentSelection = (0, _getSelectionRange.default)(this.input);
            var decimalPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
            if (currentSelection.end - 1 > decimalPosition) {
              this.backspaceOnControlledPrecision = true;
            }
            if (currentSelection.end - 1 === decimalPosition) {
              (0, _raf.default)(function() {
                (0, _setCaretPosition.default)(_this3.input, currentSelection.end - 1);
              });
              event2.preventDefault();
              event2.stopPropagation();
            }
          }
        }
      }, {
        key: "handleDigitKeyDown",
        value: function handleDigitKeyDown() {
          var _this$p6 = this.p, isControlledPrecision2 = _this$p6.isControlledPrecision, currentValue = _this$p6.currentValue, decimalDelimiter = _this$p6.decimalDelimiter;
          if (isControlledPrecision2) {
            var currentSelection = (0, _getSelectionRange.default)(this.input);
            var decimalPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
            if (currentSelection.end > decimalPosition) {
              this.digitInputOnControlledPrecision = currentSelection.end > decimalPosition;
            }
          }
        }
      }, {
        key: "handleDecimalDelimiterKeyDown",
        value: function handleDecimalDelimiterKeyDown(event2) {
          var _this$p7 = this.p, allowFloat = _this$p7.allowFloat, value = _this$p7.value;
          if (!allowFloat) {
            event2.preventDefault();
            return;
          }
          var selectedText = this.getSelectedText();
          if (selectedText == ".") {
            return;
          }
          if (isFloatString(selectedText)) {
            return;
          }
          if (isFloatString(value)) {
            event2.preventDefault();
            return;
          }
        }
      }, {
        key: "getSelectedText",
        value: function getSelectedText() {
          var _getSelectedRange = (0, _getSelectionRange.default)(this.input), start = _getSelectedRange.start, end = _getSelectedRange.end;
          var value = "".concat(this.getValue());
          return value.substring(start, end);
        }
      }, {
        key: "handleSelectionOverDecimalDelimiter",
        value: function handleSelectionOverDecimalDelimiter(event2, currentSelection) {
          var _this$p8 = this.p, decimalDelimiter = _this$p8.decimalDelimiter, currentValue = _this$p8.currentValue, isControlledPrecision2 = _this$p8.isControlledPrecision, prefix = _this$p8.prefix, suffix = _this$p8.suffix;
          currentSelection = currentSelection || (0, _getSelectionRange.default)(this.input);
          var selectionStartsAtBeginningOfNumber = currentSelection.start === 0;
          if (prefix) {
            selectionStartsAtBeginningOfNumber = currentSelection.start <= prefix.length + 1;
          }
          var selectionEndsAtEndOfNumber = currentSelection.end === currentValue.length;
          if (suffix) {
            selectionEndsAtEndOfNumber = currentSelection.end >= suffix.length + 1;
          }
          if (selectionStartsAtBeginningOfNumber && selectionEndsAtEndOfNumber) {
            return;
          }
        }
      }, {
        key: "handleKeyUp",
        value: function handleKeyUp(event2) {
          var key = event2.key;
          if (this.props.inputProps && this.props.inputProps.onKeyUp) {
            this.props.inputProps.onKeyUp(event2);
          }
          var name = "handle".concat(toUpperFirst(key), "KeyUp");
          if (this[name]) {
            this[name](event2);
          }
        }
      }, {
        key: "handleKeyDown",
        value: function handleKeyDown(event2) {
          var key = event2.key;
          var _this$p9 = this.p, decimalDelimiter = _this$p9.decimalDelimiter, decimalDelimiterPosition = _this$p9.decimalDelimiterPosition;
          if (this.props.inputProps && this.props.inputProps.onKeyDown) {
            this.props.inputProps.onKeyDown(event2);
          }
          if (this.props.onKeyDown) {
            this.props.onKeyDown(event2);
          }
          if (!key) {
            return;
          }
          var currentSelection = (0, _getSelectionRange.default)(this.input);
          if (selectionContainsPosition(currentSelection, decimalDelimiterPosition)) {
            this.handleSelectionOverDecimalDelimiter(event2, currentSelection);
          }
          if (key.match(/[0-9]/)) {
            this.handleDigitKeyDown(event2);
            return;
          }
          if (key === decimalDelimiter) {
            this.handleDecimalDelimiterKeyDown(event2);
            return;
          }
          if (key === "-") {
            var caretPos = this.getSelectionStart();
            if (!this.props.allowNegative || caretPos) {
              event2.preventDefault();
            }
            return;
          }
          var isPrintableCharacter = key.length == 1;
          if (isPrintableCharacter && !(event2.metaKey || event2.ctrlKey)) {
            event2.preventDefault();
          }
          var name = "handle".concat(toUpperFirst(key), "KeyDown");
          if (this[name]) {
            this[name](event2);
          }
        }
      }, {
        key: "handleArrowDownKeyDown",
        value: function handleArrowDownKeyDown(event2) {
          this.handleArrowKeySpin(-1, event2);
        }
      }, {
        key: "handleArrowUpKeyDown",
        value: function handleArrowUpKeyDown(event2) {
          this.handleArrowKeySpin(1, event2);
        }
      }, {
        key: "handleArrowKeySpin",
        value: function handleArrowKeySpin(direction, event2) {
          var _this4 = this;
          if (this.isSpinning()) {
            event2.preventDefault();
            event2.stopPropagation();
            return;
          }
          if (this.props.spinOnArrowKeys) {
            event2.preventDefault();
            event2.stopPropagation();
            if (!this.isSpinning()) {
              var config = {
                shiftKey: event2.shiftKey,
                event: event2
              };
              this.stepTo(direction, config);
              this.spinTimeoutId = setTimeout(function() {
                _this4.startSpin(direction, config);
              }, 120);
            }
          }
        }
      }, {
        key: "handleArrowUpKeyUp",
        value: function handleArrowUpKeyUp() {
          this.onSpinKeyUp();
        }
      }, {
        key: "handleArrowDownKeyUp",
        value: function handleArrowDownKeyUp() {
          this.onSpinKeyUp();
        }
      }, {
        key: "onSpinKeyUp",
        value: function onSpinKeyUp() {
          this.props.spinOnArrowKeys && this.stopSpin();
        }
      }, {
        key: "getInput",
        value: function getInput() {
          return this.input;
        }
      }, {
        key: "getNumericValue",
        value: function getNumericValue() {
          return this.p.numericValue;
        }
      }, {
        key: "getValue",
        value: function getValue() {
          return this.p.value;
        }
      }, {
        key: "isFocused",
        value: function isFocused() {
          return !!this.state.focused;
        }
      }, {
        key: "getStepValue",
        value: function getStepValue(props2, direction, config) {
          config = config || {};
          var value = this.p.value;
          var stepValue = config.step || props2.step;
          if (this.state.shiftKey || config.shiftKey && props2.shiftStep) {
            stepValue = props2.shiftStep;
          }
          var theValue = isNumeric(this.p.value) ? value * 1 + direction * stepValue : this.props.initialStep || 0;
          return (0, _clamp.default)(Math.round(theValue * 1e3) / 1e3, this.props.minValue, this.props.maxValue);
        }
      }, {
        key: "stepTo",
        value: function stepTo(direction, config) {
          config = config || {};
          this.stepToTriggered = true;
          var props2 = this.props;
          var step = config.step || props2.step;
          var allowNegative = props2.allowNegative;
          if (step != null) {
            var stepFn = typeof props2.stepFn === "function" ? props2.stepFn : this.getStepValue;
            var value = stepFn(props2, direction, config);
            var isPositive = checkPositive(value, {
              allowNegative
            });
            if (!allowNegative && !isPositive) {
              return;
            }
            this.spinValue = value;
            if (config.triggerChangeOnSpin) {
              if (props2.triggerChangeOnSpinDelay > 0) {
                this.setIntermediateValue(value);
              }
              this.setValueOnSpin(value);
            } else {
              this.setIntermediateValue(value);
            }
          }
        }
      }, {
        key: "setValueOnSpin",
        value: function setValueOnSpin(value) {
          this.setValue(value);
        }
      }, {
        key: "stopSpin",
        value: function stopSpin() {
          clearTimeout(this.spinTimeoutId);
          clearTimeout(this.handleArrowDownTimeoutId);
          clearInterval(this.spinIntervalId);
          this.setValue(this.spinValue);
          this.handleArrowDownTimeoutId = null;
          this.spinTimeoutId = null;
          this.spinIntervalId = null;
        }
      }, {
        key: "startSpin",
        value: function startSpin(direction, config) {
          if (this.spinIntervalId) {
            clearInterval(this.spinIntervalId);
          }
          this.stepToTriggered = false;
          this.spinValue = this.getValue();
          var stepTo = this.stepTo.bind(this, direction, _objectSpread({
            triggerChangeOnSpin: this.props.triggerChangeOnSpin
          }, config));
          this.spinIntervalId = setInterval(stepTo, this.props.stepDelay);
        }
      }, {
        key: "isSpinning",
        value: function isSpinning() {
          return this.spinIntervalId != null;
        }
      }, {
        key: "handleWheel",
        value: function handleWheel(event2) {
          var props2 = this.props;
          if ((props2.requireFocusOnStep && this.isFocused() || !props2.requireFocusOnStep) && props2.stepOnWheel && props2.step) {
            event2.preventDefault();
            var nativeEvent = event2.nativeEvent;
            var y = nativeEvent.wheelDeltaY || nativeEvent.wheelDelta || -nativeEvent.deltaY;
            y = y < 0 ? -1 : 1;
            this.stepTo(y, {
              shiftKey: event2.shiftKey,
              event: event2
            });
          }
        }
      }, {
        key: "focus",
        value: function focus() {
          this.input.focus();
        }
      }, {
        key: "getSelectionStart",
        value: function getSelectionStart() {
          return (0, _getSelectionStart2.default)(this.input);
        }
      }, {
        key: "getProps",
        value: function getProps(props2, state) {
          props2 = props2 || this.props;
          state = state || this.state;
          var suffix = getSuffix(props2);
          var prefix = getPrefix(props2);
          var currentValue = getCurrentValue(_objectSpread(_objectSpread({}, props2), {}, {
            suffix,
            prefix
          }), state);
          var decimalDelimiter = (0, _getDecimalDelimiter.default)(props2.locale);
          var decimalDelimiterPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
          var className = (0, _join.default)(props2.rootClassName, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), "".concat(props2.rootClassName, "--").concat(props2.rtl ? "rtl" : "ltr"), props2.disabled && "".concat(props2.rootClassName, "--disabled"), state.focused && "".concat(props2.rootClassName, "--focused"), props2.enableSpinnerTools && "".concat(props2.rootClassName, "--enable-spinner-tools"), props2.enableClearButton && "".concat(props2.rootClassName, "--enable-clear-button"), props2.className);
          var controlled = isControlled(props2);
          var value = controlled ? props2.value : state.value;
          if (state.intermediateValue !== null) {
            value = state.intermediateValue;
          }
          var numericValue = Number(value);
          var p = _objectSpread(_objectSpread({}, props2), {}, {
            className,
            isControlled: controlled,
            isControlledPrecision: isControlledPrecision(props2),
            value,
            numericValue,
            currentValue,
            suffix,
            prefix,
            decimalDelimiter,
            decimalDelimiterPosition
          });
          p.formattedValue = getFormatedValue(value, p);
          return p;
        }
      }]);
      return InovuaNumericInput2;
    }(_react.Component);
    InovuaNumericInput.defaultProps = {
      rootClassName: "inovua-react-toolkit-numeric-input",
      spinOnArrowKeys: true,
      numbersOnly: true,
      step: 1,
      shiftStep: 10,
      requireFocusOnStep: true,
      stepOnWheel: true,
      allowNegative: true,
      allowFloat: true,
      triggerChangeOnSpin: true,
      triggerChangeOnSpinDelay: 80,
      stepDelay: 60,
      prefix: "",
      suffix: "",
      theme: "default-light",
      format: "number",
      currencyPosition: "end",
      enableSpinnerTools: true,
      enableClearButton: true,
      acceptClearToolFocus: false,
      allowEmpty: true,
      toolPosition: "end",
      arrowSize: 10,
      clearButtonSize: 10,
      inputProps: {}
    };
    InovuaNumericInput.propTypes = {
      rootClassName: _propTypes.default.string,
      stepDelay: _propTypes.default.number,
      step: _propTypes.default.number,
      initialStep: _propTypes.default.number,
      valueOnEmpty: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      minValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      maxValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      onChange: _propTypes.default.func,
      triggerChangeOnSpin: _propTypes.default.bool,
      allowEmpty: _propTypes.default.bool,
      allowFloat: _propTypes.default.bool,
      requireFocusOnStep: _propTypes.default.bool,
      spinOnArrowKeys: _propTypes.default.bool,
      numbersOnly: _propTypes.default.bool,
      shiftStep: _propTypes.default.number,
      stepOnWheel: _propTypes.default.bool,
      allowNegative: _propTypes.default.bool,
      precision: _propTypes.default.number,
      format: _propTypes.default.oneOf(["currency", "number", "percentage"]),
      locale: _propTypes.default.string,
      prefix: _propTypes.default.string,
      suffix: _propTypes.default.string,
      theme: _propTypes.default.string,
      arrowColor: _propTypes.default.string,
      arrowStyle: _propTypes.default.object,
      currencySymbol: _propTypes.default.string,
      currencyPosition: _propTypes.default.oneOf(["start", "end"]),
      value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      wrapperProps: _propTypes.default.object,
      disabled: _propTypes.default.bool,
      acceptClearToolFocus: _propTypes.default.bool,
      renderClearIcon: _propTypes.default.func,
      clearButtonSize: _propTypes.default.number,
      clearButtonColor: _propTypes.default.string,
      clearButtonStyle: _propTypes.default.object,
      clearButtonClassName: _propTypes.default.string,
      enableSpinnerTools: _propTypes.default.bool,
      enableClearButton: _propTypes.default.bool,
      toolPosition: _propTypes.default.oneOf(["start", "end"]),
      arrowSize: _propTypes.default.number,
      arrowDownStyle: _propTypes.default.object,
      arrowUpStyle: _propTypes.default.object,
      inputProps: _propTypes.default.object,
      rtl: _propTypes.default.bool
    };
    globalObject.isNumeric = isNumeric;
    var _default = InovuaNumericInput;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/index.js
var require_src2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _NumberInput = _interopRequireDefault(require_NumberInput());
    var _default = _NumberInput.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NumericInput/index.js
var require_NumericInput = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NumericInput/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src2());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-notify-resize/index.js
var require_react_notify_resize = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-notify-resize/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {};
    exports.default = void 0;
    var _src = _interopRequireWildcard(require_src());
    Object.keys(_src).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _src[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _src[key];
        }
      });
    });
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/NotifyResize/index.js
var require_NotifyResize = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/NotifyResize/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "NotifyResize", {
      enumerable: true,
      get: function get() {
        return _reactNotifyResize.NotifyResize;
      }
    });
    exports.default = void 0;
    var _reactNotifyResize = _interopRequireWildcard(require_react_notify_resize());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = _reactNotifyResize.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/throttle.js
var require_throttle = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/throttle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function throttle2(func, wait) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var context;
      var args;
      var result;
      var timeout = null;
      var previous = 0;
      var later = function later2() {
        previous = options.leading === false ? 0 : Date.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) {
          context = null;
          args = null;
        }
      };
      return function() {
        var now = Date.now();
        if (!previous && options.leading === false) {
          previous = now;
        }
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          previous = now;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }
        return result;
      };
    }
    var _default = throttle2;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/containsNode.js
var require_containsNode = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/containsNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    function containsNode(parent, child) {
      if (!parent || !child || !(parent instanceof Element) || !(child instanceof Element)) {
        return false;
      }
      if (!globalObject.document.body.contains(child)) {
        return false;
      }
      var result = true;
      if (parent !== child && !parent.contains(child)) {
        result = false;
      }
      return result;
    }
    var _default = containsNode;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getSelectionStart.js
var require_getSelectionStart = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getSelectionStart.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    function getSelectionStart(input) {
      if (!input) {
        return null;
      }
      if (input.createTextRange && !globalObject.getSelection) {
        var document2 = globalObject.document;
        var range = document2.selection.createRange().duplicate();
        range.moveEnd("character", input.value.length);
        if (range.text == "") {
          return input.value.length;
        }
        return input.value.lastIndexOf(range.text);
      }
      return input.selectionStart;
    }
    var _default = getSelectionStart;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getSelectionEnd.js
var require_getSelectionEnd = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getSelectionEnd.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    function getSelectionEnd(input) {
      if (!input) {
        return null;
      }
      var document2 = globalObject.document;
      if (input.createTextRange && !globalObject.getSelection) {
        var range = document2.selection.crangeeateRange().duplicate();
        range.moveStart("character", -input.value.length);
        return range.text.length;
      }
      return input.selectionEnd;
    }
    var _default = getSelectionEnd;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/setInputSelection.js
var require_setInputSelection = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/setInputSelection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function setInputSelection(input, startPos, endPos) {
      if (input.selectionStart !== void 0) {
        input.selectionStart = startPos;
        input.selectionEnd = endPos;
      } else if (document.selection && document.selection.createRange) {
        input.select();
        var range = document.selection.createRange();
        range.collapse(true);
        range.moveEnd("character", endPos);
        range.moveStart("character", startPos);
        range.select();
      }
    }
    var _default = setInputSelection;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getCursorPosition.js
var require_getCursorPosition = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getCursorPosition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function getCursorPosition(field) {
      var cursorPosition = 0;
      if (document.selection) {
        field.focus();
        var oSel = document.selection.createRange();
        oSel.moveStart("character", -field.value.length);
        cursorPosition = oSel.text.length;
      } else if (field.selectionStart || field.selectionStart == "0") {
        cursorPosition = field.selectionStart;
      }
      return cursorPosition;
    }
    var _default = getCursorPosition;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/TextInput.js
var require_TextInput = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/TextInput.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _getSelectionStart2 = _interopRequireDefault(require_getSelectionStart());
    var _getSelectionEnd2 = _interopRequireDefault(require_getSelectionEnd());
    var _setInputSelection = _interopRequireDefault(require_setInputSelection());
    var _throttle = _interopRequireDefault(require_throttle());
    var _join = _interopRequireDefault(require_join());
    var _getCursorPosition = _interopRequireDefault(require_getCursorPosition());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var TextInput = function(_Component) {
      (0, _inherits2.default)(TextInput2, _Component);
      var _super = _createSuper(TextInput2);
      function TextInput2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, TextInput2);
        _this = _super.call(this, props2);
        _this.handleChange = _this.handleChange.bind((0, _assertThisInitialized2.default)(_this));
        _this.updateValue = _this.updateValue.bind((0, _assertThisInitialized2.default)(_this));
        if (props2.throttle) {
          _this.updateThrottledUpdateValue(props2.throttle);
        }
        _this.state = {
          value: props2.value
        };
        return _this;
      }
      (0, _createClass2.default)(TextInput2, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this2 = this;
          var previousValue = prevProps.value || "";
          var currentValue = this.props.value || "";
          if (previousValue != currentValue) {
            clearTimeout(this.suggestionTimeOut);
          }
          if (this.props.suggestion && this.props.suggestion !== currentValue && this.props.autocomplete && currentValue !== previousValue && currentValue.length > previousValue.length) {
            this.suggestionTimeOut = setTimeout(function() {
              _this2.selectForwardIfNecessary();
            }, this.props.autocompleteDelay);
          }
          if (this.props.throttle && prevProps.value !== this.props.value) {
            this.setState({
              value: this.props.value
            });
          }
          if (prevProps.throttle !== this.props.throttle) {
            this.updateThrottledUpdateValue(this.props.throttle);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.suggestionTimeOut) {
            clearTimeout(this.suggestionTimeOut);
            this.suggestionTimeOut = null;
          }
        }
      }, {
        key: "updateThrottledUpdateValue",
        value: function updateThrottledUpdateValue(throttleDelay) {
          this.throttledUpdateValue = (0, _throttle.default)(this.updateValue, throttleDelay, {
            trailing: true,
            leading: false
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;
          var _this$props = this.props, rootClassName = _this$props.rootClassName, onClick = _this$props.onClick, maxWidth = _this$props.maxWidth, visible = _this$props.visible, searchable = _this$props.searchable;
          var className = (0, _join.default)("".concat(rootClassName, "__wrapper"), this.props.className, !visible && "".concat(rootClassName, "__wrapper--invisible"), !searchable && "".concat(rootClassName, "__wrapper--non-searchable"));
          var value = this.getValue() || "";
          var valueLength = value != null && value.length;
          var size = valueLength ? valueLength + 1 : 1;
          var inputStyle = {};
          if (size === 1 && valueLength === 0) {
            inputStyle.width = 1;
          }
          if (maxWidth) {
            inputStyle.maxWidth = maxWidth;
          }
          return _react.default.createElement("span", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(this.props, TextInput2.propTypes)), {}, {
            onClick,
            className
          }), _react.default.createElement("input", {
            style: inputStyle,
            className: rootClassName,
            ref: function ref(_ref) {
              return _this3.inputNode = _ref;
            },
            type: "text",
            value: value || "",
            onChange: this.handleChange,
            onClick: this.onClick,
            tabIndex: this.props.tabIndex,
            onMouseDown: this.handleMouseDown,
            size
          }), !value && this.renderPlaceholder());
        }
      }, {
        key: "renderPlaceholder",
        value: function renderPlaceholder() {
          var _this4 = this;
          if (!this.props.placeholder) {
            return null;
          }
          var placeholderProps = {
            className: "".concat(this.props.rootClassName, "__placeholder")
          };
          return _react.default.createElement("span", _objectSpread(_objectSpread({}, placeholderProps), {}, {
            ref: function ref(_ref2) {
              return _this4.placeholderNode = _ref2;
            }
          }), this.props.placeholder);
        }
      }, {
        key: "getValue",
        value: function getValue() {
          var value = this.props.throttle ? this.state.value : this.props.value;
          return value;
        }
      }, {
        key: "focus",
        value: function focus() {
          if (this.inputNode && this.inputNode.focus) {
            this.inputNode.focus();
          }
        }
      }, {
        key: "blur",
        value: function blur() {
          if (this.inputNode && this.inputNode.blur) {
            this.inputNode.blur();
          }
        }
      }, {
        key: "hasFocus",
        value: function hasFocus() {
          var activeElement = globalObject && globalObject.document && globalObject.document.activeElement;
          return this.inputNode === activeElement;
        }
      }, {
        key: "handleChange",
        value: function handleChange(event2) {
          var value = event2.target.value;
          if (this.props.throttle) {
            this.setState({
              value
            });
            this.throttledUpdateValue(value);
          } else {
            this.updateValue(value);
          }
        }
      }, {
        key: "handleMouseDown",
        value: function handleMouseDown(event2) {
          event2.stopPropagation();
        }
      }, {
        key: "onClick",
        value: function onClick(event2) {
          event2.stopPropagation();
        }
      }, {
        key: "updateValue",
        value: function updateValue(value) {
          this.props.onChange(value);
        }
      }, {
        key: "selectForwardIfNecessary",
        value: function selectForwardIfNecessary() {
          var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props.value;
          if (!value || typeof value !== "string") {
            return null;
          }
          var suggestion = this.props.suggestion;
          if (typeof suggestion !== "string") {
            return null;
          }
          if (suggestion.toLowerCase().indexOf(value.toLowerCase()) === -1) {
            return null;
          }
          var firstPartLength = value.length;
          var inputNode = this.inputNode;
          this.inputNode.value = suggestion;
          this.inputNode.size = this.inputNode.value.length;
          this.inputNode.style.width = "auto";
          (0, _setInputSelection.default)(inputNode, firstPartLength, suggestion.length);
          return true;
        }
      }, {
        key: "getSelectionStart",
        value: function getSelectionStart() {
          return (0, _getSelectionStart2.default)(this.inputNode);
        }
      }, {
        key: "getSelectionEnd",
        value: function getSelectionEnd() {
          return (0, _getSelectionEnd2.default)(this.inputNode);
        }
      }, {
        key: "hasSelection",
        value: function hasSelection() {
          return this.getSelectionStart() !== this.getSelectionEnd();
        }
      }, {
        key: "isCursorAtStartPosition",
        value: function isCursorAtStartPosition() {
          return this.getSelectionStart() === 0;
        }
      }, {
        key: "isCursorAtEndPosition",
        value: function isCursorAtEndPosition() {
          var cursorLastPissiblePosition = this.props.value && this.props.value.length;
          return (0, _getCursorPosition.default)(this.inputNode) === cursorLastPissiblePosition;
        }
      }]);
      return TextInput2;
    }(_react.Component);
    function emptyFn() {
    }
    TextInput.defaultProps = {
      onChange: emptyFn,
      value: "",
      autocomplete: true
    };
    TextInput.propTypes = {
      rootClassName: _propTypes.default.string,
      value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.arrayOf(_propTypes.default.number)]),
      placeholder: _propTypes.default.node,
      onChange: _propTypes.default.func,
      maxWidth: _propTypes.default.number,
      throttle: _propTypes.default.number,
      tabIndex: _propTypes.default.number,
      autocomplete: _propTypes.default.bool,
      autocompleteDelay: _propTypes.default.number,
      visible: _propTypes.default.bool,
      suggestion: _propTypes.default.any,
      searchable: _propTypes.default.bool
    };
    var _default = TextInput;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/join.js
var require_join2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/join.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var notEmpty = function notEmpty2(x) {
      return !!x;
    };
    function _default() {
      return [].slice.call(arguments).filter(notEmpty).join(" ");
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getMinMaxSize.js
var require_getMinMaxSize = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getMinMaxSize.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    function getMinMaxSize(props2) {
      var sizeType;
      var single;
      var style = props2.style || {};
      var result = {};
      if (props2.minSize) {
        sizeType = (0, _typeof2.default)(props2.minSize);
        single = sizeType == "number" || sizeType == "string";
        if (single) {
          result.minWidth = props2.minSize;
          result.minHeight = props2.minSize;
        } else {
          if (props2.minSize.width) {
            result.minWidth = props2.minSize.width;
          }
          if (props2.minSize.height) {
            result.minHeight = props2.minSize.height;
          }
        }
      }
      if (props2.maxSize) {
        sizeType = (0, _typeof2.default)(props2.maxSize);
        single = sizeType == "number" || sizeType == "string";
        if (single) {
          result.maxWidth = props2.maxSize;
          result.maxHeight = props2.maxSize;
        } else {
          if (props2.maxSize.width) {
            result.maxWidth = props2.maxSize.width;
          }
          if (props2.maxSize.height) {
            result.maxHeight = props2.maxSize.height;
          }
        }
      }
      if (result.minWidth == void 0 && style.minWidth != void 0) {
        result.minWidth = style.minWidth;
      }
      if (result.maxWidth == void 0 && style.maxWidth != void 0) {
        result.maxWidth = style.maxWidth;
      }
      if (result.minHeight == void 0 && style.minHeight != void 0) {
        result.minHeight = style.minHeight;
      }
      if (result.maxHeight == void 0 && style.maxHeight != void 0) {
        result.maxHeight = style.maxHeight;
      }
      return result;
    }
    var _default = getMinMaxSize;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/Icons.js
var require_Icons = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/Icons.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CloseIcon = CloseIcon;
    exports.LoadingIcon = LoadingIcon;
    exports.ToggleIcon = ToggleIcon;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _excluded = ["size", "className", "svgProps"];
    var _excluded2 = ["onClick", "className", "expanded", "size"];
    var _excluded3 = ["size", "svgProps", "className"];
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function CloseIcon(_ref) {
      var _ref$size = _ref.size, size = _ref$size === void 0 ? 10 : _ref$size, className = _ref.className, svgProps = _ref.svgProps, rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, rest), {}, {
        className
      }), _react.default.createElement("svg", _objectSpread(_objectSpread({}, svgProps), {}, {
        width: size,
        height: size,
        viewBox: "0 0 10 10"
      }), _react.default.createElement("path", {
        fill: "none",
        fillRule: "evenodd",
        strokeLinecap: "round",
        strokeWidth: "1.33",
        d: "M1 1l8 8m0-8L1 9"
      })));
    }
    CloseIcon.propTypes = {
      className: _propTypes.default.string,
      size: _propTypes.default.number
    };
    function ToggleIcon(_ref2) {
      var onClick = _ref2.onClick, className = _ref2.className, expanded = _ref2.expanded, _ref2$size = _ref2.size, size = _ref2$size === void 0 ? 10 : _ref2$size, rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, rest), {}, {
        className,
        onClick
      }), _react.default.createElement("svg", {
        width: size,
        height: size / 2,
        viewBox: "0 0 10 5"
      }, expanded ? _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M5.262.262l4.106 4.106c.144.144.144.379 0 .524-.07.069-.164.108-.262.108H.894c-.204 0-.37-.166-.37-.37 0-.099.039-.193.108-.262L4.738.262c.145-.145.38-.145.524 0z"
      }) : _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M4.738 4.738L.632.632C.488.488.488.253.632.108.702.04.796 0 .894 0h8.212c.204 0 .37.166.37.37 0 .099-.039.193-.108.262L5.262 4.738c-.145.145-.38.145-.524 0z"
      })));
    }
    function LoadingIcon(_ref3) {
      var _ref3$size = _ref3.size, size = _ref3$size === void 0 ? 17 : _ref3$size, _ref3$svgProps = _ref3.svgProps, svgProps = _ref3$svgProps === void 0 ? {} : _ref3$svgProps, className = _ref3.className, rest = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, rest), {}, {
        className
      }), _react.default.createElement("svg", _objectSpread(_objectSpread({}, svgProps), {}, {
        width: size,
        height: size,
        viewBox: "0 0 24 24"
      }), _react.default.createElement("path", {
        d: "M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"
      })));
    }
    LoadingIcon.propTypes = {
      size: _propTypes.default.number
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/Tag.js
var require_Tag = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/Tag.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof3 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _join = _interopRequireDefault(require_join2());
    var _getMinMaxSize = _interopRequireDefault(require_getMinMaxSize());
    var _Icons = require_Icons();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Tag = function(_Component) {
      (0, _inherits2.default)(Tag2, _Component);
      var _super = _createSuper(Tag2);
      function Tag2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, Tag2);
        _this = _super.call(this, props2);
        _this.handleOnClose = _this.handleOnClose.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleOnMultipleClose = _this.handleOnMultipleClose.bind((0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(Tag2, [{
        key: "render",
        value: function render() {
          var props2 = this.props;
          var item = props2.item, index2 = props2.index, items = props2.items, rootClassName = props2.rootClassName, closeIconPosition = props2.closeIconPosition, _onClick = props2.onClick, active = props2.active, multiple = props2.multiple, renderTag = props2.renderTag, isMultiple = props2.isMultiple;
          var className = this.getClassName({
            active
          });
          var labelClassName = "".concat(rootClassName, "__label");
          var style = this.getStyle();
          var closeIcon = this.renderCloseIcon();
          var label = this.renderLabel();
          var domProps = _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, Tag2.propTypes)), {}, {
            key: "tag_".concat(index2),
            style,
            className,
            onMouseDown: function onMouseDown(event2) {
              event2.preventDefault();
            },
            onClick: function onClick(event2) {
              event2.stopPropagation();
              _onClick(item.id);
            },
            children: [closeIconPosition === "start" && closeIcon, _react.default.createElement("span", {
              key: "tag_label",
              className: labelClassName
            }, label), closeIconPosition === "end" && closeIcon]
          });
          var result;
          if (typeof renderTag === "function") {
            result = renderTag({
              domProps,
              item,
              index: index2,
              items,
              isMultiple,
              props: props2
            });
          }
          if (result === void 0) {
            return _react.default.createElement("div", _objectSpread({}, domProps));
          }
          return result || null;
        }
      }, {
        key: "getClassName",
        value: function getClassName(_ref) {
          var active = _ref.active;
          var _this$props = this.props, rootClassName = _this$props.rootClassName, ellipsis = _this$props.ellipsis, isMultiple = _this$props.isMultiple;
          var className = (0, _join.default)(rootClassName, active && "".concat(rootClassName, "--active"), ellipsis && "".concat(rootClassName, "--ellipsis"), isMultiple && "".concat(rootClassName, "--multiple"));
          return className;
        }
      }, {
        key: "getStyle",
        value: function getStyle() {
          var props2 = this.props;
          var border = props2.border, padding = props2.padding, height = props2.height, width = props2.width, maxWidth = props2.maxWidth, activeStyle = props2.activeStyle, active = props2.active;
          var minMaxSize = (0, _getMinMaxSize.default)(props2);
          var style = _objectSpread(_objectSpread({}, props2.style), minMaxSize);
          if (border) {
            style.border = border;
          }
          if (padding) {
            style.padding = padding;
          }
          if (width) {
            style.width = width;
          }
          if (height) {
            style.height = height;
          }
          if (maxWidth) {
            style.maxWidth = maxWidth;
          }
          if (active && activeStyle) {
            style = _objectSpread(_objectSpread({}, style), activeStyle);
          }
          return style;
        }
      }, {
        key: "renderLabel",
        value: function renderLabel() {
          var _this$props2 = this.props, index2 = _this$props2.index, maxTagsLength = _this$props2.maxTagsLength, renderTagLabel = _this$props2.renderTagLabel, items = _this$props2.items, item = _this$props2.item, isMultiple = _this$props2.isMultiple;
          var label = item.label;
          if (isMultiple) {
            if (item.length === 1) {
              label = item[0].label;
            } else {
              label = items.length === item.length ? "".concat(item.length, " item").concat(item.length ? "s" : "", " selected") : "and other ".concat(item.length, " selected");
            }
          }
          if (renderTagLabel) {
            return renderTagLabel({
              label,
              item,
              items,
              count: items.length,
              index: index2,
              isMultiple,
              maxTagsLength,
              combined: isMultiple
            });
          }
          return label;
        }
      }, {
        key: "renderCloseIcon",
        value: function renderCloseIcon() {
          var _this$props3 = this.props, closeIcon = _this$props3.closeIcon, rootClassName = _this$props3.rootClassName, isMultiple = _this$props3.isMultiple, item = _this$props3.item;
          var closeClassName = "".concat(rootClassName, "__clear-icon");
          if (!closeIcon) {
            return null;
          }
          var closeIconProps = {
            key: "close_icon",
            onClick: isMultiple ? this.handleOnMultipleClose : this.handleOnClose,
            className: closeClassName
          };
          var closeIconEl = closeIcon;
          if (typeof closeIcon === "function") {
            var closeIconParams = {
              item,
              onDeselect: closeIconProps.onClick,
              domProps: closeIconProps
            };
            closeIconEl = closeIcon(closeIconParams);
          } else {
            if (closeIcon && (0, _typeof2.default)(closeIcon) == "object") {
              closeIconEl = (0, _react.cloneElement)(closeIcon, {
                className: (0, _join.default)(closeIcon.props && closeIcon.props.className, closeIconProps.className),
                onClick: closeIcon.props && closeIcon.props.onClick ? function(event2) {
                  closeIcon.props.onClick(event2);
                  closeIconProps.onClick(event2);
                } : closeIconProps.onClick
              });
            }
          }
          if (closeIconEl === true || closeIconEl === void 0) {
            closeIconEl = _react.default.createElement(_Icons.CloseIcon, _objectSpread({}, closeIconProps));
          }
          return closeIconEl;
        }
      }, {
        key: "handleOnMultipleClose",
        value: function handleOnMultipleClose() {
          var ids = this.props.item.map(function(item) {
            return item.id;
          });
          this.props.onMultipleTagClose(ids);
        }
      }, {
        key: "handleOnClose",
        value: function handleOnClose(event2) {
          var _this$props4 = this.props, onCloseTagClick = _this$props4.onCloseTagClick, item = _this$props4.item;
          event2.preventDefault();
          event2.stopPropagation();
          var id = item.id;
          onCloseTagClick(id);
        }
      }]);
      return Tag2;
    }(_react.Component);
    Tag.displayName = "Tag";
    function emptyFn() {
    }
    Tag.defaultProps = {
      onCloseTagClick: emptyFn,
      onMultipleTagClose: emptyFn,
      onClick: emptyFn,
      closeIconPosition: "end",
      item: {},
      ellipsis: true,
      closeIcon: true
    };
    Tag.propTypes = {
      active: _propTypes.default.bool,
      renderTag: _propTypes.default.func,
      renderTagLabel: _propTypes.default.func,
      index: _propTypes.default.number,
      onCloseTagClick: _propTypes.default.func,
      onMultipleTagClose: _propTypes.default.func,
      closeIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node, _propTypes.default.func]),
      closeIconPosition: _propTypes.default.oneOf(["start", "end"]),
      isRemaining: _propTypes.default.bool,
      onClick: _propTypes.default.func,
      item: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
      items: _propTypes.default.array,
      isMultiple: _propTypes.default.bool,
      rootClassName: _propTypes.default.string,
      tags: _propTypes.default.array,
      border: _propTypes.default.string,
      visibleItems: _propTypes.default.array,
      activeStyle: _propTypes.default.object,
      padding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      minSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
        height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      })]),
      maxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
        height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      })]),
      maxWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      maxTagsLength: _propTypes.default.number,
      ellipsis: _propTypes.default.bool
    };
    var _default = Tag;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/Value.js
var require_Value = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/Value.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _join = _interopRequireDefault(require_join2());
    var _ComboBox = require_ComboBox();
    var _Tag = _interopRequireDefault(require_Tag());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Value = function(_Component) {
      (0, _inherits2.default)(Value2, _Component);
      var _super = _createSuper(Value2);
      function Value2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, Value2);
        _this = _super.call(this, props2);
        _this.state = {
          size: null
        };
        return _this;
      }
      (0, _createClass2.default)(Value2, [{
        key: "render",
        value: function render() {
          var props2 = this.props;
          var value = props2.value, multiple = props2.multiple, rootClassName = props2.rootClassName, toolsSize = props2.toolsSize, focus = props2.focus, rtl = props2.rtl, searchable = props2.searchable, wrapMultiple = props2.wrapMultiple, label = props2.label;
          var showTags = value != null && multiple;
          var style = _objectSpread({}, props2.style);
          if (toolsSize) {
            style.maxWidth = "calc(100% - ".concat(toolsSize.width, "px)");
          }
          var className = (0, _join.default)(rootClassName, wrapMultiple ? "".concat(rootClassName, "--wrap") : "".concat(rootClassName, "--no-wrap"), "".concat(rootClassName, "--").concat(rtl ? "rtl" : "ltr"));
          var isDisplayValueVisible = !showTags && !focus;
          if (!showTags && !searchable) {
            isDisplayValueVisible = true;
          }
          if (value == null) {
            isDisplayValueVisible = false;
          }
          var displayValue = isDisplayValueVisible ? this.renderDisplayValue() : null;
          return _react.default.createElement("div", {
            className,
            style
          }, showTags && this.renderTags(), displayValue, this.renderTextInput({
            isDisplayValueVisible: displayValue
          }));
        }
      }, {
        key: "renderTextInput",
        value: function renderTextInput(_ref) {
          var isDisplayValueVisible = _ref.isDisplayValueVisible;
          var textInput = this.props.textInput;
          if (!textInput) {
            return null;
          }
          if (textInput.type !== "input") {
            return _react.default.cloneElement(textInput, _objectSpread(_objectSpread({}, textInput.props), {}, {
              visible: !isDisplayValueVisible && this.props.searchable
            }));
          }
          return textInput;
        }
      }, {
        key: "renderDisplayValue",
        value: function renderDisplayValue() {
          var _this$props = this.props, rootClassName = _this$props.rootClassName, label = _this$props.label, renderDisplayValue2 = _this$props.renderDisplayValue;
          var domProps = {
            className: "".concat(rootClassName, "__display-value"),
            children: label
          };
          var result = null;
          if (typeof renderDisplayValue2 === "function") {
            result = renderDisplayValue2({
              domProps,
              label
            });
          }
          if (result == null) {
            result = _react.default.createElement("div", _objectSpread({}, domProps));
          }
          return result;
        }
      }, {
        key: "renderTags",
        value: function renderTags() {
          var _this2 = this;
          var _this$props2 = this.props, renderTags2 = _this$props2.renderTags, value = _this$props2.value, items = _this$props2.items, groupedItems = _this$props2.groupedItems;
          if (!items) {
            return null;
          }
          var remainingItems;
          var visibleItems;
          if (groupedItems) {
            remainingItems = groupedItems.remainingItems;
            visibleItems = groupedItems.visibleItems;
          } else {
            visibleItems = items;
          }
          var remainingTags = remainingItems && this.renderTag(remainingItems, this.props.maxTagsLength, {
            visibleItems
          });
          var visibleTags = visibleItems && visibleItems.map(function(item, index2) {
            return _this2.renderTag(item, index2);
          });
          var tags = [].concat((0, _toConsumableArray2.default)(visibleTags), [remainingTags]);
          if (typeof renderTags2 === "function") {
            tags = renderTags2({
              tags,
              items,
              value,
              visibleItems,
              remainingItems
            });
          }
          return tags;
        }
      }, {
        key: "renderTag",
        value: function renderTag(item, index2) {
          var config = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var items = this.props.items;
          if (!item) {
            return null;
          }
          var _this$props3 = this.props, rootClassName = _this$props3.rootClassName, renderTag2 = _this$props3.renderTag, activeTag = _this$props3.activeTag, maxTagsLength = _this$props3.maxTagsLength, renderTagLabel = _this$props3.renderTagLabel, renderRemainingTags = _this$props3.renderRemainingTags;
          var tagRootClassName = "".concat(rootClassName, "__tag");
          var isMultiple = Array.isArray(item);
          var active = isMultiple ? activeTag === _ComboBox.REMAINING_ITEMS : activeTag === item.id;
          var tagProps = _objectSpread(_objectSpread(_objectSpread({
            item,
            items,
            active,
            isMultiple,
            renderTagLabel,
            maxTagsLength,
            index: index2,
            renderTag: renderTag2
          }, config), this.props.tagProps), {}, {
            rootClassName: tagRootClassName,
            key: index2
          });
          var tag;
          if (isMultiple && typeof renderRemainingTags === "function") {
            tag = renderRemainingTags({
              remainingItems: item,
              visibleItems: config.visibleItems,
              domProps: tagProps
            });
          }
          if (tag === void 0) {
            tag = _react.default.createElement(_Tag.default, _objectSpread({}, tagProps));
          }
          return tag;
        }
      }]);
      return Value2;
    }(_react.Component);
    Value.defaultProps = {
      tagProps: {},
      groupedItems: null,
      items: []
    };
    var VALUE_TYPE = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool]))]);
    Value.propTypes = {
      size: _propTypes.default.shape({
        width: _propTypes.default.number,
        height: _propTypes.default.number
      }),
      focus: _propTypes.default.bool,
      items: _propTypes.default.array,
      item: _propTypes.default.object,
      groupedItems: _propTypes.default.shape({
        visibleItems: _propTypes.default.array,
        remainingItems: _propTypes.default.array
      }),
      renderTag: _propTypes.default.func,
      renderRemainingTags: _propTypes.default.func,
      renderTags: _propTypes.default.func,
      renderTagLabel: _propTypes.default.func,
      tagProps: _propTypes.default.object,
      maxTagsLength: _propTypes.default.number,
      rootClassName: _propTypes.default.string,
      multiple: _propTypes.default.bool,
      textInput: _propTypes.default.node,
      value: VALUE_TYPE
    };
    var _default = Value;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/ClearButton.js
var require_ClearButton = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/ClearButton.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _Icons = require_Icons();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var ClearButton = function ClearButton2(_ref) {
      var onClear = _ref.onClear, className = _ref.className, closeIcon = _ref.closeIcon, size = _ref.size;
      var closeIconProps = {
        className,
        size,
        onClick: function onClick(event2) {
          event2.preventDefault();
          event2.stopPropagation();
          onClear();
        }
      };
      var closeIconEl;
      if (closeIcon && closeIcon !== true) {
        var closeIconParams = {
          onClear,
          domProps: closeIconProps
        };
        closeIconEl = typeof closeIcon === "function" ? closeIcon(closeIconParams) : closeIcon;
      }
      if (closeIconEl === void 0) {
        closeIconEl = _react.default.createElement(_Icons.CloseIcon, _objectSpread({}, closeIconProps));
      }
      return closeIconEl;
    };
    ClearButton.defaultProps = {
      size: 10
    };
    var _default = ClearButton;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/ToggleButton.js
var require_ToggleButton = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/ToggleButton.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _Icons = require_Icons();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var ToggleButton = function ToggleButton2(_ref) {
      var onToggle = _ref.onToggle, className = _ref.className, toggleIcon = _ref.toggleIcon, size = _ref.size, expanded = _ref.expanded;
      var toggleIconProps = {
        className,
        size,
        expanded,
        onClick: function onClick(event2) {
          event2.preventDefault();
          onToggle();
        }
      };
      var toggleButtonEl;
      if (toggleIcon) {
        var params = {
          onToggle,
          expanded,
          domProps: toggleIconProps
        };
        toggleButtonEl = typeof toggleIcon === "function" ? toggleIcon(params) : toggleIcon;
      }
      if (toggleButtonEl === true || toggleButtonEl == void 0) {
        toggleButtonEl = _react.default.createElement(_Icons.ToggleIcon, _objectSpread({}, toggleIconProps));
      }
      return toggleButtonEl;
    };
    ToggleButton.defaultProps = {
      size: 10
    };
    ToggleButton.propTypes = {
      expanded: _propTypes.default.bool,
      size: _propTypes.default.number
    };
    var _default = ToggleButton;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/assign.js
var require_assign = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/assign.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.assign = assign;
    exports.default = void 0;
    function assign(target) {
      if (target === null || target === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      for (var _len = arguments.length, to = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        to[_key - 1] = arguments[_key];
      }
      to.forEach(function(toItem) {
        toItem = Object(toItem);
        Object.keys(toItem).forEach(function(key) {
          target[key] = toItem[key];
        });
      });
      return target;
    }
    var _default = typeof Object.assign === "function" ? Object.assign : assign;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/separateEvents.js
var require_separateEvents = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/separateEvents.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    function separateEvents(_ref) {
      var showEvent = _ref.showEvent, hideEvent = _ref.hideEvent;
      if (!Array.isArray(showEvent) || !Array.isArray(hideEvent)) {
        return {};
      }
      var normalizedShowEvents = (0, _toConsumableArray2.default)(showEvent);
      var normalizedHideEvents = (0, _toConsumableArray2.default)(hideEvent);
      var toggleEvents = [];
      normalizedShowEvents.forEach(function(eventName, index2) {
        var searchIndex = normalizedHideEvents.indexOf(eventName);
        if (searchIndex !== -1) {
          toggleEvents.push(eventName);
          delete normalizedShowEvents[index2];
          delete normalizedHideEvents[searchIndex];
        }
      });
      normalizedShowEvents = normalizedShowEvents.filter(function(eventName) {
        return eventName;
      });
      normalizedHideEvents = normalizedHideEvents.filter(function(eventName) {
        return eventName;
      });
      return {
        normalizedShowEvents,
        normalizedHideEvents,
        toggleEvents
      };
    }
    var _default = separateEvents;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/registerEvents.js
var require_registerEvents = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/registerEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.registerListeners = registerListeners;
    exports.unregisterListeners = unregisterListeners;
    function registerListeners(_ref) {
      var events = _ref.events, action = _ref.action;
      events.forEach(function(eventName) {
        if (eventName === "mouseenter" || eventName === "mouseleave" || eventName === "scroll") {
          document.addEventListener(eventName, action, {
            capture: true
          });
        } else {
          document.addEventListener(eventName, action);
        }
      });
    }
    function unregisterListeners(_ref2) {
      var events = _ref2.events, action = _ref2.action;
      events.forEach(function(eventName) {
        if (eventName === "mouseenter" || eventName === "mouseleave" || eventName === "scroll") {
          document.removeEventListener(eventName, action, {
            capture: true
          });
        } else {
          document.removeEventListener(eventName, action);
        }
      });
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/common/matchesSelector.js
var require_matchesSelector = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/matchesSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var proto = globalObject && globalObject.Element ? Element.prototype : {
      matches: function matches() {
        return false;
      }
    };
    var vendor = proto.matches || proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;
    var _default = match;
    exports.default = _default;
    function match(el, selector) {
      if (vendor) return vendor.call(el, selector);
      var nodes = el.parentNode.querySelectorAll(selector);
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i] == el) return true;
      }
      return false;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/matchesTarget.js
var require_matchesTarget = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/matchesTarget.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _matchesSelector = _interopRequireDefault(require_matchesSelector());
    var _containsNode = _interopRequireDefault(require_containsNode());
    function matchesTarget(target, node) {
      if (node === document) {
        return null;
      }
      if (target === node) {
        return true;
      }
      if (typeof target === "string" && (0, _matchesSelector.default)(node, target)) {
        return true;
      }
      if ((0, _containsNode.default)(target, node)) {
        return true;
      }
      return false;
    }
    var _default = matchesTarget;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/generateHandlers.js
var require_generateHandlers = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/generateHandlers.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createHideHandler = createHideHandler;
    exports.createShowHandler = createShowHandler;
    exports.createToggleHandler = createToggleHandler;
    var _matchesTarget = _interopRequireDefault(require_matchesTarget());
    var _assign = _interopRequireDefault(require_assign());
    function createShowHandler(_ref) {
      var action = _ref.action, target = _ref.target, getDelay = _ref.getDelay, timeoutState = _ref.timeoutState;
      return function(event2) {
        var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var delay = getDelay && getDelay();
        if (config.target) {
          event2 = (0, _assign.default)({}, event2, {
            target: config.target
          });
        }
        var node = event2.target;
        if (!(0, _matchesTarget.default)(target, node)) {
          return null;
        }
        var activeTargetNode = timeoutState.targetThatTriggeredEvent;
        timeoutState.targetThatTriggeredEvent = node;
        if (timeoutState.hideId) {
          clearTimeout(timeoutState.hideId);
          timeoutState.hideId = null;
        }
        if (delay) {
          if (timeoutState.showId && activeTargetNode === node) {
            return null;
          }
          if (timeoutState.showId) {
            clearTimeout(timeoutState.showId);
          }
          timeoutState.showId = setTimeout(function() {
            timeoutState.showId = null;
            action(event2);
          }, delay);
        } else {
          action(event2);
        }
      };
    }
    function createHideHandler(_ref2) {
      var action = _ref2.action, target = _ref2.target, getDelay = _ref2.getDelay, timeoutState = _ref2.timeoutState;
      return function(event2) {
        var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var delay = getDelay && getDelay();
        if (config.target) {
          event2 = (0, _assign.default)({}, event2, {
            target: config.target
          });
        }
        var node = event2.target;
        if (config.target !== null) {
          if (!(0, _matchesTarget.default)(target, node)) {
            return null;
          }
        }
        var activeTargetNode = timeoutState.targetThatTriggeredEvent;
        timeoutState.targetThatTriggeredEvent = node;
        if (activeTargetNode === node && timeoutState.showId) {
          clearTimeout(timeoutState.showId);
          timeoutState.showId = null;
        }
        if (delay) {
          if (timeoutState.hideId && activeTargetNode === node) {
            return null;
          }
          timeoutState.hideId = setTimeout(function() {
            timeoutState.hideId = null;
            action(event2);
          }, delay);
        } else {
          action(event2);
        }
      };
    }
    function createToggleHandler(_ref3) {
      var onHide = _ref3.onHide, onShow = _ref3.onShow, target = _ref3.target, getActiveTargetNode = _ref3.getActiveTargetNode, getVisible = _ref3.getVisible;
      return function(event2) {
        var activeTargetNode = getActiveTargetNode();
        var node = event2.target;
        if (!(0, _matchesTarget.default)(target, node)) {
          return null;
        }
        if (getVisible() && node === activeTargetNode) {
          onHide(event2);
        } else {
          onShow(event2);
        }
      };
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/createHideOnClickOutsideAction.js
var require_createHideOnClickOutsideAction = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/createHideOnClickOutsideAction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function createHideOnClickOutsideAction(_ref) {
      var getOverlayNode = _ref.getOverlayNode, getActiveTargetNode = _ref.getActiveTargetNode, onHide = _ref.onHide;
      return function(event2) {
        var node = event2.target;
        var activeTargetNode = getActiveTargetNode();
        var overlayNode = getOverlayNode();
        if (!activeTargetNode || !overlayNode) {
          return null;
        }
        if (overlayNode !== node && !overlayNode.contains(node) && activeTargetNode !== node && !activeTargetNode.contains(node)) {
          onHide(event2, {
            target: null
          });
        }
      };
    }
    var _default = createHideOnClickOutsideAction;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/eventManager.js
var require_eventManager = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/eventManager.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _separateEvents2 = _interopRequireDefault(require_separateEvents());
    var _registerEvents = require_registerEvents();
    var _generateHandlers = require_generateHandlers();
    var _createHideOnClickOutsideAction = _interopRequireDefault(require_createHideOnClickOutsideAction());
    function eventManager(config) {
      var _config$showEvent = config.showEvent, showEvent = _config$showEvent === void 0 ? [] : _config$showEvent, _config$hideEvent = config.hideEvent, hideEvent = _config$hideEvent === void 0 ? [] : _config$hideEvent, target = config.target, hideOnScroll = config.hideOnScroll, hideOnClickOutside = config.hideOnClickOutside, hideOnEscape = config.hideOnEscape, onShow = config.onShow, onHide = config.onHide, getShowDelay = config.getShowDelay, getHideDelay = config.getHideDelay, getVisible = config.getVisible, _config$getOverlayNod = config.getOverlayNode, getOverlayNode = _config$getOverlayNod === void 0 ? function() {
      } : _config$getOverlayNod, getActiveTargetNode = config.getActiveTargetNode;
      var timeoutState = {
        showId: null,
        hideId: null,
        targetThatTriggeredEvent: null
      };
      var _separateEvents = (0, _separateEvents2.default)({
        showEvent,
        hideEvent
      }), normalizedShowEvents = _separateEvents.normalizedShowEvents, normalizedHideEvents = _separateEvents.normalizedHideEvents, toggleEvents = _separateEvents.toggleEvents;
      var showAction = (0, _generateHandlers.createShowHandler)({
        timeoutState,
        target,
        getActiveTargetNode,
        action: onShow,
        getDelay: getShowDelay
      });
      if (normalizedShowEvents && onShow) {
        (0, _registerEvents.registerListeners)({
          events: normalizedShowEvents,
          action: showAction
        });
      }
      var hideAction = (0, _generateHandlers.createHideHandler)({
        timeoutState,
        target,
        getActiveTargetNode,
        action: onHide,
        getDelay: getHideDelay
      });
      if (normalizedHideEvents && onHide) {
        (0, _registerEvents.registerListeners)({
          events: normalizedHideEvents,
          action: hideAction
        });
      }
      var toggleAction;
      if (toggleEvents.length) {
        toggleAction = (0, _generateHandlers.createToggleHandler)({
          target,
          getActiveTargetNode,
          getVisible,
          onHide: hideAction,
          onShow: showAction
        });
        (0, _registerEvents.registerListeners)({
          events: toggleEvents,
          action: toggleAction
        });
      }
      var hideOnClickOutsideAction;
      if (hideOnClickOutside) {
        hideOnClickOutsideAction = (0, _createHideOnClickOutsideAction.default)({
          getOverlayNode,
          getActiveTargetNode,
          onHide: hideAction
        });
        (0, _registerEvents.registerListeners)({
          events: ["click"],
          action: hideOnClickOutsideAction
        });
      }
      var hideOnScrollAction;
      if (hideOnScroll) {
        hideOnScrollAction = function hideOnScrollAction2(event2) {
          if (getVisible()) {
            hideAction(event2, {
              target: null
            });
          }
        };
        (0, _registerEvents.registerListeners)({
          events: ["scroll"],
          action: hideOnScrollAction
        });
      }
      var hideOnEscapeAction;
      if (hideOnEscape) {
        hideOnEscapeAction = function hideOnEscapeAction2(event2) {
          if (getVisible() && event2.key === "Escape") {
            hideAction(event2, {
              target: null
            });
          }
        };
        (0, _registerEvents.registerListeners)({
          events: ["keydown"],
          action: hideOnEscapeAction
        });
      }
      var handleOverlayShowAction;
      var handleOverlayHideAction;
      if (normalizedHideEvents.indexOf("mouseleave") !== -1) {
        handleOverlayShowAction = function handleOverlayShowAction2(event2) {
          if (event2.target === getOverlayNode()) {
            var activeTargetNode = getActiveTargetNode();
            showAction(event2, {
              target: activeTargetNode
            });
          }
        };
        (0, _registerEvents.registerListeners)({
          events: ["mouseenter"],
          action: handleOverlayShowAction
        });
        handleOverlayHideAction = function handleOverlayHideAction2(event2) {
          if (event2.target === getOverlayNode()) {
            var activeTargetNode = getActiveTargetNode();
            hideAction(event2, {
              target: activeTargetNode
            });
          }
        };
        (0, _registerEvents.registerListeners)({
          events: ["mouseleave"],
          action: handleOverlayHideAction
        });
      }
      return {
        unregister: function unregister() {
          if (normalizedShowEvents && showAction) {
            (0, _registerEvents.unregisterListeners)({
              events: normalizedShowEvents,
              action: showAction
            });
          }
          if (normalizedHideEvents && hideAction) {
            (0, _registerEvents.unregisterListeners)({
              events: normalizedHideEvents,
              action: hideAction
            });
          }
          if (toggleEvents && toggleAction) {
            (0, _registerEvents.unregisterListeners)({
              events: toggleEvents,
              action: toggleAction
            });
          }
          if (hideOnClickOutsideAction) {
            (0, _registerEvents.unregisterListeners)({
              events: ["click"],
              action: hideOnClickOutsideAction
            });
          }
          if (hideOnScrollAction) {
            (0, _registerEvents.unregisterListeners)({
              events: ["scroll"],
              action: hideOnScrollAction
            });
          }
          if (handleOverlayShowAction) {
            (0, _registerEvents.unregisterListeners)({
              events: ["mouseenter"],
              action: handleOverlayShowAction
            });
          }
          if (handleOverlayHideAction) {
            (0, _registerEvents.unregisterListeners)({
              events: ["mouseleave"],
              action: handleOverlayHideAction
            });
          }
          if (hideOnEscapeAction) {
            (0, _registerEvents.unregisterListeners)({
              events: ["keydown"],
              action: hideOnEscapeAction
            });
          }
        }
      };
    }
    var _default = eventManager;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/index.js
var require_eventManager2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/eventManager/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _eventManager = _interopRequireDefault(require_eventManager());
    var _default = _eventManager.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/getMinMaxSize.js
var require_getMinMaxSize2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/getMinMaxSize.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    function getMinMaxSize(props2) {
      var sizeType;
      var single;
      var style = props2.style || {};
      var result = {};
      if (props2.minSize) {
        sizeType = (0, _typeof2.default)(props2.minSize);
        single = sizeType == "number" || sizeType == "string";
        if (single) {
          result.minWidth = props2.minSize;
          result.minHeight = props2.minSize;
        } else {
          if (props2.minSize.width) {
            result.minWidth = props2.minSize.width;
          }
          if (props2.minSize.height) {
            result.minHeight = props2.minSize.height;
          }
        }
      }
      if (props2.maxSize) {
        sizeType = (0, _typeof2.default)(props2.maxSize);
        single = sizeType == "number" || sizeType == "string";
        if (single) {
          result.maxWidth = props2.maxSize;
          result.maxHeight = props2.maxSize;
        } else {
          if (props2.maxSize.width) {
            result.maxWidth = props2.maxSize.width;
          }
          if (props2.maxSize.height) {
            result.maxHeight = props2.maxSize.height;
          }
        }
      }
      if (result.minWidth == void 0 && style.minWidth != void 0) {
        result.minWidth = style.minWidth;
      }
      if (result.maxWidth == void 0 && style.maxWidth != void 0) {
        result.maxWidth = style.maxWidth;
      }
      if (result.minHeight == void 0 && style.minHeight != void 0) {
        result.minHeight = style.minHeight;
      }
      if (result.maxHeight == void 0 && style.maxHeight != void 0) {
        result.maxHeight = style.maxHeight;
      }
      return result;
    }
    var _default = getMinMaxSize;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/join.js
var require_join3 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/join.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _join = _interopRequireDefault(require_join());
    var _default = _join.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/shallowequal/index.js
var require_shallowequal2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/shallowequal/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = equal;
    exports.equalReturnKey = equalReturnKey;
    var keyList = Object.keys;
    var EMPTY_OBJECT = {};
    function equal(a, b) {
      var except = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : EMPTY_OBJECT;
      if (a === b) return true;
      if (!(a instanceof Object) || !(b instanceof Object)) return false;
      var keys = keyList(a);
      var length = keys.length;
      var key;
      for (var i = 0; i < length; i++) {
        key = keys[i];
        if (except[key]) {
          continue;
        }
        if (!(key in b)) return false;
      }
      for (var i = 0; i < length; i++) {
        key = keys[i];
        if (except[key]) {
          continue;
        }
        if (a[key] !== b[key]) return false;
      }
      return length === keyList(b).length;
    }
    function equalReturnKey(a, b) {
      var except = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : EMPTY_OBJECT;
      if (a === b) return {
        result: true,
        key: void 0
      };
      if (!(a instanceof Object) || !(b instanceof Object)) return {
        result: false,
        key: void 0
      };
      var keys = keyList(a);
      var length = keys.length;
      var key;
      for (var i = 0; i < length; i++) {
        key = keys[i];
        if (except[key]) {
          continue;
        }
        if (!(key in b)) return {
          result: false,
          key
        };
      }
      for (var i = 0; i < length; i++) {
        key = keys[i];
        if (except[key]) {
          continue;
        }
        if (a[key] !== b[key]) return {
          result: false,
          key
        };
      }
      return {
        result: length === keyList(b).length,
        key: void 0
      };
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/shouldComponentUpdate/index.js
var require_shouldComponentUpdate = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/shouldComponentUpdate/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _shallowequal = _interopRequireDefault(require_shallowequal2());
    var _default = function _default2(inst, nextProps, nextState) {
      var props2 = inst.props;
      var state = inst.state;
      if (nextProps.shouldComponentUpdate) {
        return nextProps.shouldComponentUpdate({
          nextProps,
          props: props2,
          nextState,
          state
        });
      }
      return !(0, _shallowequal.default)(nextProps, props2) || !(0, _shallowequal.default)(nextState, state);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/shouldComponentUpdate.js
var require_shouldComponentUpdate2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/shouldComponentUpdate.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get() {
        return _shouldComponentUpdate.default;
      }
    });
    var _shouldComponentUpdate = _interopRequireDefault(require_shouldComponentUpdate());
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/shouldComponentUpdate.js
var require_shouldComponentUpdate3 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/shouldComponentUpdate.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _shouldComponentUpdate = _interopRequireDefault(require_shouldComponentUpdate2());
    var _default = _shouldComponentUpdate.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/normalizeEvent.js
var require_normalizeEvent = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/normalizeEvent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function normalizeEvent(events) {
      return Array.isArray(events) ? events : [events];
    }
    var _default = normalizeEvent;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/getFocusableElements/index.js
var require_getFocusableElements = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/getFocusableElements/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var focusableSelector = "input, select, textarea, button, object, a[href], [tabindex]";
    var _default = function _default2(node) {
      if (!node) {
        return null;
      }
      var nodes = (0, _toConsumableArray2.default)(node.querySelectorAll(focusableSelector));
      nodes = nodes.filter(function(el) {
        return !!el.offsetParent;
      });
      return nodes;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getFocusableElements.js
var require_getFocusableElements2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getFocusableElements.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get() {
        return _getFocusableElements.default;
      }
    });
    var _getFocusableElements = _interopRequireDefault(require_getFocusableElements());
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/getFocusableElements.js
var require_getFocusableElements3 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/utils/getFocusableElements.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getFocusableElements = _interopRequireDefault(require_getFocusableElements2());
    var _default = _getFocusableElements.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/positionsMap.js
var require_positionsMap = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/positionsMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.posiblePositions = exports.default = void 0;
    var positionMap = {
      top: {
        alias: "top",
        position: "bc-tc",
        offset: {
          x: 1,
          y: -1,
          resetNumeric: "x"
        }
      },
      "bc-tc": {
        alias: "top",
        position: "bc-tc",
        offset: {
          x: 1,
          y: -1,
          resetNumeric: "x"
        }
      },
      "bl-tl": {
        alias: "topAlignedLeft",
        position: "bl-tl",
        offset: {
          x: 1,
          y: -1,
          resetNumeric: "x"
        }
      },
      "br-tr": {
        alias: "topAlignedRight",
        position: "br-tr",
        offset: {
          x: 1,
          y: -1,
          resetNumeric: "x"
        }
      },
      "br-tl": {
        alias: "topLeft",
        position: "br-tl",
        offset: {
          x: -1,
          y: -1
        }
      },
      right: {
        position: "lc-rc",
        alias: "right",
        offset: {
          x: 1,
          y: 1,
          resetNumeric: "y"
        }
      },
      "lc-rc": {
        position: "lc-rc",
        alias: "right",
        offset: {
          x: 1,
          y: 1,
          resetNumeric: "y"
        }
      },
      "tl-tr": {
        position: "tl-tr",
        alias: "rightAlignedTop",
        offset: {
          x: 1,
          y: 1,
          resetNumeric: "y"
        }
      },
      "bl-br": {
        position: "bl-br",
        alias: "rightAlignedBottom",
        offset: {
          x: 1,
          y: 1,
          resetNumeric: "y"
        }
      },
      "tl-br": {
        position: "tl-br",
        alias: "bottomRight",
        offset: {
          x: 1,
          y: 1
        }
      },
      bottom: {
        position: "tc-bc",
        alias: "bottom",
        offset: {
          x: 1,
          y: 1,
          resetNumeric: "x"
        }
      },
      "tc-bc": {
        position: "tc-bc",
        alias: "bottom",
        offset: {
          x: 1,
          y: 1,
          resetNumeric: "x"
        }
      },
      "tl-bl": {
        position: "tl-bl",
        alias: "bottomAlinedLeft",
        offset: {
          x: 1,
          y: 1,
          resetNumeric: "x"
        }
      },
      "tr-br": {
        position: "tr-br",
        alias: "bottomAlignedRight",
        offset: {
          x: 1,
          y: 1,
          resetNumeric: "x"
        }
      },
      "tr-tr": {
        position: "tr-tr",
        offset: {
          x: 1,
          y: -1
        }
      },
      "tr-bl": {
        position: "tr-bl",
        alias: "bottomLeft",
        offset: {
          x: -1,
          y: 1
        }
      },
      left: {
        position: "rc-lc",
        alias: "left",
        offset: {
          x: -1,
          y: 1,
          resetNumeric: "y"
        }
      },
      "rc-lc": {
        position: "rc-lc",
        alias: "left",
        offset: {
          x: -1,
          y: 1,
          resetNumeric: "y"
        }
      },
      "tr-tl": {
        position: "tr-tl",
        alias: "leftAlignedTop",
        offset: {
          x: -1,
          y: 1,
          resetNumeric: "y"
        }
      },
      "br-bl": {
        position: "br-bl",
        alias: "leftAlignedBottom",
        offset: {
          x: -1,
          y: 1,
          resetNumeric: "y"
        }
      }
    };
    var posiblePositions = Object.keys(positionMap);
    exports.posiblePositions = posiblePositions;
    var _default = positionMap;
    exports.default = _default;
  }
});

// node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js
var require_isNativeReflectConstruct = __commonJS({
  "node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js"(exports, module) {
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    }
    module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/construct.js
var require_construct = __commonJS({
  "node_modules/@babel/runtime/helpers/construct.js"(exports, module) {
    var isNativeReflectConstruct = require_isNativeReflectConstruct();
    var setPrototypeOf = require_setPrototypeOf();
    function _construct(t, e, r) {
      if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
      var o = [null];
      o.push.apply(o, e);
      var p = new (t.bind.apply(t, o))();
      return r && setPrototypeOf(p, r.prototype), p;
    }
    module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/hasOwn/index.js
var require_hasOwn = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/hasOwn/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var hasOwn = Object.prototype.hasOwnProperty;
    function curry(fn, n) {
      if (typeof n !== "number") {
        n = fn.length;
      }
      function getCurryClosure(prevArgs) {
        function curryClosure() {
          var len = arguments.length;
          var args = [].concat(prevArgs);
          if (len) {
            args.push.apply(args, arguments);
          }
          if (args.length < n) {
            return getCurryClosure(args);
          }
          return fn.apply(this, args);
        }
        return curryClosure;
      }
      return getCurryClosure([]);
    }
    var _default = curry(function(object, property) {
      return hasOwn.call(object, property);
    });
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region/src/validate.js
var require_validate = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region/src/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = validate;
    function validate(region) {
      var isValid = true;
      if (region.right < region.left) {
        isValid = false;
        region.right = region.left;
      }
      if (region.bottom < region.top) {
        isValid = false;
        region.bottom = region.top;
      }
      return isValid;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region/src/statics.js
var require_statics = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region/src/statics.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _hasOwn = _interopRequireDefault(require_hasOwn());
    var _validate = _interopRequireDefault(require_validate());
    function _default(REGION) {
      var MAX = Math.max;
      var MIN = Math.min;
      var statics = {
        init: function init() {
          var exportAsNonStatic = {
            getIntersection: true,
            getIntersectionArea: true,
            getIntersectionHeight: true,
            getIntersectionWidth: true,
            getUnion: true
          };
          var thisProto = REGION.prototype;
          var newName;
          var exportHasOwn = (0, _hasOwn.default)(exportAsNonStatic);
          var methodName;
          for (methodName in exportAsNonStatic) if (exportHasOwn(methodName)) {
            newName = exportAsNonStatic[methodName];
            if (typeof newName != "string") {
              newName = methodName;
            }
            (function(proto, methodName2, protoMethodName) {
              proto[methodName2] = function(region) {
                if (!REGION[protoMethodName]) {
                  console.warn("cannot find method ", protoMethodName, " on ", REGION);
                }
                return REGION[protoMethodName](this, region);
              };
            })(thisProto, newName, methodName);
          }
        },
        validate: _validate.default,
        getDocRegion: function getDocRegion() {
          return REGION.fromDOM(document.documentElement);
        },
        from: function from(reg) {
          if (!reg) {
            return;
          }
          if (reg.__IS_REGION) {
            return reg;
          }
          if (typeof document != "undefined") {
            if (reg && reg.getBoundingClientRect) {
              return REGION.fromDOM(reg);
            }
            if (reg.type && typeof reg.pageX !== "undefined" && typeof reg.pageY !== "undefined") {
              return REGION.fromEvent(reg);
            }
          }
          return REGION(reg);
        },
        fromEvent: function fromEvent(event2) {
          return REGION.fromPoint({
            x: event2.pageX,
            y: event2.pageY
          });
        },
        fromDOM: function fromDOM(dom) {
          var rect = dom.getBoundingClientRect();
          return new REGION({
            top: rect.top,
            left: rect.left,
            bottom: rect.bottom,
            right: rect.right
          });
        },
        getIntersection: function getIntersection(first, second) {
          var area = this.getIntersectionArea(first, second);
          if (area) {
            return new REGION(area);
          }
          return false;
        },
        getIntersectionWidth: function getIntersectionWidth(first, second) {
          var minRight = MIN(first.right, second.right);
          var maxLeft = MAX(first.left, second.left);
          if (maxLeft < minRight) {
            return minRight - maxLeft;
          }
          return 0;
        },
        getIntersectionHeight: function getIntersectionHeight(first, second) {
          var maxTop = MAX(first.top, second.top);
          var minBottom = MIN(first.bottom, second.bottom);
          if (maxTop < minBottom) {
            return minBottom - maxTop;
          }
          return 0;
        },
        getIntersectionArea: function getIntersectionArea(first, second) {
          var maxTop = MAX(first.top, second.top);
          var minRight = MIN(first.right, second.right);
          var minBottom = MIN(first.bottom, second.bottom);
          var maxLeft = MAX(first.left, second.left);
          if (maxTop < minBottom && maxLeft < minRight) {
            return {
              top: maxTop,
              right: minRight,
              bottom: minBottom,
              left: maxLeft,
              width: minRight - maxLeft,
              height: minBottom - maxTop
            };
          }
          return false;
        },
        getUnion: function getUnion(first, second) {
          var top = MIN(first.top, second.top);
          var right = MAX(first.right, second.right);
          var bottom = MAX(first.bottom, second.bottom);
          var left = MIN(first.left, second.left);
          return new REGION(top, right, bottom, left);
        },
        getRegion: function getRegion(reg) {
          return REGION.from(reg);
        },
        fromPoint: function fromPoint(xy) {
          return new REGION({
            top: xy.y,
            bottom: xy.y,
            left: xy.x,
            right: xy.x
          });
        }
      };
      Object.keys(statics).forEach(function(key) {
        REGION[key] = statics[key];
      });
      REGION.init();
    }
  }
});

// node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__) prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event2, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event2 : event2;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0) return names;
      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter.prototype.listeners = function listeners(event2) {
      var evt = prefix ? prefix + event2 : event2, handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter.prototype.listenerCount = function listenerCount(event2) {
      var evt = prefix ? prefix + event2 : event2, listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter.prototype.emit = function emit(event2, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event2 : event2;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event2, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event2, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter.prototype.on = function on(event2, fn, context) {
      return addListener(this, event2, fn, context, false);
    };
    EventEmitter.prototype.once = function once(event2, fn, context) {
      return addListener(this, event2, fn, context, true);
    };
    EventEmitter.prototype.removeListener = function removeListener(event2, fn, context, once) {
      var evt = prefix ? prefix + event2 : event2;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event2) {
      var evt;
      if (event2) {
        evt = prefix ? prefix + event2 : event2;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    EventEmitter.prefixed = prefix;
    EventEmitter.EventEmitter = EventEmitter;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region/src/inherits.js
var require_inherits2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region/src/inherits.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    function _default(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region/src/index.js
var require_src3 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _construct2 = _interopRequireDefault(require_construct());
    var _hasOwn = _interopRequireDefault(require_hasOwn());
    var _statics = _interopRequireDefault(require_statics());
    var _eventemitter = _interopRequireDefault(require_eventemitter3());
    var _inherits = _interopRequireDefault(require_inherits2());
    var _validate = _interopRequireDefault(require_validate());
    var objectToString = Object.prototype.toString;
    var isObject = function isObject2(value) {
      return objectToString.apply(value) === "[object Object]";
    };
    function copyList(source, target, list) {
      if (source) {
        list.forEach(function(key) {
          if ((0, _hasOwn.default)(source, key)) {
            target[key] = source[key];
          }
        });
      }
      return target;
    }
    var POINT_POSITIONS = {
      cy: "YCenter",
      cx: "XCenter",
      t: "Top",
      tc: "TopCenter",
      tl: "TopLeft",
      tr: "TopRight",
      b: "Bottom",
      bc: "BottomCenter",
      bl: "BottomLeft",
      br: "BottomRight",
      l: "Left",
      lc: "LeftCenter",
      r: "Right",
      rc: "RightCenter",
      c: "Center"
    };
    var REGION = function REGION2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var top = args[0], right = args[1], bottom = args[2], left = args[3];
      if (!(this instanceof REGION2)) {
        return (0, _construct2.default)(REGION2, args);
      }
      _eventemitter.default.call(this);
      if (isObject(top)) {
        copyList(top, this, ["top", "right", "bottom", "left"]);
        if (top.bottom == null && top.height != null) {
          this.bottom = this.top + top.height;
        }
        if (top.right == null && top.width != null) {
          this.right = this.left + top.width;
        }
        if (this.right == null) {
          this.right = this.left;
        }
        if (this.bottom == null) {
          this.bottom = this.top;
        }
        if (top.emitChangeEvents) {
          this.emitChangeEvents = top.emitChangeEvents;
        }
      } else {
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
      }
      this[0] = this.left;
      this[1] = this.top;
      (0, _validate.default)(this);
    };
    (0, _inherits.default)(REGION, _eventemitter.default);
    Object.assign(REGION.prototype, {
      emitChangeEvents: false,
      getRegion: function getRegion(clone) {
        return clone ? this.clone() : this;
      },
      setRegion: function setRegion(reg) {
        if (reg instanceof REGION) {
          this.set(reg.get());
        } else {
          this.set(reg);
        }
        return this;
      },
      validate: function validate() {
        return REGION.validate(this);
      },
      _before: function _before() {
        if (this.emitChangeEvents) {
          return copyList(this, {}, ["left", "top", "bottom", "right"]);
        }
      },
      _after: function _after(before) {
        if (this.emitChangeEvents) {
          if (this.top != before.top || this.left != before.left) {
            this.emitPositionChange();
          }
          if (this.right != before.right || this.bottom != before.bottom) {
            this.emitSizeChange();
          }
        }
      },
      notifyPositionChange: function notifyPositionChange() {
        this.emit("changeposition", this);
      },
      emitPositionChange: function emitPositionChange() {
        this.notifyPositionChange();
      },
      notifySizeChange: function notifySizeChange() {
        this.emit("changesize", this);
      },
      emitSizeChange: function emitSizeChange() {
        this.notifySizeChange();
      },
      add: function add(directions) {
        var before = this._before();
        var direction;
        for (direction in directions) if ((0, _hasOwn.default)(directions, direction)) {
          this[direction] += directions[direction];
        }
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      substract: function substract(directions) {
        var before = this._before();
        var direction;
        for (direction in directions) if ((0, _hasOwn.default)(directions, direction)) {
          this[direction] -= directions[direction];
        }
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      getSize: function getSize() {
        return {
          width: this.width,
          height: this.height
        };
      },
      setPosition: function setPosition(position) {
        var width = this.width;
        var height = this.height;
        if (position.left != void 0) {
          position.right = position.left + width;
        }
        if (position.top != void 0) {
          position.bottom = position.top + height;
        }
        return this.set(position);
      },
      setSize: function setSize(size) {
        if (size.height != void 0 && size.width != void 0) {
          return this.set({
            right: this.left + size.width,
            bottom: this.top + size.height
          });
        }
        if (size.width != void 0) {
          this.setWidth(size.width);
        }
        if (size.height != void 0) {
          this.setHeight(size.height);
        }
        return this;
      },
      setWidth: function setWidth(width) {
        return this.set({
          right: this.left + width
        });
      },
      setHeight: function setHeight(height) {
        return this.set({
          bottom: this.top + height
        });
      },
      set: function set(directions) {
        var before = this._before();
        copyList(directions, this, ["left", "top", "bottom", "right"]);
        if (directions.bottom == null && directions.height != null) {
          this.bottom = this.top + directions.height;
        }
        if (directions.right == null && directions.width != null) {
          this.right = this.left + directions.width;
        }
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      get: function get(dir) {
        return dir ? this[dir] : copyList(this, {}, ["left", "right", "top", "bottom"]);
      },
      shift: function shift(directions) {
        var before = this._before();
        if (directions.top) {
          this.top += directions.top;
          this.bottom += directions.top;
        }
        if (directions.left) {
          this.left += directions.left;
          this.right += directions.left;
        }
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      unshift: function unshift(directions) {
        if (directions.top) {
          directions.top *= -1;
        }
        if (directions.left) {
          directions.left *= -1;
        }
        return this.shift(directions);
      },
      equals: function equals(region) {
        return this.equalsPosition(region) && this.equalsSize(region);
      },
      equalsSize: function equalsSize(size) {
        var isInstance = size instanceof REGION;
        var s = {
          width: size.width == null && isInstance ? size.getWidth() : size.width,
          height: size.height == null && isInstance ? size.getHeight() : size.height
        };
        return this.getWidth() == s.width && this.getHeight() == s.height;
      },
      equalsPosition: function equalsPosition(region) {
        return this.top == region.top && this.left == region.left;
      },
      addLeft: function addLeft(left) {
        var before = this._before();
        this.left = this[0] = this.left + left;
        this._after(before);
        return this;
      },
      addTop: function addTop(top) {
        var before = this._before();
        this.top = this[1] = this.top + top;
        this._after(before);
        return this;
      },
      addBottom: function addBottom(bottom) {
        var before = this._before();
        this.bottom += bottom;
        this._after(before);
        return this;
      },
      addRight: function addRight(right) {
        var before = this._before();
        this.right += right;
        this._after(before);
        return this;
      },
      minTop: function minTop() {
        return this.expand({
          top: 1
        });
      },
      maxBottom: function maxBottom() {
        return this.expand({
          bottom: 1
        });
      },
      minLeft: function minLeft() {
        return this.expand({
          left: 1
        });
      },
      maxRight: function maxRight() {
        return this.expand({
          right: 1
        });
      },
      expand: function expand(directions, region) {
        var docRegion = region || REGION.getDocRegion();
        var list = [];
        var direction;
        var before = this._before();
        for (direction in directions) if ((0, _hasOwn.default)(directions, direction)) {
          list.push(direction);
        }
        copyList(docRegion, this, list);
        this[0] = this.left;
        this[1] = this.top;
        this._after(before);
        return this;
      },
      clone: function clone() {
        return new REGION({
          top: this.top,
          left: this.left,
          right: this.right,
          bottom: this.bottom
        });
      },
      containsPoint: function containsPoint(x, y) {
        if (arguments.length == 1) {
          y = x.y;
          x = x.x;
        }
        return this.left <= x && x <= this.right && this.top <= y && y <= this.bottom;
      },
      containsRegion: function containsRegion(region) {
        return this.containsPoint(region.left, region.top) && this.containsPoint(region.right, region.bottom);
      },
      diffHeight: function diffHeight(region) {
        return this.diff(region, {
          top: true,
          bottom: true
        });
      },
      diffWidth: function diffWidth(region) {
        return this.diff(region, {
          left: true,
          right: true
        });
      },
      diff: function diff(region, directions) {
        var result = {};
        var dirName;
        for (dirName in directions) if ((0, _hasOwn.default)(directions, dirName)) {
          result[dirName] = this[dirName] - region[dirName];
        }
        return result;
      },
      getPosition: function getPosition() {
        return {
          left: this.left,
          top: this.top
        };
      },
      getPoint: function getPoint(position, asLeftTop) {
        if (!POINT_POSITIONS[position]) {
          console.warn("The position ", position, " could not be found! Available options are tl, bl, tr, br, l, r, t, b.");
        }
        var method = "getPoint" + POINT_POSITIONS[position], result = this[method]();
        if (asLeftTop) {
          return {
            left: result.x,
            top: result.y
          };
        }
        return result;
      },
      getPointYCenter: function getPointYCenter() {
        return {
          x: null,
          y: this.top + this.getHeight() / 2
        };
      },
      getPointXCenter: function getPointXCenter() {
        return {
          x: this.left + this.getWidth() / 2,
          y: null
        };
      },
      getPointTop: function getPointTop() {
        return {
          x: null,
          y: this.top
        };
      },
      getPointTopCenter: function getPointTopCenter() {
        return {
          x: this.left + this.getWidth() / 2,
          y: this.top
        };
      },
      getPointTopLeft: function getPointTopLeft() {
        return {
          x: this.left,
          y: this.top
        };
      },
      getPointTopRight: function getPointTopRight() {
        return {
          x: this.right,
          y: this.top
        };
      },
      getPointBottom: function getPointBottom() {
        return {
          x: null,
          y: this.bottom
        };
      },
      getPointBottomCenter: function getPointBottomCenter() {
        return {
          x: this.left + this.getWidth() / 2,
          y: this.bottom
        };
      },
      getPointBottomLeft: function getPointBottomLeft() {
        return {
          x: this.left,
          y: this.bottom
        };
      },
      getPointBottomRight: function getPointBottomRight() {
        return {
          x: this.right,
          y: this.bottom
        };
      },
      getPointLeft: function getPointLeft() {
        return {
          x: this.left,
          y: null
        };
      },
      getPointLeftCenter: function getPointLeftCenter() {
        return {
          x: this.left,
          y: this.top + this.getHeight() / 2
        };
      },
      getPointRight: function getPointRight() {
        return {
          x: this.right,
          y: null
        };
      },
      getPointRightCenter: function getPointRightCenter() {
        return {
          x: this.right,
          y: this.top + this.getHeight() / 2
        };
      },
      getPointCenter: function getPointCenter() {
        return {
          x: this.left + this.getWidth() / 2,
          y: this.top + this.getHeight() / 2
        };
      },
      getHeight: function getHeight() {
        return this.bottom - this.top;
      },
      getWidth: function getWidth() {
        return this.right - this.left;
      },
      getTop: function getTop() {
        return this.top;
      },
      getLeft: function getLeft() {
        return this.left;
      },
      getBottom: function getBottom() {
        return this.bottom;
      },
      getRight: function getRight() {
        return this.right;
      },
      getArea: function getArea() {
        return this.getWidth() * this.getHeight();
      },
      constrainTo: function constrainTo(contrain) {
        var intersect = this.getIntersection(contrain);
        var shift;
        if (!intersect || !intersect.equals(this)) {
          var contrainWidth = contrain.getWidth(), contrainHeight = contrain.getHeight();
          if (this.getWidth() > contrainWidth) {
            this.left = contrain.left;
            this.setWidth(contrainWidth);
          }
          if (this.getHeight() > contrainHeight) {
            this.top = contrain.top;
            this.setHeight(contrainHeight);
          }
          shift = {};
          if (this.right > contrain.right) {
            shift.left = contrain.right - this.right;
          }
          if (this.bottom > contrain.bottom) {
            shift.top = contrain.bottom - this.bottom;
          }
          if (this.left < contrain.left) {
            shift.left = contrain.left - this.left;
          }
          if (this.top < contrain.top) {
            shift.top = contrain.top - this.top;
          }
          this.shift(shift);
          return true;
        }
        return false;
      },
      __IS_REGION: true
    });
    Object.defineProperties(REGION.prototype, {
      width: {
        get: function get() {
          return this.getWidth();
        },
        set: function set(width) {
          return this.setWidth(width);
        }
      },
      height: {
        get: function get() {
          return this.getHeight();
        },
        set: function set(height) {
          return this.setHeight(height);
        }
      }
    });
    (0, _statics.default)(REGION);
    var _default = REGION;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region/index.js
var require_region = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src3());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region-align/Region.static.js
var require_Region_static = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region-align/Region.static.js"() {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _region = _interopRequireDefault(require_region());
    _region.default.align = function(sourceRegion, targetRegion, align) {
      targetRegion = _region.default.from(targetRegion);
      align = (align || "c-c").split("-");
      if (align.length != 2) {
        console.warn("Incorrect region alignment! The align parameter need to be in the form 'br-c', that is, a - separated string!", align);
      }
      return _region.default.alignToPoint(sourceRegion, targetRegion.getPoint(align[1]), align[0]);
    };
    _region.default.alignToPoint = function(region, point, anchor) {
      region = _region.default.from(region);
      var sourcePoint = region.getPoint(anchor);
      var count = 0;
      var shiftObj = {};
      if (sourcePoint.x != null && point.x != null) {
        count++;
        shiftObj.left = point.x - sourcePoint.x;
      }
      if (sourcePoint.y != null && point.y != null) {
        count++;
        shiftObj.top = point.y - sourcePoint.y;
      }
      if (count) {
        region.shift(shiftObj);
      }
      return region;
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region-align/Region.proto.js
var require_Region_proto = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region-align/Region.proto.js"() {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _region = _interopRequireDefault(require_region());
    _region.default.prototype.alignToRegion = function(region, alignPositions) {
      _region.default.align(this, region, alignPositions);
      return this;
    };
    _region.default.prototype.alignToPoint = function(point, anchor) {
      _region.default.alignToPoint(this, point, anchor);
      return this;
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region-align/alignToNormalized.js
var require_alignToNormalized = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region-align/alignToNormalized.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _region = _interopRequireDefault(require_region());
    function ALIGN_TO_NORMALIZED(sourceRegion, targetRegion, positions, config) {
      targetRegion = _region.default.from(targetRegion);
      config = config || {};
      var constrainTo = config.constrain, syncOption = config.sync, offsets = config.offset || [], syncWidth = false, syncHeight = false, sourceClone = sourceRegion.clone();
      if (!Array.isArray(positions)) {
        positions = positions ? [positions] : [];
      }
      if (!Array.isArray(offsets)) {
        offsets = offsets ? [offsets] : [];
      }
      if (constrainTo) {
        constrainTo = constrainTo === true ? _region.default.getDocRegion() : constrainTo.getRegion();
      }
      if (syncOption) {
        if (syncOption.size) {
          syncWidth = true;
          syncHeight = true;
        } else {
          syncWidth = syncOption === true ? true : syncOption.width || false;
          syncHeight = syncOption === true ? true : syncOption.height || false;
        }
      }
      if (syncWidth) {
        sourceClone.setWidth(targetRegion.getWidth());
      }
      if (syncHeight) {
        sourceClone.setHeight(targetRegion.getHeight());
      }
      var offset, i = 0, len = positions.length, pos, intersection, itArea, maxArea = -1, maxAreaIndex = -1;
      for (; i < len; i++) {
        pos = positions[i];
        offset = offsets[i];
        sourceClone.alignToRegion(targetRegion, pos);
        if (offset) {
          if (!Array.isArray(offset)) {
            offset = offsets[i] = [offset.x || offset.left, offset.y || offset.top];
          }
          sourceClone.shift({
            left: offset[0],
            top: offset[1]
          });
        }
        if (constrainTo) {
          intersection = sourceClone.getIntersection(constrainTo);
          if (intersection && intersection.equals(sourceClone)) {
            sourceRegion.set(sourceClone);
            return pos;
          } else {
            if (intersection && (itArea = intersection.getArea()) > maxArea) {
              maxArea = itArea;
              maxAreaIndex = i;
            }
          }
        } else {
          sourceRegion.set(sourceClone);
          return pos;
        }
      }
      if (~maxAreaIndex) {
        pos = positions[maxAreaIndex];
        offset = offsets[maxAreaIndex];
        sourceClone.alignToRegion(targetRegion, pos);
        if (offset) {
          sourceClone.shift({
            left: offset[0],
            top: offset[1]
          });
        }
        intersection = sourceClone.getIntersection(constrainTo);
        sourceClone.setRegion(intersection);
        sourceClone.alignToRegion(targetRegion, pos);
        if (offset) {
          sourceClone.shift({
            left: offset[0],
            top: offset[1]
          });
        }
        sourceRegion.set(sourceClone);
        return pos;
      }
    }
    var _default = ALIGN_TO_NORMALIZED;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region-align/computeAlignRegion.js
var require_computeAlignRegion = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region-align/computeAlignRegion.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _region = _interopRequireDefault(require_region());
    var _alignToNormalized = _interopRequireDefault(require_alignToNormalized());
    function COMPUTE_ALIGN_REGION(sourceRegion, targetRegion, positions, config) {
      sourceRegion = _region.default.from(sourceRegion);
      var sourceClone = sourceRegion.clone();
      var position = (0, _alignToNormalized.default)(sourceClone, targetRegion, positions, config);
      return {
        position,
        region: sourceClone,
        widthChanged: sourceClone.getWidth() != sourceRegion.getWidth(),
        heightChanged: sourceClone.getHeight() != sourceRegion.getHeight(),
        positionChanged: sourceClone.equalsPosition(sourceRegion)
      };
    }
    var _default = COMPUTE_ALIGN_REGION;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/region-align/index.js
var require_region_align = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/region-align/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _region = _interopRequireDefault(require_region());
    require_Region_static();
    require_Region_proto();
    var _computeAlignRegion = _interopRequireDefault(require_computeAlignRegion());
    _region.default.alignRegions = function(sourceRegion, targetRegion, positions, config) {
      var result = (0, _computeAlignRegion.default)(sourceRegion, targetRegion, positions, config);
      var alignedRegion = result.region;
      if (!alignedRegion.equals(sourceRegion)) {
        sourceRegion.setRegion(alignedRegion);
      }
      return result.position;
    };
    _region.default.prototype.alignTo = function(target, positions, config) {
      config = config || {};
      var sourceRegion = this;
      var targetRegion = _region.default.from(target);
      var result = (0, _computeAlignRegion.default)(sourceRegion, targetRegion, positions, config);
      var resultRegion = result.region;
      if (!resultRegion.equalsSize(sourceRegion)) {
        this.setSize(resultRegion.getSize());
      }
      if (!resultRegion.equalsPosition(sourceRegion)) {
        this.setPosition(resultRegion.getPosition(), {
          absolute: !!config.absolute
        });
      }
      return result.position;
    };
    var _default = _region.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getPositionOffsets.js
var require_getPositionOffsets = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getPositionOffsets.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _positionsMap = _interopRequireDefault(require_positionsMap());
    function createEmptyArray(length, fn) {
      return Array.apply(null, Array(length)).map(fn);
    }
    function handleNumericOffset(offset, offsetCorrection) {
      var normalizedOffset = {
        x: offset * offsetCorrection.x,
        y: offset * offsetCorrection.y
      };
      if (offsetCorrection.resetNumeric) {
        normalizedOffset[offsetCorrection.resetNumeric] = 0;
      }
      return normalizedOffset;
    }
    function handleObjectOffset(offset, offsetCorrection) {
      var normalizedOffset = {
        x: offset.x === void 0 ? 0 : offset.x * offsetCorrection.x,
        y: offset.y === void 0 ? 0 : offset.y * offsetCorrection.y
      };
      return normalizedOffset;
    }
    function normalizeOffset(offset, positionsLength) {
      var normalizedOffsets = null;
      if (typeof offset === "number" || !Array.isArray(offset) && (0, _typeof2.default)(offset) === "object") {
        normalizedOffsets = createEmptyArray(positionsLength, function() {
          return offset;
        });
      } else if (Array.isArray(offset)) {
        if (offset.length < positionsLength) {
          var lastOffsetItem = offset[offset.length - 1];
          var extraOffsets = createEmptyArray(positionsLength - offset.length, function() {
            return lastOffsetItem;
          });
          normalizedOffsets = [].concat((0, _toConsumableArray2.default)(offset), (0, _toConsumableArray2.default)(extraOffsets));
        } else {
          normalizedOffsets = offset;
        }
      }
      return normalizedOffsets;
    }
    function getPositionOffsets(positions, offset) {
      var normalizedOffsets = normalizeOffset(offset, positions.length);
      var positionOffsets = normalizedOffsets.map(function(normalizedOffset, index2) {
        var position = positions[index2];
        var positionMap = _positionsMap.default[position];
        var offsetCorrection = positionMap ? positionMap.offset : position.offset || {
          x: 0,
          y: 0
        };
        if (typeof normalizedOffset === "number") {
          return handleNumericOffset(normalizedOffset, offsetCorrection);
        }
        return handleObjectOffset(normalizedOffset, offsetCorrection);
      });
      return positionOffsets;
    }
    var _default = getPositionOffsets;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getArrowPositionDirection.js
var require_getArrowPositionDirection = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getArrowPositionDirection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var topPositions = ["top", "bc-tc", "bl-tl", "br-tr"];
    var bottomPositions = ["bottom", "tc-bc", "tl-bl", "tr-br"];
    var rightPositions = ["right", "lc-rc", "tl-tr", "bl-br"];
    var leftPositions = ["left", "rc-lc", "tr-tl", "br-bl"];
    function isTopPosition(position) {
      return topPositions.indexOf(position) !== -1;
    }
    function isBottomPosition(position) {
      return bottomPositions.indexOf(position) !== -1;
    }
    function isLeftPosition(position) {
      return leftPositions.indexOf(position) !== -1;
    }
    function isRightPosition(position) {
      return rightPositions.indexOf(position) !== -1;
    }
    function getArrowPositionDirection(position) {
      var positionTest = {
        top: isTopPosition(position),
        bottom: isBottomPosition(position),
        right: isRightPosition(position),
        left: isLeftPosition(position)
      };
      return Object.keys(positionTest).filter(function(position2) {
        return !!positionTest[position2];
      })[0];
    }
    var _default = getArrowPositionDirection;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getArrowPosition.js
var require_getArrowPosition = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getArrowPosition.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getArrowPositionDirection = _interopRequireDefault(require_getArrowPositionDirection());
    var _clamp = _interopRequireDefault(require_clamp2());
    function getLeftPosition(overlayRegion, targetRegion) {
      return targetRegion.left - overlayRegion.left + targetRegion.width / 2;
    }
    function getTopPosition(overlayRegion, targetRegion) {
      return targetRegion.top - overlayRegion.top + targetRegion.height / 2;
    }
    function getArrowPosition(_ref) {
      var overlayRegion = _ref.overlayRegion, targetRegion = _ref.targetRegion, position = _ref.position, arrowSize = _ref.arrowSize;
      var arrowPosition = null;
      var positionDirection = (0, _getArrowPositionDirection.default)(position);
      var left = (0, _clamp.default)(getLeftPosition(overlayRegion, targetRegion), arrowSize / 2, overlayRegion.width - arrowSize / 2);
      var top = (0, _clamp.default)(getTopPosition(overlayRegion, targetRegion), arrowSize / 2, overlayRegion.height - arrowSize / 2);
      arrowPosition = {
        top: {
          position: {
            left,
            top: "calc(100% - 1px)"
          },
          location: "top"
        },
        bottom: {
          position: {
            left,
            bottom: "calc(100% - 1px)"
          },
          location: "bottom"
        },
        right: {
          position: {
            top,
            right: "calc(100% - 1px)"
          },
          location: "right"
        },
        left: {
          position: {
            top,
            left: "calc(100% - 1px)"
          },
          location: "left"
        }
      }[positionDirection];
      return arrowPosition;
    }
    var _default = getArrowPosition;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/selectParent.js
var require_selectParent = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/selectParent.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _matchesSelector = _interopRequireDefault(require_matchesSelector());
    function selectParent(selector, node) {
      node = node.parentElement;
      while (node) {
        if ((0, _matchesSelector.default)(node, selector)) {
          return node;
        }
        node = node.parentElement;
      }
      return false;
    }
    var _default = selectParent;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getViewportRegion.js
var require_getViewportRegion = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getViewportRegion.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _region = _interopRequireDefault(require_region());
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var CACHED;
    var LISTENING_WINDOW_RESIZE;
    var setupWindowResize = function setupWindowResize2() {
      LISTENING_WINDOW_RESIZE = true;
      globalObject.addEventListener("resize", function() {
        CACHED = null;
      });
    };
    function getViewportRegion() {
      if (CACHED) {
        return CACHED;
      }
      if (!LISTENING_WINDOW_RESIZE) {
        setupWindowResize();
      }
      var viewportWidth = Math.max(globalObject.document.documentElement.clientWidth, globalObject.innerWidth || 0);
      var viewportHeight = Math.max(globalObject.document.documentElement.clientHeight, globalObject.innerHeight || 0);
      return CACHED = _region.default.from({
        top: 0,
        left: 0,
        width: viewportWidth,
        height: viewportHeight
      });
    }
    var _default = getViewportRegion;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getConstrainRegion.js
var require_getConstrainRegion = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getConstrainRegion.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _regionAlign = _interopRequireDefault(require_region_align());
    var _selectParent = _interopRequireDefault(require_selectParent());
    var _getViewportRegion = _interopRequireDefault(require_getViewportRegion());
    function _default(constrainTo, domNode) {
      var constrainRegion;
      if (constrainTo === true) {
        constrainRegion = (0, _getViewportRegion.default)();
      }
      if (!constrainRegion && typeof constrainTo === "function") {
        constrainTo = _regionAlign.default.from(constrainTo(domNode));
      }
      if (!constrainRegion && typeof constrainTo === "string") {
        constrainTo = (0, _selectParent.default)(constrainTo, domNode);
      }
      if (!constrainRegion && constrainTo) {
        constrainRegion = _regionAlign.default.from(constrainTo);
      }
      return constrainRegion;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/isPositionBottom.js
var require_isPositionBottom = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/isPositionBottom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var bottomPositions = {
      "tl-br": true,
      "tc-bc": true,
      "tl-bl": true,
      "tr-br": true,
      "tr-bl": true
    };
    function isPositionBottom(position) {
      return !!bottomPositions[position];
    }
    var _default = isPositionBottom;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getPosition.js
var require_getPosition = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/getPosition.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regionAlign = _interopRequireDefault(require_region_align());
    var _assign = _interopRequireDefault(require_assign());
    var _getPositionOffsets = _interopRequireDefault(require_getPositionOffsets());
    var _positionsMap = _interopRequireDefault(require_positionsMap());
    var _getArrowPosition = _interopRequireDefault(require_getArrowPosition());
    var _getConstrainRegion = _interopRequireDefault(require_getConstrainRegion());
    var _isPositionBottom = _interopRequireDefault(require_isPositionBottom());
    var posiblePositions = Object.keys(_positionsMap.default);
    function getPosition(_ref) {
      var _ref$constrainTo = _ref.constrainTo, constrainTo = _ref$constrainTo === void 0 ? true : _ref$constrainTo, targetNode = _ref.targetNode, overlayNode = _ref.overlayNode, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? 0 : _ref$offset, _ref$positions = _ref.positions, positions = _ref$positions === void 0 ? posiblePositions : _ref$positions, _ref$relativeToViewpo = _ref.relativeToViewport, relativeToViewport = _ref$relativeToViewpo === void 0 ? true : _ref$relativeToViewpo, _ref$arrowSize = _ref.arrowSize, arrowSize = _ref$arrowSize === void 0 ? 10 : _ref$arrowSize, _ref$adjustOnPosition = _ref.adjustOnPositionBottom, adjustOnPositionBottom = _ref$adjustOnPosition === void 0 ? true : _ref$adjustOnPosition, _ref$showArrow = _ref.showArrow, showArrow = _ref$showArrow === void 0 ? true : _ref$showArrow;
      if (!constrainTo || !overlayNode || !targetNode) {
        return null;
      }
      var constrain = (0, _getConstrainRegion.default)(constrainTo, targetNode);
      var overlayRegion = _regionAlign.default.from(overlayNode);
      var alignRegion = _regionAlign.default.from(targetNode);
      var newRegion = overlayRegion.clone();
      var positionsNormalized = positions.map(function(position2) {
        var normalizedPosition;
        if (_positionsMap.default[position2]) {
          normalizedPosition = _positionsMap.default[position2].position;
        } else {
          normalizedPosition = position2.position || position2;
        }
        return normalizedPosition;
      });
      var positionsOffsets = (0, _getPositionOffsets.default)(positions, offset);
      var positionsOffsetsClone = positionsOffsets.map(function(offset2) {
        return (0, _assign.default)({}, offset2);
      });
      var succesfullPosition = newRegion.alignTo(alignRegion, positionsNormalized, {
        constrain,
        offset: positionsOffsetsClone
      });
      var constrainedWidth = newRegion.getWidth() != overlayRegion.getWidth();
      var constrainedHeight = newRegion.getHeight() != overlayRegion.getHeight();
      var arrowConfig = null;
      if (showArrow) {
        arrowConfig = (0, _getArrowPosition.default)({
          arrowSize,
          overlayRegion: newRegion,
          targetRegion: alignRegion,
          position: succesfullPosition
        });
      }
      var position = {
        top: newRegion.top,
        left: newRegion.left
      };
      if (!relativeToViewport && overlayNode.offsetParent) {
        var offsetParentRegion = _regionAlign.default.from(overlayNode.offsetParent);
        position.left -= offsetParentRegion.left;
        position.top -= offsetParentRegion.top;
      }
      if ((0, _isPositionBottom.default)(succesfullPosition) && adjustOnPositionBottom) {
        position.bottom = -(overlayRegion.height + (alignRegion.height - position.top));
        delete position.top;
      }
      return {
        alignRegion,
        constrainedHeight,
        constrainedWidth,
        constrained: constrainedHeight || constrainedWidth,
        positionRegion: newRegion,
        arrowConfig,
        position,
        succesfullPosition
      };
    }
    var _default = getPosition;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/index.js
var require_getPositionRelativeToElement = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getPositionRelativeToElement/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "positionsMap", {
      enumerable: true,
      get: function get() {
        return _positionsMap.default;
      }
    });
    var _positionsMap = _interopRequireDefault(require_positionsMap());
    var _getPosition = _interopRequireDefault(require_getPosition());
    var _default = _getPosition.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/Arrow.js
var require_Arrow = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/Arrow.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _assign = _interopRequireDefault(require_assign());
    function Arrow(props2) {
      var style = (0, _assign.default)({}, props2.style);
      var wrapperStyle = (0, _assign.default)({}, props2.position);
      var arrowSize = {
        height: props2.size,
        width: props2.size
      };
      (0, _assign.default)(style, arrowSize);
      var wrapperSize = 2 * (0.5 * props2.size * Math.pow(2, 0.5));
      if (wrapperSize) {
        wrapperStyle.width = wrapperSize;
        wrapperStyle.height = wrapperSize;
      }
      return _react.default.createElement("div", {
        className: props2.wrapperClassName,
        style: wrapperStyle
      }, _react.default.createElement("div", {
        className: props2.className,
        style
      }));
    }
    Arrow.propTypes = {
      className: _propTypes.default.string,
      style: _propTypes.default.object,
      size: _propTypes.default.number,
      position: _propTypes.default.shape({
        top: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        left: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      })
    };
    var _default = Arrow;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/Overlay.js
var require_Overlay = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/Overlay.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof3 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _assign = _interopRequireDefault(require_assign());
    var _eventManager = _interopRequireDefault(require_eventManager2());
    var _getMinMaxSize = _interopRequireDefault(require_getMinMaxSize2());
    var _join = _interopRequireDefault(require_join3());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate3());
    var _normalizeEvent = _interopRequireDefault(require_normalizeEvent());
    var _getFocusableElements = _interopRequireDefault(require_getFocusableElements3());
    var _getPositionRelativeToElement = _interopRequireDefault(require_getPositionRelativeToElement());
    var _Arrow = _interopRequireDefault(require_Arrow());
    var _positionsMap = require_positionsMap();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var InovuaOverlay = function(_Component) {
      (0, _inherits2.default)(InovuaOverlay2, _Component);
      var _super = _createSuper(InovuaOverlay2);
      function InovuaOverlay2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaOverlay2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps) {
          if (prevProps.visible !== _this.props.visible) {
            _this.handleVisibleChange(_this.props.visible);
          }
        });
        _this.state = {
          visible: props2.defaultVisible,
          position: null,
          arrowConfig: null,
          renderTrigger: null
        };
        _this.handleDocumentScroll = _this.handleDocumentScroll.bind((0, _assertThisInitialized2.default)(_this));
        _this.onHide = _this.onHide.bind((0, _assertThisInitialized2.default)(_this));
        _this.onShow = _this.onShow.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2.default)(_this));
        _this.getOverlayNode = _this.getOverlayNode.bind((0, _assertThisInitialized2.default)(_this));
        _this.getVisible = _this.getVisible.bind((0, _assertThisInitialized2.default)(_this));
        _this.getActiveTargetNode = _this.getActiveTargetNode.bind((0, _assertThisInitialized2.default)(_this));
        _this.rootRef = function(node) {
          _this.rootNode = node;
        };
        _this.fixedRef = function(node) {
          _this.fixedNode = node;
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaOverlay2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          this.register();
          this.componentIsMounted = true;
          if (this.props.updatePositionOnScroll) {
            window.addEventListener("scroll", this.handleDocumentScroll, true);
          }
          var doPosition = function doPosition2() {
            var target = _this2.getTarget();
            if ((0, _typeof2.default)(target) === "object") {
              _this2.activeTargetNode = target;
              _this2.setPosition(_this2.props.onInitialPosition);
              if (_this2.getVisible()) {
                _this2.onShow({
                  target
                });
              }
            }
          };
          if (this.props.rafOnMount) {
            requestAnimationFrame(doPosition);
          } else {
            doPosition();
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.unregister();
          this.componentIsMounted = null;
          this.activeTargetNode = null;
          if (this.props.updatePositionOnScroll) {
            window.removeEventListener("scroll", this.handleDocumentScroll, true);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var className = this.prepareClassName();
          var contentClassName = this.prepareContentClassName();
          var style = this.prepareStyle();
          var contentStyle = this.prepareContentStyle();
          return _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, InovuaOverlay2.propTypes)), {}, {
            className,
            ref: this.rootRef,
            style,
            onKeyDown: this.handleKeyDown
          }), _react.default.createElement("div", _objectSpread(_objectSpread({
            className: contentClassName
          }, this.getChildrenProps()), {}, {
            style: contentStyle
          })), props2.arrow && this.renderArrow(), props2.relativeToViewport && this.renderFixed());
        }
      }, {
        key: "renderFixed",
        value: function renderFixed() {
          return _react.default.createElement("div", {
            style: {
              position: "fixed",
              top: 0,
              left: 0,
              width: 0,
              height: 0
            },
            ref: this.fixedRef
          });
        }
      }, {
        key: "renderArrow",
        value: function renderArrow() {
          if (!this.state.arrowConfig) {
            return null;
          }
          var rootClassName = this.props.rootClassName;
          var position = this.state.arrowConfig.position;
          var location = this.state.arrowConfig.location;
          var className = (0, _join.default)("".concat(rootClassName, "__arrow"), "".concat(rootClassName, "__arrow--").concat(location), this.props.arrowClassName);
          var style = (0, _assign.default)({}, this.props.arrowStyle);
          if (this.props.border) {
            (0, _assign.default)(style, {
              border: this.props.border
            });
          }
          if (this.props.background != void 0) {
            (0, _assign.default)(style, {
              background: this.props.background
            });
          }
          var wrapperClassName = (0, _join.default)("".concat(rootClassName, "__arrow-wrapper"), "".concat(rootClassName, "__arrow-wrapper--").concat(location));
          return _react.default.createElement(_Arrow.default, {
            className,
            wrapperClassName,
            position,
            style,
            size: this.props.arrowSize
          });
        }
      }, {
        key: "getChildrenProps",
        value: function getChildrenProps() {
          var children = this.props.children;
          var targetNode = this.getPositionTarget();
          var childrenProps = {
            children
          };
          var childrenParams = {
            targetNode,
            visible: this.getVisible()
          };
          if (typeof children === "function") {
            return {
              children: children(childrenParams)
            };
          }
          if (children === void 0 && targetNode) {
            var tooltip = targetNode.getAttribute("data-tooltip");
            if (tooltip != null) {
              return {
                dangerouslySetInnerHTML: {
                  __html: tooltip
                }
              };
            }
          }
          return childrenProps;
        }
      }, {
        key: "prepareClassName",
        value: function prepareClassName() {
          var props2 = this.props, state = this.state;
          var rootClassName = props2.rootClassName, theme = props2.theme, visibleClassName = props2.visibleClassName, relativeToViewport = props2.relativeToViewport;
          var visible = this.getVisible();
          var className = (0, _join.default)(rootClassName, props2.className, visible && "".concat(rootClassName, "--visible"), visible && visibleClassName, !visible && "".concat(rootClassName, "--invisible"), relativeToViewport && "".concat(rootClassName, "--position-fixed"), theme && "".concat(rootClassName, "--theme-").concat(theme));
          if (this.props.fade) {
            className = (0, _join.default)(className, props2.fade && "".concat(rootClassName, "--has-transition"), state.transitionEnter && "".concat(rootClassName, "--transition-enter"), state.transitionEnterActive && "".concat(rootClassName, "--transition-enter-active"), state.transitionLeave && "".concat(rootClassName, "--transition-leave"), state.transitionLeaveActive && "".concat(rootClassName, "--transition-leave-active"));
          }
          return className;
        }
      }, {
        key: "prepareContentClassName",
        value: function prepareContentClassName() {
          return (0, _join.default)(this.props.contentClassName, "".concat(this.props.rootClassName, "__content"));
        }
      }, {
        key: "prepareStyle",
        value: function prepareStyle() {
          var style = (0, _assign.default)({
            zIndex: this.props.zIndex
          }, this.props.style);
          if (this.props.fade) {
            (0, _assign.default)(style, this.getTransitionStyle());
          }
          if (this.props.border) {
            (0, _assign.default)(style, {
              border: this.props.border
            });
          }
          if (this.state.position) {
            if (this.props.useTransform) {
              style.transform = "translate3d(".concat(Math.round(this.state.position.left || 0), "px, ").concat(Math.round(this.state.position.top || 0), "px, 0px)");
              style.left = 0;
              style.top = 0;
            } else {
              (0, _assign.default)(style, {
                left: Math.round(this.state.position.left)
              });
              if (this.state.position.top != null) {
                style.top = Math.round(this.state.position.top);
              }
            }
            if (this.state.position.bottom != null) {
              style.bottom = Math.round(this.state.position.bottom);
            }
            if (this.state.position.width) {
              style.width = this.state.position.width;
            }
          }
          return style;
        }
      }, {
        key: "prepareContentStyle",
        value: function prepareContentStyle() {
          var style = (0, _assign.default)({}, this.props.contentStyle);
          if (this.props.background != void 0) {
            (0, _assign.default)(style, {
              background: this.props.background
            });
          }
          if (this.props.padding != void 0) {
            (0, _assign.default)(style, {
              padding: this.props.padding
            });
          }
          if (this.props.height != void 0) {
            (0, _assign.default)(style, {
              height: this.props.height
            });
          }
          if (this.props.width != void 0) {
            (0, _assign.default)(style, {
              width: this.props.width
            });
          }
          var maxMinSize = (0, _getMinMaxSize.default)(this.props);
          (0, _assign.default)(style, maxMinSize);
          return style;
        }
      }, {
        key: "getTransitionStyle",
        value: function getTransitionStyle() {
          var state = this.state;
          var style = {};
          if (state.transitionEnterActive || state.transitionLeaveActive) {
            style.transitionDuration = state.transitionEnterActive ? "".concat(this.getFadeInDuration(), "ms") : "".concat(this.getFadeOutDuration(), "ms");
            style.transitionTimingFunction = state.transitionEnterActive ? this.getFadeInTransitionFunction() : this.getFadeOutTransitionFunction();
          }
          return style;
        }
      }, {
        key: "onShow",
        value: function onShow(event2) {
          var _this3 = this;
          this.activeTargetNode = event2.target;
          this.setState({
            renderTrigger: !this.state.renderTrigger
          }, function() {
            _this3.setPosition();
            _this3.setVisible(true);
          });
        }
      }, {
        key: "onHide",
        value: function onHide(event2) {
          this.setVisible(false);
        }
      }, {
        key: "register",
        value: function register() {
          var _this4 = this;
          this.eventManager = this.getEventManager()({
            showEvent: (0, _normalizeEvent.default)(this.props.showEvent),
            hideEvent: (0, _normalizeEvent.default)(this.props.hideEvent),
            target: this.getTarget(),
            hideOnScroll: this.props.hideOnScroll,
            hideOnClickOutside: this.props.hideOnClickOutside,
            hideOnEscape: this.props.hideOnEscape,
            onShow: this.onShow,
            onHide: this.onHide,
            getShowDelay: function getShowDelay() {
              return _this4.props.showDelay;
            },
            getHideDelay: function getHideDelay() {
              return _this4.props.hideDelay;
            },
            getVisible: this.getVisible,
            getOverlayNode: this.getOverlayNode,
            getActiveTargetNode: this.getActiveTargetNode
          });
        }
      }, {
        key: "unregister",
        value: function unregister() {
          if (this.eventManager) {
            this.eventManager.unregister();
          }
        }
      }, {
        key: "getEventManager",
        value: function getEventManager() {
          return this.props.eventManager;
        }
      }, {
        key: "getTarget",
        value: function getTarget() {
          var target;
          var rootNode = this.getOverlayNode();
          if (this.props.target) {
            target = this.props.target;
            if (typeof target === "function") {
              target = target(this.props, rootNode, this);
            }
          } else {
            if (rootNode) {
              target = rootNode.parentElement;
            }
          }
          return target;
        }
      }, {
        key: "setVisible",
        value: function setVisible(visible) {
          if (!this.isVisibleControlled()) {
            if (visible !== this.getVisible()) {
              this.handleVisibleChange(visible);
            }
            this.setState({
              visible
            });
          }
          if (visible) {
            this.props.onShow();
          } else {
            this.props.onHide();
          }
          this.props.onVisibleChange(visible);
        }
      }, {
        key: "isVisibleControlled",
        value: function isVisibleControlled() {
          return this.props.visible != null;
        }
      }, {
        key: "getVisible",
        value: function getVisible() {
          return this.isVisibleControlled() ? this.props.visible : this.state.visible;
        }
      }, {
        key: "setPosition",
        value: function setPosition(callback) {
          this.setState(this.getPositionConfig(), callback);
        }
      }, {
        key: "getPositionConfig",
        value: function getPositionConfig() {
          var _this$props = this.props, constrainTo = _this$props.constrainTo, offset = _this$props.offset, syncWidth = _this$props.syncWidth;
          var positions = this.props.positions;
          var targetNode = this.getPositionTarget();
          var tooltipPositions = targetNode ? targetNode.getAttribute("data-tooltip-positions") : null;
          if (tooltipPositions) {
            positions = tooltipPositions.split(",").map(function(position) {
              return position && position.trim ? position.trim() : position;
            });
          }
          var normalizedPositions = Array.isArray(positions) ? positions : [positions];
          var newState = (0, _getPositionRelativeToElement.default)({
            showArrow: true,
            constrainTo,
            offset,
            targetNode,
            overlayNode: this.getOverlayNode(),
            positions: normalizedPositions,
            adjustOnPositionBottom: this.props.adjustOnPositionBottom,
            relativeToViewport: this.props.relativeToViewport,
            arrowSize: this.props.arrowSize
          });
          if (this.props.relativeToViewport && this.fixedNode) {
            var fixedRect = this.fixedNode.getBoundingClientRect();
            if (newState && newState.position) {
              var useTransform = this.props.useTransform;
              newState.position = {
                top: newState.position.top - (useTransform ? 0 : fixedRect.top),
                left: newState.position.left - (useTransform ? 0 : fixedRect.left)
              };
              if (syncWidth) {
                newState.position.width = newState.alignRegion.width;
              }
            }
          }
          return newState;
        }
      }, {
        key: "handleDocumentScroll",
        value: function handleDocumentScroll() {
          if (this.props.updatePositionOnScroll) {
            this.updateDomPosition();
          }
        }
      }, {
        key: "updateDomPosition",
        value: function updateDomPosition() {
          var positionConfig = this.getPositionConfig();
          if (this.rootNode && positionConfig) {
            var newPosition = positionConfig.position;
            if (newPosition.bottom !== void 0) {
              this.rootNode.style.bottom = "".concat(newPosition.bottom, "px");
            }
            if (this.props.useTransform) {
              var oldPosition = this.state.position || {
                top: 0,
                left: 0
              };
              this.rootNode.style.transform = "translate3d(".concat(Math.round(newPosition.left || oldPosition.left), "px, ").concat(Math.round(newPosition.top || oldPosition.top), "px, 0px)");
            } else {
              if (newPosition.top !== void 0) {
                this.rootNode.style.top = "".concat(Math.round(newPosition.top), "px");
              }
              this.rootNode.style.left = "".concat(Math.round(newPosition.left), "px");
            }
          }
        }
      }, {
        key: "getOverlayNode",
        value: function getOverlayNode() {
          return this.rootNode;
        }
      }, {
        key: "getActiveTargetNode",
        value: function getActiveTargetNode() {
          return this.activeTargetNode;
        }
      }, {
        key: "getPositionTarget",
        value: function getPositionTarget() {
          var target = this.getTarget();
          if (target instanceof Element) {
            return target;
          }
          return this.getActiveTargetNode();
        }
      }, {
        key: "handleVisibleChange",
        value: function handleVisibleChange(visible) {
          if (!this.props.fade) {
            return null;
          }
          if (visible) {
            this.setupEnterTransition();
          } else {
            this.setupLeaveTransition();
          }
        }
      }, {
        key: "setupEnterTransition",
        value: function setupEnterTransition() {
          var _this5 = this;
          this.props.onFadeInStart();
          this.setState({
            transitionEnter: true,
            transitionEnterActive: false,
            transitionLeave: false,
            transitionLeaveActive: false
          }, function() {
            setTimeout(function() {
              if (_this5.componentIsMounted) {
                _this5.setState({
                  transitionEnterActive: true
                }, function() {
                  _this5.props.onFadeInEnd();
                });
              }
            }, 16);
          });
        }
      }, {
        key: "setupLeaveTransition",
        value: function setupLeaveTransition() {
          var _this6 = this;
          this.props.onFadeOutStart();
          this.setState({
            transitionLeave: true,
            transitionLeaveActive: false,
            transitionEnter: false,
            transitionEnterActive: false
          }, function() {
            setTimeout(function() {
              if (_this6.componentIsMounted) {
                _this6.setState({
                  transitionLeaveActive: true
                }, function() {
                  setTimeout(function() {
                    if (_this6.componentIsMounted) {
                      _this6.setState({
                        transitionLeave: false,
                        transitionLeaveActive: false
                      }, function() {
                        _this6.props.onFadeOutEnd();
                      });
                    }
                  }, _this6.getFadeOutDuration());
                });
              }
            }, 16);
          });
        }
      }, {
        key: "getFadeInDuration",
        value: function getFadeInDuration() {
          if (this.props.fadeInDuration) {
            return this.props.fadeInDuration;
          }
          return this.props.fadeDuration;
        }
      }, {
        key: "getFadeOutDuration",
        value: function getFadeOutDuration() {
          if (this.props.fadeOutDuration) {
            return this.props.fadeOutDuration;
          }
          return this.props.fadeDuration;
        }
      }, {
        key: "getFadeInTransitionFunction",
        value: function getFadeInTransitionFunction() {
          if (this.props.fadeInTransitionFunction) {
            return this.props.fadeInTransitionFunction;
          }
          return this.props.fadeTransitionFunction;
        }
      }, {
        key: "getFadeOutTransitionFunction",
        value: function getFadeOutTransitionFunction() {
          if (this.props.fadeOutTransitionFunction) {
            return this.props.fadeOutTransitionFunction;
          }
          return this.props.fadeTransitionFunction;
        }
      }, {
        key: "handleKeyDown",
        value: function handleKeyDown(event2) {
          if (this.props.captureTabNavigation && event2.key === "Tab") {
            this.captureTabNavigation(event2);
          }
          if (this.props.onKeyDown) {
            this.props.onKeyDown(event2);
          }
        }
      }, {
        key: "captureTabNavigation",
        value: function captureTabNavigation(event2) {
          var shiftKey = event2.shiftKey;
          var nodes = (0, _getFocusableElements.default)(this.rootNode);
          if (!nodes.length) {
            return null;
          }
          var firstNode = nodes[0];
          var lastNode = nodes[nodes.length - 1];
          if (lastNode === event2.target && !shiftKey) {
            firstNode.focus();
            event2.preventDefault();
            event2.stopPropagation();
          }
          if (firstNode === event2.target && shiftKey) {
            lastNode.focus();
            event2.preventDefault();
            event2.stopPropagation();
          }
        }
      }, {
        key: "show",
        value: function show() {
          this.setVisible(true);
        }
      }, {
        key: "hide",
        value: function hide() {
          this.setVisible(false);
        }
      }]);
      return InovuaOverlay2;
    }(_react.Component);
    var emptyFn = function emptyFn2() {
    };
    InovuaOverlay.defaultProps = {
      captureTabNavigation: false,
      updatePositionOnScroll: false,
      zIndex: 100,
      theme: "default",
      rootClassName: "inovua-react-toolkit-overlay",
      background: null,
      padding: null,
      eventManager: _eventManager.default,
      target: null,
      showEvent: ["mouseenter"],
      hideEvent: ["mouseleave"],
      defaultVisible: false,
      arrow: true,
      arrowStyle: {},
      arrowSize: 11,
      showDelay: null,
      hideDelay: null,
      hideOnClickOutside: true,
      hideOnScroll: false,
      fade: false,
      fadeDuration: 300,
      fadeInDuration: 300,
      fadeOutDuration: 50,
      fadeTransitionFunction: "ease",
      positions: _positionsMap.posiblePositions,
      constrainTo: true,
      offset: 10,
      rafOnMount: true,
      relativeToViewport: true,
      adjustOnPositionBottom: false,
      onVisibleChange: emptyFn,
      onShow: emptyFn,
      onHide: emptyFn,
      onFadeInStart: emptyFn,
      onFadeOutStart: emptyFn,
      onFadeInEnd: emptyFn,
      onFadeOutEnd: emptyFn
    };
    InovuaOverlay.propTypes = {
      shouldComponentUpdate: _propTypes.default.func,
      captureTabNavigation: _propTypes.default.bool,
      updatePositionOnScroll: _propTypes.default.bool,
      children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
      rootClassName: _propTypes.default.string,
      border: _propTypes.default.string,
      background: _propTypes.default.string,
      theme: _propTypes.default.string,
      zIndex: _propTypes.default.number,
      contentStyle: _propTypes.default.object,
      contentClassName: _propTypes.default.string,
      padding: _propTypes.default.number,
      height: _propTypes.default.number,
      width: _propTypes.default.number,
      minSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
        height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      })]),
      maxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
        height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      })]),
      arrow: _propTypes.default.bool,
      arrowClassName: _propTypes.default.string,
      arrowStyle: _propTypes.default.object,
      arrowSize: _propTypes.default.number,
      visible: _propTypes.default.bool,
      visibleClassName: _propTypes.default.string,
      defaultVisible: _propTypes.default.bool,
      target: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.func]),
      eventManager: _propTypes.default.func,
      showEvent: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.string]),
      hideEvent: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.string]),
      showDelay: _propTypes.default.number,
      hideDelay: _propTypes.default.number,
      hideOnClickOutside: _propTypes.default.bool,
      hideOnScroll: _propTypes.default.bool,
      hideOnEscape: _propTypes.default.bool,
      useTransform: _propTypes.default.bool,
      fade: _propTypes.default.bool,
      fadeDuration: _propTypes.default.number,
      fadeInDuration: _propTypes.default.number,
      fadeOutDuration: _propTypes.default.number,
      fadeTransitionFunction: _propTypes.default.string,
      fadeInTransitionFunction: _propTypes.default.string,
      fadeOutTransitionFunction: _propTypes.default.string,
      constrainTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.func, _propTypes.default.bool]),
      positions: function positions(props2, propName, componentName) {
        var positions2 = props2[propName];
        if (typeof positions2 === "string") {
          if (_positionsMap.posiblePositions.indexOf(positions2) === -1) {
            return new Error("\nInvalid prop ".concat(propName, " suplied to ").concat(componentName, ".\nFollowing values are allowed: ").concat(_positionsMap.posiblePositions.join(", "), "\n"));
          }
        }
      },
      offset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      })]))]),
      rafOnMount: _propTypes.default.bool,
      relativeToViewport: _propTypes.default.bool,
      adjustOnPositionBottom: _propTypes.default.bool,
      syncWidth: _propTypes.default.bool,
      onInitialPosition: _propTypes.default.func,
      onVisibleChange: _propTypes.default.func,
      onShow: _propTypes.default.func,
      onHide: _propTypes.default.func,
      onFadeInStart: emptyFn,
      onFadeOutStart: emptyFn,
      onFadeInEnd: emptyFn,
      onFadeOutEnd: emptyFn
    };
    var _default = InovuaOverlay;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/index.js
var require_src4 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _Overlay = _interopRequireDefault(require_Overlay());
    var _default = _Overlay.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Overlay/index.js
var require_Overlay2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Overlay/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src4());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/FakeVirtualList.js
var require_FakeVirtualList = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/FakeVirtualList.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FakeVirtualList = function(_Component) {
      (0, _inherits2.default)(FakeVirtualList2, _Component);
      var _super = _createSuper(FakeVirtualList2);
      function FakeVirtualList2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, FakeVirtualList2);
        _this = _super.call(this, props2);
        _this.handleOnScroll = _this.handleOnScroll.bind((0, _assertThisInitialized2.default)(_this));
        _this.targetRef = function(node) {
          if (!node) {
            _this.targetNode = null;
          }
          _this.targetNode = node;
        };
        return _this;
      }
      (0, _createClass2.default)(FakeVirtualList2, [{
        key: "render",
        value: function render() {
          var props2 = this.props;
          var count = this.props.count;
          var list = [];
          if (count > 0) {
            for (var i = 0; i < count; i++) {
              list.push(props2.renderRow({
                index: i
              }));
            }
          }
          var listProps = _objectSpread(_objectSpread({
            ref: this.targetRef,
            children: list
          }, (0, _cleanProps.default)(props2, FakeVirtualList2.propTypes)), {}, {
            onScroll: this.handleOnScroll
          });
          var result;
          if (this.props.renderListScroller) {
            result = this.props.renderListScroller(listProps);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, listProps));
          }
          return result;
        }
      }, {
        key: "getContainerNode",
        value: function getContainerNode() {
          return this.targetNode && this.targetNode.getContainerTargetNode ? this.targetNode.getContainerTargetNode() : this.targetNode;
        }
      }, {
        key: "getRootNode",
        value: function getRootNode() {
          return this.targetNode;
        }
      }, {
        key: "getScrollerNode",
        value: function getScrollerNode() {
          return this.targetNode && this.targetNode.getScrollerNode ? this.targetNode.getScrollerNode() : this.targetNode;
        }
      }, {
        key: "scrollToIndex",
        value: function scrollToIndex(index2) {
          var containerNode = this.getContainerNode();
          var rootNode = this.getRootNode();
          var scrollerNode = this.getScrollerNode();
          if (!containerNode) {
            return null;
          }
          if (containerNode && !containerNode.childNodes.length) {
            return null;
          }
          var itemNode = containerNode.childNodes[index2];
          if (!itemNode) {
            return null;
          }
          var itemHeight = itemNode.offsetHeight;
          var itemOffsetTop = itemNode.offsetTop;
          var scrollTop = scrollerNode.scrollTop;
          var containerHeight = rootNode.offsetHeight;
          if (scrollTop > itemOffsetTop) {
            scrollerNode.scrollTop = itemOffsetTop;
          }
          if (scrollTop + containerHeight < itemHeight + itemOffsetTop) {
            scrollerNode.scrollTop = itemOffsetTop + itemHeight - containerHeight;
          }
          return true;
        }
      }, {
        key: "handleOnScroll",
        value: function handleOnScroll(event2) {
          var rootNode = this.getRootNode();
          var scrollTop = event2.target.scrollTop;
          var listHeight = rootNode.offsetHeight;
          var scrollHeight = rootNode.scrollHeight;
          if (scrollTop + listHeight + 5 >= scrollHeight) {
            this.props.scrollProps.onContainerScrollVerticalMax();
          }
        }
      }]);
      return FakeVirtualList2;
    }(_react.Component);
    FakeVirtualList.propTypes = {
      autoHide: _propTypes.default.bool,
      count: _propTypes.default.number,
      renderRow: _propTypes.default.func,
      minRowHeight: _propTypes.default.number,
      tagIndex: _propTypes.default.number,
      shouldComponentUpdate: _propTypes.default.func,
      renderListScroller: _propTypes.default.func,
      scrollProps: _propTypes.default.object,
      virtualized: _propTypes.default.bool,
      showScrollbars: _propTypes.default.bool
    };
    var _default = FakeVirtualList;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/Item.js
var require_Item = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/Item.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof3 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _join = _interopRequireDefault(require_join2());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Item = function(_Component) {
      (0, _inherits2.default)(Item2, _Component);
      var _super = _createSuper(Item2);
      function Item2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, Item2);
        _this = _super.call(this, props2);
        _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleMouseDown = _this.handleMouseDown.bind((0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(Item2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, selected = _this$props.selected, rootClassName = _this$props.rootClassName, selectedStyle = _this$props.selectedStyle, active = _this$props.active, background = _this$props.background, item = _this$props.item, index2 = _this$props.index, disabledStyle = _this$props.disabledStyle, disabledClassName = _this$props.disabledClassName, activeStyle = _this$props.activeStyle, activeClassName = _this$props.activeClassName, selectedClassName = _this$props.selectedClassName, renderItem = _this$props.renderItem, rtl = _this$props.rtl, itemHeight = _this$props.itemHeight, itemEllipsis = _this$props.itemEllipsis;
          var disabled = item.disabled;
          var className = (0, _join.default)(this.props.className, rootClassName, selected && "".concat(rootClassName, "--selected"), rtl && "".concat(rootClassName, "--rtl"), active && "".concat(rootClassName, "--active"), disabled && "".concat(rootClassName, "--disabled"), itemEllipsis && "".concat(rootClassName, "--ellipsis"), disabled && disabledClassName, active && activeClassName, selected && selectedClassName);
          var style = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.props.style), active && activeStyle), disabled && disabledStyle), selected && selectedStyle);
          if (itemHeight) {
            style.height = itemHeight;
          }
          if (background) {
            style.background = background;
          }
          var label = this.props.label;
          var matchText = item.matchText;
          if (typeof label === "string" && matchText) {
            label = matchText.map(function(textPart, index3) {
              if ((0, _typeof2.default)(textPart) === "object") {
                return _react.default.createElement("span", {
                  className: "".concat(rootClassName, "__highlight"),
                  key: index3
                }, textPart.match);
              }
              return textPart;
            });
          }
          var domProps = _objectSpread(_objectSpread({}, (0, _cleanProps.default)(this.props, Item2.propTypes)), {}, {
            style,
            className,
            onClick: this.handleClick,
            onMouseDown: this.handleMouseDown,
            children: label
          });
          var result;
          if (typeof renderItem === "function") {
            result = renderItem({
              domProps,
              label,
              item,
              index: index2
            });
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, domProps));
          }
          return result;
        }
      }, {
        key: "handleMouseDown",
        value: function handleMouseDown(event2) {
          event2.preventDefault();
        }
      }, {
        key: "handleClick",
        value: function handleClick() {
          if (this.props.item.disabled) {
            return null;
          }
          this.props.onClick(this.props.id);
        }
      }]);
      return Item2;
    }(_react.Component);
    function emptyFn() {
    }
    Item.defaultProps = {
      onClick: emptyFn,
      selectedStyle: {},
      item: {}
    };
    Item.propTypes = {
      rootClassName: _propTypes.default.string,
      itemHeight: _propTypes.default.number,
      itemEllipsis: _propTypes.default.bool,
      renderItem: _propTypes.default.func,
      selectedClassName: _propTypes.default.string,
      selectedStyle: _propTypes.default.object,
      background: _propTypes.default.string,
      active: _propTypes.default.bool,
      label: _propTypes.default.node,
      id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
      item: _propTypes.default.object,
      onClick: _propTypes.default.func,
      index: _propTypes.default.number,
      rtl: _propTypes.default.bool,
      disabledStyle: _propTypes.default.object,
      disabledClassName: _propTypes.default.string,
      activeStyle: _propTypes.default.object,
      activeClassName: _propTypes.default.string
    };
    var _default = Item;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/utils/getClassName.js
var require_getClassName = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/utils/getClassName.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _join = _interopRequireDefault(require_join2());
    function getClassName(_ref) {
      var props2 = _ref.props, _ref$state = _ref.state, state = _ref$state === void 0 ? {} : _ref$state;
      var listPosition = props2.listPosition, _props$data = props2.data, data = _props$data === void 0 ? [] : _props$data, className = props2.className, theme = props2.theme, rootClassName = props2.rootClassName, loading = props2.loading, relativeToViewport = props2.relativeToViewport;
      var succesfullPosition = state.succesfullPosition;
      var constructedClassName = (0, _join.default)(rootClassName, className, listPosition && "".concat(rootClassName, "--").concat(listPosition), loading && "".concat(rootClassName, "--loading"), theme && "".concat(rootClassName, "--theme-").concat(theme), relativeToViewport && "".concat(rootClassName, "--relative-to-viewport"), data && !data.length && "".concat(rootClassName, "--empty"));
      if (succesfullPosition) {
        var positionName = succesfullPosition === "bc-tc" ? "top" : "bottom";
        constructedClassName = (0, _join.default)(constructedClassName, "".concat(rootClassName, "--position-").concat(positionName));
      }
      return constructedClassName;
    }
    var _default = getClassName;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/isSelected.js
var require_isSelected = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/isSelected.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function isSelected(_ref) {
      var id = _ref.id, value = _ref.value;
      if (Array.isArray(value)) {
        return value.indexOf(id) !== -1;
      }
      return id === value;
    }
    var _default = isSelected;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/List.js
var require_List = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/List.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _Overlay = _interopRequireDefault(require_Overlay2());
    var _FakeVirtualList = _interopRequireDefault(require_FakeVirtualList());
    var _Item = _interopRequireDefault(require_Item());
    var _getClassName = _interopRequireDefault(require_getClassName());
    var _isSelected = _interopRequireDefault(require_isSelected());
    var _getPositionRelativeToElement = _interopRequireDefault(require_getPositionRelativeToElement());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var List = function(_Component) {
      (0, _inherits2.default)(List2, _Component);
      var _super = _createSuper(List2);
      function List2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, List2);
        _this = _super.call(this, props2);
        _this.renderRow = _this.renderRow.bind((0, _assertThisInitialized2.default)(_this));
        _this.getOverlayTarget = _this.getOverlayTarget.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleOnClick = _this.handleOnClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleItemClick = _this.handleItemClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.virtualListShouldComponentUpdate = _this.virtualListShouldComponentUpdate.bind((0, _assertThisInitialized2.default)(_this));
        _this.setRootNode = function(ref) {
          _this.listNode = ref;
        };
        _this.addVirtualListRef = function(ref) {
          _this.virtualListNode = ref;
        };
        _this.state = {
          succesfullPosition: "bottom"
        };
        _this.listAligned = false;
        return _this;
      }
      (0, _createClass2.default)(List2, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.componentIsMounted = false;
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          this.componentIsMounted = true;
          if (!this.props.relativeToViewport) {
            setTimeout(function() {
              _this2.updateListPosition();
            }, 0);
          }
          if (this.props.activeItemIndex != null) {
            setTimeout(function() {
              if (_this2.componentIsMounted) {
                _this2.scrollToIndex(_this2.props.activeItemIndex);
              }
            }, 16);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var state = this.state, props2 = this.props;
          var renderFooter = props2.renderFooter, renderHeader = props2.renderHeader, isNewCustomTagValid = props2.isNewCustomTagValid;
          this.currentGroup = null;
          var className = (0, _getClassName.default)({
            state,
            props: props2
          });
          var style = props2.style;
          if (this.state.position) {
            style = _objectSpread(_objectSpread({}, style), this.state.position);
          }
          if (this.state.succesfullPosition && this.props.offset) {
            var positionName = this.state.succesfullPosition === "bc-tc" ? "top" : "bottom";
            if (this.props.offset) {
              style = _objectSpread(_objectSpread({}, style), {}, (0, _defineProperty2.default)({}, positionName == "top" ? "marginBottom" : "marginTop", this.props.offset));
            }
          }
          if (!this.props.relativeToViewport && !this.listAligned) {
            style = _objectSpread(_objectSpread({}, style), {}, {
              visibility: "hidden",
              position: "fixed"
            });
          }
          var result = _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, List2.propTypes)), {}, {
            className,
            style,
            ref: this.setRootNode,
            onClick: this.handleOnClick
          }), this.renderLoadingText(), isNewCustomTagValid && this.renderNewCustomTagText(), typeof renderHeader === "function" && this.renderHeader(), this.renderEmptyText(), this.renderVirtualList(), typeof renderFooter === "function" && this.renderFooter());
          if (this.props.relativeToViewport) {
            var overlayProps = _objectSpread(_objectSpread({}, props2.overlayProps), {}, {
              target: this.getOverlayTarget,
              relativeToViewport: this.props.relativeToViewport,
              constrainTo: this.props.constrainTo,
              positions: this.props.positions
            });
            return _react.default.createElement(_Overlay.default, _objectSpread({}, overlayProps), result);
          }
          return result;
        }
      }, {
        key: "getOverlayTarget",
        value: function getOverlayTarget() {
          return this.props.getComboNode();
        }
      }, {
        key: "renderFooter",
        value: function renderFooter() {
          return this.props.renderFooter({
            props: this.props,
            data: this.props.data,
            value: this.props.value
          });
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return this.props.renderHeader({
            props: this.props,
            data: this.props.data,
            value: this.props.value
          });
        }
      }, {
        key: "renderEmptyText",
        value: function renderEmptyText() {
          var data = this.props.data;
          if (data && data.length || this.props.loading) {
            return null;
          }
          if (this.props.isNewCustomTagValid) {
            return null;
          }
          return _react.default.createElement("div", {
            className: "".concat(this.props.rootClassName, "__empty-text")
          }, this.props.emptyText);
        }
      }, {
        key: "renderNewCustomTagText",
        value: function renderNewCustomTagText() {
          var text = this.props.text;
          if (this.props.newCustomTagText) {
            return typeof this.props.newCustomTagText === "function" ? this.props.newCustomTagText({
              text
            }) : this.props.newCustomTagText;
          }
          return _react.default.createElement("div", {
            className: "".concat(this.props.rootClassName, "__new-custom-tag-text")
          }, 'Create option "', text, '"');
        }
      }, {
        key: "renderLoadingText",
        value: function renderLoadingText() {
          if (!this.props.loading) {
            return null;
          }
          if (!this.props.loadingText) {
            return null;
          }
          return _react.default.createElement("div", {
            className: "".concat(this.props.rootClassName, "__loading-text")
          }, this.props.loadingText);
        }
      }, {
        key: "renderVirtualList",
        value: function renderVirtualList() {
          var className = "".concat(this.props.rootClassName, "__virtual-list");
          var count = this.props.dataLength;
          var VirtualList = this.props.virtualListFactory;
          var renderVirtualList2 = this.props.renderVirtualList;
          if (!count) {
            return null;
          }
          var style = {};
          if (this.props.maxHeight) {
            style.maxHeight = this.props.maxHeight;
          }
          if (this.state.constrainedHeight) {
            var constrainedOffset = 16;
            var constrainedHeight = this.props.maxHeight ? Math.min(this.props.maxHeight, this.state.constrainedHeight - constrainedOffset) : this.state.constrainedHeight - constrainedOffset;
            style.maxHeight = constrainedHeight;
          }
          if (typeof style.maxHeight === "number" && typeof this.props.minHeight == "number") {
            style.maxHeight = Math.max(style.maxHeight || 0, style.minHeight || 0);
          }
          var virtualListProps = {
            ref: this.addVirtualListRef,
            className,
            autoHide: false,
            count,
            theme: this.props.theme,
            renderRow: this.renderRow,
            minRowHeight: 10,
            tabIndex: null,
            shouldComponentUpdate: this.virtualListShouldComponentUpdate,
            scrollProps: {
              onContainerScrollVerticalMax: this.props.onScrollBottom
            },
            style
          };
          var result;
          if (renderVirtualList2) {
            result = renderVirtualList2(virtualListProps);
          }
          if (result === void 0) {
            if (VirtualList === _FakeVirtualList.default) {
              virtualListProps.renderListScroller = this.props.renderListScroller;
            }
            result = _react.default.createElement(VirtualList, _objectSpread({}, virtualListProps));
          }
          if (result && result.props) {
            this.rowHeight = result.props.rowHeight;
          }
          return result;
        }
      }, {
        key: "virtualListShouldComponentUpdate",
        value: function virtualListShouldComponentUpdate() {
          return true;
        }
      }, {
        key: "renderRow",
        value: function renderRow(_ref) {
          var index2 = _ref.index;
          var groups = this.props.groups;
          if (groups && groups[index2]) {
            return this.renderGroup(groups[index2], index2);
          }
          var _this$props = this.props, data = _this$props.data, getIdProperty = _this$props.getIdProperty, getDisplayProperty = _this$props.getDisplayProperty, rootClassName = _this$props.rootClassName, itemEllipsis = _this$props.itemEllipsis, value = _this$props.value, activeItem = _this$props.activeItem, renderItem = _this$props.renderItem, rtl = _this$props.rtl;
          var renderIndex = this.currentGroup ? index2 - this.currentGroup.indexAjustment : index2;
          var item = data[renderIndex];
          var id = getIdProperty(item);
          var label = getDisplayProperty(item);
          var selected = (0, _isSelected.default)({
            value,
            id
          });
          var active = id === activeItem;
          var itemProps = _objectSpread(_objectSpread({}, this.props.itemProps), {}, {
            index: renderIndex,
            itemHeight: this.rowHeight,
            itemEllipsis,
            item,
            id,
            label,
            selected,
            active,
            renderItem,
            rtl,
            rootClassName: "".concat(rootClassName, "__item"),
            onClick: this.handleItemClick,
            key: id || label
          });
          return _react.default.createElement(_Item.default, _objectSpread({}, itemProps));
        }
      }, {
        key: "renderGroup",
        value: function renderGroup(group, index2) {
          this.currentGroup = group;
          var title = group.title;
          var groupProps = {
            children: title,
            key: title,
            className: "".concat(this.props.rootClassName, "__group")
          };
          var result;
          if (typeof this.props.renderGroup === "function") {
            result = this.props.renderGroup({
              domProps: groupProps,
              index: index2,
              group
            });
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, groupProps));
          }
          return result;
        }
      }, {
        key: "handleOnClick",
        value: function handleOnClick(event2) {
          event2.stopPropagation();
        }
      }, {
        key: "handleItemClick",
        value: function handleItemClick(index2) {
          this.props.onItemClick(index2);
        }
      }, {
        key: "updateListPosition",
        value: function updateListPosition() {
          var comboNode = this.props.getComboNode();
          if (!comboNode) {
            return null;
          }
          var listNode = this.listNode;
          if (!listNode) {
            return null;
          }
          var positionConfig = (0, _getPositionRelativeToElement.default)({
            targetNode: comboNode,
            overlayNode: listNode,
            offset: this.props.offset,
            constrainTo: this.props.constrainTo,
            relativeToViewport: this.props.relativeToViewport,
            positions: this.props.positions
          });
          this.listAligned = true;
          if (positionConfig) {
            var constrainedHeight = positionConfig.constrainedHeight, positionRegion = positionConfig.positionRegion, succesfullPosition = positionConfig.succesfullPosition, position = positionConfig.position;
            this.setState({
              positionRegion,
              succesfullPosition,
              constrainedHeight: constrainedHeight ? positionRegion.getHeight() : null
            });
          }
        }
      }, {
        key: "getVirtualListNode",
        value: function getVirtualListNode() {
          return this.virtualListNode;
        }
      }, {
        key: "getlListNode",
        value: function getlListNode() {
          return this.listNode;
        }
      }, {
        key: "scrollToIndex",
        value: function scrollToIndex(index2) {
          var virtualListNode = this.getVirtualListNode();
          return virtualListNode && virtualListNode.scrollToIndex(index2);
        }
      }]);
      return List2;
    }(_react.Component);
    function emptyFn() {
    }
    List.defaultProps = {
      selectedStyle: {},
      style: {},
      onItemClick: emptyFn,
      getComboNode: emptyFn,
      positions: ["bottom", "top"],
      offset: 0,
      constrainTo: true,
      virtualListFactory: _FakeVirtualList.default,
      overlayProps: {
        theme: null,
        syncWidth: true,
        rafOnMount: false,
        adjustOnPositionBottom: false,
        updatePositionOnScroll: true,
        offset: 2,
        visible: true
      }
    };
    List.propTypes = {
      data: _propTypes.default.array,
      autoPosition: _propTypes.default.bool,
      emptyText: _propTypes.default.node,
      dataLength: _propTypes.default.number,
      rootClassName: _propTypes.default.string,
      highlightFirst: _propTypes.default.bool,
      maxHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      minHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      groups: _propTypes.default.object,
      itemEllipsis: _propTypes.default.bool,
      onScrollBottom: _propTypes.default.func,
      renderListScroller: _propTypes.default.func,
      renderGroup: _propTypes.default.func,
      renderFooter: _propTypes.default.func,
      renderHeader: _propTypes.default.func,
      renderItem: _propTypes.default.func,
      activeItemIndex: _propTypes.default.number,
      virtualListFactory: _propTypes.default.func,
      renderVirtualList: _propTypes.default.func,
      text: _propTypes.default.string,
      newCustomTagText: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
      isNewCustomTagValid: _propTypes.default.bool,
      positions: _propTypes.default.arrayOf(_propTypes.default.string),
      constrainTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object, _propTypes.default.bool]),
      offset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      })]))]),
      loadingText: _propTypes.default.node,
      loading: _propTypes.default.bool,
      relativeToViewport: _propTypes.default.bool,
      overlayProps: _propTypes.default.object,
      itemProps: _propTypes.default.object,
      activeItem: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
      selectedStyle: _propTypes.default.object,
      getIdProperty: _propTypes.default.func,
      getDisplayProperty: _propTypes.default.func,
      rtl: _propTypes.default.bool,
      onItemClick: _propTypes.default.func,
      getComboNode: _propTypes.default.func
    };
    var _default = List;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/index.js
var require_List2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/List/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _List = _interopRequireDefault(require_List());
    var _default = _List.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/shallowequal.js
var require_shallowequal3 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/shallowequal.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get() {
        return _shallowequal.default;
      }
    });
    var _shallowequal = _interopRequireDefault(require_shallowequal2());
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/shouldComponentUpdate.js
var require_shouldComponentUpdate4 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/shouldComponentUpdate.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _shallowequal = _interopRequireDefault(require_shallowequal3());
    var _default = function _default2(inst, nextProps, nextState) {
      var props2 = inst.props;
      var state = inst.state;
      if (nextProps.shouldComponentUpdate) {
        return nextProps.shouldComponentUpdate({
          nextProps,
          props: props2,
          nextState,
          state
        });
      }
      return !(0, _shallowequal.default)(nextProps, props2) || !(0, _shallowequal.default)(nextState, state);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getRootClassName.js
var require_getRootClassName = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getRootClassName.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _join = _interopRequireDefault(require_join2());
    function getRootClassName(_ref) {
      var _ref$props = _ref.props, props2 = _ref$props === void 0 ? {} : _ref$props, _ref$state = _ref.state, state = _ref$state === void 0 ? {} : _ref$state, _ref$computed = _ref.computed, computed = _ref$computed === void 0 ? {} : _ref$computed;
      var rootClassName = props2.rootClassName, className = props2.className, rtl = props2.rtl, shadow = props2.shadow, showShadowOnMouseOver = props2.showShadowOnMouseOver, disabled = props2.disabled, readOnly = props2.readOnly, emptyClassName = props2.emptyClassName, disabledClassName = props2.disabledClassName, focusedClassName = props2.focusedClassName, inlineFlex = props2.inlineFlex, multiple = props2.multiple, theme = props2.theme;
      var over = state.over, focus = state.focus;
      var value = computed.value;
      var showShadow = showShadowOnMouseOver ? over && shadow : shadow;
      return (0, _join.default)(rootClassName, className, rtl ? "".concat(rootClassName, "--rtl") : "".concat(rootClassName, "--ltr"), showShadow && "".concat(rootClassName, "--shadow"), multiple && "".concat(rootClassName, "--multiple"), disabled && "".concat(rootClassName, "--disabled"), readOnly && "".concat(rootClassName, "--readOnly"), theme && "".concat(rootClassName, "--theme-").concat(theme), inlineFlex && "".concat(rootClassName, "--inlineFlex"), focus && "".concat(rootClassName, "--focus"), !value && emptyClassName, disabled && disabledClassName, focus && focusedClassName);
    }
    var _default = getRootClassName;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getListProps.js
var require_getListProps = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getListProps.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function getListProps(_ref) {
      var props2 = _ref.props, _ref$state = _ref.state, state = _ref$state === void 0 ? {} : _ref$state, computed = _ref.computed;
      return _objectSpread(_objectSpread({}, computed), {}, {
        style: props2.listStyle,
        relativeToViewport: props2.relativeToViewport,
        virtualListFactory: props2.virtualListFactory,
        renderListScroller: props2.renderListScroller,
        renderVirtualList: props2.renderVirtualList,
        className: props2.listClassName,
        rootClassName: "".concat(props2.rootClassName, "__list"),
        emptyText: props2.listEmptyText,
        maxHeight: props2.listMaxHeight,
        minHeight: props2.listMinHeight,
        positions: props2.positions,
        constrainTo: props2.constrainTo,
        offset: props2.offset,
        rtl: props2.rtl,
        theme: props2.theme,
        highlightFirst: props2.highlightFirst,
        loadingText: props2.listLoadingText,
        groups: state.groups,
        renderGroup: props2.renderGroup,
        renderFooter: props2.renderFooter,
        renderHeader: props2.renderHeader,
        renderItem: props2.renderItem,
        itemEllipsis: props2.itemEllipsis,
        activeItemIndex: state.activeItemIndex,
        newCustomTagText: props2.newCustomTagText,
        autoPosition: props2.autoPosition,
        itemProps: {
          background: props2.itemBackground,
          disabledStyle: props2.disabledItemStyle,
          disabledClassName: props2.disabledItemClassName,
          activeStyle: props2.activeItemStyle,
          activeClassName: props2.activeItemClassName,
          selectedStyle: props2.selectedStyle,
          selectedClassName: props2.selectedClassName
        }
      });
    }
    var _default = getListProps;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getValueProps.js
var require_getValueProps = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getValueProps.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function getValueProps(_ref) {
      var _objectSpread2;
      var state = _ref.state, props2 = _ref.props, computed = _ref.computed, tagProps = _ref.tagProps;
      var multiple = props2.multiple, renderTag = props2.renderTag, renderTags = props2.renderTags, tagBorder = props2.tagBorder, tagStyle = props2.tagStyle, tagPadding = props2.tagPadding, tagHeight = props2.tagHeight, tagWidth = props2.tagWidth, tagMinSize = props2.tagMinSize, tagMaxSize = props2.tagMaxSize, wrapMultiple = props2.wrapMultiple, tagCloseIcon = props2.tagCloseIcon, tagCloseIconPosition = props2.tagCloseIconPosition, maxTagsLength = props2.maxTagsLength, rtl = props2.rtl, renderRemainingTags = props2.renderRemainingTags, renderDisplayValue = props2.renderDisplayValue, searchable = props2.searchable, renderTagLabel = props2.renderTagLabel;
      var focus = state.focus;
      var rootClassName = "".concat(props2.rootClassName, "__value");
      tagProps = _objectSpread(_objectSpread({}, tagProps), {}, {
        closeIcon: tagCloseIcon,
        border: tagBorder,
        style: tagStyle,
        padding: tagPadding,
        height: tagHeight,
        width: tagWidth,
        minSize: tagMinSize,
        maxSize: tagMaxSize,
        closeIconPosition: tagCloseIconPosition,
        ellipsis: props2.tagEllipsis
      });
      var valueProps = _objectSpread((_objectSpread2 = {
        renderTagLabel,
        multiple,
        searchable,
        rootClassName,
        renderTag,
        renderRemainingTags,
        renderTags,
        tagProps,
        wrapMultiple,
        maxTagsLength,
        focus
      }, (0, _defineProperty2.default)(_objectSpread2, "maxTagsLength", maxTagsLength), (0, _defineProperty2.default)(_objectSpread2, "rtl", rtl), (0, _defineProperty2.default)(_objectSpread2, "renderDisplayValue", renderDisplayValue), _objectSpread2), computed);
      return valueProps;
    }
    var _default = getValueProps;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getDataProp.js
var require_getDataProp = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getDataProp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var getDataProp = function getDataProp2(propName) {
      if (propName == null) {
        return null;
      }
      return function(item) {
        if (!item) {
          return null;
        }
        return typeof propName === "function" ? propName(item) : item[propName];
      };
    };
    var _default = getDataProp;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getNewMultipleValue.js
var require_getNewMultipleValue = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getNewMultipleValue.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    function getNewMultipleValue(_ref) {
      var id = _ref.id, value = _ref.value;
      var newValue;
      var isArray = Array.isArray(value);
      var hasValue = isArray && value.indexOf(id) !== -1;
      if (hasValue) {
        newValue = value.filter(function(itemId) {
          return itemId !== id;
        });
        newValue = newValue.length ? newValue : null;
      } else {
        newValue = isArray ? [].concat((0, _toConsumableArray2.default)(value), [id]) : [id];
      }
      return newValue;
    }
    var _default = getNewMultipleValue;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getNewSingleValue.js
var require_getNewSingleValue = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getNewSingleValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function getNewSingleValue(_ref) {
      var id = _ref.id, value = _ref.value, _ref$toggle = _ref.toggle, toggle = _ref$toggle === void 0 ? true : _ref$toggle;
      if (value == null) {
        return id;
      }
      if (toggle) {
        return id === value ? null : id;
      }
      return id;
    }
    var _default = getNewSingleValue;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/findItemIndex.js
var require_findItemIndex = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/findItemIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function findItemIndex(_ref) {
      var id = _ref.id, data = _ref.data, getIdProperty = _ref.getIdProperty;
      if (!Array.isArray(data) || !getIdProperty || id == null) {
        return null;
      }
      var filteredList = data.reduce(function(acc, item, index2) {
        if (getIdProperty(item) === id) {
          acc = index2;
        }
        return acc;
      }, null);
      return filteredList !== null ? filteredList : null;
    }
    var _default = findItemIndex;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/filterByValue.js
var require_filterByValue = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/filterByValue.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isSelected = _interopRequireDefault(require_isSelected());
    function filterByValue(_ref) {
      var data = _ref.data, getIdProperty = _ref.getIdProperty, value = _ref.value;
      return data.filter(function(item) {
        var id = getIdProperty(item);
        return !(0, _isSelected.default)({
          id,
          value
        });
      });
    }
    var _default = filterByValue;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/hightlightText.js
var require_hightlightText = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/hightlightText.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function hightlightText(_ref) {
      var queryText = _ref.queryText, text = _ref.text, _ref$mode = _ref.mode, mode = _ref$mode === void 0 ? "contains" : _ref$mode;
      var regex = mode === "contains" ? new RegExp(queryText, "gi") : new RegExp("^".concat(queryText), "gi");
      var matchText = [];
      var searchQueryLen = queryText.length;
      var localMatch;
      var previousLocalMatch;
      while ((localMatch = regex.exec(text)) !== null) {
        var index2 = localMatch.index;
        var previousSegmentIndex = previousLocalMatch ? previousLocalMatch.index + searchQueryLen : 0;
        matchText.push(text.slice(previousSegmentIndex, index2));
        matchText.push({
          match: text.slice(localMatch.index, localMatch.index + searchQueryLen)
        });
        previousLocalMatch = localMatch;
      }
      matchText.push(text.slice(previousLocalMatch.index + searchQueryLen));
      matchText = matchText.filter(function(match) {
        return match;
      });
      return matchText;
    }
    var _default = hightlightText;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/filterByText.js
var require_filterByText = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/filterByText.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _hightlightText = _interopRequireDefault(require_hightlightText());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var defaultFilterFunction = function defaultFilterFunction2(_ref) {
      var label = _ref.label, text = _ref.text, mode = _ref.mode;
      label = label.toLowerCase ? label.toLowerCase() : "".concat(label);
      text = text.toLowerCase ? text.toLowerCase() : "".concat(text);
      return mode === "contains" ? label.indexOf(text) !== -1 : label.startsWith(text);
    };
    function filterByText(_ref2) {
      var data = _ref2.data, getFilterProperty = _ref2.getFilterProperty, text = _ref2.text, _ref2$filterFunction = _ref2.filterFunction, filterFunction = _ref2$filterFunction === void 0 ? defaultFilterFunction : _ref2$filterFunction, _ref2$mode = _ref2.mode, mode = _ref2$mode === void 0 ? "contains" : _ref2$mode, hightlight = _ref2.hightlight;
      if (!Array.isArray(data)) {
        return null;
      }
      var filteredData = data.reduce(function(acc, item) {
        var label = getFilterProperty(item);
        var match = filterFunction({
          label,
          text,
          item,
          mode
        });
        if (match) {
          if (hightlight) {
            var newItem = _objectSpread(_objectSpread({}, item), {}, {
              mode,
              matchText: (0, _hightlightText.default)({
                queryText: text,
                text: label
              })
            });
            acc.push(newItem);
          } else {
            acc.push(item);
          }
        }
        return acc;
      }, []);
      return filteredData;
    }
    var _default = filterByText;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/deselectValue.js
var require_deselectValue = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/deselectValue.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    function deselectValue(_ref) {
      var id = _ref.id, value = _ref.value, _ref$getIdProperty = _ref.getIdProperty, getIdProperty = _ref$getIdProperty === void 0 ? function(item) {
        return item && item.id;
      } : _ref$getIdProperty;
      var newValue;
      var singleValueId = (0, _typeof2.default)(value) === "object" ? getIdProperty(value) : value;
      if (id === singleValueId || singleValueId === null) {
        newValue = null;
      }
      if (Array.isArray(value)) {
        newValue = value.filter(function(value2) {
          var valueId = (0, _typeof2.default)(value2) === "object" ? getIdProperty(value2) : value2;
          return valueId !== id;
        });
        if (!newValue.length) {
          newValue = null;
        }
      }
      return newValue;
    }
    var _default = deselectValue;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getNewActiveTagOnRemove.js
var require_getNewActiveTagOnRemove = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getNewActiveTagOnRemove.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _clamp = _interopRequireDefault(require_clamp2());
    function getNewActiveTagOnRemove(_ref) {
      var id = _ref.id, value = _ref.value, dir = _ref.dir;
      dir = dir || -1;
      if (!Array.isArray(value) || value.length === 1) {
        return null;
      }
      var newActiveTag = null;
      var currentIndex = value.indexOf(id);
      var lastIndex = value.length - 1;
      var newIndex = (0, _clamp.default)(currentIndex + dir, 0, lastIndex);
      if (dir == 1 && currentIndex === lastIndex) {
        newIndex = (0, _clamp.default)(currentIndex - 1, 0, lastIndex);
      }
      if (dir == -1 && currentIndex == 0 && lastIndex > 0) {
        newIndex = 1;
      }
      newActiveTag = value[newIndex];
      return newActiveTag;
    }
    var _default = getNewActiveTagOnRemove;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getNextItem.js
var require_getNextItem = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getNextItem.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _findItemIndex = _interopRequireDefault(require_findItemIndex());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function getNextItem(config) {
      var data = config.data, id = config.id, getIdProperty = config.getIdProperty, _config$direction = config.direction, direction = _config$direction === void 0 ? 1 : _config$direction;
      if (!Array.isArray(data) || !data.length || !getIdProperty || id == null) {
        return null;
      }
      if (data.length === 1) {
        return id;
      }
      var enabledItems = data.filter(function(item) {
        return !item.disabled;
      });
      if (enabledItems.length === 0) {
        return null;
      }
      var currentIndex = (0, _findItemIndex.default)({
        data,
        id,
        getIdProperty
      });
      var nextIndex;
      if (direction === 1) {
        nextIndex = currentIndex + 1;
        nextIndex = nextIndex > data.length - 1 ? 0 : nextIndex;
      } else {
        nextIndex = currentIndex - 1;
        nextIndex = nextIndex >= 0 ? nextIndex : data.length - 1;
      }
      var newItem = data[nextIndex];
      var newActiveId = getIdProperty(newItem);
      if (newItem.disabled) {
        newActiveId = getNextItem(_objectSpread(_objectSpread({}, config), {}, {
          id: newActiveId
        }));
      }
      return newActiveId;
    }
    var _default = getNextItem;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/groupItems.js
var require_groupItems = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/groupItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function groupItems(_ref) {
      var items = _ref.items, maxTagsLength = _ref.maxTagsLength;
      var visibleItems = items;
      var remainingItems = null;
      if (items.length > maxTagsLength) {
        var cutFrom = maxTagsLength;
        remainingItems = items.slice(cutFrom);
        visibleItems = items.slice(0, cutFrom);
      }
      return {
        visibleItems,
        remainingItems
      };
    }
    var _default = groupItems;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getValueMap.js
var require_getValueMap = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getValueMap.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var contains = function contains2(stack, needle) {
      for (var i = 0; i < stack.length; i++) {
        if (stack[i] == needle) {
          return true;
        }
      }
      return false;
    };
    function getValueMap(_ref) {
      var value = _ref.value, dataMap = _ref.dataMap, oldValueMap = _ref.oldValueMap;
      if (value == null) {
        return oldValueMap;
      }
      var valueMap = _objectSpread({}, oldValueMap);
      value = Array.isArray(value) ? value : [value];
      valueMap = Object.keys(valueMap).reduce(function(acc, id) {
        if (contains(value, id)) {
          acc[id] = valueMap[id];
        }
        return acc;
      }, {});
      value.forEach(function(id) {
        if (dataMap && dataMap[id]) {
          valueMap[id] = dataMap[id];
        }
      });
      return valueMap;
    }
    var _default = getValueMap;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getGroups.js
var require_getGroups = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/utils/getGroups.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function getGroups(data) {
      var groupProperty = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "group";
      var groupsConfig = data.reduce(function(acc, item, index2) {
        var groupTitle = item[groupProperty];
        var currentGroup = acc.groups[acc.currentGroup];
        if (groupTitle && groupTitle !== (currentGroup && currentGroup.title)) {
          var newGroup = {
            title: groupTitle,
            indexAjustment: acc.indexAjustment + 1
          };
          var groupIndex = index2 + acc.indexAjustment;
          acc.groups[groupIndex] = newGroup;
          acc.currentGroup = groupIndex;
          acc.indexAjustment += 1;
        }
        return acc;
      }, {
        groups: {},
        currentGroup: 0,
        indexAjustment: 0
      });
      return groupsConfig.groups;
    }
    var _default = getGroups;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/ComboBox.js
var require_ComboBox = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/ComboBox.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof3 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.REMAINING_ITEMS = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _NotifyResize = require_NotifyResize();
    var _throttle = _interopRequireDefault(require_throttle());
    var _containsNode = _interopRequireDefault(require_containsNode());
    var _TextInput = _interopRequireDefault(require_TextInput());
    var _Value = _interopRequireDefault(require_Value());
    var _ClearButton = _interopRequireDefault(require_ClearButton());
    var _ToggleButton = _interopRequireDefault(require_ToggleButton());
    var _List = _interopRequireDefault(require_List2());
    var _Icons = require_Icons();
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate4());
    var _getRootClassName = _interopRequireDefault(require_getRootClassName());
    var _getListProps2 = _interopRequireDefault(require_getListProps());
    var _getValueProps2 = _interopRequireDefault(require_getValueProps());
    var _getDataProp = _interopRequireDefault(require_getDataProp());
    var _getNewMultipleValue = _interopRequireDefault(require_getNewMultipleValue());
    var _getNewSingleValue = _interopRequireDefault(require_getNewSingleValue());
    var _findItemIndex = _interopRequireDefault(require_findItemIndex());
    var _filterByValue = _interopRequireDefault(require_filterByValue());
    var _filterByText = _interopRequireDefault(require_filterByText());
    var _deselectValue = _interopRequireDefault(require_deselectValue());
    var _getNewActiveTagOnRemove = _interopRequireDefault(require_getNewActiveTagOnRemove());
    var _getNextItem = _interopRequireDefault(require_getNextItem());
    var _groupItems = _interopRequireDefault(require_groupItems());
    var _getValueMap = _interopRequireDefault(require_getValueMap());
    var _getGroups = _interopRequireDefault(require_getGroups());
    var _PaginationToolbar = require_PaginationToolbar2();
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var REMAINING_ITEMS = "REMAINING_ITEMS";
    exports.REMAINING_ITEMS = REMAINING_ITEMS;
    var emptyObject = {};
    var InovuaComboBox = function(_Component) {
      (0, _inherits2.default)(InovuaComboBox2, _Component);
      var _super = _createSuper(InovuaComboBox2);
      function InovuaComboBox2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaComboBox2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps) {
          if (_this.isExpandedControlled() && _this.props.expanded !== prevProps.expanded) {
            _this.onExpand();
          }
          if (prevProps.dataSource !== _this.props.dataSource) {
            _this.loadDataSource(_this.props.dataSource, _this.props);
          }
          if (_this.props.idProperty !== prevProps.idProperty) {
            _this.updateGetIdProperty(_this.props);
          }
          if (_this.props.displayProperty !== prevProps.displayProperty) {
            _this.updateGetDisplayProperty(_this.props);
          }
          if (_this.props.filterProperty !== prevProps.filterProperty) {
            _this.updateGetFilterProperty(_this.props);
          }
          if (_this.props.groupProperty !== prevProps.groupProperty) {
            _this.updateGroups({
              groupProperty: _this.props.groupProperty
            });
          }
          if (_this.isTextControled() && _this.props.text !== prevProps.text) {
            _this.onTextUpdate(_this.props.text);
          }
          if (_this.isActiveItemControlled() && prevProps.changeValueOnNavigation && !prevProps.multiple && prevProps.activeItem !== _this.props.activeItem) {
            _this.setValue(_this.props.activeItem, {
              action: "navigate"
            });
          }
          if (_this.isExpandedControlled() && !prevProps.expanded && _this.props.expanded) {
            _this.loadLazyDataSource({
              action: "expand",
              text: ""
            });
          }
        });
        _this.refTools = function(tools) {
          _this.toolsNode = tools;
        };
        _this.state = {
          loading: props2.defaultLoading || !!(props2.dataSource && props2.dataSource.then),
          value: props2.defaultValue,
          valueMap: {},
          text: props2.defaultText,
          activeTag: props2.defaultActiveTag,
          activeItem: props2.defaultActiveItem || !props2.multiple && props2.defaultValue,
          expanded: props2.defaultExpanded,
          toolsSize: {
            width: 0,
            height: 0
          },
          over: false,
          focus: false
        };
        _this.getData = _this.getData.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleItemClick = _this.handleItemClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleTextChange = _this.handleTextChange.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleTextInputClick = _this.handleTextInputClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleTagClick = _this.handleTagClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleRemoveTag = _this.handleRemoveTag.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleComboClick = _this.handleComboClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleComboKeyDown = _this.handleComboKeyDown.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleComboFocus = _this.handleComboFocus.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleComboBlur = _this.handleComboBlur.bind((0, _assertThisInitialized2.default)(_this));
        _this.getComboNode = _this.getComboNode.bind((0, _assertThisInitialized2.default)(_this));
        _this.clear = _this.clear.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleMouseEnter = _this.handleMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleMouseLeave = _this.handleMouseLeave.bind((0, _assertThisInitialized2.default)(_this));
        _this.toggleExpand = _this.toggleExpand.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleToolsSize = _this.handleToolsSize.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleRemoveMultipleTag = _this.handleRemoveMultipleTag.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleListScrollBottom = _this.handleListScrollBottom.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleDelete = _this.handleDelete.bind((0, _assertThisInitialized2.default)(_this));
        _this.getListNode = _this.getListNode.bind((0, _assertThisInitialized2.default)(_this));
        _this.updateGetIdProperty();
        _this.updateGetDisplayProperty();
        _this.updateGetFilterProperty();
        _this.addTextInputRef = function(ref) {
          _this.textInput = ref;
        };
        _this.addRootRef = function(ref) {
          _this.comboNode = ref;
        };
        _this.addListRef = function(ref) {
          _this.listNode = ref;
        };
        _this.setActiveItem = (0, _throttle.default)(_this.setActiveItem, 16);
        return _this;
      }
      (0, _createClass2.default)(InovuaComboBox2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this.props.autoFocus) {
            this.focus();
          }
          if (this.state.activeItem && this.state.activeItemIndex == null) {
            this.setState({
              activeItemIndex: this.getItemIndexById(this.state.activeItem)
            });
          }
          if (!this.isRemoteFilter()) {
            this.doFilter();
          }
          if (!this.props.lazyDataSource) {
            this.loadDataSource(this.props.dataSource);
          }
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props, state = this.state;
          var textInput = this.renderTextInput();
          var className = (0, _getRootClassName.default)({
            props: props2,
            state,
            computed: {
              value: this.getValue()
            }
          });
          var expanded = this.getExpanded();
          var items = this.getSelectedItems();
          var groupedItems = this.groupedItems = this.getGroupedItems(this.getSelectedItems());
          this.areItemsGrouped = this.groupedItems && this.groupedItems.remainingItems && this.groupedItems.remainingItems.length;
          var style = this.getRootStyle();
          var filteredData = this.getFilteredData();
          var text = this.getText();
          this.isNewCustomTagValid = (!filteredData || filteredData.length === 0) && !!text && props2.allowCustomTagCreation;
          return _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, InovuaComboBox2.propTypes)), {}, {
            onClick: this.handleComboClick,
            onMouseDown: this.handleComboMouseDown,
            onKeyDown: this.handleComboKeyDown,
            onFocus: this.handleComboFocus,
            onBlur: this.handleComboBlur,
            className,
            style,
            ref: this.addRootRef,
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            tabIndex: 0
          }), _react.default.createElement(_Value.default, _objectSpread(_objectSpread({}, this.getValueProps({
            items,
            groupedItems
          })), {}, {
            textInput,
            toolsSize: state.toolsSize
          })), _react.default.createElement("div", {
            className: "".concat(props2.rootClassName, "__tools"),
            ref: this.refTools
          }, this.renderSpinner(), this.renderClearIcon(), this.renderToggleIcon(), this.props.tagEllipsis && _react.default.createElement(_NotifyResize.NotifyResize, {
            notifyOnMount: true,
            onResize: this.handleToolsSize
          })), expanded && this.renderList());
        }
      }, {
        key: "getRootStyle",
        value: function getRootStyle() {
          var props2 = this.props, state = this.state;
          var style = _objectSpread({}, props2.style);
          if (props2.borderRadius) {
            style.borderRadius = props2.borderRadius;
          }
          if (props2.padding) {
            style.padding = props2.padding;
          }
          if (props2.border) {
            style.border = props2.border;
          }
          if (props2.background) {
            style.background = props2.background;
          }
          if (!this.getValue() && props2.emptyStyle) {
            style = _objectSpread(_objectSpread({}, style), props2.emptyStyle);
          }
          if (props2.disabledStyle && props2.disabled) {
            style = _objectSpread(_objectSpread({}, style), props2.disabledStyle);
          }
          if (state.focus && props2.focusedStyle) {
            style = _objectSpread(_objectSpread({}, style), props2.focusedStyle);
          }
          return style;
        }
      }, {
        key: "renderList",
        value: function renderList() {
          var listProps = this.getListProps();
          var result;
          if (typeof this.props.renderList === "function") {
            result = this.props.renderList({
              domProps: listProps,
              items: this.getFilteredData()
            });
          }
          if (result === void 0) {
            result = _react.default.createElement(_List.default, _objectSpread({}, listProps));
          }
          if (typeof this.props.renderListComponent === "function") {
            var res = this.props.renderListComponent(result);
            if ((0, _typeof2.default)(res) !== void 0) {
              return res;
            }
            result = res;
          }
          return result;
        }
      }, {
        key: "renderClearIcon",
        value: function renderClearIcon() {
          var props2 = this.props, state = this.state;
          var searchable = props2.searchable;
          var text = this.getText();
          var value = this.getValue();
          var showClearIcon = (text || value != null) && props2.clearIcon;
          if (props2.showClearIconOnMouseOver) {
            if (!state.over) {
              showClearIcon = false;
            }
          }
          if (searchable === false) {
            showClearIcon = false;
          }
          if (!showClearIcon) {
            return null;
          }
          var clearButton = _react.default.createElement(_ClearButton.default, {
            onClear: this.clear,
            closeIcon: props2.clearIcon,
            className: "".concat(props2.rootClassName, "__clear-icon")
          });
          return clearButton;
        }
      }, {
        key: "renderToggleIcon",
        value: function renderToggleIcon() {
          var props2 = this.props;
          if (!props2.toggleIcon) {
            return null;
          }
          return _react.default.createElement(_ToggleButton.default, {
            onToggle: this.toggleExpand,
            className: "".concat(props2.rootClassName, "__toggle-icon"),
            toggleIcon: props2.toggleIcon,
            expanded: this.getExpanded()
          });
        }
      }, {
        key: "renderTextInput",
        value: function renderTextInput() {
          if (this.props.disabled) {
            return null;
          }
          var text = this.getText();
          var value = text;
          if (!this.props.multiple) {
            if (text == null) {
              value = this.getValue() == null ? "" : this.getItemLabel();
            } else {
              value = text;
            }
          }
          var data = this.getFilteredData();
          var suggestion = null;
          if (this.props.minAutocompleteLength <= (value && value.length) && data && data[0]) {
            suggestion = this.getDisplayProperty(data[0]);
          }
          var inputProps = {
            key: "text_input",
            value,
            theme: this.props.theme,
            suggestion,
            placeholder: this.props.placeholder,
            rootClassName: "".concat(this.props.rootClassName, "__input"),
            className: this.props.inputClassName,
            style: this.props.inputStyle,
            onChange: this.handleTextChange,
            ref: this.addTextInputRef,
            onClick: this.handleTextInputClick,
            throttle: this.props.filterDelay,
            autocomplete: this.props.autocomplete,
            tabIndex: this.props.tabIndex,
            autocompleteDelay: this.props.autocompleteDelay,
            searchable: this.props.searchable
          };
          var result;
          if (typeof this.props.renderInput === "function") {
            result = this.props.renderInput({
              text,
              domProps: inputProps,
              onChange: inputProps.onChange
            });
          }
          if (result === void 0) {
            result = _react.default.createElement(_TextInput.default, _objectSpread({}, inputProps));
          }
          return result;
        }
      }, {
        key: "renderSpinner",
        value: function renderSpinner() {
          if (!this.props.loadingSpinner) {
            return null;
          }
          var loading = this.getLoading();
          if (!loading && !this.getExpanded()) {
            return null;
          }
          var spinner = this.props.loadingSpinner === true ? _react.default.createElement(_Icons.LoadingIcon, {
            className: "".concat(this.props.rootClassName, "__loading-spinner")
          }) : this.props.loadingSpinner;
          return loading ? spinner : (0, _react.cloneElement)(spinner, {
            style: spinner.props.style ? _objectSpread(_objectSpread({}, spinner.props.style), {}, {
              display: "none"
            }) : {
              display: "none"
            }
          });
        }
      }, {
        key: "getListProps",
        value: function getListProps() {
          var props2 = this.props, state = this.state;
          var data = this.getFilteredData();
          var groupsLength = this.state.groups && Object.keys(this.state.groups).length || 0;
          var listProps = (0, _getListProps2.default)({
            props: props2,
            state,
            computed: {
              data,
              loading: this.getLoading(),
              activeItem: this.getActiveItem(),
              value: this.getValue(),
              dataLength: data && data.length + groupsLength || 0,
              getIdProperty: this.getIdProperty,
              getDisplayProperty: this.getDisplayProperty,
              onItemClick: this.handleItemClick,
              getComboNode: this.getComboNode,
              ref: this.addListRef,
              onScrollBottom: this.handleListScrollBottom,
              text: this.getText(),
              isNewCustomTagValid: this.isNewCustomTagValid
            }
          });
          return listProps;
        }
      }, {
        key: "getValueProps",
        value: function getValueProps(_ref) {
          var items = _ref.items, groupedItems = _ref.groupedItems, item = _ref.item;
          var props2 = this.props, state = this.state;
          var value = this.getValue();
          return (0, _getValueProps2.default)({
            props: props2,
            state,
            computed: {
              items,
              item,
              groupedItems,
              value,
              label: this.getItemLabel(),
              activeTag: this.getActiveTag()
            },
            tagProps: {
              activeStyle: props2.tagActiveStyle,
              onClick: this.handleTagClick,
              onCloseTagClick: this.handleRemoveTag,
              onMultipleTagClose: this.handleRemoveMultipleTag
            }
          });
        }
      }, {
        key: "loadDataSource",
        value: function loadDataSource(dataSource) {
          var _this2 = this;
          var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.props;
          var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyObject, appendTo = _ref2.appendTo, action = _ref2.action, value = _ref2.value, text = _ref2.text, skip = _ref2.skip, limit = _ref2.limit, hasNextPage = _ref2.hasNextPage;
          if (Array.isArray(dataSource)) {
            if (this.getLoading()) {
              this.setLoading(false);
            }
            this.setData(dataSource, props2, {
              appendTo
            });
            return;
          }
          if (dataSource && Array.isArray(dataSource.data)) {
            if (this.getLoading()) {
              this.setLoading(false);
            }
            this.setData(dataSource.data, props2, {
              remoteCount: dataSource.count != null ? dataSource.count * 1 : null,
              appendTo
            });
            return;
          }
          if (dataSource && dataSource.then) {
            this.setLoading(true);
            dataSource.then(function(data) {
              _this2.props.onDataSourceLoad(data);
              _this2.loadDataSource(data, props2, {
                appendTo
              });
            });
            return;
          }
          if (typeof dataSource === "function") {
            var config = _objectSpread(_objectSpread({}, props2), {}, {
              data: this.state.data,
              hasNextPage: hasNextPage !== void 0 ? hasNextPage : this.hasNextPage(),
              text: this.isRemoteFilter() ? text !== void 0 ? text : this.getText() : void 0,
              skip: skip || 0,
              action,
              append: !!appendTo,
              value: value !== void 0 ? value : this.getValue(),
              limit: limit !== void 0 ? limit : this.props.limit
            });
            var dataResult = dataSource(config);
            this.loadDataSource(dataResult, void 0, {
              appendTo: config.append === false ? null : appendTo
            });
          }
          if (!dataSource) {
            this.setData(null, props2);
          }
        }
      }, {
        key: "setData",
        value: function setData(data) {
          var _this3 = this;
          var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.props;
          var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyObject, remoteCount = _ref3.remoteCount, appendTo = _ref3.appendTo;
          if (!data) {
            this.setState({
              data: null,
              dataMap: null,
              filteredData: null,
              remoteCount: null
            });
            return null;
          }
          if (Array.isArray(appendTo)) {
            data = appendTo.concat(data);
          }
          var dataMap = data.reduce(function(acc, item) {
            acc[_this3.getIdProperty(item)] = item;
            return acc;
          }, {});
          if (props2.groupProperty) {
            this.updateGroups({
              data,
              groupProperty: props2.groupProperty
            });
          }
          this.updateValueMap({
            value: this.getValue(props2),
            dataMap,
            oldValueMap: this.getValueMap()
          });
          this.updateFilteredData({
            data
          });
          this.setState({
            data,
            dataMap,
            remoteCount
          });
        }
      }, {
        key: "getPageCount",
        value: function getPageCount() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          var count = this.getDataCountForPagination(props2);
          return (0, _PaginationToolbar.getPageCount)({
            count,
            limit: props2.limit
          });
        }
      }, {
        key: "hasNextPage",
        value: function hasNextPage() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          return this.getCurrentPage(props2) < this.getPageCount(props2);
        }
      }, {
        key: "getCurrentPage",
        value: function getCurrentPage() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          var limit = props2.limit, skip = props2.skip;
          return (0, _PaginationToolbar.getCurrentPage)({
            skip: this.previousSkip ? this.previousSkip : 0,
            limit
          });
        }
      }, {
        key: "isLastPage",
        value: function isLastPage() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        }
      }, {
        key: "getDataCountForPagination",
        value: function getDataCountForPagination() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          var data = this.getData();
          var count = this.isPaginationEnabled(props2) ? props2.remoteCount || this.state.remoteCount : data ? data.length : 0;
          return count || 0;
        }
      }, {
        key: "getFilteredData",
        value: function getFilteredData() {
          return this.state.filteredData;
        }
      }, {
        key: "getData",
        value: function getData() {
          return this.state.data;
        }
      }, {
        key: "loadLazyDataSource",
        value: function loadLazyDataSource(_ref4) {
          var action = _ref4.action, text = _ref4.text;
          if (!this.props.lazyDataSource) {
            return null;
          }
          var params = {
            action,
            text,
            value: this.getValue()
          };
          this.setData(null);
          this.loadDataSource(this.props.dataSource, void 0, params);
          return null;
        }
      }, {
        key: "isPaginationEnabled",
        value: function isPaginationEnabled() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          var hasLoadNextPage = typeof props2.loadNextPage === "function";
          var hasFunctionalDataSource = typeof props2.dataSource === "function";
          if (props2.enablePagination === false) {
            return false;
          }
          return props2.enablePagination ? hasLoadNextPage || hasFunctionalDataSource : hasLoadNextPage;
        }
      }, {
        key: "remoteFilterData",
        value: function remoteFilterData() {
          var _ref5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref5$text = _ref5.text, text = _ref5$text === void 0 ? this.getText() : _ref5$text, _ref5$value = _ref5.value, value = _ref5$value === void 0 ? this.getValue() : _ref5$value, filterType = _ref5.filterType;
          this.previousSkip = null;
          this.loadDataSource(this.props.dataSource, void 0, {
            text,
            skip: 0
          });
        }
      }, {
        key: "loadNextPage",
        value: function loadNextPage() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          var filteredData = this.getFilteredData();
          if (filteredData && filteredData.length < 3) {
            return null;
          }
          if (this.previousSkip == null) {
            this.previousSkip = props2.skip;
          }
          var limit = props2.limit;
          var hasNextPage = this.hasNextPage();
          var newSkip = this.previousSkip + limit;
          this.previousSkip = newSkip;
          if (!this.isPaginationEnabled()) {
            return;
          }
          var fn = typeof props2.dataSource === "function" ? props2.dataSource : null;
          if (fn && hasNextPage) {
            var currentData = this.state.data;
            this.loadDataSource(this.props.dataSource, void 0, {
              appendTo: currentData,
              hasNextPage,
              skip: newSkip,
              limit,
              filter: this.currentFilter
            });
          }
        }
      }, {
        key: "isRemoteDataSource",
        value: function isRemoteDataSource() {
          return typeof this.props.dataSource === "function";
        }
      }, {
        key: "isRemoteFilter",
        value: function isRemoteFilter() {
          return (0, _typeof2.default)(this.isRemoteDataSource()) && this.props.remoteFilter;
        }
      }, {
        key: "doFilter",
        value: function doFilter() {
          var _ref6 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, text = _ref6.text, value = _ref6.value, force = _ref6.force, data = _ref6.data, filterType = _ref6.filterType, action = _ref6.action;
          if (this.currentFilter === text && !force) {
            return;
          }
          this.currentFilter = text;
          if (this.isRemoteFilter()) {
            if (action === "select") {
              return;
            }
            this.remoteFilterData({
              value,
              text,
              filterType
            });
          } else {
            this.updateFilteredData({
              text,
              value,
              data,
              filterType
            });
          }
        }
      }, {
        key: "updateFilteredData",
        value: function updateFilteredData() {
          var _ref7 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref7$text = _ref7.text, text = _ref7$text === void 0 ? this.getText() : _ref7$text, _ref7$value = _ref7.value, value = _ref7$value === void 0 ? this.getValue() : _ref7$value, _ref7$data = _ref7.data, data = _ref7$data === void 0 ? this.state.data : _ref7$data, filterType = _ref7.filterType;
          var filteredData = data;
          if (!Array.isArray(filteredData)) {
            return filteredData;
          }
          if (!this.isRemoteFilter()) {
            filteredData = this.filterDataByText({
              text,
              data: filteredData
            });
            filteredData = this.filterDataByValue({
              value,
              text,
              data: filteredData
            });
          }
          var isFilteredByText = filterType === "text" && data.length !== filteredData.length;
          if (isFilteredByText && this.props.activeFirstItemOnFilter) {
            var firstItem = filteredData && filteredData[0];
            if (firstItem) {
              var id = this.getIdProperty(firstItem);
              this.setActiveItem(id);
            } else {
              this.setActiveItem(null);
            }
          }
          this.setState({
            filteredData
          });
        }
      }, {
        key: "filterDataByValue",
        value: function filterDataByValue(_ref8) {
          var _ref8$value = _ref8.value, value = _ref8$value === void 0 ? this.getValue() : _ref8$value, _ref8$data = _ref8.data, data = _ref8$data === void 0 ? this.state.data : _ref8$data;
          if (!Array.isArray(data)) {
            return data;
          }
          var newData = data;
          if (data && value && this.props.removeSelectedItems) {
            newData = (0, _filterByValue.default)({
              data: newData,
              getIdProperty: this.getIdProperty,
              value
            });
          }
          return newData;
        }
      }, {
        key: "filterDataByText",
        value: function filterDataByText(_ref9) {
          var _ref9$text = _ref9.text, text = _ref9$text === void 0 ? this.getText() : _ref9$text, _ref9$data = _ref9.data, data = _ref9$data === void 0 ? this.state.data : _ref9$data;
          if (!data || !text) {
            return data;
          }
          var newData = data;
          if (this.isFilterTextActive()) {
            var filterFunction = this.props.filterFunction;
            newData = (0, _filterByText.default)({
              data,
              text,
              filterFunction,
              getFilterProperty: this.getFilterProperty || this.getDisplayProperty,
              mode: this.props.filterMode,
              hightlight: this.props.highlightMatchedText
            });
          }
          return newData;
        }
      }, {
        key: "getDataMap",
        value: function getDataMap() {
          return this.state.dataMap;
        }
      }, {
        key: "getValueMap",
        value: function getValueMap() {
          return this.state.valueMap;
        }
      }, {
        key: "isValueControlled",
        value: function isValueControlled() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          return props2.value !== void 0;
        }
      }, {
        key: "getValue",
        value: function getValue() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          return this.isValueControlled(props2) ? props2.value : this.state.value;
        }
      }, {
        key: "setValue",
        value: function setValue(newValue) {
          var _ref10 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, action = _ref10.action;
          if (this.props.disabled) {
            return null;
          }
          if (this.props.readOnly) {
            return null;
          }
          if (this.props.maxValueLength && newValue && newValue.length > this.props.maxValueLength) {
            return null;
          }
          if (this.props.collapseOnSelect && action !== "navigate") {
            this.collapse();
          }
          if (this.props.autoBlur) {
            this.blur();
          }
          if (!this.isValueControlled()) {
            this.setState({
              value: newValue
            });
          }
          this.setText(null, {
            skipFilter: true
          });
          this.updateValueMap({
            value: newValue
          });
          this.props.onChange(newValue);
        }
      }, {
        key: "isFilterTextActive",
        value: function isFilterTextActive() {
          var text = this.getText();
          var data = this.getFilteredData();
          return data && text && this.props.searchable && text.length >= this.props.filterMinLength;
        }
      }, {
        key: "updateValueMap",
        value: function updateValueMap(_ref11) {
          var _this4 = this;
          var value = _ref11.value, dataMap = _ref11.dataMap, oldValueMap = _ref11.oldValueMap;
          var newValueMap = (0, _getValueMap.default)({
            value,
            dataMap: dataMap || this.getDataMap(),
            oldValueMap: oldValueMap || this.getValueMap()
          });
          if (newValueMap) {
            newValueMap = Object.keys(newValueMap).reduce(function(acc, id) {
              var item = newValueMap[id];
              acc[id] = _objectSpread(_objectSpread({}, item), {}, {
                id: _this4.getIdProperty(item),
                label: _this4.getDisplayProperty(item) || item
              });
              return acc;
            }, {});
          }
          this.setState({
            valueMap: newValueMap
          });
        }
      }, {
        key: "selectItem",
        value: function selectItem(id) {
          var dataMap = this.getDataMap();
          var item = dataMap && dataMap[id];
          if (!item && !this.props.allowCustomTagCreation) {
            return null;
          }
          if (typeof this.props.isSelectedItemValid === "function") {
            var isItemValid = this.props.isSelectedItemValid(item);
            if (!isItemValid) {
              return null;
            }
          }
          var value = this.getValue();
          var newValue;
          if (this.props.multiple) {
            newValue = (0, _getNewMultipleValue.default)({
              id,
              value
            });
          } else {
            newValue = (0, _getNewSingleValue.default)({
              id,
              value,
              toggle: this.props.changeValueOnNavigation ? false : this.props.allowSelectionToggle
            });
          }
          this.setValue(newValue, {
            action: "select"
          });
          this.props.onItemClick({
            item,
            id
          });
        }
      }, {
        key: "deselectItem",
        value: function deselectItem(id) {
          var value = this.getValue();
          var newValue = (0, _deselectValue.default)({
            id,
            value,
            getIdProperty: this.getIdProperty
          });
          this.setValue(newValue);
        }
      }, {
        key: "deselectItems",
        value: function deselectItems() {
          var _this5 = this;
          var ids = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          var value = this.getValue();
          var newValue = ids.reduce(function(acc, id) {
            acc = (0, _deselectValue.default)({
              id,
              value: acc,
              getIdProperty: _this5.getIdProperty
            });
            return acc;
          }, value);
          this.setValue(newValue);
        }
      }, {
        key: "getExpanded",
        value: function getExpanded() {
          return this.isExpandedControlled() ? this.props.expanded : this.expanded != null ? this.expanded : this.state.expanded;
        }
      }, {
        key: "isExpandedControlled",
        value: function isExpandedControlled() {
          return this.props.expanded !== void 0;
        }
      }, {
        key: "setExpanded",
        value: function setExpanded(expanded) {
          var _this6 = this;
          if (this.expandedPromise) {
            this.expandedPromise.then(function(result) {
              if (_this6.getExpanded() !== expanded) {
                _this6.setExpanded(expanded);
              }
            });
            return;
          }
          this.expandedPromise = this.doSetExpanded(expanded).then(function() {
            delete _this6.expandedPromise;
          });
        }
      }, {
        key: "doSetExpanded",
        value: function doSetExpanded(expanded) {
          var _this7 = this;
          if (this.props.disabled) {
            return Promise.resolve(null);
          }
          var currentExpanded = this.getExpanded();
          if (currentExpanded === expanded) {
            return Promise.resolve(expanded);
          }
          if (!expanded && this.isRemoteFilter()) {
            this.previousSkip = null;
          }
          globalObject.requestAnimationFrame(function() {
            if (_this7.toolsNode) {
              _this7.handleToolsSize();
            }
          });
          var promise;
          if (!this.isExpandedControlled()) {
            promise = new Promise(function(resolve, reject) {
              _this7.setState({
                expanded
              }, function() {
                resolve(expanded);
              });
            });
          } else {
            promise = Promise.resolve(expanded);
          }
          if (expanded) {
            if (this.isRemoteDataSource() && this.state.data === void 0) {
              this.loadDataSource(this.props.dataSource);
            } else {
              if (this.wasExpandedAtLeastOnce) {
                this.doFilter({
                  text: "",
                  action: "expand",
                  force: true
                });
              }
            }
          }
          if (expanded && !this.wasExpandedAtLeastOnce) {
            this.wasExpandedAtLeastOnce = true;
          }
          if (expanded) {
            this.onExpand();
          } else {
            this.props.onCollapse();
          }
          this.props.onExpandChange(expanded);
          this.props.onExpandedChange(expanded);
          return promise;
        }
      }, {
        key: "onExpand",
        value: function onExpand() {
          this.props.onExpand();
          if (this.props.highlightFirst) {
            var activeItem = this.getActiveItem();
            if (!activeItem) {
              var firstItem = this.getItemByIndex(0);
              if (firstItem) {
                var id = this.getIdProperty(firstItem);
                this.setActiveItem(id);
              }
            }
          }
        }
      }, {
        key: "isActiveTagControlled",
        value: function isActiveTagControlled() {
          return this.props.activeTag !== void 0;
        }
      }, {
        key: "setActiveTag",
        value: function setActiveTag(id) {
          if (this.props.disabled) {
            return null;
          }
          if (!this.isActiveTagControlled()) {
            this.setState({
              activeTag: id
            });
          }
          this.props.onActiveTagChange(id);
        }
      }, {
        key: "deselectActiveTag",
        value: function deselectActiveTag() {
          var activeTag = this.getActiveTag();
          if (activeTag) {
            this.setActiveTag(null);
          }
        }
      }, {
        key: "getActiveTag",
        value: function getActiveTag() {
          return this.isActiveTagControlled() ? this.props.activeTag : this.state.activeTag;
        }
      }, {
        key: "getSelectedItems",
        value: function getSelectedItems() {
          var _this8 = this;
          var valueMap = this.getValueMap();
          var value = this.getValue();
          var items = null;
          if (value) {
            value = Array.isArray(value) ? value : [value];
            items = value.map(function(id) {
              return valueMap[id] || {
                id: (0, _typeof2.default)(id) === "object" ? _this8.getIdProperty(id) : id,
                label: (0, _typeof2.default)(id) === "object" ? _this8.getDisplayProperty(id) : _this8.getItemLabel(id)
              };
            });
          }
          return items;
        }
      }, {
        key: "getItemLabel",
        value: function getItemLabel(id) {
          id = id === void 0 ? this.getValue() : id;
          var valueMap = this.getValueMap();
          var dataMap = this.getDataMap();
          var label;
          if (valueMap && valueMap[id]) {
            label = valueMap[id].label;
          } else if (dataMap && dataMap[id]) {
            label = this.getDisplayProperty(dataMap[id]);
          }
          if (label === void 0) {
            label = this.props.defaultDisplayValue !== void 0 && id != null ? this.props.defaultDisplayValue : id;
          }
          return label;
        }
      }, {
        key: "getGroupedItems",
        value: function getGroupedItems(items) {
          var maxTagsLength = this.props.maxTagsLength;
          if (maxTagsLength == null || !items) {
            return null;
          }
          return (0, _groupItems.default)({
            maxTagsLength,
            items
          });
        }
      }, {
        key: "isActiveItemControlled",
        value: function isActiveItemControlled() {
          return this.props.activeItem !== void 0;
        }
      }, {
        key: "setActiveItem",
        value: function setActiveItem(id) {
          if (this.props.disabled) {
            return null;
          }
          var activeItem = this.getActiveItem();
          if (activeItem === id) {
            return null;
          }
          if (!this.isActiveItemControlled()) {
            var activeItemIndex = null;
            if (id) {
              activeItemIndex = this.getItemIndexById(id);
            }
            this.setState({
              activeItemIndex,
              activeItem: id
            });
            if (this.props.changeValueOnNavigation && !this.props.multiple) {
              this.setValue(id, {
                action: "navigate"
              });
            }
          }
          this.scrollToId(id);
          this.props.onActiveItemChange(id);
        }
      }, {
        key: "getActiveItem",
        value: function getActiveItem() {
          return this.isActiveItemControlled() ? this.props.activeItem : this.state.activeItem;
        }
      }, {
        key: "isTextControled",
        value: function isTextControled() {
          return this.props.text != null;
        }
      }, {
        key: "getText",
        value: function getText() {
          return this.isTextControled() ? this.props.text : this.state.text;
        }
      }, {
        key: "setText",
        value: function setText(text) {
          var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject;
          var callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyFn;
          if (typeof config === "function") {
            callback = config;
            config = emptyObject;
          }
          if (text === this.getText()) {
            callback();
            return;
          }
          if (!this.isTextControled()) {
            this.setStateText(text, config, callback);
          }
          this.props.onTextChange(text);
        }
      }, {
        key: "setStateText",
        value: function setStateText(text) {
          var _this9 = this;
          var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject;
          var callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyFn;
          if (typeof config === "function") {
            callback = config;
            config = emptyObject;
          }
          this.setState({
            text
          }, function() {
            _this9.onTextUpdate(text, config);
            callback();
          });
        }
      }, {
        key: "onTextUpdate",
        value: function onTextUpdate(text) {
          var _ref12 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, skipFilter = _ref12.skipFilter;
          this.clearValueOnEmptyIfNecessary(text);
          if (!skipFilter) {
            this.doFilter({
              text,
              filterType: "text"
            });
          }
        }
      }, {
        key: "clearValueOnEmptyIfNecessary",
        value: function clearValueOnEmptyIfNecessary(text) {
          if (this.props.clearValueOnEmpty && !this.props.multiple && text === "") {
            this.setValue(null);
          }
        }
      }, {
        key: "getLoading",
        value: function getLoading() {
          return this.isLoadingControlled() ? this.props.loading : this.state.loading;
        }
      }, {
        key: "isLoadingControlled",
        value: function isLoadingControlled() {
          return this.props.loading != null;
        }
      }, {
        key: "setLoading",
        value: function setLoading(loading) {
          if (loading === this.state.loading) {
            return;
          }
          if (!this.isLoadingControlled()) {
            this.setState({
              loading
            });
          }
          this.props.onLoadingChange(loading);
        }
      }, {
        key: "handleComboClick",
        value: function handleComboClick(event2) {
          event2.preventDefault();
          if (this.props.toggleExpandOnClick) {
            this.toggleExpand();
          } else if (this.props.expandOnClick) {
            this.expand();
          }
          if (this.props.focusOnClick && !this.hasFocus()) {
            this.focus();
          }
        }
      }, {
        key: "handleMouseEnter",
        value: function handleMouseEnter() {
          this.setState({
            over: true
          });
        }
      }, {
        key: "handleMouseLeave",
        value: function handleMouseLeave() {
          this.setState({
            over: false
          });
        }
      }, {
        key: "handleComboFocus",
        value: function handleComboFocus() {
          if (this.props.expandOnFocus) {
            this.expand();
          }
          this.setState({
            focus: true
          });
          this.props.onFocus();
        }
      }, {
        key: "handleComboBlur",
        value: function handleComboBlur(event2) {
          var _this10 = this;
          if (this.isFocused() && event2 && event2.relatedTarget && (0, _containsNode.default)(this.comboNode, event2.relatedTarget)) {
            globalObject.requestAnimationFrame(function() {
              _this10.focus();
            });
            return;
          }
          if (this.props.collapseOnBlur) {
            this.collapse();
          }
          if (this.props.clearTextOnBlur) {
            this.setText(null);
          }
          this.setState({
            focus: false
          });
          this.props.onBlur();
        }
      }, {
        key: "isFocused",
        value: function isFocused() {
          return this.state.focus;
        }
      }, {
        key: "handleItemClick",
        value: function handleItemClick(id) {
          if (!this.isFocused() && this.props.focusOnClick) {
            this.focus();
          }
          this.setActiveItem(id);
          this.selectItem(id);
        }
      }, {
        key: "handleTextChange",
        value: function handleTextChange(text) {
          var _this11 = this;
          this.deselectActiveTag();
          this.setText(text, {
            skipFilter: this.props.expandOnTextChange && !this.getExpanded()
          }, function() {
            if (_this11.props.expandOnTextChange) {
              _this11.expand();
            }
          });
        }
      }, {
        key: "handleTextInputClick",
        value: function handleTextInputClick() {
          this.deselectActiveTag();
        }
      }, {
        key: "handleRemoveTag",
        value: function handleRemoveTag(id) {
          this.removeTag(id);
        }
      }, {
        key: "handleRemoveMultipleTag",
        value: function handleRemoveMultipleTag(ids) {
          this.deselectItems(ids);
        }
      }, {
        key: "handleListScrollBottom",
        value: function handleListScrollBottom() {
          this.loadNextPage();
        }
      }, {
        key: "removeTag",
        value: function removeTag(id) {
          var dir = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
          var activeTag = this.getActiveTag();
          if (activeTag === id && activeTag != null) {
            var value = this.getValue();
            var newActiveTag = (0, _getNewActiveTagOnRemove.default)({
              id,
              value,
              dir
            });
            this.setActiveTag(newActiveTag);
          }
          this.deselectItem(id);
        }
      }, {
        key: "removeRemainingTags",
        value: function removeRemainingTags() {
          var ids = this.groupedItems.remainingItems.map(function(item) {
            return item.id;
          });
          var visibleItems = this.groupedItems.visibleItems;
          var activeTag = this.getActiveTag();
          if (activeTag === REMAINING_ITEMS) {
            var lastItem = Array.isArray(visibleItems) && visibleItems[visibleItems.length - 1];
            if (lastItem) {
              this.setActiveTag(lastItem.id);
            }
          } else {
            this.deselectActiveTag();
          }
          this.removeTags(ids);
        }
      }, {
        key: "removeTags",
        value: function removeTags(ids) {
          this.deselectItems(ids);
        }
      }, {
        key: "handleTagClick",
        value: function handleTagClick(id) {
          var activeTag = this.getActiveTag();
          if (activeTag === id) {
            this.setActiveTag(null);
          } else {
            this.setActiveTag(id);
          }
          this.props.onTagClick(this.getItemById(id));
          if (this.props.focusOnClick && !this.hasFocus()) {
            this.focus();
          }
        }
      }, {
        key: "handleComboMouseDown",
        value: function handleComboMouseDown(event2) {
          event2.preventDefault();
        }
      }, {
        key: "handleComboKeyDown",
        value: function handleComboKeyDown(event2) {
          if (this.props.allowCustomTagCreation && event2.key === "Enter") {
            if (this.isNewCustomTagValid) {
              this.selectItem(this.getText());
              this.setText(null);
            }
          }
          if (this.props.enableNavigation) {
            if (this.props.enableListNavigation) {
              switch (event2.key) {
                case "ArrowDown":
                  this.navigateToNextItem(1, event2);
                  break;
                case "ArrowUp":
                  this.navigateToNextItem(-1, event2);
                  break;
                case "Enter":
                  this.handleEnterKeyPress(event2);
                  break;
                case "Space":
                  this.selectActiveItem();
                  break;
              }
            }
            if (this.props.enableTagNavigation) {
              switch (event2.key) {
                case "ArrowLeft":
                  this.navigateToNextTag(-1, event2);
                  break;
                case "ArrowRight":
                  this.navigateToNextTag(1, event2);
                  break;
                case "Backspace":
                  this.handleBackspace(event2);
                  break;
                case "Delete":
                  this.handleDelete(event2);
              }
            }
          }
          if (event2.key === "Escape") {
            var expanded = this.getExpanded();
            if (this.props.collapseOnEscape) {
              if (expanded) {
                this.collapse();
              }
            }
            if (!expanded && this.getActiveTag()) {
              this.setActiveTag(null);
            }
            if (!this.props.multiple) {
              this.setText(null);
            }
          }
          if (this.props.onKeyDown) {
            this.props.onKeyDown(event2, this);
          }
        }
      }, {
        key: "navigateToNextItem",
        value: function navigateToNextItem(direction, event2) {
          var data = this.getFilteredData();
          if (event2 && event2.preventDefault) {
            event2.preventDefault();
          }
          if (this.getExpanded()) {
            var activeItem = this.getActiveItem();
            var newActiveItem;
            if (activeItem != null) {
              newActiveItem = (0, _getNextItem.default)({
                direction,
                data,
                id: activeItem,
                activeItem,
                getIdProperty: this.getIdProperty
              });
            } else {
              var firstItemId;
              var lastItemId;
              if (data && data.length) {
                firstItemId = this.getIdProperty(data[0]);
                lastItemId = this.getIdProperty(data[data.length - 1]);
                if (direction && firstItemId != null) {
                  newActiveItem = firstItemId;
                }
                if (direction === -1 && lastItemId != null) {
                  newActiveItem = lastItemId;
                }
              }
            }
            this.setActiveItem(newActiveItem);
          } else {
            this.expand();
          }
        }
      }, {
        key: "selectActiveItem",
        value: function selectActiveItem() {
          var activeItem = this.getActiveItem();
          if (activeItem) {
            this.selectItem(activeItem);
          }
        }
      }, {
        key: "handleEnterKeyPress",
        value: function handleEnterKeyPress(event2) {
          var expanded = this.getExpanded();
          if (expanded) {
            this.selectActiveItem();
          }
          var activeItem = this.getActiveItem();
          if (this.props.collapseOnSelectWithEnter) {
            if (activeItem && expanded) {
              this.collapse();
            }
          }
          if (this.props.navigateToNextAfterSelection && this.props.multiple && activeItem) {
            this.navigateToNextItem(1, event2);
          }
        }
      }, {
        key: "navigateToNextTag",
        value: function navigateToNextTag(direction, event2) {
          if (!this.isNavigationAllowed(direction)) {
            return null;
          }
          if (event2 && event2.preventDefault) {
            event2.preventDefault();
          }
          var newActiveTag;
          var items = this.getSelectedItems();
          var itemsIds;
          if (this.areItemsGrouped) {
            var visibleItems = this.groupedItems.visibleItems.map(function(item) {
              return item.id;
            });
            itemsIds = [].concat((0, _toConsumableArray2.default)(visibleItems), [REMAINING_ITEMS]);
          } else {
            itemsIds = items.map(function(item) {
              return item.id;
            });
          }
          var currentActiveTag = this.getActiveTag();
          var currentIndex = itemsIds.indexOf(currentActiveTag);
          var lastIndex = itemsIds.length - 1;
          var lastTag = itemsIds[lastIndex];
          var firstTag = itemsIds[0];
          var isFirstTag = currentIndex === 0;
          var isLastTag = currentIndex === lastIndex;
          if (direction === -1 && isFirstTag) {
            this.setActiveTag(null);
            return null;
          }
          if (direction === 1 && isLastTag) {
            this.setActiveTag(null);
            return null;
          }
          if (currentActiveTag === null || currentIndex === -1) {
            newActiveTag = direction === -1 ? lastTag : firstTag;
          } else {
            if (direction === -1) {
              newActiveTag = isFirstTag ? lastTag : itemsIds[currentIndex - 1];
            } else if (direction === 1) {
              newActiveTag = isLastTag ? firstTag : itemsIds[currentIndex + 1];
            }
          }
          this.setActiveTag(newActiveTag);
          return null;
        }
      }, {
        key: "isNavigationAllowed",
        value: function isNavigationAllowed(direction) {
          if (!this.props.multiple) {
            return false;
          }
          var inputNode = this.getTextInputNode();
          if (inputNode.hasSelection()) {
            return false;
          }
          var currentActiveTag = this.getActiveTag();
          var canNavigateLeft = inputNode.isCursorAtStartPosition() && direction === -1;
          var canNavigateRight = inputNode.isCursorAtEndPosition() && direction === 1;
          if (!canNavigateRight && !canNavigateLeft && !currentActiveTag) {
            return false;
          }
          var items = this.getSelectedItems();
          if (!Array.isArray(items)) {
            return false;
          }
          if (items.length === 1 && currentActiveTag) {
            this.setActiveTag(null);
            return false;
          }
          return true;
        }
      }, {
        key: "handleBackspace",
        value: function handleBackspace(event2) {
          if (this.props.multiple) {
            this.handleTagBackspaceRemove(event2);
          }
        }
      }, {
        key: "handleDelete",
        value: function handleDelete(event2) {
          var activeTag = this.getActiveTag();
          if (this.props.multiple && activeTag) {
            this.removeTag(activeTag, 1);
          }
        }
      }, {
        key: "handleTagBackspaceRemove",
        value: function handleTagBackspaceRemove(event2) {
          if (!this.props.removeTagOnBackspace) {
            return null;
          }
          var value = this.getValue();
          if (!value) {
            return null;
          }
          var activeTag = this.getActiveTag();
          if (activeTag != null) {
            event2.preventDefault();
            if (activeTag === REMAINING_ITEMS) {
              this.removeRemainingTags();
            } else {
              this.removeTag(activeTag, -1);
            }
            return null;
          }
          var inputNode = this.getTextInputNode();
          var canDeleteTag = value && value.length && inputNode.isCursorAtStartPosition();
          if (canDeleteTag) {
            if (this.areItemsGrouped) {
              var ids = this.groupedItems.remainingItems.map(function(item) {
                return item.id;
              });
              this.removeTags(ids);
            } else {
              var items = this.getSelectedItems();
              var lastItem = items[items.length - 1];
              var lastItemId = lastItem.id;
              if (this.props.keepTagTextOnRemove) {
                var label = lastItem.label;
                if (label && typeof label === "string") {
                  this.setText(label);
                }
              }
              this.removeTag(lastItemId);
            }
          }
          return null;
        }
      }, {
        key: "handleToolsSize",
        value: function handleToolsSize() {
          var size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.toolsNode ? this.toolsNode.getBoundingClientRect() : {
            width: 0,
            height: 0
          };
          var node = this.comboNode;
          var computedStyle = globalObject.getComputedStyle(node);
          var width = size.width + parseInt(computedStyle.paddingLeft, 10) + parseInt(computedStyle.paddingRight, 10);
          this.setState({
            toolsSize: {
              height: size.height,
              width
            }
          });
        }
      }, {
        key: "expand",
        value: function expand() {
          this.setExpanded(true);
        }
      }, {
        key: "collapse",
        value: function collapse() {
          this.setExpanded(false);
        }
      }, {
        key: "scrollToIndex",
        value: function scrollToIndex(index2) {
          var listNode = this.getListNode();
          return listNode && listNode.scrollToIndex(index2);
        }
      }, {
        key: "getItemIndexById",
        value: function getItemIndexById(id) {
          var index2 = (0, _findItemIndex.default)({
            id,
            data: this.getFilteredData(),
            getIdProperty: this.getIdProperty
          });
          return index2;
        }
      }, {
        key: "scrollToId",
        value: function scrollToId(id) {
          var index2 = this.getItemIndexById(id);
          if (index2 != null) {
            this.scrollToIndex(index2);
          }
        }
      }, {
        key: "toggleExpand",
        value: function toggleExpand() {
          var expanded = this.getExpanded();
          if (expanded) {
            this.collapse();
          } else {
            this.expand();
          }
        }
      }, {
        key: "getItemByIndex",
        value: function getItemByIndex(index2) {
          var data = this.getFilteredData();
          if (!data || !Array.isArray(data) || !data[index2]) {
            return null;
          }
          return data[index2];
        }
      }, {
        key: "getItemById",
        value: function getItemById(id) {
          var dataMap = this.getDataMap();
          return dataMap && dataMap[id] || id;
        }
      }, {
        key: "updateGetIdProperty",
        value: function updateGetIdProperty(props2) {
          props2 = props2 || this.props;
          this.getIdProperty = (0, _getDataProp.default)(props2.idProperty);
        }
      }, {
        key: "updateGetDisplayProperty",
        value: function updateGetDisplayProperty(props2) {
          props2 = props2 || this.props;
          this.getDisplayProperty = (0, _getDataProp.default)(props2.displayProperty);
        }
      }, {
        key: "updateGetFilterProperty",
        value: function updateGetFilterProperty(props2) {
          props2 = props2 || this.props;
          this.getFilterProperty = (0, _getDataProp.default)(props2.filterProperty);
        }
      }, {
        key: "updateGroups",
        value: function updateGroups(_ref13) {
          var _ref13$groupProperty = _ref13.groupProperty, groupProperty = _ref13$groupProperty === void 0 ? this.props.groupProperty : _ref13$groupProperty, _ref13$data = _ref13.data, data = _ref13$data === void 0 ? this.getFilteredData() : _ref13$data;
          if (!data) {
            return null;
          }
          var groups = (0, _getGroups.default)(data, groupProperty);
          this.setState({
            groups
          });
        }
      }, {
        key: "focus",
        value: function focus() {
          var textInput = this.getTextInputNode();
          if (textInput && textInput.focus && !this.hasFocus()) {
            textInput.focus();
          }
        }
      }, {
        key: "blur",
        value: function blur() {
          var textInput = this.getTextInputNode();
          if (textInput && textInput.blur) {
            textInput.blur();
          }
        }
      }, {
        key: "hasFocus",
        value: function hasFocus() {
          var textInput = this.getTextInputNode();
          if (textInput && textInput.hasFocus) {
            return textInput.hasFocus();
          }
          return false;
        }
      }, {
        key: "getTextInputNode",
        value: function getTextInputNode() {
          return this.textInput;
        }
      }, {
        key: "getComboNode",
        value: function getComboNode() {
          return this.comboNode;
        }
      }, {
        key: "getListNode",
        value: function getListNode() {
          return this.listNode;
        }
      }, {
        key: "getVirtualListNode",
        value: function getVirtualListNode() {
          return this.listNode && this.listNode.getVirtualListNode();
        }
      }, {
        key: "getlListNode",
        value: function getlListNode() {
          return this.listNode && this.listNode.getlListNode();
        }
      }, {
        key: "addItem",
        value: function addItem(item) {
          var newData = [].concat((0, _toConsumableArray2.default)(this.getData()), [item]);
          this.setData(newData);
        }
      }, {
        key: "clear",
        value: function clear() {
          var _this12 = this;
          this.setValue(null);
          this.setText(null);
          globalObject.requestAnimationFrame(function() {
            if (_this12.toolsNode) {
              _this12.handleToolsSize();
            }
          });
        }
      }, {
        key: "getItem",
        value: function getItem(id) {
          return this.getItemById(id);
        }
      }, {
        key: "getItemCount",
        value: function getItemCount() {
          var data = this.getData();
          return Array.isArray(data) ? data.length : null;
        }
      }, {
        key: "insertItem",
        value: function insertItem(_ref14) {
          var index2 = _ref14.index, item = _ref14.item;
          var data = this.getData();
          var newData = [].concat((0, _toConsumableArray2.default)(data.slice(0, index2)), [item], (0, _toConsumableArray2.default)(data.slice(index2)));
          this.setData(newData);
        }
      }, {
        key: "removeItems",
        value: function removeItems(ids) {
          var _this13 = this;
          ids = Array.isArray(ids) ? ids : [ids];
          var data = this.getData();
          var newData = data.filter(function(item) {
            var id = _this13.getIdProperty(item);
            return ids.indexOf(id) === -1;
          });
          this.setData(newData);
        }
      }, {
        key: "toggle",
        value: function toggle() {
          var expanded = this.getExpanded();
          this.setExpanded(!expanded);
        }
      }]);
      return InovuaComboBox2;
    }(_react.Component);
    function emptyFn() {
    }
    InovuaComboBox.defaultProps = {
      rootClassName: "inovua-react-toolkit-combo-box",
      inlineFlex: false,
      itemEllipsis: true,
      borderRadius: 0,
      shadow: true,
      showShadowOnMouseOver: false,
      clearTextOnBlur: true,
      onKeyDown: emptyFn,
      autoFocus: false,
      autoBlur: false,
      focusOnClick: true,
      onFocus: emptyFn,
      onBlur: emptyFn,
      defaultActiveItem: null,
      highlightFirst: false,
      onTextChange: emptyFn,
      searchable: true,
      tagCloseIconPosition: "end",
      removeTagOnBackspace: true,
      tagEllipsis: true,
      filterMinLength: 0,
      filterDelay: 300,
      activeFirstItemOnFilter: true,
      clearIcon: true,
      toggleIcon: true,
      showClearIconOnMouseOver: false,
      clearTextOnSelect: true,
      filterMode: "contains",
      highlightMatchedText: false,
      onActiveTagChange: emptyFn,
      enableTagNavigation: true,
      onTagClick: emptyFn,
      onActiveItemChange: emptyFn,
      keepTagTextOnRemove: true,
      onItemClick: emptyFn,
      onChange: emptyFn,
      minAutocompleteLength: 3,
      autocompleteDelay: 300,
      autocomplete: false,
      defaultValue: null,
      multiple: false,
      removeSelectedItems: false,
      allowSelectionToggle: true,
      clearValueOnEmpty: true,
      onDataSourceLoad: emptyFn,
      idProperty: "id",
      displayProperty: "label",
      groupProperty: "group",
      limit: 50,
      skip: 0,
      onLoadingChange: emptyFn,
      listLoadingText: "Loading...",
      loadingSpinner: true,
      listEmptyText: "No data found",
      defaultText: null,
      defaultExpanded: false,
      onExpandedChange: emptyFn,
      onExpandChange: emptyFn,
      collapseOnEscape: true,
      expandOnClick: true,
      expandOnFocus: true,
      collapseOnBlur: true,
      onExpand: emptyFn,
      onCollapse: emptyFn,
      expandOnTextChange: true,
      toggleExpandOnClick: true,
      wrapMultiple: true,
      theme: "default-light",
      enableNavigation: true,
      enableListNavigation: true,
      navigateToNextAfterSelection: true,
      positions: ["bottom", "top"],
      offset: 2,
      constrainTo: true
    };
    var VALUE_TYPE = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool]))]);
    InovuaComboBox.propTypes = {
      rootClassName: _propTypes.default.string,
      theme: _propTypes.default.string,
      inlineFlex: _propTypes.default.bool,
      shouldComponentUpdate: _propTypes.default.func,
      lazyDataSource: _propTypes.default.bool,
      remoteFilter: _propTypes.default.bool,
      disabled: _propTypes.default.bool,
      readOnly: _propTypes.default.bool,
      rtl: _propTypes.default.bool,
      tabIndex: _propTypes.default.number,
      collapseOnSelect: _propTypes.default.bool,
      clearTextOnBlur: _propTypes.default.bool,
      listEmptyText: _propTypes.default.node,
      listMaxHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      listMinHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      maxTagsLength: _propTypes.default.number,
      defaultLoading: _propTypes.default.bool,
      loading: _propTypes.default.bool,
      onLoadingChange: _propTypes.default.func,
      listLoadingText: _propTypes.default.node,
      loadingSpinner: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool]),
      onKeyDown: _propTypes.default.func,
      onTagClick: _propTypes.default.func,
      clearIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func, _propTypes.default.node]),
      toggleIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func, _propTypes.default.node]),
      showClearIconOnMouseOver: _propTypes.default.bool,
      autoFocus: _propTypes.default.bool,
      autoBlur: _propTypes.default.bool,
      focusOnClick: _propTypes.default.bool,
      onFocus: _propTypes.default.func,
      onBlur: _propTypes.default.func,
      borderRadius: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      padding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      border: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      background: _propTypes.default.string,
      shadow: _propTypes.default.bool,
      showShadowOnMouseOver: _propTypes.default.bool,
      emptyClassName: _propTypes.default.string,
      emptyStyle: _propTypes.default.object,
      disabledClassName: _propTypes.default.string,
      disabledStyle: _propTypes.default.object,
      focusedClassName: _propTypes.default.string,
      focusedStyle: _propTypes.default.object,
      itemBackground: _propTypes.default.string,
      disabledItemStyle: _propTypes.default.object,
      disabledItemClassName: _propTypes.default.string,
      renderItem: _propTypes.default.func,
      itemEllipsis: _propTypes.default.bool,
      activeItemStyle: _propTypes.default.object,
      activeItemClassName: _propTypes.default.string,
      selectedItemStyle: _propTypes.default.object,
      limit: _propTypes.default.number,
      skip: _propTypes.default.number,
      loadNextPage: _propTypes.default.func,
      searchable: _propTypes.default.bool,
      placeholder: _propTypes.default.node,
      text: _propTypes.default.string,
      defaultText: _propTypes.default.string,
      onTextChange: _propTypes.default.func,
      filterFunction: _propTypes.default.func,
      filterProperty: _propTypes.default.string,
      loadLazyDataSource: _propTypes.default.func,
      filterMinLength: _propTypes.default.number,
      filterDelay: _propTypes.default.number,
      activeFirstItemOnFilter: _propTypes.default.bool,
      renderInput: _propTypes.default.func,
      inputClassName: _propTypes.default.string,
      inputStyle: _propTypes.default.object,
      clearTextOnSelect: _propTypes.default.bool,
      filterMode: _propTypes.default.oneOf(["startsWith", "contains"]),
      highlightMatchedText: _propTypes.default.bool,
      autocomplete: _propTypes.default.bool,
      minAutocompleteLength: _propTypes.default.number,
      autocompleteDelay: _propTypes.default.number,
      enableNavigatio: _propTypes.default.bool,
      keepTagTextOnRemove: _propTypes.default.bool,
      tagActiveStyle: _propTypes.default.object,
      enableTagNavigation: _propTypes.default.bool,
      activeTag: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      defaultActiveTag: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      onActiveTagChange: _propTypes.default.func,
      allowCustomTagCreation: _propTypes.default.bool,
      enableNavigation: _propTypes.default.bool,
      enableListNavigation: _propTypes.default.bool,
      highlightFirst: _propTypes.default.bool,
      activeItem: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      defaultActiveItem: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      onActiveItemChange: _propTypes.default.func,
      navigateToNextAfterSelection: _propTypes.default.bool,
      onItemClick: _propTypes.default.func,
      onChange: _propTypes.default.func,
      listClassName: _propTypes.default.string,
      selectedStyle: _propTypes.default.object,
      selectedClassName: _propTypes.default.string,
      renderGroup: _propTypes.default.func,
      renderFooter: _propTypes.default.func,
      renderHeader: _propTypes.default.func,
      renderList: _propTypes.default.func,
      renderListComponent: _propTypes.default.func,
      value: VALUE_TYPE,
      defaultValue: VALUE_TYPE,
      defaultDisplayValue: VALUE_TYPE,
      removeSelectedItems: _propTypes.default.bool,
      isSelectedItemValid: _propTypes.default.func,
      maxValueLength: _propTypes.default.number,
      changeValueOnNavigation: _propTypes.default.bool,
      allowSelectionToggle: _propTypes.default.bool,
      clearSelectedOnTextChange: _propTypes.default.bool,
      clearValueOnEmpty: _propTypes.default.bool,
      isNewCustomTagValid: _propTypes.default.func,
      multiple: _propTypes.default.bool,
      renderTag: _propTypes.default.func,
      renderTagLabel: _propTypes.default.func,
      renderRemainingTags: _propTypes.default.func,
      renderTags: _propTypes.default.func,
      tagStyle: _propTypes.default.object,
      tagBorder: _propTypes.default.string,
      tagPadding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      tagHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      tagWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      tagMinSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
        height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      })]),
      tagMaxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
        height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      })]),
      tagCloseIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node, _propTypes.default.func]),
      tagCloseIconPosition: _propTypes.default.oneOf(["start", "end"]),
      tagEllipsis: _propTypes.default.bool,
      removeTagOnBackspace: _propTypes.default.bool,
      renderDisplayValue: _propTypes.default.func,
      dataSource: function dataSource(props2, propName) {
        var dataSource2 = props2[propName];
        if (dataSource2 != null && typeof dataSource2 !== "function" && !Array.isArray(dataSource2) && !(dataSource2 && dataSource2.then)) {
          return new Error("dataSource must be an array, null, a promise or a function returning a promise.");
        }
        return null;
      },
      onDataSourceLoad: _propTypes.default.func,
      idProperty: _propTypes.default.string,
      displayProperty: _propTypes.default.string,
      groupProperty: _propTypes.default.string,
      listStyle: _propTypes.default.object,
      relativeToViewport: _propTypes.default.bool,
      expanded: _propTypes.default.bool,
      defaultExpanded: _propTypes.default.bool,
      onExpandedChange: _propTypes.default.func,
      onExpandChange: _propTypes.default.func,
      collapseOnEscape: _propTypes.default.bool,
      expandOnClick: _propTypes.default.bool,
      expandOnFocus: _propTypes.default.bool,
      collapseOnBlur: _propTypes.default.bool,
      enablePagination: _propTypes.default.bool,
      onExpand: _propTypes.default.func,
      onCollapse: _propTypes.default.func,
      virtualListFactory: _propTypes.default.func,
      renderListScroller: _propTypes.default.func,
      renderVirtualList: _propTypes.default.func,
      expandOnTextChange: _propTypes.default.bool,
      toggleExpandOnClick: _propTypes.default.bool,
      collapseOnSelectWithEnter: _propTypes.default.bool,
      wrapMultiple: _propTypes.default.bool,
      newCustomTagText: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
      positions: _propTypes.default.arrayOf(_propTypes.default.string),
      constrainTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object, _propTypes.default.bool]),
      offset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      })]))])
    };
    var _default = InovuaComboBox;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/index.js
var require_src5 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ComboBox = _interopRequireDefault(require_ComboBox());
    var _default = _ComboBox.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ComboBox/index.js
var require_ComboBox2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ComboBox/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src5());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/join/index.js
var require_join4 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/join/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var notEmpty = function notEmpty2(x) {
      return !!x;
    };
    var _default = function _default2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (args.length == 1 && Array.isArray(args[0])) {
        args = args[0];
      }
      return args.filter(notEmpty).join(" ");
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Flex/src/props2flex.js
var require_props2flex = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Flex/src/props2flex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(props2) {
      return props2.flex === false ? 0 : props2.flex === true ? 1 : props2.flex;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Flex/src/prefix.js
var require_prefix = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Flex/src/prefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "inovua-react-toolkit-flex-v3";
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Flex/src/props2className.js
var require_props2className = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Flex/src/props2className.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _join = _interopRequireDefault(require_join());
    var _props2flex = _interopRequireDefault(require_props2flex());
    var _prefix = _interopRequireDefault(require_prefix());
    var PREFIX = _prefix.default;
    var _default = function _default2(props2) {
      var column = !!props2.column;
      var row = !column && !!props2.row;
      var reverse = props2.reverse ? "-reverse" : "";
      var flex = (0, _props2flex.default)(props2);
      var flexGrow = props2.flexGrow;
      var flexShrink = props2.flexShrink;
      var flexBasis = props2.flexBasis;
      var display = props2.inline ? "inline-flex" : props2.display;
      var className = (0, _join.default)(props2.className, props2.alignItems ? "".concat(PREFIX, "--align-items-").concat(props2.alignItems) : null, props2.alignContent ? "".concat(PREFIX, "--align-content-").concat(props2.alignContent) : null, props2.justifyContent ? "".concat(PREFIX, "--justify-content-").concat(props2.justifyContent) : null, props2.wrap ? "".concat(PREFIX, "--wrap") : null, props2.alignSelf ? "".concat(PREFIX, "--align-self-").concat(props2.alignSelf) : null, row ? "".concat(PREFIX, "--row").concat(reverse) : null, column ? "".concat(PREFIX, "--column").concat(reverse) : null, flex != null ? "".concat(PREFIX, "--flex-").concat(flex) : null, flexGrow != null ? "".concat(PREFIX, "--flex-grow-").concat(flexGrow) : null, flexShrink != null ? "".concat(PREFIX, "--flex-shrink-").concat(flexShrink) : null, flexBasis != null ? "".concat(PREFIX, "--flex-basis-").concat(flexBasis) : null, display != null ? "".concat(PREFIX, "--display-").concat(display) : null);
      return className;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Flex/src/cleanup.js
var require_cleanup = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Flex/src/cleanup.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(props2) {
      delete props2.display;
      delete props2.shouldComponentUpdate;
      delete props2.wrap;
      delete props2.row;
      delete props2.column;
      delete props2.alignItems;
      delete props2.alignSelf;
      delete props2.alignContent;
      delete props2.justifyContent;
      delete props2.flex;
      delete props2.flexGrow;
      delete props2.flexFlow;
      delete props2.flexShrink;
      delete props2.flexBasis;
      delete props2.inline;
      delete props2.wrap;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Flex/src/Flex.js
var require_Flex = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Flex/src/Flex.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _join = _interopRequireDefault(require_join());
    var _props2className = _interopRequireDefault(require_props2className());
    var _cleanup = _interopRequireDefault(require_cleanup());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var InovuaFlex = (0, _react.forwardRef)(function(props2, ref) {
      var className = (0, _join.default)("inovua-react-toolkit-flex", (0, _props2className.default)(props2));
      var allProps = _objectSpread({}, props2);
      (0, _cleanup.default)(allProps);
      allProps.className = className;
      delete allProps.livePagination;
      if (props2.factory) {
        return props2.factory(allProps);
      }
      return _react.default.createElement("div", _objectSpread({
        ref
      }, allProps));
    });
    InovuaFlex.defaultProps = {
      row: true,
      wrap: true,
      alignItems: "center",
      display: "flex"
    };
    InovuaFlex.propTypes = {
      shouldComponentUpdate: _propTypes.default.func,
      flex: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
      display: _propTypes.default.oneOf(["flex", "inline-flex"]),
      inline: _propTypes.default.bool,
      reverse: _propTypes.default.bool,
      row: _propTypes.default.bool,
      column: _propTypes.default.bool,
      wrap: _propTypes.default.bool,
      alignItems: _propTypes.default.string,
      alignContent: _propTypes.default.string,
      justifyContent: _propTypes.default.string
    };
    var _default = _react.default.memo(InovuaFlex);
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Flex/src/shouldComponentUpdate.js
var require_shouldComponentUpdate5 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Flex/src/shouldComponentUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(inst, nextProps, nextState) {
      var props2 = inst.props;
      var state = inst.state;
      if (nextProps.shouldComponentUpdate) {
        return nextProps.shouldComponentUpdate({
          nextProps,
          props: props2,
          nextState,
          state
        });
      }
      return true;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Flex/src/Item.js
var require_Item2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Flex/src/Item.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate5());
    var _join = _interopRequireDefault(require_join());
    var _props2className = _interopRequireDefault(require_props2className());
    var _cleanup = _interopRequireDefault(require_cleanup());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var InovuaFlexItem = function(_Component) {
      (0, _inherits2.default)(InovuaFlexItem2, _Component);
      var _super = _createSuper(InovuaFlexItem2);
      function InovuaFlexItem2() {
        (0, _classCallCheck2.default)(this, InovuaFlexItem2);
        return _super.apply(this, arguments);
      }
      (0, _createClass2.default)(InovuaFlexItem2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          var shouldUpdate = (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
          return shouldUpdate;
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var className = (0, _join.default)("inovua-react-toolkit-flex-item", (0, _props2className.default)(props2));
          var allProps = _objectSpread({}, props2);
          (0, _cleanup.default)(allProps);
          allProps.className = className;
          if (props2.factory) {
            return props2.factory(allProps);
          }
          return _react.default.createElement("div", _objectSpread({}, allProps));
        }
      }]);
      return InovuaFlexItem2;
    }(_react.Component);
    InovuaFlexItem.defaultProps = {
      flex: 1
    };
    InovuaFlexItem.propTypes = {
      shouldComponentUpdate: _propTypes.default.func,
      display: _propTypes.default.oneOf(["flex", "inline-flex"]),
      inline: function inline(props2, propName) {
        if (props2[propName] !== void 0) {
          return new Error(`"inline" prop should not be used on "Item". Use "display='inline-flex'" instead`);
        }
      },
      flex: _propTypes.default.any,
      flexGrow: _propTypes.default.any,
      flexShrink: _propTypes.default.any,
      flexBasis: _propTypes.default.any
    };
    var _default = InovuaFlexItem;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Flex/src/index.js
var require_src6 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Flex/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Flex", {
      enumerable: true,
      get: function get() {
        return _Flex.default;
      }
    });
    Object.defineProperty(exports, "Item", {
      enumerable: true,
      get: function get() {
        return _Item.default;
      }
    });
    exports.default = void 0;
    var _Flex = _interopRequireDefault(require_Flex());
    var _Item = _interopRequireDefault(require_Item2());
    var _default = {
      Flex: _Flex.default,
      Item: _Item.default
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Flex/index.js
var require_Flex2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Flex/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Flex", {
      enumerable: true,
      get: function get() {
        return _src.Flex;
      }
    });
    Object.defineProperty(exports, "Item", {
      enumerable: true,
      get: function get() {
        return _src.Item;
      }
    });
    exports.default = void 0;
    var _src = _interopRequireWildcard(require_src6());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = {
      Flex: _src.default,
      Item: _src.default
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/InertialScroller/src/InertialScroller.js
var require_InertialScroller = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/InertialScroller/src/InertialScroller.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _join = _interopRequireDefault(require_join());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _isMobile = _interopRequireDefault(require_isMobile2());
    var _clamp = _interopRequireDefault(require_clamp2());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function ypos(e) {
      if (e.targetTouches && e.targetTouches.length >= 1) {
        return e.targetTouches[0].clientY;
      }
      return e.clientY;
    }
    var InovuaInertialScroller = function(_Component) {
      (0, _inherits2.default)(InovuaInertialScroller2, _Component);
      var _super = _createSuper(InovuaInertialScroller2);
      function InovuaInertialScroller2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaInertialScroller2);
        _this = _super.call(this, props2);
        _this.state = {};
        _this.setRootRef = function(ref) {
          _this.node = ref;
        };
        _this.setViewRef = function(ref) {
          _this.viewNode = ref;
        };
        _this.tap = _this.tap.bind((0, _assertThisInitialized2.default)(_this));
        _this.drag = _this.drag.bind((0, _assertThisInitialized2.default)(_this));
        _this.release = _this.release.bind((0, _assertThisInitialized2.default)(_this));
        _this.track = _this.track.bind((0, _assertThisInitialized2.default)(_this));
        _this.autoScroll = _this.autoScroll.bind((0, _assertThisInitialized2.default)(_this));
        _this.min = 0;
        _this.max = null;
        _this.pressed = null;
        _this.reference = null;
        _this.offset = 0;
        return _this;
      }
      (0, _createClass2.default)(InovuaInertialScroller2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateMaxScroll();
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var className = (0, _join.default)(props2.rootClassName, props2.className, "".concat(props2.rootClassName, "--theme-").concat(props2.theme));
          var events;
          if (_isMobile.default && this.props.enableTouchDrag) {
            events = {
              onTouchStart: this.tap,
              onTouchEnd: this.release,
              onTouchMove: this.drag
            };
          }
          if (!_isMobile.default && props2.enableMouseDrag) {
            events = {
              onMouseDown: this.tap,
              onMouseUp: this.release,
              onMouseMove: this.drag
            };
          }
          return _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, InovuaInertialScroller2.propTypes)), {}, {
            className,
            ref: this.setRootRef
          }, events), _react.default.createElement("div", {
            ref: this.setViewRef,
            className: "".concat(props2.rootClassName, "__view")
          }, props2.children));
        }
      }, {
        key: "tap",
        value: function tap(event2) {
          this.pressed = true;
          this.reference = ypos(event2);
          this.timeStamp = Date.now();
          this.frame = this.offset;
          this.velocity = 0;
          this.amplitude = 0;
          clearInterval(this.ticker);
          this.ticker = setInterval(this.track, 16);
          event2.stopPropagation();
          event2.preventDefault();
        }
      }, {
        key: "drag",
        value: function drag(event2) {
          if (this.pressed) {
            var y = ypos(event2);
            var delta = this.reference - y;
            if (delta > this.props.threshold || delta < -this.props.threshold) {
              this.reference = y;
              this.scrollTo(this.offset + delta);
            }
          }
        }
      }, {
        key: "release",
        value: function release(event2) {
          this.pressed = false;
          this.updateMaxScroll();
          event2.stopPropagation();
          event2.preventDefault();
          clearInterval(this.ticker);
          if (this.velocity > 10 || this.velocity < -10) {
            this.amplitude = this.props.initialAmplitude * this.velocity;
            this.target = Math.round(this.offset + this.amplitude);
            this.timestamp = Date.now();
            requestAnimationFrame(this.autoScroll);
          }
        }
      }, {
        key: "scrollTo",
        value: function scrollTo(offset) {
          if (!this.viewNode) {
            return null;
          }
          this.offset = (0, _clamp.default)(offset, 0, this.max);
          this.viewNode.style.transform = "translateY(".concat(-this.offset, "px)");
        }
      }, {
        key: "autoScroll",
        value: function autoScroll() {
          var elapsed, delta;
          var timeConstant = this.props.timeConstant;
          if (this.amplitude) {
            elapsed = Date.now() - this.timestamp;
            delta = -this.amplitude * Math.exp(-elapsed / timeConstant);
            if (delta > 0.1 || delta < -0.1) {
              this.scrollTo(this.target + delta);
              requestAnimationFrame(this.autoScroll);
            } else {
              this.scrollTo(this.target);
            }
          }
        }
      }, {
        key: "updateMaxScroll",
        value: function updateMaxScroll() {
          this.max = this.viewNode && this.viewNode.offsetHeight - this.node.offsetHeight;
        }
      }, {
        key: "track",
        value: function track() {
          var now, elapsed, delta, v;
          now = Date.now();
          elapsed = now - this.timeStamp;
          this.timeStamp = now;
          delta = this.offset - this.frame;
          this.frame = this.offset;
          v = 1e3 * delta / (1 + elapsed);
          this.velocity = 0.8 * v + 0.2 * this.velocity;
        }
      }]);
      return InovuaInertialScroller2;
    }(_react.Component);
    InovuaInertialScroller.defaultProps = {
      theme: "default",
      rootClassName: "react-toolkit-inertial-scroller",
      threshold: 5,
      timeConstant: 360,
      initialAmplitude: 0.5,
      enableMouseDrag: true,
      enableTouchDrag: true
    };
    InovuaInertialScroller.propTypes = {
      theme: _propTypes.default.string,
      rootClassName: _propTypes.default.string,
      threshold: _propTypes.default.number,
      timeConstant: _propTypes.default.number,
      initialAmplitude: _propTypes.default.number,
      enableMouseDrag: _propTypes.default.bool,
      enableTouchDrag: _propTypes.default.bool
    };
    var _default = InovuaInertialScroller;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/InertialScroller/src/InertialManager.js
var require_InertialManager = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/InertialScroller/src/InertialManager.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _isMobile = _interopRequireDefault(require_isMobile2());
    var _clamp = _interopRequireDefault(require_clamp2());
    var _containsNode = _interopRequireDefault(require_containsNode());
    var _matchesSelector = _interopRequireDefault(require_matchesSelector());
    function ypos(e) {
      if (e.targetTouches && e.targetTouches.length >= 1) {
        return e.targetTouches[0].clientY;
      }
      return e.clientY;
    }
    var InertialManager = function() {
      function InertialManager2(_ref) {
        var node = _ref.node, viewNode = _ref.viewNode, arrowSelector = _ref.arrowSelector, _ref$threshold = _ref.threshold, threshold = _ref$threshold === void 0 ? 5 : _ref$threshold, _ref$timeConstant = _ref.timeConstant, timeConstant = _ref$timeConstant === void 0 ? 360 : _ref$timeConstant, _ref$initialAmplitude = _ref.initialAmplitude, initialAmplitude = _ref$initialAmplitude === void 0 ? 0.8 : _ref$initialAmplitude, _ref$enableMouseDrag = _ref.enableMouseDrag, enableMouseDrag = _ref$enableMouseDrag === void 0 ? true : _ref$enableMouseDrag, _ref$enableTouchDrag = _ref.enableTouchDrag, enableTouchDrag = _ref$enableTouchDrag === void 0 ? true : _ref$enableTouchDrag, _ref$setScrollPositio = _ref.setScrollPosition, setScrollPosition = _ref$setScrollPositio === void 0 ? function() {
        } : _ref$setScrollPositio;
        (0, _classCallCheck2.default)(this, InertialManager2);
        this.node = node;
        this.viewNode = viewNode;
        if (!arrowSelector) {
          throw "Please provide an arrowselector";
        }
        this.arrowSelector = arrowSelector;
        this.tap = this.tap.bind(this);
        this.drag = this.drag.bind(this);
        this.release = this.release.bind(this);
        this.track = this.track.bind(this);
        this.autoScroll = this.autoScroll.bind(this);
        this.min = 0;
        this.max = null;
        this.pressed = null;
        this.reference = null;
        this.offset = 0;
        this.threshold = threshold;
        this.timeConstant = timeConstant;
        this.enableTouchDrag = enableTouchDrag;
        this.enableMouseDrag = enableMouseDrag;
        this.setScrollPosition = setScrollPosition;
        this.initialAmplitude = initialAmplitude;
        this.updateMaxScroll();
        this.addEventListeners();
      }
      (0, _createClass2.default)(InertialManager2, [{
        key: "addEventListeners",
        value: function addEventListeners() {
          if (!this.node || !this.node.addEventListener) {
            return;
          }
          if (_isMobile.default && this.enableTouchDrag) {
            this.node.addEventListener("touchstart", this.tap, {
              passive: false
            });
            this.node.addEventListener("touchend", this.release, {
              passive: false
            });
            this.node.addEventListener("touchmove", this.drag, {
              passive: false
            });
          }
          if (!_isMobile.default && this.enableMouseDrag) {
            this.node.addEventListener("mousedown", this.tap, {
              passive: false
            });
            this.node.addEventListener("mouseup", this.release, {
              passive: false
            });
            this.node.addEventListener("mousemove", this.drag, {
              passive: false
            });
          }
        }
      }, {
        key: "removeEventListeners",
        value: function removeEventListeners() {
          if (this.node && this.node.removeEventListener) {
            this.node.removeEventListener("touchstart", this.tap, {
              passive: false
            });
            this.node.removeEventListener("touchend", this.release, {
              passive: false
            });
            this.node.removeEventListener("touchmove", this.drag, {
              passive: false
            });
            this.node.removeEventListener("mousedown", this.tap, {
              passive: false
            });
            this.node.removeEventListener("mouseup", this.release, {
              passive: false
            });
            this.node.removeEventListener("mousemove", this.drag, {
              passive: false
            });
          }
        }
      }, {
        key: "getEventListneres",
        value: function getEventListneres() {
          var events;
          if (_isMobile.default && this.enableTouchDrag) {
            events = {
              onTouchStart: this.tap,
              onTouchEnd: this.release,
              onTouchMove: this.drag
            };
          }
          if (!_isMobile.default && this.enableMouseDrag) {
            events = {
              onMouseDown: this.tap,
              onMouseUp: this.release,
              onMouseMove: this.drag
            };
          }
          return events;
        }
      }, {
        key: "isArrowTarget",
        value: function isArrowTarget(target) {
          if ((0, _matchesSelector.default)(target, this.arrowSelector)) {
            return true;
          }
          var arrows = this.arrowSelector ? this.arrows || (0, _toConsumableArray2.default)(this.node.querySelectorAll(this.arrowSelector)) : [];
          if (arrows.length) {
            this.arrows = arrows;
          }
          if (arrows.length && arrows.map(function(arrow) {
            return (0, _containsNode.default)(arrow, target);
          }).filter(function(x) {
            return x;
          })[0]) {
            return true;
          }
          return false;
        }
      }, {
        key: "tap",
        value: function tap(event2) {
          if (!this.hasScroll()) {
            return;
          }
          if (this.isArrowTarget(event2.target)) {
            event2.preventDefault();
          }
          this.pressed = true;
          this.reference = ypos(event2);
          this.timeStamp = Date.now();
          this.frame = this.offset;
          this.velocity = 0;
          this.amplitude = 0;
          clearInterval(this.ticker);
          this.ticker = setInterval(this.track, 16);
        }
      }, {
        key: "drag",
        value: function drag(event2) {
          if (this.pressed) {
            if (!this.hasScroll()) {
              return;
            }
            event2.preventDefault();
            var y = ypos(event2);
            var delta = this.reference - y;
            if (delta > this.threshold || delta < -this.threshold) {
              this.reference = y;
              this.scrollTo(this.offset + delta);
            }
          }
        }
      }, {
        key: "release",
        value: function release(event2) {
          if (!this.hasScroll() || !this.pressed) {
            return;
          }
          this.pressed = false;
          this.updateMaxScroll();
          if (this.isArrowTarget(event2.target)) {
            event2.preventDefault();
          }
          clearInterval(this.ticker);
          if (this.velocity > 10 || this.velocity < -10) {
            this.amplitude = this.initialAmplitude * this.velocity;
            this.target = Math.round(this.offset + this.amplitude);
            this.timestamp = Date.now();
            requestAnimationFrame(this.autoScroll);
          }
        }
      }, {
        key: "scrollTo",
        value: function scrollTo(offset) {
          if (!this.viewNode) {
            return null;
          }
          this.offset = (0, _clamp.default)(offset, 0, this.max);
          this.setScrollPosition(this.offset);
        }
      }, {
        key: "autoScroll",
        value: function autoScroll() {
          var elapsed, delta;
          var timeConstant = this.timeConstant;
          if (this.amplitude) {
            elapsed = Date.now() - this.timestamp;
            delta = -this.amplitude * Math.exp(-elapsed / timeConstant);
            if (delta > 0.1 || delta < -0.1) {
              this.scrollTo(this.target + delta);
              requestAnimationFrame(this.autoScroll);
            } else {
              this.scrollTo(this.target);
            }
          }
        }
      }, {
        key: "updateMaxScroll",
        value: function updateMaxScroll() {
          this.max = this.viewNode && this.viewNode.offsetHeight - this.node.offsetHeight;
        }
      }, {
        key: "hasScroll",
        value: function hasScroll() {
          if ((this.viewNode && this.viewNode.offsetHeight) !== void 0 && (this.node && this.node.offsetHeight) !== void 0) {
            return this.viewNode.offsetHeight > this.node.offsetHeight;
          } else {
            return false;
          }
        }
      }, {
        key: "track",
        value: function track() {
          var now, elapsed, delta, v;
          now = Date.now();
          elapsed = now - this.timeStamp;
          this.timeStamp = now;
          delta = this.offset - this.frame;
          this.frame = this.offset;
          v = 1e3 * delta / (1 + elapsed);
          this.velocity = 0.8 * v + 0.2 * this.velocity;
        }
      }]);
      return InertialManager2;
    }();
    var _default = InertialManager;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/InertialScroller/src/index.js
var require_src7 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/InertialScroller/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "InertialManager", {
      enumerable: true,
      get: function get() {
        return _InertialManager.default;
      }
    });
    exports.default = void 0;
    var _InertialScroller = _interopRequireDefault(require_InertialScroller());
    var _InertialManager = _interopRequireDefault(require_InertialManager());
    var _default = _InertialScroller.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/InertialScroller/index.js
var require_InertialScroller2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/InertialScroller/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "InertialManager", {
      enumerable: true,
      get: function get() {
        return _InertialManager.default;
      }
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src7());
    var _InertialManager = _interopRequireDefault(require_InertialManager());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/ua.js
var require_ua = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/ua.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.IS_MS_BROWSER = exports.IS_IE = exports.IS_FF = exports.IS_EDGE = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var ua = globalObject.navigator ? globalObject.navigator.userAgent || "" : "";
    var IS_EDGE = ua.indexOf("Edge/") !== -1;
    exports.IS_EDGE = IS_EDGE;
    var IS_MS_BROWSER = IS_EDGE || ua.indexOf("Trident") !== -1;
    exports.IS_MS_BROWSER = IS_MS_BROWSER;
    var IS_IE = IS_MS_BROWSER && !IS_EDGE;
    exports.IS_IE = IS_IE;
    var IS_FF = ua.toLowerCase().indexOf("firefox") > -1;
    exports.IS_FF = IS_FF;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-clean-props/index.js
var require_react_clean_props = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-clean-props/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function cleanProps(props2, propTypes) {
      if (!props2 || !propTypes) {
        return Object.assign({}, props2);
      }
      var newProps = Object.keys(props2).reduce(function(acc, propName) {
        if (!propTypes[propName]) {
          acc[propName] = props2[propName];
        }
        return acc;
      }, {});
      return newProps;
    }
    var _default = cleanProps;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/smoothScrollTo/index.js
var require_smoothScrollTo = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/smoothScrollTo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var DEFAULTS = {
      duration: 100,
      orientation: "vertical"
    };
    var _default = function _default2(node, newValue, config, callback) {
      if (typeof config === "function") {
        callback = config;
        config = null;
      }
      if (!config) {
        config = DEFAULTS;
      }
      var _config = config, orientation = _config.orientation;
      var _config2 = config, duration = _config2.duration;
      var horiz = orientation == "horizontal";
      var scrollPosName = horiz ? "scrollLeft" : "scrollTop";
      var currentValue = node[scrollPosName];
      var diff = newValue - currentValue;
      var now = Date.now();
      duration = duration != null ? duration : 100;
      var millisecondStep = diff / duration;
      if (!duration) {
        node[scrollPosName] = newValue;
        if (typeof callback === "function") {
          callback(newValue);
        }
        return;
      }
      var scroll = function scroll2() {
        var elapsed = Date.now() - now;
        node[scrollPosName] = currentValue + elapsed * millisecondStep;
        if (elapsed < duration) {
          globalObject.requestAnimationFrame(scroll2);
        } else {
          node[scrollPosName] = newValue;
          if (typeof callback === "function") {
            callback(newValue);
          }
        }
      };
      globalObject.requestAnimationFrame(scroll);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/scrollPage/index.js
var require_scrollPage = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/scrollPage/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _smoothScrollTo = _interopRequireDefault(require_smoothScrollTo());
    var _default = function _default2(node, _ref) {
      var orientation = _ref.orientation, direction = _ref.direction, pageSize = _ref.pageSize, duration = _ref.duration;
      if (!direction) {
        throw new Error("Please provide a scroll direction: 1 or -1!");
      }
      var horiz = orientation == "horizontal";
      var scrollPosName = horiz ? "scrollLeft" : "scrollTop";
      pageSize = pageSize || (horiz ? node.clientWidth - 20 : node.clientHeight - 20);
      var currentValue = node[scrollPosName];
      var newValue = currentValue + direction * pageSize;
      (0, _smoothScrollTo.default)(node, newValue, {
        orientation,
        duration
      });
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-scroll-container-pro/src/shouldComponentUpdate.js
var require_shouldComponentUpdate6 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-scroll-container-pro/src/shouldComponentUpdate.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get() {
        return _shouldComponentUpdate.default;
      }
    });
    var _shouldComponentUpdate = _interopRequireDefault(require_shouldComponentUpdate());
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-scroll-container-pro/src/Scrollbar.js
var require_Scrollbar = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-scroll-container-pro/src/Scrollbar.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _autoBind = _interopRequireDefault(require_autoBind());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate6());
    var _join = _interopRequireDefault(require_join4());
    var _getGlobal = require_getGlobal();
    var _SIZES;
    var _OTHER_SIZES;
    var _MARGINS;
    var _TRACK_SIDES;
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var HORIZONTAL = "horizontal";
    var VERTICAL = "vertical";
    var SIZES = (_SIZES = {}, (0, _defineProperty2.default)(_SIZES, VERTICAL, "height"), (0, _defineProperty2.default)(_SIZES, HORIZONTAL, "width"), _SIZES);
    var OTHER_SIZES = (_OTHER_SIZES = {}, (0, _defineProperty2.default)(_OTHER_SIZES, VERTICAL, "width"), (0, _defineProperty2.default)(_OTHER_SIZES, HORIZONTAL, "height"), _OTHER_SIZES);
    var MARGINS = (_MARGINS = {}, (0, _defineProperty2.default)(_MARGINS, VERTICAL, "right"), (0, _defineProperty2.default)(_MARGINS, HORIZONTAL, "bottom"), _MARGINS);
    var TRACK_SIDES = (_TRACK_SIDES = {}, (0, _defineProperty2.default)(_TRACK_SIDES, VERTICAL, ["top", "bottom"]), (0, _defineProperty2.default)(_TRACK_SIDES, HORIZONTAL, ["left", "right"]), _TRACK_SIDES);
    var STYLES = {
      vertical: {
        position: "absolute",
        top: 0,
        bottom: 0,
        right: 0,
        contain: "layout paint style"
      },
      horizontal: {
        position: "absolute",
        left: 0,
        right: 0,
        bottom: 0,
        contain: "layout paint style"
      }
    };
    var InovuaScrollbar = function(_Component) {
      (0, _inherits2.default)(InovuaScrollbar2, _Component);
      var _super = _createSuper(InovuaScrollbar2);
      function InovuaScrollbar2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaScrollbar2);
        _this = _super.call(this, props2);
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
        _this.scrollPos = 0;
        _this.state = {
          scrollPos: 0
        };
        _this.refTrack = function(c) {
          _this.trackNode = c;
        };
        _this.refThumb = function(c) {
          _this.thumbNode = c;
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaScrollbar2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "setVisible",
        value: function setVisible(visible) {
          this.visible = visible;
          if (!visible && this.state.over) {
            return;
          }
          if (this.state.visible === visible) {
            return;
          }
          this.setState({
            visible
          });
        }
      }, {
        key: "setScrollPos",
        value: function setScrollPos(scrollPos) {
          this.scrollPos = scrollPos;
          var transform = this.getThumbTransform();
          if (this.currentTransform == transform) {
            return;
          }
          this.thumbNode.style.transform = this.currentTransform = transform;
        }
      }, {
        key: "getScrollPos",
        value: function getScrollPos() {
          return this.scrollPos;
        }
      }, {
        key: "render",
        value: function render() {
          var _Object$assign;
          var props2 = this.props;
          var autoHide = props2.autoHide;
          var className = props2.className, style = props2.style, orientation = props2.orientation, vertical = props2.vertical, horizontal = props2.horizontal, thumbVisible = props2.visible;
          if (orientation) {
            vertical = orientation == VERTICAL;
            horizontal = !vertical;
          }
          this.orientation = orientation = horizontal ? HORIZONTAL : VERTICAL;
          var sizeName = SIZES[orientation];
          var otherSizeName = OTHER_SIZES[orientation];
          if (autoHide === false) {
            thumbVisible = true;
          } else {
            if (this.state.visible !== void 0) {
              thumbVisible = this.state.visible;
            }
            if (this.state.active) {
              thumbVisible = true;
            }
          }
          var hiding = !thumbVisible && this.prevVisible;
          var showing = thumbVisible && !this.prevVisible;
          className = (0, _join.default)(className, "inovua-react-scroll-container__scrollbar", "inovua-react-scroll-container__scrollbar--orientation-".concat(orientation), "inovua-react-scroll-container__scrollbar--direction-".concat(this.props.rtl ? "rtl" : "ltr"), !thumbVisible && "inovua-react-scroll-container__scrollbar--hidden", hiding && "inovua-react-scroll-container__scrollbar--hiding", this.state.active && "inovua-react-scroll-container__scrollbar--active", showing && "inovua-react-scroll-container__scrollbar--showing");
          style = Object.assign({}, style, STYLES[orientation]);
          if (showing && this.props.showTransitionDuration) {
            style.transitionDuration = this.props.showTransitionDuration;
          }
          if (hiding && this.props.hideTransitionDuration) {
            style.transitionDuration = this.props.hideTransitionDuration;
          }
          this.prevVisible = thumbVisible;
          var divProps = (0, _reactCleanProps.default)(props2, InovuaScrollbar2.propTypes);
          var thumbSize = this.getThumbSize();
          var transform = this.getThumbTransform(orientation, thumbSize);
          var scrollThumbOverWidth = Math.max(this.props.scrollThumbOverWidth, this.props.scrollThumbWidth);
          var thumbRadius = this.props.scrollThumbRadius !== void 0 ? this.props.scrollThumbRadius : this.props.scrollThumbWidth;
          var thumbStyle = Object.assign({}, this.props.scrollThumbStyle, (_Object$assign = {}, (0, _defineProperty2.default)(_Object$assign, sizeName, thumbSize), (0, _defineProperty2.default)(_Object$assign, otherSizeName, this.state.over || this.state.active || this.props.alwaysShowTrack ? scrollThumbOverWidth : this.props.scrollThumbWidth), (0, _defineProperty2.default)(_Object$assign, "transform", transform), (0, _defineProperty2.default)(_Object$assign, "borderRadius", thumbRadius), (0, _defineProperty2.default)(_Object$assign, "transitionDuration", this.props.scrollTrackOverTransitionDuration), _Object$assign));
          var trackSides = TRACK_SIDES[orientation];
          var scrollThumbMargin = this.props.scrollThumbMargin || 0;
          if (this.props.scrollThumbMargin) {
            style[MARGINS[orientation]] = scrollThumbMargin;
            if (this.props.scrollThumbStartEndRespectMargin) {
              style[trackSides[0]] = this.props.scrollThumbMargin;
            }
          }
          style[trackSides[1]] = scrollThumbMargin + (this.props.oppositeVisible ? this.props.scrollThumbWidth : 0);
          var thumbClassName = "inovua-react-scroll-container__thumb inovua-react-scroll-container__thumb--orientation-".concat(orientation, " inovua-react-scroll-container__thumb--direction-").concat(this.props.rtl ? "rtl" : "ltr");
          var trackClassName = "inovua-react-scroll-container__track inovua-react-scroll-container__track--orientation-".concat(orientation, " inovua-react-scroll-container__track--direction-").concat(this.props.rtl ? "rtl" : "ltr");
          var trackVisible = this.props.alwaysShowTrack || thumbVisible && this.state.over || this.props.showTrackOnDrag && this.state.active;
          if (trackVisible) {
            trackClassName += " inovua-react-scroll-container__track--visible";
          }
          var trackStyle = (0, _defineProperty2.default)({
            pointerEvents: "none"
          }, otherSizeName, scrollThumbOverWidth);
          if (this.props.dragToScroll) {
            if (thumbVisible) {
              trackStyle.pointerEvents = "all";
            }
            trackStyle.borderRadius = thumbRadius;
            trackClassName += " inovua-react-scroll-container__track--drag-to-scroll";
            if (this.state.active) {
              trackStyle.cursor = "auto";
            }
          }
          if (this.props.rtl) {
            var leftVal = style.left;
            style.left = style.right;
            style.right = leftVal;
          }
          var onThumbMouseDown = thumbVisible && this.props.dragToScroll ? this.onThumbMouseDown : null;
          var onTrackClick = thumbVisible && this.props.dragToScroll ? this.onTrackClick : null;
          var onTrackWheel = this.props.dragToScroll && this.state.over ? this.onTrackWheel : null;
          return _react.default.createElement("div", _objectSpread(_objectSpread({}, divProps), {}, {
            style,
            className,
            "data-orientation": orientation
          }), _react.default.createElement("div", {
            ref: this.refTrack,
            style: trackStyle,
            className: trackClassName,
            onClick: onTrackClick,
            onWheel: onTrackWheel,
            onMouseEnter: this.props.dragToScroll ? this.onMouseEnter : null,
            onMouseLeave: this.props.dragToScroll ? this.onMouseLeave : null
          }, _react.default.createElement("div", {
            ref: this.refThumb,
            style: thumbStyle,
            className: thumbClassName,
            onMouseDown: onThumbMouseDown
          })));
        }
      }, {
        key: "setOver",
        value: function setOver(over) {
          var _this2 = this;
          var doSetOver = function doSetOver2(overValue) {
            _this2.setState({
              over: overValue
            }, function() {
              if (!overValue) {
                if (_this2.visible !== _this2.state.visible) {
                  _this2.setVisible(_this2.visible);
                }
              }
            });
          };
          if (this.setOverFalseTimeoutId) {
            clearTimeout(this.setOverFalseTimeoutId);
          }
          if (!over) {
            this.setOverFalseTimeoutId = setTimeout(function() {
              doSetOver(false);
            }, 500);
          } else {
            this.setOverFalseTimeoutId = setTimeout(function() {
              doSetOver(true);
            }, 35);
          }
        }
      }, {
        key: "onMouseEnter",
        value: function onMouseEnter() {
          this.setOver(true);
        }
      }, {
        key: "onMouseLeave",
        value: function onMouseLeave() {
          this.setOver(false);
        }
      }, {
        key: "onTrackWheel",
        value: function onTrackWheel(event2) {
          var delta = this.orientation == VERTICAL ? event2.deltaY : event2.deltaX;
          event2.preventDefault();
          this.props.onWheelScroll(this.orientation, delta, event2);
        }
      }, {
        key: "onTrackClick",
        value: function onTrackClick(event2) {
          var target = event2.target;
          if (target != this.trackNode) {
            return;
          }
          var rect = target.getBoundingClientRect();
          var offsetX = event2.clientX - rect.left;
          var offsetY = event2.clientY - rect.top;
          var pos = this.orientation == VERTICAL ? offsetY : offsetX;
          var thumbPos = this.getThumbPosition();
          var direction = pos > thumbPos ? 1 : -1;
          if (this.props.onPageScroll) {
            this.props.onPageScroll(this.orientation, direction);
          }
        }
      }, {
        key: "getCoord",
        value: function getCoord(event2) {
          return this.orientation == VERTICAL ? event2.pageY : event2.pageX;
        }
      }, {
        key: "getThumbPosition",
        value: function getThumbPosition() {
          return this.scrollPosToThumbPos(this.getScrollPos(), this.orientation, this.getThumbSize());
        }
      }, {
        key: "onThumbMouseDown",
        value: function onThumbMouseDown(event2) {
          event2.preventDefault();
          event2.stopPropagation();
          this.initialPos = this.getCoord(event2);
          this.thumbSize = this.getThumbSize();
          this.initialThumbPos = this.getThumbPosition();
          this.setState({
            active: true
          });
          globalObject.addEventListener("mousemove", this.onMouseMove);
          globalObject.addEventListener("mouseup", this.onMouseUp);
          this.props.onStartDrag(this.orientation);
        }
      }, {
        key: "onMouseMove",
        value: function onMouseMove(event2) {
          var pos = this.getCoord(event2);
          var diff = pos - this.initialPos;
          var scrollPos = this.thumbPosToScrollPos(this.initialThumbPos + diff, this.orientation, this.thumbSize);
          if (this.orientation == VERTICAL) {
            this.onScrollThumbScrollTop(scrollPos);
          } else {
            this.onScrollThumbScrollLeft(scrollPos);
          }
        }
      }, {
        key: "onScrollThumbScrollTop",
        value: function onScrollThumbScrollTop(scrollPos) {
          this.props.onScrollThumbScrollTop(scrollPos);
        }
      }, {
        key: "onScrollThumbScrollLeft",
        value: function onScrollThumbScrollLeft(scrollPos) {
          this.props.onScrollThumbScrollLeft(scrollPos);
        }
      }, {
        key: "onMouseUp",
        value: function onMouseUp() {
          globalObject.removeEventListener("mousemove", this.onMouseMove);
          globalObject.removeEventListener("mouseup", this.onMouseUp);
          this.setState({
            active: false
          });
          this.props.onStopDrag(this.orientation);
        }
      }, {
        key: "getThumbTransform",
        value: function getThumbTransform() {
          var orientation = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.orientation;
          var thumbSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getThumbSize();
          var scrollPos = this.scrollPosToThumbPos(this.getScrollPos(), orientation, thumbSize) || 0;
          if (orientation == VERTICAL) {
            return "translate3d(0px, ".concat(scrollPos, "px, 0px)");
          }
          if (this.props.rtl) {
            scrollPos = -scrollPos;
          }
          return "translate3d(".concat(scrollPos, "px, 0px, 0px)");
        }
      }, {
        key: "thumbPosToScrollPos",
        value: function thumbPosToScrollPos(thumbPos, orientation, thumbSize) {
          var _this$props = this.props, clientSize = _this$props.clientSize, scrollSize = _this$props.scrollSize, trackSize = _this$props.trackSize;
          var scrollPos = thumbPos * (scrollSize - clientSize) / (trackSize - thumbSize);
          return scrollPos;
        }
      }, {
        key: "scrollPosToThumbPos",
        value: function scrollPosToThumbPos(scrollPos, orientation, thumbSize) {
          var _this$props2 = this.props, clientSize = _this$props2.clientSize, scrollSize = _this$props2.scrollSize, trackSize = _this$props2.trackSize;
          var thumbPos = scrollPos / (scrollSize - clientSize) * (trackSize - thumbSize);
          return Math.floor(thumbPos);
        }
      }, {
        key: "getRatio",
        value: function getRatio() {
          return this.props.trackSize / this.props.clientSize;
        }
      }, {
        key: "getThumbSize",
        value: function getThumbSize() {
          var _this$props3 = this.props, scrollSize = _this$props3.scrollSize, clientSize = _this$props3.clientSize;
          var thumbSize = scrollSize ? clientSize * clientSize / scrollSize : 0;
          thumbSize *= this.getRatio();
          thumbSize = Math.max(thumbSize, this.props.scrollThumbMinSize);
          return thumbSize || 0;
        }
      }]);
      return InovuaScrollbar2;
    }(_react.Component);
    exports.default = InovuaScrollbar;
    InovuaScrollbar.defaultProps = {
      onScrollThumbScrollTop: function onScrollThumbScrollTop() {
      },
      onScrollThumbScrollLeft: function onScrollThumbScrollLeft() {
      },
      onStartDrag: function onStartDrag() {
      },
      onStopDrag: function onStopDrag() {
      },
      scrollThumbMargin: 2,
      scrollThumbMinSize: 10,
      showTrackOnDrag: false
    };
    InovuaScrollbar.propTypes = {
      alwaysShowTrack: _propTypes.default.bool,
      autoHide: _propTypes.default.bool,
      clientSize: _propTypes.default.number,
      dragToScroll: _propTypes.default.bool,
      emptyScrollOffset: _propTypes.default.number,
      hideTransitionDuration: _propTypes.default.string,
      horizontal: _propTypes.default.bool,
      showTrackOnDrag: _propTypes.default.bool,
      onStartDrag: _propTypes.default.func,
      onStopDrag: _propTypes.default.func,
      onPageScroll: _propTypes.default.func,
      onScrollThumbScrollLeft: _propTypes.default.func,
      onScrollThumbScrollTop: _propTypes.default.func,
      onWheelScroll: _propTypes.default.func,
      oppositeVisible: _propTypes.default.bool,
      orientation: _propTypes.default.oneOf([VERTICAL, HORIZONTAL]),
      nativeScrollbarWidth: _propTypes.default.number.isRequired,
      scrollSize: _propTypes.default.number,
      scrollThumbMargin: _propTypes.default.number.isRequired,
      scrollThumbMinSize: _propTypes.default.number,
      scrollThumbOverWidth: _propTypes.default.number,
      scrollThumbRadius: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      scrollThumbStartEndRespectMargin: _propTypes.default.bool,
      scrollThumbStyle: _propTypes.default.shape({}),
      scrollThumbWidth: _propTypes.default.number,
      scrollTrackOverTransitionDuration: _propTypes.default.string,
      showTransitionDuration: _propTypes.default.string,
      size: _propTypes.default.number,
      trackSize: _propTypes.default.number,
      vertical: _propTypes.default.bool,
      visible: _propTypes.default.bool,
      rtl: _propTypes.default.bool
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-scroll-container-pro/src/index.js
var require_src8 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-scroll-container-pro/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof3 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "cleanProps", {
      enumerable: true,
      get: function get() {
        return _reactCleanProps.default;
      }
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get() {
        return _getScrollbarWidth.default;
      }
    });
    Object.defineProperty(exports, "isMobile", {
      enumerable: true,
      get: function get() {
        return _isMobile.default;
      }
    });
    exports.propTypes = void 0;
    Object.defineProperty(exports, "scrollPage", {
      enumerable: true,
      get: function get() {
        return _scrollPage2.default;
      }
    });
    Object.defineProperty(exports, "smoothScrollTo", {
      enumerable: true,
      get: function get() {
        return _smoothScrollTo2.default;
      }
    });
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _debounce = _interopRequireDefault(require_debounce());
    var _autoBind = _interopRequireDefault(require_autoBind());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    var _src = _interopRequireDefault(require_src());
    var _isMobile = _interopRequireDefault(require_isMobile());
    var _smoothScrollTo2 = _interopRequireDefault(require_smoothScrollTo());
    var _scrollPage2 = _interopRequireDefault(require_scrollPage());
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate());
    var _Scrollbar = _interopRequireDefault(require_Scrollbar());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var callFn = function callFn2(fn) {
      return fn();
    };
    var raf = globalObject.requestAnimationFrame;
    var ua = globalObject.navigator ? globalObject.navigator.userAgent || "" : "";
    var IS_EDGE = ua.indexOf("Edge/") !== -1;
    var IS_MS_BROWSER = IS_EDGE || ua.indexOf("Trident") !== -1;
    var IS_IE = IS_MS_BROWSER && !IS_EDGE;
    var WRAPPER_STYLE = {
      overflow: "hidden",
      flex: "1 1 auto",
      position: "relative",
      display: "flex"
    };
    var VERTICAL = "vertical";
    var HORIZONTAL = "horizontal";
    var SIZES = {
      vertical: "height",
      horizontal: "width"
    };
    var OTHER_ORIENTATION = {
      vertical: "horizontal",
      horizontal: "vertical"
    };
    var InovuaScrollContainer = function(_Component) {
      (0, _inherits2.default)(InovuaScrollContainer2, _Component);
      var _super = _createSuper(InovuaScrollContainer2);
      function InovuaScrollContainer2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaScrollContainer2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollerScrollSize", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollerClientSize", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refScroller", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollerNode", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "computeScrollWithThreshold", function(scrollTop, scrollThreshold, scrollMaxDelta) {
          var scrollPercent = function scrollPercent2(threshold2) {
            threshold2 = threshold2 < 0.4 ? 0.4 : threshold2;
            threshold2 = threshold2 > 1 ? 1 : threshold2;
            var scrollMax2 = scrollMaxDelta ? _this.scrollTopMax - scrollMaxDelta : _this.scrollTopMax;
            var percent = scrollTop / scrollMax2;
            if (percent >= threshold2) {
              return true;
            }
            return false;
          };
          if (typeof scrollThreshold === "number") {
            return scrollPercent(scrollThreshold);
          }
          if (typeof scrollThreshold === "string") {
            if (scrollThreshold.match(/^(\d*(\.\d+)?)%$/)) {
              var threshold = parseFloat(scrollThreshold) / 100;
              return scrollPercent(threshold);
            }
            if (scrollThreshold.match(/^(\d*(\.\d+)?)px$/)) {
              var scrollMax = scrollMaxDelta ? _this.scrollTopMax - scrollMaxDelta : _this.scrollTopMax;
              var _threshold = parseFloat(scrollThreshold);
              if (scrollTop >= scrollMax - _threshold) {
                return true;
              }
            }
          }
          return false;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "applyCSSContainOnScrollUpdate", function(bool) {
          var scrollerNode = _this.getScrollerNode();
          if (scrollerNode) {
            scrollerNode.style.contain = bool ? "strict" : "";
          }
        });
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this), {
          scrollTop: 1,
          scrollLeft: 1,
          scrollTopMax: 1,
          scrollLeftMax: 1
        });
        _this.state = {
          scrollbars: {
            horizontal: false,
            vertical: false
          }
        };
        _this.scrollerResizerRef = function(s) {
          _this._scrollerResizer = s;
        };
        if (props2.scrollDebounceDelay > 0) {
          _this.onScrollDebounce = (0, _debounce.default)(_this.onScrollDebounce, props2.scrollDebounceDelay, {
            leading: false
          });
        }
        _this.onStop = (0, _debounce.default)(_this.onStop, props2.scrollStopDelay, {
          leading: false
        });
        _this.nativeScrollbarWidth = (0, _getScrollbarWidth.default)(_this.props.hideNativeScrollbarIfPossible);
        _this.scroll = {
          scrollTop: 0,
          scrollLeft: 0
        };
        _this.trackSize = {};
        _this.clientSize = {};
        _this.scrollSize = {};
        _this.scrollbars = {};
        _this.scrollerClientSize = {};
        _this.scrollerScrollSize = {};
        _this.scrollbarRef = {
          vertical: function vertical(c) {
            _this.scrollbars.vertical = c;
          },
          horizontal: function horizontal(c) {
            var wasDefined = !!_this.scrollbars.horizontal;
            _this.scrollbars.horizontal = c;
            if (!wasDefined && c && _this.props.rtl) {
              c.setScrollPos(_this.scrollLeftMax);
            }
          }
        };
        _this.refThis = function(c) {
          _this.domNode = c;
        };
        _this.refWrapper = function(c) {
          if (c) {
            _this.setupWrapperPassiveScrollListener(c);
          } else {
            _this.removeWrapperPassiveScrollListener(_this.wrapperNode);
          }
          _this.wrapperNode = c;
        };
        _this.refView = function(v) {
          _this.viewNode = v;
        };
        _this.refScroller = (0, _react.createRef)();
        return _this;
      }
      (0, _createClass2.default)(InovuaScrollContainer2, [{
        key: "onWrapperScroll",
        value: function onWrapperScroll(event2) {
          var _this2 = this;
          var eventTarget = event2.target;
          if (eventTarget != this.wrapperNode) {
            return;
          }
          var scrollLeft = eventTarget.scrollLeft, scrollTop = eventTarget.scrollTop;
          if (scrollLeft) {
            eventTarget.scrollLeft = 0;
            raf(function() {
              _this2.scrollLeft += scrollLeft;
            });
          }
          if (scrollTop) {
            eventTarget.scrollTop = 0;
            raf(function() {
              _this2.scrollTop += scrollTop;
            });
          }
        }
      }, {
        key: "setupWrapperPassiveScrollListener",
        value: function setupWrapperPassiveScrollListener(node) {
          node.addEventListener("scroll", this.onWrapperScroll, {
            passive: true
          });
        }
      }, {
        key: "removeWrapperPassiveScrollListener",
        value: function removeWrapperPassiveScrollListener() {
          var node = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.wrapperNode;
          if (node) {
            node.removeEventListener("scroll", this.onWrapperScroll, {
              passive: true
            });
          }
        }
      }, {
        key: "setupPassiveScrollListener",
        value: function setupPassiveScrollListener(node) {
          node.addEventListener("scroll", this.onScroll, {
            passive: true
          });
        }
      }, {
        key: "removePassiveScrollListener",
        value: function removePassiveScrollListener() {
          var node = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getScrollerNode();
          if (node) {
            node.removeEventListener("scroll", this.onScroll, {
              passive: true
            });
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.unmounted = true;
          if (this.props.usePassiveScroll) {
            this.removePassiveScrollListener();
          }
          if (typeof this.props.onWillUnmount === "function") {
            this.props.onWillUnmount(this);
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.unmounted = false;
          this.scrollerNode = this.refScroller.current;
          var scrollerNode = this.getScrollerNode();
          if (this.props.usePassiveScroll) {
            if (scrollerNode) {
              this.setupPassiveScrollListener(scrollerNode);
            } else {
              this.removePassiveScrollListener(scrollerNode);
            }
          }
          if (typeof this.props.onDidMount === "function") {
            this.props.onDidMount(this, this.getDOMNode(), this._scrollerResizer);
          }
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "ensureNonStaticStyle",
        value: function ensureNonStaticStyle(style, domNode) {
          if (!this.props.forceNonStaticPosition) {
            return style;
          }
          style = style || {};
          var _style = style, position = _style.position;
          var nonStatic = position == "relative" || position == "absolute";
          if (nonStatic) {
            return style;
          }
          if (domNode) {
            position = globalObject.getComputedStyle(domNode).position;
            nonStatic = position == "relative" || position == "absolute";
            if (!nonStatic) {
              return _objectSpread(_objectSpread({}, style), {}, {
                position: "relative"
              });
            }
          }
          return _objectSpread(_objectSpread({}, style), {}, {
            position: "relative"
          });
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var renderScroller = props2.renderScroller, renderView = props2.renderView, Factory = props2.factory, inlineBlock = props2.inlineBlock, usePassiveScroll = props2.usePassiveScroll, theme = props2.theme, contain = props2.contain, nativeScroll = props2.nativeScroll;
          var style = props2.style, children = props2.children;
          var className = props2.className || "";
          style = _objectSpread({
            overflow: "hidden",
            display: props2.display ? props2.display : inlineBlock ? "inline-flex" : "flex",
            flexFlow: "column"
          }, this.ensureNonStaticStyle(style, this.domNode));
          if (contain) {
            if (contain === true) {
              style.contain = "style layout paint";
            } else {
              style.contain = contain;
            }
          }
          var factoryProps = (0, _reactCleanProps.default)(props2, InovuaScrollContainer2.propTypes);
          className += inlineBlock ? " inovua-react-scroll-container--inline-block" : " inovua-react-scroll-container--block";
          className += " inovua-react-scroll-container";
          if (theme) {
            className += " inovua-react-scroll-container--theme-".concat(theme);
          }
          var nativeScrollbarWidth = this.nativeScrollbarWidth;
          var emptyScrollOffset = this.getEmptyScrollOffset();
          var scrollerStyle = {};
          if (this.props.inertialScroll) {
            scrollerStyle.WebkitOverflowScrolling = "touch";
          }
          if (this.props.scrollerStyle) {
            scrollerStyle = _objectSpread(_objectSpread({}, scrollerStyle), this.props.scrollerStyle);
          }
          scrollerStyle.overflow = nativeScroll ? "auto" : "scroll";
          scrollerStyle.direction = this.props.rtl ? "rtl" : "ltr";
          if (!nativeScroll) {
            scrollerStyle[this.props.rtl ? "marginLeft" : "marginRight"] = -emptyScrollOffset - nativeScrollbarWidth;
            scrollerStyle.marginBottom = -emptyScrollOffset - nativeScrollbarWidth;
          }
          var viewClassName = "".concat(this.props.viewClassName || "", " inovua-react-scroll-container__view ").concat(!nativeScrollbarWidth ? "inovua-react-scroll-container__view--zero-width-scrollbar" : "");
          var viewChildren = children;
          var viewStyle = {};
          if (this.props.viewStyle) {
            viewStyle = _objectSpread(_objectSpread({}, viewStyle), this.props.viewStyle);
          }
          if (!emptyScrollOffset || nativeScroll) {
            viewChildren = children;
          } else {
            viewStyle[this.props.rtl ? "paddingLeft" : "paddingRight"] = emptyScrollOffset;
            var viewChildrenStyle = {
              paddingBottom: emptyScrollOffset
            };
            if (IS_IE) {
              viewChildrenStyle.display = "inline-block";
            }
            viewChildren = _react.default.createElement("div", {
              key: "viewChildren",
              style: viewChildrenStyle
            }, children);
          }
          var resizer = !!this.props.resizer;
          var viewProps = {
            ref: this.refView,
            className: viewClassName,
            style: viewStyle,
            children: [viewChildren, resizer && _react.default.createElement(_src.default, {
              ResizeObserver: this.props.ResizeObserver,
              checkResizeDelay: this.props.checkResizeDelay,
              key: "viewResizer",
              useRaf: this.props.rafOnResize,
              onResize: this.onViewResize,
              notifyOnMount: true
            })]
          };
          var view = renderView ? renderView(viewProps) : _react.default.createElement("div", _objectSpread({
            key: "view"
          }, viewProps));
          var scrollerProps = {
            className: "inovua-react-scroll-container__scroller inovua-react-scroll-container__scroller--direction-".concat(this.props.rtl ? "rtl" : "ltr"),
            style: scrollerStyle,
            ref: this.refScroller,
            children: [view, resizer ? _react.default.createElement(_src.default, _objectSpread(_objectSpread({
              ref: this.scrollerResizerRef
            }, props2.scrollerResizerProps), {}, {
              ResizeObserver: this.props.ResizeObserver,
              checkResizeDelay: this.props.checkResizeDelay,
              useRaf: this.props.rafOnResize,
              key: "scrollerResizer",
              onResize: this.onResize,
              notifyOnMount: true
            })) : null].filter(Boolean)
          };
          if (!usePassiveScroll) {
            scrollerProps.onScroll = this.onScroll;
          }
          if (this.props.avoidRepaintOnScroll) {
            scrollerProps.className += " inovua-react-scroll-container__scroller--avoid-repaint";
          }
          if (this.props.hideNativeScrollbarIfPossible) {
            scrollerProps.className += " inovua-react-scroll-container__scroller--hide-native-scrollbar-if-possible";
          }
          if (this.props.dragToScroll) {
            scrollerProps.tabIndex = -1;
          }
          var scroller = renderScroller ? renderScroller(scrollerProps) : _react.default.createElement("div", _objectSpread({}, scrollerProps));
          children = [_react.default.createElement("div", {
            key: "wrapper",
            className: "inovua-react-scroll-container__wrapper",
            ref: this.refWrapper,
            style: this.props.wrapperStyle ? _objectSpread(_objectSpread({}, WRAPPER_STYLE), this.props.wrapperStyle) : WRAPPER_STYLE,
            children: scroller
          })].concat((0, _toConsumableArray2.default)(this.renderScrollbars()), [this.props.before ? _react.default.cloneElement(this.props.before, {
            key: "before"
          }) : null, this.props.after ? _react.default.cloneElement(this.props.after, {
            key: "after",
            style: _objectSpread(_objectSpread({}, this.props.after.props.style), {}, {
              bottom: this.state.scrollbars.horizontal && this.props.nativeScroll ? this.nativeScrollbarWidth : 0
            })
          }) : null]);
          if (this.props.showScrollbarsOnOver) {
            factoryProps.onMouseEnter = this.onMouseEnter;
            factoryProps.onMouseLeave = this.onMouseLeave;
          }
          return Factory ? _react.default.createElement(Factory, _objectSpread(_objectSpread({}, factoryProps), {}, {
            ref: this.refThis,
            style,
            className,
            children
          })) : (0, _react.createElement)(props2.tagName, _objectSpread(_objectSpread({}, factoryProps), {}, {
            ref: this.refThis,
            style,
            className,
            children
          }));
        }
      }, {
        key: "onMouseEnter",
        value: function onMouseEnter(event2) {
          this.mouseEntered = true;
          this.setScrollbarsVisible({
            horizontal: true,
            vertical: true
          });
          if (this.props.onMouseEnter) {
            this.props.onMouseEnter(event2);
          }
        }
      }, {
        key: "onMouseLeave",
        value: function onMouseLeave() {
          this.mouseEntered = false;
          this.setScrollbarsVisible({
            horizontal: false,
            vertical: false
          });
          if (this.props.onMouseLeave) {
            this.props.onMouseLeave(event);
          }
        }
      }, {
        key: "onViewResize",
        value: function onViewResize(size) {
          var _this3 = this;
          this.rafSync(function() {
            if (_this3.props.onViewResize) {
              _this3.props.onViewResize(size, _this3);
            }
          });
        }
      }, {
        key: "onResize",
        value: function onResize(size) {
          var _this4 = this;
          if (this.props.rafOnResize) {
            this.rafSync(function() {
              if (_this4.props.onResize) {
                _this4.props.onResize(size, _this4);
              }
            });
          } else {
            this.sync();
            if (this.props.onResize) {
              this.props.onResize(size, this);
            }
          }
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          return this.domNode;
        }
      }, {
        key: "scrollTop",
        get: function get() {
          return this.scroll.scrollTop;
        },
        set: function set(value) {
          this.getScrollerNode().scrollTop = value;
        }
      }, {
        key: "scrollLeft",
        get: function get() {
          return this.scroll.scrollLeft;
        },
        set: function set(value) {
          this.getScrollerNode().scrollLeft = value;
        }
      }, {
        key: "getScrollPosition",
        value: function getScrollPosition() {
          return this.scroll;
        }
      }, {
        key: "scrollTopMax",
        get: function get() {
          if (!this.scrollerScrollSize.height || !this.scrollerClientSize.height) {
            this.getScrollbars();
          }
          return this.scrollerScrollSize.height - this.scrollerClientSize.height;
        }
      }, {
        key: "scrollLeftMax",
        get: function get() {
          if (!this.scrollerScrollSize.width || !this.scrollerClientSize.width) {
            this.getScrollbars();
          }
          return this.scrollerScrollSize.width - this.scrollerClientSize.width;
        }
      }, {
        key: "renderScrollbars",
        value: function renderScrollbars() {
          var scrollbars = this.state.scrollbars;
          return [scrollbars.vertical && this.renderScrollbar("vertical", scrollbars), scrollbars.horizontal && this.renderScrollbar("horizontal", scrollbars)];
        }
      }, {
        key: "getEmptyScrollOffset",
        value: function getEmptyScrollOffset() {
          return this.props.emptyScrollOffset == null ? _isMobile.default ? 17 : IS_IE ? 0 : (0, _getScrollbarWidth.default)() : this.props.emptyScrollOffset;
        }
      }, {
        key: "renderScrollbar",
        value: function renderScrollbar(orientation, scrollbars) {
          if (this.checkAllowedScrollbars()[orientation] === false) {
            return null;
          }
          var sizeName = SIZES[orientation];
          var nativeScrollbarWidth = this.nativeScrollbarWidth;
          var oppositeVisible = scrollbars[OTHER_ORIENTATION[orientation]];
          var _this$props = this.props, scrollThumbWidth = _this$props.scrollThumbWidth, scrollThumbStartEndRespectMargin = _this$props.scrollThumbStartEndRespectMargin, scrollThumbMargin = _this$props.scrollThumbMargin;
          var trackSize = this.trackSize[sizeName];
          trackSize -= scrollThumbMargin * (scrollThumbStartEndRespectMargin ? 2 : 1);
          if (oppositeVisible) {
            trackSize -= scrollThumbWidth;
          }
          var emptyScrollOffset = this.getEmptyScrollOffset();
          var scrollbarProps = {
            key: orientation,
            ref: this.scrollbarRef[orientation],
            emptyScrollOffset,
            nativeScrollbarWidth,
            orientation,
            visible: !this.props.autoHide,
            autoHide: this.props.autoHide,
            rtl: this.props.rtl,
            oppositeVisible,
            scrollThumbStyle: this.props.scrollThumbStyle,
            trackSize,
            scrollSize: this.scrollerScrollSize[sizeName],
            clientSize: this.clientSize[sizeName] + emptyScrollOffset,
            dragToScroll: this.props.dragToScroll,
            scrollThumbMinSize: this.props.scrollThumbMinSize,
            scrollThumbRadius: this.props.scrollThumbRadius,
            scrollThumbStartEndRespectMargin,
            scrollThumbOverWidth: this.props.scrollThumbOverWidth,
            scrollThumbWidth,
            scrollThumbMargin,
            scrollTrackOverTransitionDuration: this.props.scrollTrackOverTransitionDuration,
            showTrackOnDrag: this.props.showTrackOnDrag,
            alwaysShowTrack: this.props.alwaysShowTrack,
            hideTransitionDuration: this.props.hideTransitionDuration,
            showTransitionDuration: this.props.showTransitionDuration,
            onScrollThumbScrollTop: this.onScrollThumbScrollTop,
            onScrollThumbScrollLeft: this.onScrollThumbScrollLeft,
            onStartDrag: this.props.dragToScroll && this.onScrollbarStartDrag,
            onStopDrag: this.props.dragToScroll && this.onScrollbarStopDrag,
            onWheelScroll: this.onScrollbarWheelScroll,
            onPageScroll: this.onScrollbarPageScroll
          };
          return _react.default.createElement(_Scrollbar.default, _objectSpread({}, scrollbarProps));
        }
      }, {
        key: "onScrollbarStartDrag",
        value: function onScrollbarStartDrag(orientation) {
          if (this.props.onScrollbarStartDrag) {
            this.props.onScrollbarStartDrag(orientation);
          }
          if (orientation == VERTICAL && this.props.onVerticalScrollbarStartDrag) {
            this.props.onVerticalScrollbarStartDrag();
          } else if (this.props.onHorizontalScrollbarStartDrag) {
            this.props.onHorizontalScrollbarStartDrag();
          }
        }
      }, {
        key: "onScrollbarStopDrag",
        value: function onScrollbarStopDrag(orientation) {
          this.focus();
          if (this.props.onScrollbarStopDrag) {
            this.props.onScrollbarStopDrag(orientation);
          }
          if (orientation == VERTICAL && this.props.onVerticalScrollbarStopDrag) {
            this.props.onVerticalScrollbarStopDrag();
          } else if (this.props.onHorizontalScrollbarStopDrag) {
            this.props.onHorizontalScrollbarStopDrag();
          }
        }
      }, {
        key: "focus",
        value: function focus() {
          this.getScrollerNode().focus();
        }
      }, {
        key: "onScrollbarWheelScroll",
        value: function onScrollbarWheelScroll(orientation, delta) {
          var node = this.getScrollerNode();
          var horiz = orientation == "horizontal";
          var scrollPosName = horiz ? "scrollLeft" : "scrollTop";
          var currentValue = node[scrollPosName];
          var newValue = currentValue + delta;
          this.smoothScrollTo(newValue, {
            orientation,
            duration: 10
          });
        }
      }, {
        key: "onScrollbarPageScroll",
        value: function onScrollbarPageScroll(orientation, direction) {
          this.focus();
          this.scrollPage(orientation, direction);
        }
      }, {
        key: "scrollPage",
        value: function scrollPage(orientation, direction) {
          if (!direction) {
            throw new Error("Please provide a scroll direction: 1 or -1!");
          }
          var node = this.getScrollerNode();
          var horiz = orientation == "horizontal";
          (0, _scrollPage2.default)(node, {
            orientation,
            direction,
            pageSize: this.clientSize[horiz ? "width" : "height"] - 20
          });
        }
      }, {
        key: "scrollHorizontalPage",
        value: function scrollHorizontalPage(direction) {
          this.scrollPage("horizontal", direction);
        }
      }, {
        key: "scrollVerticalPage",
        value: function scrollVerticalPage(direction) {
          this.scrollPage("vertical", direction);
        }
      }, {
        key: "smoothScrollTo",
        value: function smoothScrollTo(newValue, cfg, callback) {
          return (0, _smoothScrollTo2.default)(this.getScrollerNode(), newValue, cfg, callback);
        }
      }, {
        key: "onScrollThumbScrollTop",
        value: function onScrollThumbScrollTop(pos) {
          this.getScrollerNode().scrollTop = pos;
        }
      }, {
        key: "onScrollThumbScrollLeft",
        value: function onScrollThumbScrollLeft(pos) {
          this.getScrollerNode().scrollLeft = pos;
        }
      }, {
        key: "getScrollerNode",
        value: function getScrollerNode() {
          this.scrollerNode = this.scrollerNode || this.refScroller.current || this.getDOMNode().firstChild.firstChild;
          return this.scrollerNode;
        }
      }, {
        key: "getScrollerChild",
        value: function getScrollerChild() {
          this.scrollerChild = this.scrollerChild || this.getScrollerNode().firstChild;
          return this.scrollerChild;
        }
      }, {
        key: "getTrackSize",
        value: function getTrackSize() {
          var node = this.getDOMNode();
          if (this.props.getTrackSize) {
            return this.props.getTrackSize(node);
          }
          return {
            width: node.clientWidth,
            height: node.clientHeight
          };
        }
      }, {
        key: "getScrollSize",
        value: function getScrollSize() {
          if (this.props.getScrollSize) {
            return this.props.getScrollSize(this.getScrollerNode());
          }
          var node = this.getScrollerChild();
          return {
            width: node.scrollWidth,
            height: node.scrollHeight
          };
        }
      }, {
        key: "getClientSize",
        value: function getClientSize() {
          var n = this.getDOMNode();
          if (this.props.getClientSize) {
            return this.props.getClientSize(n);
          }
          var node = n.firstChild;
          return {
            width: node.clientWidth,
            height: node.clientHeight
          };
        }
      }, {
        key: "getScrollbars",
        value: function getScrollbars() {
          this.trackSize = this.getTrackSize();
          var scrollSize = this.scrollSize = this.getScrollSize();
          this.clientSize = this.getClientSize();
          var scrollerNode = this.getScrollerNode();
          this.scrollerClientSize = this.props.getScrollerNodeClientSize ? this.props.getScrollerNodeClientSize(scrollerNode) : {
            height: scrollerNode.clientHeight,
            width: scrollerNode.clientWidth
          };
          var scrollerNodeClientSize = this.scrollerClientSize;
          this.scrollerScrollSize = {
            height: scrollerNode.scrollHeight,
            width: scrollerNode.scrollWidth
          };
          if (this.props.rtl) {
          }
          var scrollbars = {
            vertical: scrollSize.height > scrollerNodeClientSize.height,
            horizontal: scrollSize.width > scrollerNodeClientSize.width
          };
          return scrollbars;
        }
      }, {
        key: "rafSync",
        value: function rafSync(callback) {
          var _this5 = this;
          raf(function() {
            _this5.sync();
            if (callback) {
              callback();
            }
          });
        }
      }, {
        key: "sync",
        value: function sync() {
          var _this6 = this;
          if (this.unmounted) {
            return;
          }
          var oldScrollbars = this.state.scrollbars;
          var scrollbars = this.getScrollbars();
          this.setState({
            scrollbars
          }, function() {
            if (_this6.props.onScrollbarsChange && (scrollbars.vertical != oldScrollbars.vertical || scrollbars.horizontal != oldScrollbars.horizontal)) {
              _this6.props.onScrollbarsChange(scrollbars);
            }
          });
          if (this.props.rtl) {
            var scrollNode = this.getScrollerNode();
            if (!scrollNode) {
              return;
            }
            this.onScrollDebounce(scrollNode);
          }
        }
      }, {
        key: "hasScrollbar",
        value: function hasScrollbar(orientation) {
          return this.state.scrollbars[orientation];
        }
      }, {
        key: "hasVerticalScrollbar",
        value: function hasVerticalScrollbar() {
          return this.hasScrollbar(VERTICAL);
        }
      }, {
        key: "hasHorizontalScrollbar",
        value: function hasHorizontalScrollbar() {
          return this.hasScrollbar(HORIZONTAL);
        }
      }, {
        key: "onScroll",
        value: function onScroll(event2) {
          var eventTarget = event2.target;
          if (this.props.onScroll) {
            this.props.onScroll(event2);
          }
          var scrollerNode = this.getScrollerNode();
          if (eventTarget != scrollerNode) {
            return;
          }
          this.onScrollDebounce(eventTarget);
        }
      }, {
        key: "onScrollDebounce",
        value: function onScrollDebounce(eventTarget) {
          var _this7 = this;
          var props2 = this.props;
          var rafOnScroll = props2.rafOnScroll, cancelPrevScrollRaf = props2.cancelPrevScrollRaf, avoidScrollTopBrowserLayout = props2.avoidScrollTopBrowserLayout, scrollMaxDelta = props2.scrollMaxDelta, scrollThreshold = props2.scrollThreshold;
          var rafFn = rafOnScroll ? raf : callFn;
          if (this.scrollRafId && rafOnScroll && cancelPrevScrollRaf) {
            globalObject.cancelAnimationFrame(this.scrollRafId);
          }
          this.scrollRafId = rafFn(function() {
            if (_this7.unmounted) {
              return;
            }
            delete _this7.scrollRafId;
            var onScrollStart = props2.onScrollStart, onScrollStop = props2.onScrollStop, autoHide = props2.autoHide, applyCSSContainOnScroll = props2.applyCSSContainOnScroll;
            var startStop = !!(onScrollStart || onScrollStop || autoHide || avoidScrollTopBrowserLayout || applyCSSContainOnScroll);
            var scrollTop;
            var scrollLeft;
            if (!avoidScrollTopBrowserLayout) {
              scrollTop = eventTarget.scrollTop;
              scrollLeft = eventTarget.scrollLeft;
            } else {
              var targetRect = _this7.targetRect || eventTarget.getBoundingClientRect();
              _this7.targetRect = targetRect;
              var viewRect = eventTarget.firstChild.getBoundingClientRect();
              scrollTop = targetRect.top - viewRect.top;
              scrollLeft = targetRect.left - viewRect.left;
            }
            var scrollLeftMax = _this7.scrollerScrollSize.width - _this7.scrollerClientSize.width;
            var scrollPos = {
              scrollTop,
              scrollLeft,
              scrollLeftMax
            };
            var prevScrollPos = _this7.scroll;
            var prevScrollTop = prevScrollPos.scrollTop, prevScrollLeft = prevScrollPos.scrollLeft, prevScrollLeftMax = prevScrollPos.scrollLeftMax;
            if (startStop) {
              if (!_this7.scrollStarted) {
                if (applyCSSContainOnScroll) {
                  _this7.applyCSSContainOnScrollUpdate(true);
                }
                if (onScrollStart) {
                  onScrollStart(scrollPos, prevScrollPos, eventTarget);
                }
              }
            }
            var scrollVertical = false;
            var scrollHorizontal = false;
            if (props2.onContainerScroll) {
              props2.onContainerScroll(scrollPos, prevScrollPos, eventTarget, {
                scrollerScrollSize: _this7.scrollerScrollSize,
                scrollerClientSize: _this7.scrollerClientSize,
                scrollLeftMax
              });
            }
            var scrollTopChange = scrollTop != prevScrollTop;
            if (scrollTopChange) {
              scrollVertical = true;
              if (_this7.scrollbars.vertical) {
                _this7.scrollbars.vertical.setScrollPos(scrollTop);
              }
              if (props2.onContainerScrollVertical) {
                props2.onContainerScrollVertical(scrollTop, prevScrollTop, eventTarget);
              }
              if (props2.onContainerScrollVerticalMin && scrollTop == 0) {
                props2.onContainerScrollVerticalMin(0, eventTarget);
              }
              if (props2.onContainerScrollVerticalMax) {
                if (scrollThreshold) {
                  var reachScrollMax = _this7.computeScrollWithThreshold(scrollTop, scrollThreshold, scrollMaxDelta);
                  if (reachScrollMax) {
                    props2.onContainerScrollVerticalMax(scrollTop);
                  }
                } else if (scrollMaxDelta ? scrollTop >= _this7.scrollTopMax - scrollMaxDelta : scrollTop == _this7.scrollTopMax) {
                  props2.onContainerScrollVerticalMax(scrollTop);
                }
              }
            }
            var scrollLeftChange = scrollLeft != prevScrollLeft;
            if (_this7.props.rtl && !scrollLeftChange) {
              scrollLeftChange = scrollLeftMax != prevScrollLeftMax;
            }
            if (scrollLeftChange) {
              scrollHorizontal = true;
              if (_this7.scrollbars.horizontal) {
                _this7.scrollbars.horizontal.setScrollPos(scrollLeft);
              }
              if (props2.onContainerScrollHorizontal) {
                props2.onContainerScrollHorizontal(scrollLeft, prevScrollLeft, eventTarget, scrollLeftMax);
              }
              if (props2.onContainerScrollHorizontalMin && scrollLeft == 0) {
                props2.onContainerScrollHorizontalMin(0, eventTarget);
              }
              if (props2.onContainerScrollHorizontalMax && (scrollMaxDelta ? Math.abs(scrollLeft) >= scrollLeftMax - scrollMaxDelta : Math.abs(scrollLeft) == scrollLeftMax)) {
                props2.onContainerScrollHorizontalMax(scrollLeft, eventTarget);
              }
            }
            if (startStop && (scrollTopChange || scrollLeftChange)) {
              if (!_this7.scrollStarted || _this7.scrollStarted.vertical != scrollVertical || _this7.scrollStarted.horizontal != scrollHorizontal) {
                _this7.lazyShowScrollbars();
                _this7.scrollStarted = {
                  horizontal: scrollHorizontal,
                  vertical: scrollVertical
                };
              }
              _this7.onStop(scrollPos, prevScrollPos, eventTarget);
            }
            _this7.scroll = scrollPos;
          });
        }
      }, {
        key: "getContainerTargetNode",
        value: function getContainerTargetNode() {
          var view = this.viewNode;
          return !this.props.emptyScrollOffset ? view : view.firstChild;
        }
      }, {
        key: "lazyShowScrollbars",
        value: function lazyShowScrollbars() {
          if (this.props.autoHide) {
            setTimeout(this.showScrollbars, this.props.showDelay);
          }
        }
      }, {
        key: "onStop",
        value: function onStop(scrollPos, prevScrollPos, eventTarget) {
          this.scrollStarted = false;
          if (this.props.applyCSSContainOnScroll) {
            this.applyCSSContainOnScrollUpdate(false);
          }
          delete this.targetRect;
          if (this.props.onScrollStop) {
            this.props.onScrollStop(scrollPos, prevScrollPos, eventTarget);
          }
          setTimeout(this.hideScrollbars, this.props.hideDelay);
        }
      }, {
        key: "showScrollbars",
        value: function showScrollbars() {
          if (this.props.autoHide && this.scrollStarted) {
            var _this$scrollbars = this.scrollbars, horizontal = _this$scrollbars.horizontal, vertical = _this$scrollbars.vertical;
            var _this$scrollStarted = this.scrollStarted, scrollHorizontal = _this$scrollStarted.horizontal, scrollVertical = _this$scrollStarted.vertical;
            var visibleScrollbars = {};
            if (scrollHorizontal) {
              visibleScrollbars.horizontal = true;
            }
            if (scrollVertical) {
              visibleScrollbars.vertical = true;
            }
            this.setScrollbarsVisible(visibleScrollbars);
          }
        }
      }, {
        key: "checkAllowedScrollbars",
        value: function checkAllowedScrollbars() {
          var result = {
            vertical: true,
            horizontal: true
          };
          var scrollbars = this.props.scrollbars;
          if (scrollbars === false) {
            result.vertical = false;
            result.horizontal = false;
          }
          if ((0, _typeof2.default)(scrollbars) == "object") {
            if (scrollbars.horizontal === false) {
              result.horizontal = false;
            }
            if (scrollbars.false === false) {
              result.false = false;
            }
          }
          var _this$props2 = this.props, shouldAllowScrollbars = _this$props2.shouldAllowScrollbars, showScrollbars = _this$props2.showScrollbars;
          if (typeof shouldAllowScrollbars == "function") {
            var shouldAllow = showScrollbars || shouldAllowScrollbars(this.props, (0, _getScrollbarWidth.default)());
            if (shouldAllow === false || shouldAllow && shouldAllow.horizontal === false) {
              result.horizontal = false;
            }
            if (shouldAllow === false || shouldAllow && shouldAllow.vertical === false) {
              result.vertical = false;
            }
          }
          return result;
        }
      }, {
        key: "setScrollbarsVisible",
        value: function setScrollbarsVisible(scrollbars) {
          var horizontalVisible = scrollbars.horizontal, verticalVisible = scrollbars.vertical;
          var _this$scrollbars2 = this.scrollbars, horizontal = _this$scrollbars2.horizontal, vertical = _this$scrollbars2.vertical;
          if (horizontalVisible !== void 0 && horizontal) {
            horizontal.setVisible(horizontalVisible);
          }
          if (verticalVisible !== void 0 && vertical) {
            vertical.setVisible(verticalVisible);
          }
        }
      }, {
        key: "hideScrollbars",
        value: function hideScrollbars() {
          if (this.props.showScrollbarsOnOver && this.mouseEntered) {
            return;
          }
          if (this.props.autoHide && !this.scrollStarted) {
            this.setScrollbarsVisible({
              horizontal: false,
              vertical: false
            });
          }
        }
      }]);
      return InovuaScrollContainer2;
    }(_react.Component);
    exports.default = InovuaScrollContainer;
    InovuaScrollContainer.defaultProps = {
      shouldAllowScrollbars: function shouldAllowScrollbars(props2, scrollbarWidth) {
        if (props2.nativeScroll) {
          return false;
        }
        if (!scrollbarWidth) {
          return false;
        }
      },
      avoidRepaintOnScroll: true,
      avoidScrollTopBrowserLayout: false,
      applyCSSContainOnScroll: true,
      alwaysShowTrack: false,
      autoHide: true,
      cancelPrevScrollRaf: true,
      contain: false,
      dragToScroll: true,
      forceNonStaticPosition: false,
      hideDelay: 400,
      hideTransitionDuration: "300ms",
      inertialScroll: true,
      inlineBlock: false,
      rafOnScroll: false,
      rafOnResize: false,
      scrollDebounceDelay: 0,
      resizer: true,
      rtl: false,
      scrollStopDelay: 180,
      scrollThumbMargin: 2,
      scrollThumbStartEndRespectMargin: true,
      scrollThumbWidth: 7,
      scrollThumbOverWidth: 10,
      scrollThumbRadius: 3,
      showDelay: 100,
      showScrollbarsOnOver: true,
      showTransitionDuration: "100ms",
      showTrackOnDrag: false,
      scrollTrackOverTransitionDuration: "100ms",
      usePassiveScroll: true,
      tagName: "div",
      theme: "default-light"
    };
    var propTypes = {
      alwaysShowTrack: _propTypes.default.bool,
      avoidScrollTopBrowserLayout: _propTypes.default.bool,
      applyCSSContainOnScroll: _propTypes.default.bool,
      avoidRepaintOnScroll: _propTypes.default.bool,
      autoHide: _propTypes.default.bool,
      cancelPrevScrollRaf: _propTypes.default.bool,
      dragToScroll: _propTypes.default.bool,
      display: _propTypes.default.string,
      checkResizeDelay: _propTypes.default.number,
      emptyScrollOffset: _propTypes.default.number,
      factory: _propTypes.default.func,
      nativeScroll: _propTypes.default.bool,
      forceNonStaticPosition: _propTypes.default.bool,
      hideDelay: _propTypes.default.number,
      getClientSize: _propTypes.default.func,
      getScrollSize: _propTypes.default.func,
      getTrackSize: _propTypes.default.func,
      getScrollerNodeClientSize: _propTypes.default.func,
      hideTransitionDuration: _propTypes.default.string,
      hideNativeScrollbarIfPossible: _propTypes.default.bool,
      inertialScroll: _propTypes.default.bool,
      rtl: _propTypes.default.bool,
      inlineBlock: _propTypes.default.bool,
      rafOnResize: _propTypes.default.bool,
      contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      onContainerScroll: _propTypes.default.func,
      onContainerScrollHorizontal: _propTypes.default.func,
      onContainerScrollHorizontalMax: _propTypes.default.func,
      onContainerScrollHorizontalMin: _propTypes.default.func,
      onContainerScrollVertical: _propTypes.default.func,
      onContainerScrollVerticalMax: _propTypes.default.func,
      onContainerScrollVerticalMin: _propTypes.default.func,
      onResize: _propTypes.default.func,
      onScroll: _propTypes.default.func,
      onScrollbarsChange: _propTypes.default.func,
      onScrollStart: _propTypes.default.func,
      onScrollStop: _propTypes.default.func,
      onViewResize: _propTypes.default.func,
      rafOnScroll: _propTypes.default.bool,
      scrollDebounceDelay: _propTypes.default.number,
      renderScroller: _propTypes.default.func,
      renderView: _propTypes.default.func,
      resizer: _propTypes.default.bool,
      scrollbars: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({
        vertical: _propTypes.default.bool,
        horizontal: _propTypes.default.bool
      })]),
      usePassiveScroll: _propTypes.default.bool,
      showScrollbarsOnOver: _propTypes.default.bool,
      onScrollbarStartDrag: _propTypes.default.func,
      onScrollbarStopDrag: _propTypes.default.func,
      onHorizontalScrollbarStartDrag: _propTypes.default.func,
      onHorizontalScrollbarStopDrag: _propTypes.default.func,
      onVerticalScrollbarStartDrag: _propTypes.default.func,
      onVerticalScrollbarStopDrag: _propTypes.default.func,
      scrollerStyle: _propTypes.default.shape({}),
      scrollStopDelay: _propTypes.default.number,
      scrollThumbMargin: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      scrollMaxDelta: _propTypes.default.number,
      scrollThumbMinSize: _propTypes.default.number,
      scrollThumbOverWidth: _propTypes.default.number,
      scrollThumbRadius: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      scrollThumbStartEndRespectMargin: _propTypes.default.bool,
      scrollThumbWidth: _propTypes.default.number,
      scrollThumbStyle: _propTypes.default.shape(),
      scrollTrackOverTransitionDuration: _propTypes.default.string,
      showDelay: _propTypes.default.number,
      showTrackOnDrag: _propTypes.default.bool,
      shouldComponentUpdate: _propTypes.default.func,
      shouldAllowScrollbars: _propTypes.default.func,
      showTransitionDuration: _propTypes.default.string,
      tagName: _propTypes.default.string,
      theme: _propTypes.default.string,
      scrollerResizerProps: _propTypes.default.object,
      onDidMount: _propTypes.default.func,
      onWillUnmount: _propTypes.default.func,
      viewClassName: _propTypes.default.string,
      viewStyle: _propTypes.default.shape({}),
      wrapperStyle: _propTypes.default.shape({}),
      ResizeObserver: _propTypes.default.func,
      scrollThreshold: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      showScrollbars: _propTypes.default.bool
    };
    exports.propTypes = propTypes;
    InovuaScrollContainer.propTypes = propTypes;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-scroll-container-pro/index.js
var require_react_scroll_container_pro = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-scroll-container-pro/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {};
    exports.default = void 0;
    var _src = _interopRequireWildcard(require_src8());
    Object.keys(_src).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _src[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _src[key];
        }
      });
    });
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ArrowScroller/src/Arrow.js
var require_Arrow2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ArrowScroller/src/Arrow.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _isMobile = _interopRequireDefault(require_isMobile2());
    var ARROWS = {
      right: _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M4.738 5.262L.632 9.368c-.144.144-.379.144-.524 0C.04 9.298 0 9.204 0 9.106V.894C0 .69.166.524.37.524c.099 0 .193.039.262.108l4.106 4.106c.145.145.145.38 0 .524z"
      }),
      left: _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M.262 4.738L4.368.632c.144-.144.379-.144.524 0C4.96.702 5 .796 5 .894v8.212c0 .204-.166.37-.37.37-.099 0-.193-.039-.262-.108L.262 5.262c-.145-.145-.145-.38 0-.524z"
      }),
      down: _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M4.738 4.738L.632.632C.488.488.488.253.632.108.702.04.796 0 .894 0h8.212c.204 0 .37.166.37.37 0 .099-.039.193-.108.262L5.262 4.738c-.145.145-.38.145-.524 0z"
      }),
      up: _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M5.262.262l4.106 4.106c.144.144.144.379 0 .524-.07.069-.164.108-.262.108H.894c-.204 0-.37-.166-.37-.37 0-.099.039-.193.108-.262L4.738.262c.145-.145.38-.145.524 0z"
      })
    };
    var Arrow = function Arrow2(_ref) {
      var name = _ref.name, className = _ref.className, _ref$size = _ref.size, size = _ref$size === void 0 ? _isMobile.default ? 25 : 20 : _ref$size;
      return _react.default.createElement("svg", {
        className: "".concat(className, " ").concat(className, "--").concat(name),
        height: size.height || size,
        width: size.width || size,
        viewBox: "0 0 10 20"
      }, _react.default.createElement("g", {
        transform: "translate(2.5, 5)"
      }, ARROWS[name]));
    };
    var _default = Arrow;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ArrowScroller/src/ArrowScroller.js
var require_ArrowScroller = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ArrowScroller/src/ArrowScroller.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _isMobile = _interopRequireDefault(require_isMobile2());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _debounce = _interopRequireDefault(require_debounce2());
    var _join = _interopRequireDefault(require_join4());
    var _Flex = require_Flex2();
    var _NotifyResize = require_NotifyResize();
    var _InertialScroller = require_InertialScroller2();
    var _ua = require_ua();
    var _reactScrollContainerPro = _interopRequireDefault(require_react_scroll_container_pro());
    var _Arrow = _interopRequireDefault(require_Arrow2());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var VIEW_STYLE_VERTICAL = {
      maxHeight: "100%"
    };
    var VIEW_STYLE_HORIZONTAL = {
      maxWidth: "100%"
    };
    var observe = function observe2(targetNode, callback, cfg) {
      var config = cfg || {
        attributes: false,
        childList: true,
        subtree: true
      };
      var observer = new MutationObserver(callback);
      observer.observe(targetNode, config);
      return function() {
        observer.disconnect();
      };
    };
    var measureScrollSize = function measureScrollSize2(node) {
      return {
        width: node.scrollWidth,
        height: node.scrollHeight
      };
    };
    var scrollerResizerProps = {
      useNativeIfAvailable: false,
      measureSize: measureScrollSize
    };
    var callAll = function callAll2() {
      for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
        fns[_key] = arguments[_key];
      }
      return function() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        fns.forEach(function(fn) {
          fn && fn.apply(void 0, args);
        });
      };
    };
    var pint = globalObject.parseInt;
    var raf = globalObject.requestAnimationFrame;
    var getCompStyle = globalObject.getComputedStyle;
    var NO_SCROLLBARS = function NO_SCROLLBARS2() {
      return false;
    };
    var InovuaArrowScroller = function(_Component) {
      (0, _inherits2.default)(InovuaArrowScroller2, _Component);
      var _super = _createSuper(InovuaArrowScroller2);
      function InovuaArrowScroller2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaArrowScroller2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollerNodeClientSize", function(node) {
          var result = {
            width: node.firstChild.offsetWidth,
            height: node.firstChild.offsetHeight
          };
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollContainerDidMount", function(scrollContainer, domNode, notifyResizer) {
          _this._unobserve = observe(domNode, function() {
            if (notifyResizer && notifyResizer.checkResize) {
              notifyResizer.checkResize();
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollContainerWillUnmount", function() {
          if (_this._unobserve) {
            _this._unobserve();
          }
        });
        _this.scrollInfo = {
          scrollPos: 0,
          hasStartScroll: false,
          hasEndScroll: false,
          scrollerSize: {
            start: 0,
            end: 0
          }
        };
        _this.state = {
          scrolling: false,
          activeScroll: 0
        };
        _this.handleResize = (0, _debounce.default)(_this.handleResize.bind((0, _assertThisInitialized2.default)(_this)), 50, {
          leading: false,
          trailing: true
        });
        _this.updateScrollInfo = _this.updateScrollInfo.bind((0, _assertThisInitialized2.default)(_this));
        _this.rafUpdateScrollInfo = _this.rafUpdateScrollInfo.bind((0, _assertThisInitialized2.default)(_this));
        _this.onContainerScroll = _this.onContainerScroll.bind((0, _assertThisInitialized2.default)(_this));
        _this.strip = (0, _react.createRef)();
        _this.refScrollContainer = function(scrollContainer) {
          _this.scrollerTarget = scrollContainer;
        };
        _this.setRootRef = function(ref) {
          _this.root = ref;
          if (!_this.props.nativeScroll) {
            _this.scrollerTarget = _this.root;
          }
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaArrowScroller2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          this.componentIsMounted = true;
          raf(function() {
            var name = _this2.getOffsetSizeName();
            _this2.scrollInfo.scrollerSize = {
              start: _this2.props.scroller === true ? _this2.start[name] : null,
              end: _this2.props.scroller === true ? _this2.end[name] : null
            };
            _this2.syncScroll({
              force: true
            });
            _this2.inertialManager = new _InertialScroller.InertialManager({
              arrowSelector: ".".concat(_this2.props.rootClassName, "__arrow"),
              node: _this2.root,
              viewNode: _this2.strip.current,
              setScrollPosition: function setScrollPosition() {
                return raf(function() {
                  return _this2.setScrollPosition();
                });
              },
              enableMouseDrag: false
            });
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.componentIsMounted = false;
          if (this.inertialManager) {
            this.inertialManager.removeEventListeners();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var useTransformOnScroll = props2.useTransformOnScroll, nativeScroll = props2.nativeScroll, vertical = props2.vertical, rootClassName = props2.rootClassName, rtl = props2.rtl, theme = props2.theme;
          var scrollInfo = this.scrollInfo;
          var scrollValue = rtl ? scrollInfo.scrollPos : -scrollInfo.scrollPos;
          var innerWrapperClassName = (0, _join.default)("".concat(rootClassName, "__inner-wrapper"), "".concat(rootClassName, "__inner-wrapper--direction-").concat(vertical ? "column" : "row"));
          var className = (0, _join.default)(props2.className, rootClassName, !vertical && "".concat(rootClassName, "--direction-horizontal"), vertical && "".concat(rootClassName, "--direction-vertical"), rtl && "".concat(rootClassName, "--rtl"), nativeScroll && "".concat(rootClassName, "--native-scroll"), theme && "".concat(rootClassName, "--theme-").concat(theme));
          var transformValue;
          var moveStyle = {};
          if (useTransformOnScroll) {
            moveStyle.transform = "translate3d(0px, 0px, 0px)";
          }
          if (vertical) {
            if (useTransformOnScroll) {
              moveStyle.transform = "translate3d(0px, ".concat(scrollValue, "px, 0px)");
            } else {
              moveStyle.top = scrollValue;
            }
          } else {
            if (useTransformOnScroll) {
              moveStyle.transform = "translate3d(".concat(scrollValue, "px, 0px, 0px)");
            } else {
              moveStyle.left = scrollValue;
            }
          }
          var resizer = _react.default.createElement(_NotifyResize.NotifyResize, {
            key: "resizer",
            notifyOnMount: true,
            onResize: this.handleResize,
            notifyResizeDelay: props2.notifyResizeDelay
          });
          var children = [].concat((0, _toConsumableArray2.default)(_react.default.Children.toArray(props2.children)), [resizer]);
          var content = _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({
            key: "content",
            wrap: false
          }, props2.childProps), {}, {
            className: innerWrapperClassName,
            ref: this.strip,
            children,
            style: nativeScroll ? null : moveStyle
          }));
          var finalChildren = [resizer, content, this.renderScroller(-1), this.renderScroller(1)];
          if (nativeScroll) {
            var scrollContainerProps = this.props.scrollContainerProps;
            var viewStyle = vertical ? VIEW_STYLE_VERTICAL : VIEW_STYLE_HORIZONTAL;
            if (scrollContainerProps && scrollContainerProps.viewStyle) {
              viewStyle = _objectSpread(_objectSpread({}, scrollContainerProps.viewStyle), viewStyle);
            }
            var style = {
              maxHeight: "100%"
            };
            var scrollerStyle;
            if (this.props.rtl) {
              viewStyle.direction = "rtl";
              viewStyle.maxWidth = "";
              style.alignItems = "flex-end";
              style.maxWidth = "100%";
              scrollerStyle = {
                alignItems: "flex-end"
              };
            }
            var prevChildren = finalChildren;
            finalChildren = _react.default.createElement(_reactScrollContainerPro.default, {
              applyCSSContainOnScroll: false,
              style,
              scrollerStyle,
              emptyScrollOffset: 20,
              getScrollerNodeClientSize: this.props.rtl ? this.getScrollerNodeClientSize : null,
              className: "".concat(this.props.rootClassName, "__scroll-container"),
              shouldAllowScrollbars: NO_SCROLLBARS,
              dragToScroll: false,
              nativeScroll: scrollContainerProps ? scrollContainerProps.nativeScroll !== void 0 ? scrollContainerProps.nativeScroll : false : false,
              viewStyle,
              ref: this.refScrollContainer,
              scrollerResizerProps,
              onDidMount: this.onScrollContainerDidMount,
              onWillUnmount: this.onScrollContainerWillUnmount,
              onResize: scrollContainerProps && scrollContainerProps.onResize ? callAll(scrollContainerProps.onResize, this.rafUpdateScrollInfo) : this.rafUpdateScrollInfo,
              children: prevChildren,
              onContainerScroll: this.onContainerScroll,
              theme: props2.theme
            });
            if (this.props.rtl) {
              finalChildren = [finalChildren, resizer];
            }
          }
          return _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, InovuaArrowScroller2.propTypes)), {}, {
            ref: this.setRootRef,
            className,
            alignItems: "start",
            children: finalChildren
          }));
        }
      }, {
        key: "renderScroller",
        value: function renderScroller(direction) {
          var _this3 = this;
          var _this$props = this.props, scroller = _this$props.scroller, vertical = _this$props.vertical, rootClassName = _this$props.rootClassName, nativeScroll = _this$props.nativeScroll;
          if (!scroller) {
            return null;
          }
          var arrowName = vertical ? direction == (this.props.rtl ? 1 : -1) ? "up" : "down" : direction == (this.props.rtl ? 1 : -1) ? "left" : "right";
          var scrollInfo = this.scrollInfo;
          var disabled = direction == -1 ? !scrollInfo.hasStartScroll : !scrollInfo.hasEndScroll;
          var arrowRootClassName = "".concat(rootClassName, "__arrow");
          var className = (0, _join.default)(arrowRootClassName, "".concat(arrowRootClassName, "--auto"), "".concat(arrowRootClassName, "--direction-").concat(arrowName), this.state.activeScroll == direction && "".concat(arrowRootClassName, "--active"), scroller === "auto" && disabled && "".concat(arrowRootClassName, "--hidden"), scroller === "auto" && !disabled && "".concat(arrowRootClassName, "--visible"), scroller === true && disabled && "".concat(arrowRootClassName, "--disabled"), nativeScroll && "".concat(arrowRootClassName, "--native-scroll"));
          var onClick = !disabled && this.props.scrollOnClick ? this.handleClick.bind(this, direction) : null;
          var onMouseDown = !disabled && (!this.props.scrollOnClick || _isMobile.default) ? this.startScroll.bind(this, direction) : null;
          var onMouseEnter = !disabled && this.props.scrollOnMouseEnter ? this.startMouseOverScroll.bind(this, direction) : null;
          var onMouseLeave = !this.props.scrollOnClick || _isMobile.default || this.props.scrollOnMouseEnter ? this.stopMouseOverScroll.bind(this, direction) : null;
          var onDoubleClick = !disabled ? this.handleScrollMax.bind(this, direction) : null;
          var scrollerName = direction == -1 ? "start" : "end";
          var domProps = {
            ref: function ref(_ref) {
              _this3[scrollerName] = _ref;
            },
            key: "scroller-".concat(direction),
            disabled,
            className,
            onClick,
            onDoubleClick,
            onMouseDown: !_isMobile.default ? onMouseDown : null,
            onTouchStart: _isMobile.default ? onMouseDown : null,
            onTouchEnd: _isMobile.default ? onMouseLeave : null,
            onMouseEnter: !_isMobile.default ? onMouseEnter : null,
            onMouseLeave: !_isMobile.default ? onMouseLeave : null,
            children: this.renderArrowIcon(arrowName)
          };
          var result;
          if (typeof this.props.renderScroller === "function") {
            result = this.props.renderScroller({
              domProps,
              direction
            });
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, domProps));
          }
          return result;
        }
      }, {
        key: "renderArrowIcon",
        value: function renderArrowIcon(name) {
          var props2 = this.props;
          return _react.default.createElement(_Arrow.default, {
            name,
            size: props2.arrowSize,
            height: props2.arrowHeight,
            width: props2.arrowWidth,
            className: "".concat(this.props.rootClassName, "__arrow-icon")
          });
        }
      }, {
        key: "getOffsetSizeName",
        value: function getOffsetSizeName() {
          return this.props.vertical ? "offsetHeight" : "offsetWidth";
        }
      }, {
        key: "getBorderAndPaddingSize",
        value: function getBorderAndPaddingSize() {
          var node = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.root;
          var side = arguments.length > 1 ? arguments[1] : void 0;
          var computedStyle = getCompStyle(node);
          var start;
          var end;
          if (this.props.vertical) {
            start = pint(computedStyle.borderTopWidth) + pint(computedStyle.paddingTop);
            end = pint(computedStyle.borderBottomWidth) + pint(computedStyle.paddingBottom);
            return start + end;
          } else {
            start = pint(computedStyle.borderLeftWidth) + pint(computedStyle.paddingLeft);
            end = pint(computedStyle.borderRightWidth) + pint(computedStyle.paddingRight);
          }
          return side ? side == "start" ? start : end : start + end;
        }
      }, {
        key: "getSizeName",
        value: function getSizeName() {
          return this.props.vertical ? "height" : "width";
        }
      }, {
        key: "getAvailableSize",
        value: function getAvailableSize() {
          if (!this.root) {
            return null;
          }
          var size = this.availableSize || (this.props.nativeScroll ? this.props.vertical ? this.scrollerTarget.scrollTopMax : this.scrollerTarget.scrollLeftMax : this.root[this.getOffsetSizeName()] - this.getBorderAndPaddingSize());
          if (this.props.rtl && size < 0) {
            size = -size;
          }
          this.availableSize = size;
          return size;
        }
      }, {
        key: "getCurrentListSize",
        value: function getCurrentListSize() {
          if (!this.strip.current) {
            return null;
          }
          return this.currentListSize = this.currentListSize || this.strip.current[this.getOffsetSizeName()];
        }
      }, {
        key: "handleResize",
        value: function handleResize() {
          if (!this.componentIsMounted) {
            return;
          }
          delete this.currentListSize;
          delete this.availableSize;
          this.syncScroll({
            force: true
          });
        }
      }, {
        key: "handleScrollMax",
        value: function handleScrollMax(direction, event2) {
          var _this4 = this;
          event2.stopPropagation();
          event2.preventDefault();
          var maxPos = direction == -1 ? 0 : this.scrollInfo.maxScrollPos;
          raf(function() {
            _this4.setScrollPosition(maxPos);
          });
        }
      }, {
        key: "handleClick",
        value: function handleClick(direction) {
          var offset = this.getAvailableSize();
          this.scrollBy(offset, direction);
        }
      }, {
        key: "stopScroll",
        value: function stopScroll() {
          globalObject.clearInterval(this.scrollInterval);
          this.setState({
            scrolling: false,
            activeScroll: 0
          });
        }
      }, {
        key: "rafUpdateScrollInfo",
        value: function rafUpdateScrollInfo() {
          raf(this.updateScrollInfo);
        }
      }, {
        key: "updateScrollInfo",
        value: function updateScrollInfo(count) {
          var _this5 = this;
          if (this.componentIsMounted === false) {
            return;
          }
          var availableSize = this.getAvailableSize();
          if (!availableSize) {
            if (!count || count < 5) {
              raf(function() {
                _this5.updateScrollInfo((count || 0) + 1);
              });
              return;
            }
          }
          var listSize = this.getCurrentListSize();
          var scrollInfo = Object.assign(this.scrollInfo, {
            availableSize,
            listSize
          });
          if (this.props.nativeScroll) {
            if (this.scrollerTarget) {
              scrollInfo.maxScrollPos = this.props.vertical ? this.scrollerTarget.scrollTopMax : this.scrollerTarget.scrollLeftMax;
            }
          } else {
            if (listSize > availableSize) {
              scrollInfo.maxScrollPos = listSize - availableSize;
            } else {
              scrollInfo.maxScrollPos = 0;
            }
          }
          if (this.props.rtl && scrollInfo.maxScrollPos < 0) {
            scrollInfo.maxScrollPos = -scrollInfo.maxScrollPos;
          }
          scrollInfo.hasStartScroll = scrollInfo.scrollPos != 0;
          scrollInfo.hasEndScroll = scrollInfo.scrollPos < scrollInfo.maxScrollPos;
          var hasScroll = listSize > availableSize;
          if (hasScroll !== this.state.hasScroll) {
            this.props.onHasScrollChange(hasScroll);
          }
          this.setState({
            hasScroll
          });
        }
      }, {
        key: "startScroll",
        value: function startScroll(direction, event2) {
          var _this6 = this;
          var eventName = _isMobile.default ? "touchend" : "mouseup";
          event2.preventDefault();
          var mouseUpListener = function mouseUpListener2() {
            _this6.stopScroll();
            globalObject.removeEventListener(eventName, mouseUpListener2);
          };
          globalObject.addEventListener(eventName, mouseUpListener);
          this.scrollInterval = globalObject.setInterval(this.doScroll.bind(this, direction), this.props.scrollSpeed);
          this.setState({
            scrolling: true,
            activeScroll: direction
          });
        }
      }, {
        key: "onContainerScroll",
        value: function onContainerScroll(_ref2) {
          var scrollTop = _ref2.scrollTop, scrollLeft = _ref2.scrollLeft;
          this.setScrollPosition(this.props.vertical ? scrollTop : scrollLeft, {
            skip: true
          });
        }
      }, {
        key: "startMouseOverScroll",
        value: function startMouseOverScroll(direction, event2) {
          event2.preventDefault();
          globalObject.clearInterval(this.mouseOverScrollInterval);
          this.mouseOverScrollInterval = globalObject.setInterval(this.doScroll.bind(this, direction), this.props.mouseoverScrollSpeed);
          this.setState({
            scrolling: true,
            activeScroll: direction
          });
        }
      }, {
        key: "stopMouseOverScroll",
        value: function stopMouseOverScroll() {
          this.stopScroll();
          globalObject.clearInterval(this.mouseOverScrollInterval);
        }
      }, {
        key: "setScrollPosition",
        value: function setScrollPosition(scrollPos) {
          var _ref3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, force = _ref3.force, skip = _ref3.skip;
          if (!this.componentIsMounted) {
            return;
          }
          var scrollInfo = this.scrollInfo;
          if (scrollPos > scrollInfo.maxScrollPos) {
            scrollPos = scrollInfo.maxScrollPos;
          }
          if (scrollPos < 0) {
            scrollPos = 0;
          }
          if (scrollPos === scrollInfo.scrollPos && force !== true) {
            return null;
          }
          Object.assign(scrollInfo, {
            hasStartScroll: scrollPos !== 0,
            hasEndScroll: scrollPos < scrollInfo.maxScrollPos,
            scrollPos
          });
          if (!skip && this.props.nativeScroll && this.scrollerTarget) {
            if (this.props.vertical) {
              this.scrollerTarget.scrollTop = scrollPos;
            } else {
              this.scrollerTarget.scrollLeft = scrollPos;
            }
          }
          this.setState({});
        }
      }, {
        key: "syncScroll",
        value: function syncScroll() {
          var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, force = _ref4.force;
          this.updateScrollInfo();
          this.doScroll(0, null, {
            force
          });
        }
      }, {
        key: "scrollIntoView",
        value: function scrollIntoView(domNode) {
          var rootNode = this.root;
          if (!domNode || !rootNode) {
            return;
          }
          var rect = domNode.getBoundingClientRect();
          var mainRect = rootNode.getBoundingClientRect();
          var vertical = this.props.vertical;
          var startSideName = vertical ? "top" : "left";
          var endSideName = vertical ? "bottom" : "right";
          var startDiff = rect[startSideName] - (mainRect[startSideName] + this.getBorderAndPaddingSize(void 0, "start"));
          var endDiff = rect[endSideName] - (mainRect[endSideName] - this.getBorderAndPaddingSize(void 0, "end"));
          var scrollIntoViewOffset = this.props.scrollIntoViewOffset;
          if (startDiff < 0) {
            this.doScroll(-startDiff + scrollIntoViewOffset, -1);
          } else if (endDiff > 0) {
            this.doScroll(endDiff + scrollIntoViewOffset, 1);
          }
        }
      }, {
        key: "doScroll",
        value: function doScroll(direction, step) {
          var _this7 = this;
          var _ref5 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, force = _ref5.force;
          var scrollInfo = this.scrollInfo;
          var newScrollPos = scrollInfo.scrollPos + direction * (step || this.props.scrollStep);
          raf(function() {
            _this7.setScrollPosition(newScrollPos, {
              force
            });
          });
        }
      }, {
        key: "scrollBy",
        value: function scrollBy(offset, direction) {
          var _this8 = this;
          var _ref6 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, force = _ref6.force;
          var scrollInfo = this.scrollInfo;
          var newScrollPos = scrollInfo.scrollPos + direction * offset;
          raf(function() {
            _this8.setScrollPosition(newScrollPos, {
              force
            });
          });
        }
      }]);
      return InovuaArrowScroller2;
    }(_react.Component);
    var emptyFn = function emptyFn2() {
    };
    InovuaArrowScroller.defaultProps = {
      rootClassName: "inovua-react-toolkit-arrow-scroller",
      scroller: "auto",
      scrollStep: 15,
      mouseoverScrollSpeed: 40,
      scrollSpeed: 10,
      scrollSpringConfig: {
        stiffness: 370,
        damping: 60
      },
      scrollIntoViewOffset: 1,
      vertical: false,
      scrollOnClick: false,
      nativeScroll: !_ua.IS_IE,
      scrollOnMouseEnter: true,
      rtl: false,
      useTransformOnScroll: false,
      onHasScrollChange: emptyFn,
      theme: "default-light"
    };
    InovuaArrowScroller.propTypes = {
      arrowSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        width: _propTypes.default.number,
        height: _propTypes.default.number
      })]),
      theme: _propTypes.default.string,
      scrollOnClick: _propTypes.default.bool,
      childProps: _propTypes.default.object,
      scrollOnMouseEnter: _propTypes.default.bool,
      vertical: _propTypes.default.bool,
      notifyResizeDelay: _propTypes.default.number,
      scrollStep: _propTypes.default.number,
      scrollSpeed: _propTypes.default.number,
      mouseoverScrollSpeed: _propTypes.default.number,
      scrollSpringConfig: _propTypes.default.shape({
        stiffness: _propTypes.default.number,
        damping: _propTypes.default.number
      }),
      nativeScroll: _propTypes.default.bool,
      scrollIntoViewOffset: _propTypes.default.number,
      scroller: _propTypes.default.oneOf(["auto", false, true]),
      rootClassName: _propTypes.default.string,
      rtl: _propTypes.default.bool,
      scrollContainerProps: _propTypes.default.object,
      useTransformOnScroll: _propTypes.default.bool,
      onHasScrollChange: _propTypes.default.func,
      renderScroller: _propTypes.default.func
    };
    var _default = InovuaArrowScroller;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ArrowScroller/src/index.js
var require_src9 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ArrowScroller/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ArrowScroller = _interopRequireDefault(require_ArrowScroller());
    var _default = _ArrowScroller.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ArrowScroller/index.js
var require_ArrowScroller2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ArrowScroller/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src9());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-class/index.js
var require_react_class = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-class/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Component = void 0;
    Object.defineProperty(exports, "autoBind", {
      enumerable: true,
      get: function get() {
        return _autoBind.default;
      }
    });
    exports.default = void 0;
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireDefault(require_react());
    var _autoBind = _interopRequireDefault(require_autoBind());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var ReactClass = function(_React$Component) {
      (0, _inherits2.default)(ReactClass2, _React$Component);
      var _super = _createSuper(ReactClass2);
      function ReactClass2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, ReactClass2);
        _this = _super.call(this, props2);
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      return (0, _createClass2.default)(ReactClass2);
    }(_react.default.Component);
    exports.Component = ReactClass;
    var _default = ReactClass;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/MenuItem/MenuItemCell.js
var require_MenuItemCell = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/MenuItem/MenuItemCell.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactClass = _interopRequireDefault(require_react_class());
    var _join = _interopRequireDefault(require_join());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MenuItemCell = function(_Component) {
      (0, _inherits2.default)(MenuItemCell2, _Component);
      var _super = _createSuper(MenuItemCell2);
      function MenuItemCell2() {
        (0, _classCallCheck2.default)(this, MenuItemCell2);
        return _super.apply(this, arguments);
      }
      (0, _createClass2.default)(MenuItemCell2, [{
        key: "render",
        value: function render() {
          var props2 = this.props;
          var cellProps = props2.cellProps, rootClassName = props2.rootClassName, align = props2.align, rtl = props2.rtl;
          var children = props2.expander || props2.children;
          var className = (0, _join.default)(props2.className, cellProps.className, "".concat(rootClassName, "__cell"), rtl ? "".concat(rootClassName, "__cell--rtl") : "".concat(rootClassName, "__cell--ltr"), props2.isDescription && "".concat(rootClassName, "__cell--secondaryLabel"), props2.isIcon && "".concat(rootClassName, "__cell--icon"));
          var style = _objectSpread(_objectSpread({}, props2.style), cellProps.style);
          if (align) {
            style.textAlign = align;
          }
          return _react.default.createElement("td", _objectSpread(_objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, MenuItemCell2.propTypes)), cellProps), {}, {
            style,
            className
          }), children);
        }
      }]);
      return MenuItemCell2;
    }(_reactClass.default);
    exports.default = MenuItemCell;
    MenuItemCell.defaultProps = {
      cellProps: {}
    };
    MenuItemCell.propTypes = {
      isDescription: _propTypes.default.bool,
      isIcon: _propTypes.default.bool,
      rootClassName: _propTypes.default.string,
      column: _propTypes.default.object,
      cellProps: _propTypes.default.object,
      rtl: _propTypes.default.bool,
      expander: _propTypes.default.node,
      align: _propTypes.default.oneOf(["start", "end", "center", "left", "right"])
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/Expander.js
var require_Expander = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/Expander.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _join = _interopRequireDefault(require_join());
    var Expander = function Expander2(_ref) {
      var className = _ref.className, rootClassName = _ref.rootClassName, _ref$size = _ref.size, size = _ref$size === void 0 ? 20 : _ref$size, onClick = _ref.onClick, fill = _ref.fill, rtl = _ref.rtl;
      return _react.default.createElement("div", {
        className: "".concat(rootClassName, "__expander-wrapper")
      }, _react.default.createElement("div", {
        className: "".concat(rootClassName, "__expander-icon")
      }, _react.default.createElement("svg", {
        className: (0, _join.default)(className, "".concat(rootClassName, "__expander")),
        onClick,
        fill,
        height: size,
        width: size / 2,
        viewBox: "0 0 5 10"
      }, rtl ? _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M.262 4.738L4.368.632c.144-.144.379-.144.524 0C4.96.702 5 .796 5 .894v8.212c0 .204-.166.37-.37.37-.099 0-.193-.039-.262-.108L.262 5.262c-.145-.145-.145-.38 0-.524z"
      }) : _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M4.738 5.262L.632 9.368c-.144.144-.379.144-.524 0C.04 9.298 0 9.204 0 9.106V.894C0 .69.166.524.37.524c.099 0 .193.039.262.108l4.106 4.106c.145.145.145.38 0 .524z"
      }))));
    };
    Expander.isExpander = true;
    var _default = Expander;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/MenuItem/renderCell.js
var require_renderCell = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/MenuItem/renderCell.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _react = _interopRequireDefault(require_react());
    var _assign = _interopRequireDefault(require_assign());
    var _join = _interopRequireDefault(require_join());
    var _MenuItemCell = _interopRequireDefault(require_MenuItemCell());
    var _default = function _default2(props2, column, index2, columns) {
      var hasSubmenu = props2.hasSubmenu, rootClassName = props2.rootClassName;
      var globalCellStyle = props2.globalCellStyle;
      var item = props2.items && props2.items[index2];
      if (typeof globalCellStyle == "function") {
        globalCellStyle = globalCellStyle({
          index: index2,
          columns,
          items: props2.items,
          item,
          hasSubmenu
        });
      }
      var style = (0, _assign.default)({}, globalCellStyle);
      var isLast = index2 === columns.length - 1;
      var cellProps = (0, _assign.default)({}, props2.cellProps);
      if (isLast && props2.siblingItemHasSubMenu && !props2.item.items) {
      }
      var children;
      if (column && typeof column.render == "function") {
        children = column.render(props2.item, {
          column,
          columns,
          index: index2,
          items: props2.items,
          item,
          hasSubmenu
        });
      } else {
        var columnName = typeof column == "string" ? column : column.name;
        children = props2.item[columnName];
      }
      if ((0, _typeof2.default)(column) === "object") {
        if (column.colSpan) {
          cellProps.colSpan = column.colSpan;
        }
      }
      if (column.style) {
        var columnStyle;
        if (typeof column.style === "function") {
          columnStyle = column.style({
            index: index2,
            columns,
            items: props2.items,
            item,
            hasSubmenu
          });
        } else {
          columnStyle = column.style;
        }
        (0, _assign.default)(style, columnStyle);
      }
      var className = column.className;
      if (item) {
        if (item.cellStyle) {
          (0, _assign.default)(style, item.cellStyle);
        }
        if (item.className) {
          className = (0, _join.default)(className, item.cellClassName);
        }
      }
      if (props2.style) {
        (0, _assign.default)(style, props2.style);
      }
      return _react.default.createElement(_MenuItemCell.default, {
        style,
        className,
        key: index2,
        rootClassName,
        cellProps,
        isDescription: column.isDescription,
        isIcon: column.isIcon,
        align: column.align
      }, children);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/CheckBox/src/utils/getClassNames.js
var require_getClassNames = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/CheckBox/src/utils/getClassNames.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _join = _interopRequireDefault(require_join());
    var getClassNames = function getClassNames2(props2) {
      var state = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, checked = _ref.checked;
      var rtl = props2.rtl, inlineBlock = props2.inlineBlock, readOnly = props2.readOnly, readOnlyClassName = props2.readOnlyClassName, theme = props2.theme, disabled = props2.disabled, disabledClassName = props2.disabledClassName, focusedClassName = props2.focusedClassName, className = props2.className, childrenPosition = props2.childrenPosition;
      var focused = state.focused;
      return (0, _join.default)(props2.rootClassName, className, childrenPosition && "".concat(props2.rootClassName, "--children-position-").concat(childrenPosition), rtl ? "".concat(props2.rootClassName, "--rtl") : "".concat(props2.rootClassName, "--ltr"), readOnly && (0, _join.default)("".concat(props2.rootClassName, "--read-only"), readOnlyClassName), focused && (0, _join.default)("".concat(props2.rootClassName, "--focused"), focusedClassName), disabled && (0, _join.default)("".concat(props2.rootClassName, "--disabled"), disabledClassName), inlineBlock && "".concat(props2.rootClassName, "--inline-block"), checked === true ? "".concat(props2.rootClassName, "--checked") : checked === false ? "".concat(props2.rootClassName, "--unchecked") : "".concat(props2.rootClassName, "--indeterminate"), theme && "".concat(props2.rootClassName, "--theme-").concat(theme));
    };
    var _default = getClassNames;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/CheckBox/src/icons.js
var require_icons = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/CheckBox/src/icons.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.uncheckedIcon = exports.indeterminateIcon = exports.checkedIcon = void 0;
    var _react = _interopRequireDefault(require_react());
    var checkedIcon = function checkedIcon2(_ref) {
      var style = _ref.style, _ref$size = _ref.size, size = _ref$size === void 0 ? 16 : _ref$size, className = _ref.className;
      return _react.default.createElement("svg", {
        width: size,
        height: size,
        style,
        className,
        viewBox: "0 0 16 16"
      }, _react.default.createElement("g", {
        fillRule: "evenodd"
      }, _react.default.createElement("rect", {
        width: size,
        height: size,
        stroke: "none",
        rx: "1"
      }), _react.default.createElement("path", {
        fill: "none",
        strokeLinecap: "round",
        strokeWidth: "2",
        d: "M3.357 9.018L7.229 12 12.613 5"
      })));
    };
    exports.checkedIcon = checkedIcon;
    var uncheckedIcon = function uncheckedIcon2(_ref2) {
      var style = _ref2.style, _ref2$size = _ref2.size, size = _ref2$size === void 0 ? 16 : _ref2$size, className = _ref2.className;
      return _react.default.createElement("svg", {
        width: size,
        height: size,
        className,
        style,
        viewBox: "0 0 16 16"
      }, _react.default.createElement("rect", {
        width: size - 2,
        height: size - 2,
        x: "1",
        y: "1",
        fill: "none",
        fillRule: "evenodd",
        strokeWidth: "2",
        rx: "1"
      }));
    };
    exports.uncheckedIcon = uncheckedIcon;
    var indeterminateIcon = function indeterminateIcon2(_ref3) {
      var style = _ref3.style, _ref3$size = _ref3.size, size = _ref3$size === void 0 ? 16 : _ref3$size, className = _ref3.className;
      return _react.default.createElement("svg", {
        width: size,
        height: size,
        style,
        className,
        viewBox: "0 0 16 16"
      }, _react.default.createElement("g", {
        fillRule: "evenodd"
      }, _react.default.createElement("g", null, _react.default.createElement("rect", {
        width: size,
        height: size,
        fill: "none",
        rx: "1"
      })), _react.default.createElement("g", null, _react.default.createElement("rect", {
        width: "10",
        height: "2",
        x: "3",
        y: "7",
        rx: "1"
      }))));
    };
    exports.indeterminateIcon = indeterminateIcon;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/CheckBox/src/CheckBox.js
var require_CheckBox = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/CheckBox/src/CheckBox.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactClass = require_react_class();
    var _uglified = _interopRequireDefault(require_uglified());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _assign = _interopRequireDefault(require_assign());
    var _join = _interopRequireDefault(require_join());
    var _getClassNames = _interopRequireDefault(require_getClassNames());
    var _icons = require_icons();
    var _InovuaCheckBox$propT;
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function ownKeys(object2, enumerableOnly) {
      var keys = Object.keys(object2);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object2);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var stopPropagation = function stopPropagation2(e) {
      return e.stopPropagation();
    };
    var isValidCheckValue = function isValidCheckValue2(value, props2) {
      return value === props2.checkedValue || value === props2.uncheckedValue || value === props2.indeterminateValue && props2.supportIndeterminate;
    };
    var nextValue = function nextValue2(oldValue, props2) {
      if (oldValue === props2.checkedValue) {
        return props2.uncheckedValue;
      }
      if (oldValue === props2.uncheckedValue) {
        return props2.supportIndeterminate ? props2.indeterminateValue : props2.checkedValue;
      }
      if (props2.supportIndeterminate && oldValue === props2.indeterminateValue) {
        return props2.checkedValue;
      }
      return props2.uncheckedValue;
    };
    var getComponentStyle = function getComponentStyle2(props2, state) {
      var focused = state.focused;
      var disabled = props2.disabled, focusedStyle = props2.focusedStyle, disabledStyle = props2.disabledStyle, readOnly = props2.readOnly, readOnlyStyle = props2.readOnlyStyle, style = props2.style;
      var styles = [style || {}];
      if (focused) {
        styles.push(focusedStyle);
      }
      if (disabled) {
        styles.push(disabledStyle);
      }
      if (readOnly) {
        styles.push(readOnlyStyle);
      }
      return _assign.default.apply(void 0, [{}].concat(styles));
    };
    var getComputedIconStyle = function getComputedIconStyle2(config) {
      var focused = config.focused, disabled = config.disabled, focusedIconStyle = config.focusedIconStyle, disabledIconStyle = config.disabledIconStyle, iconStyle = config.iconStyle;
      var styles = [iconStyle];
      styles.push(getIconSizeStyle(config));
      if (focused) {
        styles.push(focusedIconStyle);
      }
      if (disabled) {
        styles.push(disabledIconStyle);
      }
      return _assign.default.apply(void 0, [{}].concat(styles));
    };
    var getIconClassName = function getIconClassName2(props2) {
      var iconClassName = "";
      if (props2.iconClassName) {
        iconClassName = props2.iconClassName;
      }
      if (props2.disabled && props2.disabledIconClassName) {
        iconClassName = (0, _join.default)(iconClassName, props2.disabledIconClassName);
      }
      if (props2.focused && props2.focusedIconClassName) {
        iconClassName = (0, _join.default)(iconClassName, props2.focusedIconClassName);
      }
      if (props2.readOnly && props2.readOnlyIconClassName) {
        iconClassName = (0, _join.default)(iconClassName, props2.readOnlyIconClassName);
      }
      return iconClassName;
    };
    var renderIconFunctionOrJSX = function renderIconFunctionOrJSX2(iconRender, props2, _ref) {
      var style = _ref.style, className = _ref.className;
      if (typeof iconRender === "function") {
        return iconRender({
          style,
          className
        }, props2);
      }
      return _react.default.cloneElement(iconRender, {
        style: _objectSpread(_objectSpread({}, iconRender.props.style), style),
        className: (0, _join.default)(iconRender.props.className, className)
      });
    };
    var renderCheckedIcon = function renderCheckedIcon2(props2, iconProps) {
      var checkedIcon = props2.checkedIcon, checkedIconSrc = props2.checkedIconSrc;
      if (checkedIconSrc) {
        return _react.default.createElement("img", _objectSpread(_objectSpread({}, iconProps), {}, {
          src: checkedIconSrc
        }));
      }
      return renderIconFunctionOrJSX(checkedIcon, props2, iconProps);
    };
    var renderUncheckedIcon = function renderUncheckedIcon2(props2, iconProps) {
      var uncheckedIcon = props2.uncheckedIcon, uncheckedIconSrc = props2.uncheckedIconSrc;
      if (uncheckedIconSrc) {
        return _react.default.createElement("img", _objectSpread(_objectSpread({}, iconProps), {}, {
          src: uncheckedIconSrc
        }));
      }
      return renderIconFunctionOrJSX(uncheckedIcon, props2, iconProps);
    };
    var renderIndeterminateIcon = function renderIndeterminateIcon2(props2, iconProps) {
      var indeterminateIcon = props2.indeterminateIcon, indeterminateIconSrc = props2.indeterminateIconSrc;
      if (indeterminateIconSrc) {
        return _react.default.createElement("img", _objectSpread(_objectSpread({}, iconProps), {}, {
          src: indeterminateIconSrc
        }));
      }
      return renderIconFunctionOrJSX(indeterminateIcon, props2, iconProps);
    };
    var renderIcon = function renderIcon2(config) {
      var checkedDescriptor = getCheckedDescriptor(config.checked, config);
      var checkBoxIconStyle = getComputedIconStyle(config);
      var iconProps = {
        className: getIconClassName(config),
        style: checkBoxIconStyle
      };
      switch (checkedDescriptor) {
        case CHECKED_STATE:
          return renderCheckedIcon(config, iconProps);
        case UNCHECKED_STATE:
          return renderUncheckedIcon(config, iconProps);
        case INDETERMINATE_STATE:
          return renderIndeterminateIcon(config, iconProps);
      }
    };
    var getIconSizeStyle = function getIconSizeStyle2(props2) {
      var style = {};
      var iconSize = props2.iconSize;
      if (Array.isArray(iconSize)) {
        style.width = iconSize[0];
        style.height = iconSize[1];
      } else {
        style.width = style.height = iconSize;
      }
      return style;
    };
    var CHECKED_STATE = "checked";
    var UNCHECKED_STATE = "unchecked";
    var INDETERMINATE_STATE = "indeterminate";
    var getCheckedDescriptor = function getCheckedDescriptor2(checked, props2) {
      var checkedValue = props2.checkedValue, supportIndeterminate = props2.supportIndeterminate, indeterminateValue = props2.indeterminateValue;
      if (checked === checkedValue) {
        return CHECKED_STATE;
      }
      if (supportIndeterminate && checked === indeterminateValue) {
        return INDETERMINATE_STATE;
      }
      return UNCHECKED_STATE;
    };
    var renderHiddenInput = function renderHiddenInput2(props2) {
      var withHiddenInput = props2.withHiddenInput, name = props2.name;
      var checked = props2.checked;
      var checkedDescriptor = getCheckedDescriptor(checked, props2);
      switch (checkedDescriptor) {
        case CHECKED_STATE:
          checked = props2.checkedSubmitValue === void 0 ? props2.checkedValue : props2.checkedSubmitValue;
          break;
        case UNCHECKED_STATE:
          checked = props2.uncheckedSubmitValue === void 0 ? props2.uncheckedValue : props2.uncheckedSubmitValue;
          break;
        case INDETERMINATE_STATE:
          checked = props2.indeterminateSubmitValue === void 0 ? props2.indeterminateValue : props2.indeterminateSubmitValue;
      }
      if (checked === null) {
        checked = "";
      }
      if (withHiddenInput) {
        return _react.default.createElement("input", {
          type: "hidden",
          name,
          value: checked
        });
      }
      return null;
    };
    var getChecked = function getChecked2(props2, state) {
      var checked = isControlledComponent(props2) ? props2.checked : state.checked;
      return isValidCheckValue(checked, props2) ? checked : props2.uncheckedValue;
    };
    var isControlledComponent = function isControlledComponent2(props2) {
      return props2.checked !== void 0;
    };
    var InovuaCheckBox = function(_Component) {
      (0, _inherits2.default)(InovuaCheckBox2, _Component);
      var _super = _createSuper(InovuaCheckBox2);
      function InovuaCheckBox2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaCheckBox2);
        _this = _super.call(this, props2);
        (0, _reactClass.autoBind)((0, _assertThisInitialized2.default)(_this));
        var defaultChecked = props2.defaultChecked, uncheckedValue = props2.uncheckedValue;
        _this.state = {
          checked: isValidCheckValue(defaultChecked, props2) ? defaultChecked : uncheckedValue
        };
        _this.checkboxRef = (0, _react.createRef)();
        return _this;
      }
      (0, _createClass2.default)(InovuaCheckBox2, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          this.checkUpdateIndeterminate(this.p);
          if (prevProps.supportIndeterminate && !this.props.supportIndeterminate) {
            this.setNativeIndeterminate(false);
          }
          if (!prevProps.autoFocus && this.props.autoFocus && !this.isFocused()) {
            this.focus();
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.checkUpdateIndeterminate();
          if (this.props.autoFocus) {
            this.focus();
          }
        }
      }, {
        key: "focus",
        value: function focus() {
          this.checkboxRef.current.focus();
        }
      }, {
        key: "checkUpdateIndeterminate",
        value: function checkUpdateIndeterminate() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.p;
          if (props2.browserNative && props2.supportIndeterminate) {
            this.setNativeIndeterminate(getCheckedDescriptor(props2.checked, props2) === INDETERMINATE_STATE);
          }
        }
      }, {
        key: "isFocused",
        value: function isFocused() {
          return this.state.focused;
        }
      }, {
        key: "handleFocus",
        value: function handleFocus(event2) {
          var onFocus = this.p.onFocus;
          this.setState({
            focused: true
          });
          onFocus && onFocus(event2);
        }
      }, {
        key: "handleBlur",
        value: function handleBlur(event2) {
          var onBlur = this.p.onBlur;
          this.setState({
            focused: false
          });
          onBlur && onBlur(event2);
        }
      }, {
        key: "changeToNextValue",
        value: function changeToNextValue(event2) {
          var _this$p = this.p, readOnly = _this$p.readOnly, checked = _this$p.checked, nextValue2 = _this$p.nextValue;
          if (readOnly) {
            return;
          }
          var nextCheckedValue = nextValue2(checked, this.p);
          this.setChecked(nextCheckedValue, event2);
        }
      }, {
        key: "setChecked",
        value: function setChecked(value, event2) {
          var _this$p2 = this.p, disabled = _this$p2.disabled, onChange = _this$p2.onChange;
          if (disabled) {
            return;
          }
          if (!isValidCheckValue(value, this.p)) {
            return;
          }
          if (!isControlledComponent(this.props)) {
            this.setState({
              checked: value
            });
          }
          if (typeof onChange == "function") {
            onChange(value, event2);
          }
        }
      }, {
        key: "handleClick",
        value: function handleClick(event2) {
          var _this$p3 = this.p, onClick = _this$p3.onClick, disabled = _this$p3.disabled;
          if (disabled) {
            return;
          }
          this.changeToNextValue(event2);
          if (onClick) {
            onClick(event2);
          }
        }
      }, {
        key: "handleKeyDown",
        value: function handleKeyDown(event2) {
          var onKeyDown = this.p.onKeyDown;
          if (event2.key === " ") {
            event2.preventDefault();
            this.changeToNextValue(event2);
          }
          if (typeof onKeyDown == "function") {
            onKeyDown(event2);
          }
        }
      }, {
        key: "getProps",
        value: function getProps(props2, state) {
          var checked = getChecked(props2, state);
          var style = getComponentStyle(props2, state);
          var className = (0, _getClassNames.default)(props2, state, {
            checked
          });
          var shouldSubmitIsFunction = typeof props2.shouldSubmit === "function";
          var shouldSubmitValue = shouldSubmitIsFunction ? props2.shouldSubmit(checked, props2) : typeof props2.shouldSubmit === "undefined" || props2.shouldSubmit;
          if (props2.showWarnings && shouldSubmitIsFunction && shouldSubmitValue && !props2.name) {
            console.warn('shouldSubmit function returned true, but "name" prop is missing');
          }
          var withHiddenInput = !!(props2.name && shouldSubmitValue);
          var focused = state.focused;
          return _objectSpread(_objectSpread({}, props2), {}, {
            checked,
            style,
            withHiddenInput,
            focused,
            className
          });
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props, state = this.state;
          var _this$p4 = this.p = this.getProps(props2, state), children = _this$p4.children, className = _this$p4.className, style = _this$p4.style, tabIndex = _this$p4.tabIndex, iconCheckOnly = _this$p4.iconCheckOnly, browserNative = _this$p4.browserNative, focusable = _this$p4.focusable;
          var eventHandlers = {
            onBlur: this.handleBlur,
            onFocus: this.handleFocus,
            onKeyDown: this.handleKeyDown
          };
          if (!iconCheckOnly) {
            eventHandlers.onClick = this.handleClick;
          }
          var domProps = _objectSpread(_objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, InovuaCheckBox2.propTypes)), eventHandlers), {}, {
            className,
            style,
            ref: this.checkboxRef,
            tabIndex: props2.disabled === true ? null : tabIndex
          });
          if (!props2.focusable) {
            delete domProps.tabIndex;
          }
          return browserNative ? this.renderBrowserNative(domProps) : _react.default.createElement("div", _objectSpread({}, domProps), this.renderCheckbox(this.p, iconCheckOnly && {
            onClick: this.handleClick
          }), children && _react.default.createElement("div", {
            className: "".concat(props2.rootClassName, "__inner-content-wrapper")
          }, children));
        }
      }, {
        key: "renderBrowserNative",
        value: function renderBrowserNative(domProps) {
          var _this$props = this.props, children = _this$props.children, iconCheckOnly = _this$props.iconCheckOnly;
          var Factory = iconCheckOnly ? "div" : "label";
          return _react.default.createElement(Factory, _objectSpread(_objectSpread({}, domProps), {}, {
            onClick: this.props.onClick,
            onChange: stopPropagation
          }), this.renderBrowserNativeInput(), children);
        }
      }, {
        key: "renderBrowserNativeInput",
        value: function renderBrowserNativeInput() {
          var _this2 = this;
          var _this$p5 = this.p, tabIndex = _this$p5.tabIndex, rootClassName = _this$p5.rootClassName, disabled = _this$p5.disabled, checked = _this$p5.checked, renderNativeBrowserInput2 = _this$p5.renderNativeBrowserInput, withHiddenInput = _this$p5.withHiddenInput, name = _this$p5.name;
          var className = (0, _join.default)(this.p.className, "".concat(rootClassName, "--browser-native"));
          var inputProps = {
            disabled,
            className,
            type: "checkbox",
            ref: function ref(_ref2) {
              return _this2.node = _ref2;
            },
            onClick: this.handleClick,
            checked: !!checked,
            tabIndex: disabled === true ? null : tabIndex
          };
          if (withHiddenInput) {
            inputProps.name = name;
          }
          var result;
          if (typeof renderNativeBrowserInput2 === "function") {
            result = renderNativeBrowserInput2({
              inputProps,
              props: this.p
            });
          }
          if (result === void 0) {
            result = _react.default.createElement("input", _objectSpread({}, inputProps));
          }
          return result;
        }
      }, {
        key: "renderCheckbox",
        value: function renderCheckbox(config, eventHandlers) {
          var input = config.disabled !== true && renderHiddenInput(config);
          var icon = renderIcon(config);
          var domProps = {};
          if (config.disabled) {
            domProps.disabled = "disabled";
          }
          return _react.default.createElement("div", _objectSpread(_objectSpread({
            className: "".concat(config.rootClassName, "__icon-wrapper")
          }, domProps), eventHandlers), input, icon);
        }
      }, {
        key: "setNativeIndeterminate",
        value: function setNativeIndeterminate(indeterminate) {
          if (this.node) {
            this.node.indeterminate = indeterminate;
          }
        }
      }]);
      return InovuaCheckBox2;
    }(_react.Component);
    InovuaCheckBox.defaultProps = {
      rootClassName: "inovua-react-toolkit-checkbox",
      browserNative: false,
      iconStyle: {},
      disabledIconStyle: {},
      focusedIconStyle: {},
      disabledStyle: {},
      readOnlyStyle: {},
      focusedStyle: {},
      supportIndeterminate: false,
      focusable: true,
      disabled: false,
      readOnly: false,
      tabIndex: 0,
      checkedValue: true,
      uncheckedValue: false,
      indeterminateValue: null,
      checkedSubmitValue: void 0,
      uncheckedSubmitValue: void 0,
      indeterminateSubmitValue: void 0,
      checked: void 0,
      defaultChecked: void 0,
      iconSize: 16,
      checkedIcon: _icons.checkedIcon,
      uncheckedIcon: _icons.uncheckedIcon,
      indeterminateIcon: _icons.indeterminateIcon,
      iconCheckOnly: false,
      shouldSubmit: void 0,
      nextValue,
      childrenPosition: "end",
      inlineBlock: true,
      theme: "default-light",
      showWarnings: !_uglified.default
    };
    var func = _propTypes.default.func;
    var number = _propTypes.default.number;
    var object = _propTypes.default.object;
    var string = _propTypes.default.string;
    var bool = _propTypes.default.bool;
    var any = _propTypes.default.any;
    var nonNullPropType = function nonNullPropType2(props2, propName, componentName) {
      if (props2[propName] === null) {
        return new Error("".concat(propName, " is null in ").concat(componentName, ". This is not valid for input; use undefined instead."));
      }
      return null;
    };
    InovuaCheckBox.propTypes = (_InovuaCheckBox$propT = {
      rootClassName: string,
      browserNative: bool,
      focusable: bool,
      renderNativeBrowserInput: func,
      shouldSubmit: function shouldSubmit(props2, propName, componentName) {
        if (props2.shouldSubmit && typeof props2.shouldSubmit !== "function" && !props2.name) {
          return new Error('"shouldSubmit" was true, but component '.concat(componentName, ' requires prop "name" to be submitted.'));
        }
      },
      value: function value(props2) {
        if (typeof props2.value !== "undefined") {
          return new Error('"value" prop is not supported. Use "checked" instead.');
        }
      },
      defaultValue: function defaultValue(props2) {
        if (typeof props2.defaultValue !== "undefined") {
          return new Error('"defaultValue" prop is not supported. Use "checked" instead.');
        }
      },
      nextValue: func,
      name: string,
      iconClassName: string,
      readOnlyClassName: string,
      disabledClassName: string,
      focusedClassName: string,
      checked: any,
      defaultChecked: any,
      disabled: bool,
      readOnly: bool,
      tabIndex: number,
      supportIndeterminate: bool,
      checkedValue: any,
      uncheckedValue: any,
      indeterminateValue: any,
      checkedSubmitValue: nonNullPropType,
      uncheckedSubmitValue: nonNullPropType,
      indeterminateSubmitValue: nonNullPropType,
      iconSize: _propTypes.default.oneOfType([string, _propTypes.default.arrayOf([string]), number, _propTypes.default.arrayOf(number)]),
      checkedIconSrc: string,
      checkedIcon: any,
      iconCheckOnly: bool,
      uncheckedIconSrc: string,
      uncheckedIcon: any,
      indeterminateIconSrc: string,
      indeterminateIcon: any,
      childrenPosition: _propTypes.default.oneOf(["start", "end"]),
      inlineBlock: bool,
      rtl: bool,
      theme: string,
      iconStyle: object,
      disabledIconStyle: object,
      focusedIconStyle: object
    }, (0, _defineProperty2.default)(_InovuaCheckBox$propT, "iconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "disabledIconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "focusedIconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "readOnlyIconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "disabledStyle", object), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "readOnlyStyle", object), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "focusedStyle", object), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "showWarnings", bool), _InovuaCheckBox$propT);
    var _default = InovuaCheckBox;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/CheckBox/src/index.js
var require_src10 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/CheckBox/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _CheckBox = _interopRequireDefault(require_CheckBox());
    var _default = _CheckBox.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/CheckBox/index.js
var require_CheckBox2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/CheckBox/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src10());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/RadioButton/src/RadioButton.js
var require_RadioButton = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/RadioButton/src/RadioButton.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _CheckBox = _interopRequireDefault(require_CheckBox2());
    var _join = _interopRequireDefault(require_join());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var defaultCheckedIcon = function defaultCheckedIcon2(_ref) {
      var style = _ref.style, _ref$size = _ref.size, size = _ref$size === void 0 ? 16 : _ref$size;
      return _react.default.createElement("svg", {
        style,
        width: size,
        height: size,
        viewBox: "0 0 16 16"
      }, _react.default.createElement("circle", {
        cx: "8",
        cy: "8",
        r: "7",
        fill: "none",
        fillRule: "evenodd",
        strokeWidth: "2"
      }), _react.default.createElement("circle", {
        cx: "8",
        cy: "8",
        r: "3",
        fillRule: "evenodd",
        stroke: "none"
      }));
    };
    var defaultUncheckedIcon = function defaultUncheckedIcon2(_ref2) {
      var style = _ref2.style, _ref2$size = _ref2.size, size = _ref2$size === void 0 ? 16 : _ref2$size;
      return _react.default.createElement("svg", {
        style,
        width: size,
        height: size,
        viewBox: "0 0 16 16"
      }, _react.default.createElement("circle", {
        cx: "8",
        cy: "8",
        r: "7",
        fill: "none",
        fillRule: "evenodd",
        strokeWidth: "2"
      }));
    };
    var InovuaRadioButton = function(_Component) {
      (0, _inherits2.default)(InovuaRadioButton2, _Component);
      var _super = _createSuper(InovuaRadioButton2);
      function InovuaRadioButton2() {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaRadioButton2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderNativeBrowserInput", function(config) {
          if (props.renderNativeBrowserInput) {
            return renderNativeBrowserInput(config);
          }
          config.inputProps.type = "radio";
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "render", function() {
          var props2 = _this.props;
          var checkedIcon = defaultCheckedIcon || props2.checkedIcon;
          var uncheckedIcon = defaultUncheckedIcon || props2.uncheckedIcon;
          var className = (0, _join.default)("".concat(props2.rootClassName), props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme));
          var checkboxProps = _objectSpread(_objectSpread({}, props2), {}, {
            className,
            checkedIcon,
            uncheckedIcon,
            renderNativeBrowserInput: _this.renderNativeBrowserInput
          });
          return _react.default.createElement(_CheckBox.default, _objectSpread({}, checkboxProps));
        });
        return _this;
      }
      return (0, _createClass2.default)(InovuaRadioButton2);
    }(_react.Component);
    InovuaRadioButton.defaultProps = {
      theme: "default-light",
      rootClassName: "inovua-react-toolkit-radio-button"
    };
    InovuaRadioButton.propTypes = {
      theme: _propTypes.default.string,
      rootClassName: _propTypes.default.string
    };
    var _default = InovuaRadioButton;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/RadioButton/src/index.js
var require_src11 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/RadioButton/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _RadioButton = _interopRequireDefault(require_RadioButton());
    var _default = _RadioButton.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/RadioButton/index.js
var require_RadioButton2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/RadioButton/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src11());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/getRegionRelativeToParent.js
var require_getRegionRelativeToParent = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/getRegionRelativeToParent.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regionAlign = _interopRequireDefault(require_region_align());
    var _selectParent = _interopRequireDefault(require_selectParent());
    function getRegionRelativeToParent(child, prentClassName) {
      var parent = (0, _selectParent.default)(".".concat(prentClassName), child);
      var menuRegion = _regionAlign.default.from(parent);
      var thisRegion = _regionAlign.default.from(child);
      return {
        left: thisRegion.left - menuRegion.left,
        top: thisRegion.top - menuRegion.top,
        width: thisRegion.width,
        height: thisRegion.height
      };
    }
    var _default = getRegionRelativeToParent;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/MenuItem/index.js
var require_MenuItem = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/MenuItem/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactClass = _interopRequireDefault(require_react_class());
    var _MenuItemCell = _interopRequireDefault(require_MenuItemCell());
    var _Expander = _interopRequireDefault(require_Expander());
    var _renderCell = _interopRequireDefault(require_renderCell());
    var _CheckBox = _interopRequireDefault(require_CheckBox2());
    var _RadioButton = _interopRequireDefault(require_RadioButton2());
    var _assign = _interopRequireDefault(require_assign());
    var _join = _interopRequireDefault(require_join());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _getRegionRelativeToParent = _interopRequireDefault(require_getRegionRelativeToParent());
    var _getGlobal = require_getGlobal();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var emptyFn = function emptyFn2() {
    };
    var MenuItem = function(_Component) {
      (0, _inherits2.default)(MenuItem2, _Component);
      var _super = _createSuper(MenuItem2);
      function MenuItem2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, MenuItem2);
        _this = _super.call(this, props2);
        _this.state = {};
        return _this;
      }
      (0, _createClass2.default)(MenuItem2, [{
        key: "render",
        value: function render() {
          var _this2 = this;
          var props2 = this.preparedProps = this.prepareProps(this.props, this.state);
          var className = props2.className;
          return _react.default.createElement("tr", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, MenuItem2.propTypes)), {}, {
            style: props2.style,
            className,
            ref: function ref(node) {
              return _this2.node = node;
            }
          }), this.renderCells());
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.componentIsMounted = true;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.componentIsMounted = false;
        }
      }, {
        key: "prepareProps",
        value: function prepareProps(props2, state) {
          var preparedProps = _objectSpread(_objectSpread({}, props2), {}, {
            mouseOver: !!state.mouseOver,
            active: !!state.active,
            disabled: !!props2.disabled,
            className: this.getClassName(),
            style: this.getStyle(),
            onClick: this.handleClick,
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            onMouseDown: this.handleMouseDown,
            onTouchStart: this.handleTouchStart
          });
          if (props2.item.isTitle) {
            delete preparedProps.mouseOver;
            delete preparedProps.active;
            delete preparedProps.onClick;
            delete preparedProps.onMouseEnter;
            delete preparedProps.onMouseLeave;
            delete preparedProps.onMouseDown;
            delete preparedProps.onTouchStart;
          }
          return preparedProps;
        }
      }, {
        key: "handleClick",
        value: function handleClick(event2) {
          var props2 = this.props;
          if (props2.disabled && event2.stopPropagation) {
            event2.stopPropagation();
            return;
          }
          if (this.props.onClick) {
            this.props.onClick(event2, props2, props2.index);
          }
          if (this.props.item.onClick) {
            this.props.item.onClick(event2, props2, props2.index);
          }
        }
      }, {
        key: "handleMouseDown",
        value: function handleMouseDown() {
          var _this3 = this;
          var mouseUpListener = function mouseUpListener2() {
            if (_this3.componentIsMounted) {
              _this3.setState({
                active: false
              });
            }
            globalObject.removeEventListener("mouseup", mouseUpListener2);
          };
          globalObject.addEventListener("mouseup", mouseUpListener);
          if (this.componentIsMounted) {
            this.setState({
              active: true
            });
          }
        }
      }, {
        key: "handleTouchStart",
        value: function handleTouchStart(event2) {
          var _this4 = this;
          var props2 = this.props;
          var mouseUpListener = function mouseUpListener2() {
            if (_this4.componentIsMounted) {
              _this4.setState({
                active: false
              });
            }
            globalObject.removeEventListener("touchend", mouseUpListener2);
          };
          globalObject.addEventListener("touchend", mouseUpListener);
          if (this.componentIsMounted) {
            this.setState({
              active: true
            });
          }
          if (!this.props.item.items) {
            return;
          }
          if (this.state.mouseOver) {
            this.handleMouseLeave(event2);
          } else {
            this.handleMouseEnter(event2);
          }
        }
      }, {
        key: "showMenu",
        value: function showMenu(menu, props2) {
          props2.showMenu(menu, this.getOffset());
        }
      }, {
        key: "handleMouseEnter",
        value: function handleMouseEnter(event2) {
          var props2 = this.props;
          if (props2.disabled) {
            return;
          }
          this.mouseInside = true;
          this.setState({
            mouseOver: true
          });
          if (props2.onMouseOver) {
            var menuOffset;
            if (props2.hasSubMenu) {
              menuOffset = this.getOffset();
            }
            props2.onMouseOver({
              event: event2,
              menuOffset,
              itemProps: props2,
              index: props2.index,
              hasSubMenu: props2.hasSubMenu
            });
          }
        }
      }, {
        key: "handleMouseLeave",
        value: function handleMouseLeave(event2) {
          var props2 = this.props;
          if (props2.disabled) {
            return;
          }
          var offset = {
            x: event2.clientX,
            y: event2.clientY
          };
          if (this.componentIsMounted) {
            this.setState({
              active: false,
              mouseOver: false
            });
          }
          if (props2.onMouseOut) {
            props2.onMouseOut({
              itemPorps: props2,
              leaveOffset: offset,
              index: props2.index,
              hasSubMenu: props2.hasSubMenu
            });
          }
        }
      }, {
        key: "renderCells",
        value: function renderCells() {
          var props2 = this.props;
          var cells = props2.columns.map(function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _renderCell.default.apply(void 0, [props2].concat(args));
          });
          if (props2.enableSelection && props2.name) {
            var input = this.renderSelectInput();
            if (this.props.selectionInputPosition === "end") {
              cells.push(input);
            } else {
              cells.unshift(input);
            }
          }
          if (props2.hasSubMenu) {
            var expander = this.renderExpander();
            cells.push(expander);
          }
          return cells;
        }
      }, {
        key: "getCommonCellProps",
        value: function getCommonCellProps() {
          var props2 = this.props;
          return {
            rootClassName: props2.rootClassName,
            rtl: props2.rtl
          };
        }
      }, {
        key: "renderSelectInput",
        value: function renderSelectInput() {
          var _this5 = this;
          var props2 = this.props;
          var multiple = props2.multiple;
          var className = (0, _join.default)("".concat(props2.rootClassName, "__cell__input"), props2.browserNativeSelectInputs && "".concat(props2.rootClassName, "__cell__input--browser-native"), multiple && "".concat(props2.rootClassName, "__cell__input--multiple"));
          var onChange = function onChange2(checked) {
            if (checked === void 0) {
              checked = !props2.checked;
            }
            if (typeof checked !== "boolean" && _this5.props.showWarnings) {
              console.warn('"onChange" should be called with a boolean param!');
            }
            props2.onSelectChange({
              name: props2.name,
              value: props2.value,
              multiple,
              checked
            });
          };
          var inputProps = {
            className,
            onChange: props2.selectOnClick ? emptyFn : onChange,
            iconSize: multiple ? props2.checkIconSize : props2.radioIconSize,
            name: props2.name,
            disabled: props2.disabled,
            checked: props2.checked,
            focusable: false,
            supportIndeterminate: false,
            browserNative: props2.browserNativeSelectInputs,
            theme: props2.theme
          };
          var cellProps = _objectSpread({
            key: "select"
          }, this.getCommonCellProps());
          cellProps.className = (0, _join.default)(cellProps.className, "".concat(props2.rootClassName, "__cell--has-input"), props2.multiple && "".concat(props2.rootClassName, "__cell--checkbox"), !props2.multiple && "".concat(props2.rootClassName, "__cell--radio"));
          var Input = multiple ? _CheckBox.default : _RadioButton.default;
          var renderFunction = multiple ? this.props.renderCheckInput : this.props.renderRadioInput;
          var result;
          if (typeof renderFunction === "function") {
            result = renderFunction({
              domProps: inputProps,
              onChange,
              disabled: props2.disabled,
              checked: props2.checked
            });
          }
          if (result === void 0) {
            result = _react.default.createElement(Input, _objectSpread({}, inputProps));
          }
          return _react.default.createElement(_MenuItemCell.default, _objectSpread({}, cellProps), result);
        }
      }, {
        key: "renderExpander",
        value: function renderExpander() {
          var props2 = this.props;
          var expander = props2.expander;
          if (props2.item && props2.item.expander !== void 0) {
            expander = props2.item.expander;
          }
          var style = _objectSpread(_objectSpread({}, props2.expanderStyle), props2.item && props2.item.expanderStyle);
          var expanderProps = _objectSpread({
            style,
            size: props2.expanderSize,
            onClick: props2.onExpanderClick
          }, this.getCommonCellProps());
          if (typeof expander === "function") {
            expander = expander(expanderProps, props2.item);
          }
          if (expander === void 0 || expander === true) {
            expander = _react.default.createElement(_Expander.default, _objectSpread({}, expanderProps));
          }
          return _react.default.createElement(_MenuItemCell.default, _objectSpread({
            key: "expander",
            className: "".concat(props2.rootClassName, "__cell--has-expander"),
            expander
          }, expanderProps));
        }
      }, {
        key: "getStyle",
        value: function getStyle() {
          var props2 = this.props, state = this.state;
          var style = (0, _assign.default)({}, props2.style, props2.item.style);
          if (props2.item.isTitle && props2.titleStyle) {
            (0, _assign.default)(style, props2.titleStyle, props2.item.titleStyle);
          }
          if (state.mouseOver) {
            (0, _assign.default)(style, props2.itemOverStyle, props2.overStyle, props2.item.overStyle);
          }
          if (state.active) {
            (0, _assign.default)(style, props2.itemActiveStyle, props2.activeStyle, props2.item.activeStyle);
          }
          if (props2.expanded) {
            (0, _assign.default)(style, props2.expandedStyle, props2.item.expandedStyle);
          }
          if (props2.focused) {
            (0, _assign.default)(style, props2.focusedStyle, props2.item.focusedStyle);
          }
          if (props2.focused && state.mouseOver) {
            (0, _assign.default)(style, props2.overFocusedStyle, props2.item.overFocusedStyle);
          }
          if (props2.height) {
            (0, _assign.default)(style, {
              height: props2.height
            });
          }
          if (props2.disabled) {
            (0, _assign.default)(style, props2.itemDisabledStyle, props2.disabledStyle, props2.item.disabledStyle);
          }
          return style;
        }
      }, {
        key: "getClassName",
        value: function getClassName() {
          var props2 = this.props, state = this.state;
          var baseClassName = "".concat(props2.rootClassName, "__row");
          var className = (0, _join.default)(props2.className, props2.item.className, baseClassName, state.mouseOver && "".concat(baseClassName, "--over"), state.mouseOver && props2.item.overClassName, state.mouseOver && props2.overClassName, state.active && "".concat(baseClassName, "--active"), state.active && props2.item.activeClassName, state.active && props2.activeClassName, props2.expanded && "".concat(baseClassName, "--expanded"), props2.expanded && props2.item.expandedClassName, props2.expanded && props2.expandedClassName, props2.focused && "".concat(baseClassName, "--focused"), props2.focused && props2.item.focusedClassName, props2.focused && props2.focusedClassName, props2.item.isTitle && "".concat(baseClassName, "--title"), props2.checked && "".concat(baseClassName, "--checked"));
          if (props2.disabled) {
            className = (0, _join.default)(props2.className, baseClassName, props2.disabled && "".concat(baseClassName, "--disabled"), props2.disabled && props2.itemDisabledClassName, props2.disabled && props2.item.disabledClassName);
          }
          return className;
        }
      }, {
        key: "getOffset",
        value: function getOffset() {
          return (0, _getRegionRelativeToParent.default)(this.node, this.props.rootClassName);
        }
      }, {
        key: "getPreparedProps",
        value: function getPreparedProps() {
          return this.preparedProps;
        }
      }, {
        key: "hasSubmenu",
        value: function hasSubmenu() {
          return !!this.props.hasSubMenu;
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          return this.node;
        }
      }, {
        key: "getValue",
        value: function getValue() {
          var props2 = this.props;
          return props2.item[props2.valueProperty];
        }
      }, {
        key: "getName",
        value: function getName() {
          var props2 = this.props;
          return props2.item[props2.valueProperty];
        }
      }]);
      return MenuItem2;
    }(_reactClass.default);
    MenuItem.defaultProps = {
      isMenuItem: true,
      item: {},
      columns: ["label"],
      enableSelection: false,
      allowUnselect: false
    };
    MenuItem.propTypes = {
      rootClassName: _propTypes.default.string,
      style: _propTypes.default.object,
      titleStyle: _propTypes.default.object,
      height: _propTypes.default.number,
      dismissOnClick: _propTypes.default.bool,
      siblingItemHasSubMenu: _propTypes.default.bool,
      overStyle: _propTypes.default.object,
      overClassName: _propTypes.default.string,
      activeStyle: _propTypes.default.object,
      activeClassName: _propTypes.default.string,
      disabledStyle: _propTypes.default.object,
      disabledClassName: _propTypes.default.string,
      expandedStyle: _propTypes.default.object,
      expandedClassName: _propTypes.default.string,
      focusedStyle: _propTypes.default.object,
      focusedClassName: _propTypes.default.string,
      cellStyle: _propTypes.default.object,
      expanderStyle: _propTypes.default.object,
      overFocusedStyle: _propTypes.default.object,
      columns: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object])),
      item: _propTypes.default.object,
      expanded: _propTypes.default.bool,
      globalCellStyle: _propTypes.default.object,
      itemDisabledStyle: _propTypes.default.object,
      itemDisabledClassName: _propTypes.default.string,
      itemOverStyle: _propTypes.default.object,
      itemActiveStyle: _propTypes.default.object,
      menuHasSubmenu: _propTypes.default.bool,
      hasSubMenu: _propTypes.default.bool,
      items: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string])),
      isMenuItem: _propTypes.default.bool,
      focused: _propTypes.default.bool,
      index: _propTypes.default.number,
      rtl: _propTypes.default.bool,
      expander: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool, _propTypes.default.func]),
      expanderSize: _propTypes.default.number,
      expandedIndex: _propTypes.default.number,
      onExpanderClick: _propTypes.default.func,
      closeSubMenu: _propTypes.default.func,
      closeSubmenuRecursively: _propTypes.default.func,
      submenuWillUnmount: _propTypes.default.func,
      onMouseOver: _propTypes.default.func,
      onMouseOut: _propTypes.default.func,
      mouseOver: _propTypes.default.bool,
      active: _propTypes.default.bool,
      menu: _propTypes.default.node,
      onSelectChange: _propTypes.default.func,
      enableSelection: _propTypes.default.bool,
      allowUnselect: _propTypes.default.bool,
      selectOnClick: _propTypes.default.bool,
      name: _propTypes.default.any,
      value: _propTypes.default.any,
      renderCheckInput: _propTypes.default.func,
      renderRadioInput: _propTypes.default.func,
      selectionInputPosition: _propTypes.default.oneOf(["start", "end"]),
      checkIconSize: _propTypes.default.number,
      radioIconSize: _propTypes.default.number,
      browserNativeSelectInputs: _propTypes.default.bool,
      showWarnings: _propTypes.default.bool
    };
    var _default = MenuItem;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/MenuSeparator.js
var require_MenuSeparator = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/MenuSeparator.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireDefault(require_react());
    var _assign = _interopRequireDefault(require_assign());
    var _reactClass = _interopRequireDefault(require_react_class());
    var _join = _interopRequireDefault(require_join());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MenuSeparator = function(_Component) {
      (0, _inherits2.default)(MenuSeparator2, _Component);
      var _super = _createSuper(MenuSeparator2);
      function MenuSeparator2() {
        (0, _classCallCheck2.default)(this, MenuSeparator2);
        return _super.apply(this, arguments);
      }
      (0, _createClass2.default)(MenuSeparator2, [{
        key: "render",
        value: function render() {
          var props2 = this.prepareProps(this.props);
          return _react.default.createElement("tr", {
            className: props2.className
          }, _react.default.createElement("td", {
            colSpan: 100
          }, _react.default.createElement("div", {
            className: "".concat(props2.rootClassName, "__menu-separator__tool"),
            style: props2.style
          })));
        }
      }, {
        key: "prepareProps",
        value: function prepareProps(thisProps) {
          var props2 = {};
          (0, _assign.default)(props2, thisProps);
          props2.style = this.prepareStyle(props2);
          props2.className = this.prepareClassName(props2);
          return props2;
        }
      }, {
        key: "prepareClassName",
        value: function prepareClassName(props2) {
          var className = (0, _join.default)("".concat(props2.rootClassName, "__menu-separator"), props2.className);
          return className;
        }
      }, {
        key: "prepareStyle",
        value: function prepareStyle(props2) {
          return (0, _assign.default)({}, props2.style, props2.menuSeparatorStyle);
        }
      }]);
      return MenuSeparator2;
    }(_reactClass.default);
    MenuSeparator.defaultProps = {
      isSeparator: true
    };
    var _default = MenuSeparator;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getConstrainRegion.js
var require_getConstrainRegion2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getConstrainRegion.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regionAlign = _interopRequireDefault(require_region_align());
    var _selectParent = _interopRequireDefault(require_selectParent());
    var _getViewportRegion = _interopRequireDefault(require_getViewportRegion());
    var _default = function _default2(constrainTo, domNode) {
      var constrainRegion;
      if (constrainTo === true) {
        constrainRegion = (0, _getViewportRegion.default)();
      }
      if (!constrainRegion && typeof constrainTo === "function") {
        constrainTo = constrainTo(domNode);
      }
      if (!constrainRegion && typeof constrainTo === "string") {
        constrainTo = (0, _selectParent.default)(constrainTo, domNode);
      }
      if (!constrainRegion && constrainTo) {
        constrainRegion = _regionAlign.default.from(constrainTo);
      }
      return constrainRegion;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/getMinMaxSize.js
var require_getMinMaxSize3 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/getMinMaxSize.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    function getMinMaxSize(props2) {
      var sizeType;
      var single;
      var style = props2.style || {};
      var result = {};
      if (props2.minSize) {
        sizeType = (0, _typeof2.default)(props2.minSize);
        single = sizeType == "number" || sizeType == "string";
        if (single) {
          result.minWidth = props2.minSize;
          result.minHeight = props2.minSize;
        } else {
          if (props2.minSize.width) {
            result.minWidth = props2.minSize.width;
          }
          if (props2.minSize.height) {
            result.minHeight = props2.minSize.height;
          }
        }
      }
      if (props2.maxSize) {
        sizeType = (0, _typeof2.default)(props2.maxSize);
        single = sizeType == "number" || sizeType == "string";
        if (single) {
          result.maxWidth = props2.maxSize;
          result.maxHeight = props2.maxSize;
        } else {
          if (props2.maxSize.width) {
            result.maxWidth = props2.maxSize.width;
          }
          if (props2.maxSize.height) {
            result.maxHeight = props2.maxSize.height;
          }
        }
      }
      if (result.minWidth == void 0 && style.minWidth != void 0) {
        result.minWidth = style.minWidth;
      }
      if (result.maxWidth == void 0 && style.maxWidth != void 0) {
        result.maxWidth = style.maxWidth;
      }
      if (result.minHeight == void 0 && style.minHeight != void 0) {
        result.minHeight = style.minHeight;
      }
      if (result.maxHeight == void 0 && style.maxHeight != void 0) {
        result.maxHeight = style.maxHeight;
      }
      return result;
    }
    var _default = getMinMaxSize;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/prepareStyle.js
var require_prepareStyle = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/prepareStyle.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _assign = _interopRequireDefault(require_assign());
    var _getMinMaxSize = _interopRequireDefault(require_getMinMaxSize3());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function prepareStyle(props2, state) {
      var style = {};
      if (props2.subMenu) {
        (0, _assign.default)(style, props2.submenuStyle);
      } else {
        (0, _assign.default)(style, props2.style);
      }
      if (props2.at) {
        var isArray = Array.isArray(props2.at);
        var coords = {
          left: isArray ? props2.at[0] : props2.at.left === void 0 ? props2.at.x || props2.at.pageX : props2.at.left,
          top: isArray ? props2.at[1] : props2.at.top === void 0 ? props2.at.y || props2.at.pageY : props2.at.top
        };
        (0, _assign.default)(style, coords);
      }
      if (state.positionStyle && props2.visible !== false) {
        style = _objectSpread(_objectSpread({}, style), state.positionStyle);
      }
      var minMaxSize = (0, _getMinMaxSize.default)(props2);
      (0, _assign.default)(style, minMaxSize);
      if (props2.padding) {
        (0, _assign.default)(style, {
          padding: props2.padding
        });
      }
      if (props2.border) {
        (0, _assign.default)(style, {
          border: props2.border
        });
      }
      if (typeof props2.shadow === "string") {
        (0, _assign.default)(style, {
          boxShadow: props2.shadow
        });
      }
      if (props2.borderRadius) {
        (0, _assign.default)(style, {
          borderRadius: props2.borderRadius
        });
      }
      if (props2.width) {
        (0, _assign.default)(style, {
          width: props2.width
        });
      }
      if (props2.enableAnimation && (state.transitionEnded || state.transitionStart)) {
        (0, _assign.default)(style, {
          transitionDuration: "".concat(props2.fadeDuration, "ms"),
          transitionTimingFunction: props2.transitionTimingFunction
        });
      }
      return style;
    }
    var _default = prepareStyle;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getFirstNonDisabledItem.js
var require_getFirstNonDisabledItem = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getFirstNonDisabledItem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function getFirstNonDisabledItem(items) {
      var fistNonDisabledItemIndex = null;
      if (!items || items && !items.length) {
        return null;
      }
      for (var i = 0, len = items.length; i < len; i++) {
        var item = items[i];
        if (item && !item.disabled && !item.isTitle) {
          fistNonDisabledItemIndex = i;
          break;
        }
      }
      return fistNonDisabledItemIndex;
    }
    var _default = getFirstNonDisabledItem;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getNextNavigableItem.js
var require_getNextNavigableItem = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getNextNavigableItem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function getNextNavigableItem(items) {
      var startFrom = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var direction = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var nextNavigableItem = null;
      if (!items || items && !items.length) {
        return null;
      }
      if (startFrom === null) {
        return null;
      }
      if (direction === 1) {
        for (var i = startFrom + 1, len = items.length; i < len; i++) {
          var item = items[i];
          var isDisabled = item && item.disabled;
          var isSeparator = item === "-";
          var isTitle = item.isTitle;
          if (!isSeparator && !isDisabled && !isTitle) {
            nextNavigableItem = i;
            break;
          }
        }
      } else {
        for (var _i = startFrom - 1; _i >= 0; _i--) {
          var _item = items[_i];
          var _isDisabled = _item && _item.disabled;
          var _isSeparator = _item === "-";
          var _isTitle = _item.isTitle;
          if (!_isSeparator && !_isDisabled && !_isTitle) {
            nextNavigableItem = _i;
            break;
          }
        }
      }
      return nextNavigableItem;
    }
    var _default = getNextNavigableItem;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getSeparatorIndexes.js
var require_getSeparatorIndexes = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getSeparatorIndexes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function getSeparatorIndexes(children) {
      return children.reduce(function(acc, child, index2) {
        if (child === "-" || child.props && child.props.isSeparator) {
          acc.push(index2);
        }
        return acc;
      }, []);
    }
    var _default = getSeparatorIndexes;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/range.js
var require_range = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/range.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function range() {
      var start = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var end = arguments.length > 1 ? arguments[1] : void 0;
      var step = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var collection = [];
      for (var i = start; i < end; i += step) {
        collection.push(i);
      }
      return collection;
    }
    var _default = range;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/prepareAlignOffset.js
var require_prepareAlignOffset = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/prepareAlignOffset.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _range = _interopRequireDefault(require_range());
    function prepareAlignOffset(alignOffset, positionsLength) {
      var offset;
      if (Array.isArray(alignOffset)) {
        offset = alignOffset.map(function(alignOffsetItem) {
          if (typeof alignOffsetItem === "number") {
            return {
              x: alignOffsetItem,
              y: alignOffsetItem
            };
          } else {
            return alignOffsetItem;
          }
        });
      }
      if (typeof alignOffset === "number") {
        offset = {
          x: alignOffset,
          y: alignOffset
        };
      }
      if ((0, _typeof2.default)(alignOffset) === "object") {
        offset = alignOffset;
      }
      if (!Array.isArray(offset) && positionsLength) {
        offset = (0, _range.default)(0, positionsLength).map(function() {
          return offset;
        });
      }
      return offset;
    }
    var _default = prepareAlignOffset;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getSingleSelectNames.js
var require_getSingleSelectNames = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getSingleSelectNames.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function getSingleSelectNames(_ref) {
      var items = _ref.items, nameProperty = _ref.nameProperty;
      if (!items || items.length <= 1) {
        return null;
      }
      var names = items.reduce(function(acc, item) {
        var name = item[nameProperty];
        if (acc[name] !== void 0) {
          acc[name] = true;
        } else {
          acc[name] = false;
        }
        return acc;
      }, {});
      return names;
    }
    var _default = getSingleSelectNames;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/increaseColSpan.js
var require_increaseColSpan = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/increaseColSpan.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    exports.increaseFirstColumnColSpan = increaseFirstColumnColSpan;
    exports.increaseLastColumnColSpan = increaseLastColumnColSpan;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function increaseColSpan(column) {
      var newColumn = column;
      if (typeof newColumn === "string") {
        newColumn = {
          name: newColumn,
          colSpan: 2
        };
      } else {
        newColumn = _objectSpread(_objectSpread({}, column), {}, {
          colSpan: newColumn.colSpan ? newColumn.colSpan + 1 : 2
        });
      }
      return newColumn;
    }
    function increaseLastColumnColSpan(columns) {
      return [].concat((0, _toConsumableArray2.default)(columns.slice(0, -1)), [increaseColSpan(columns[columns.length - 1])]);
    }
    function increaseFirstColumnColSpan(columns) {
      return [increaseColSpan(columns[0])].concat((0, _toConsumableArray2.default)(columns.slice(1)));
    }
    var _default = increaseColSpan;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/align/index.js
var require_align = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/align/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getConstrainRegion = _interopRequireDefault(require_getConstrainRegion2());
    var _prepareAlignOffset = _interopRequireDefault(require_prepareAlignOffset());
    var _this = void 0;
    var _default = function _default2(props2, subMenuRegion, targetAlignRegion, constrainTo, domNode) {
      var constrainRegion = _getConstrainRegion.default.call(_this, constrainTo, domNode);
      if (typeof props2.alignSubMenu === "function") {
        props2.alignSubMenu(subMenuRegion, targetAlignRegion, constrainRegion);
      } else {
        var alignPositions = props2.alignPositions;
        var offset = props2.rtl ? props2.rtlSubmenuAlignOffset : props2.submenuAlignOffset;
        offset = (0, _prepareAlignOffset.default)(offset, alignPositions.length);
        var pos = subMenuRegion.alignTo(targetAlignRegion, alignPositions, {
          offset,
          constrain: constrainRegion
        });
        return pos == "tl-tr" || pos == "tr-tl" ? 1 : -1;
      }
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/getSubMenuStyle.js
var require_getSubMenuStyle = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/getSubMenuStyle.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _regionAlign = _interopRequireDefault(require_region_align());
    var _assign = _interopRequireDefault(require_assign());
    var _align = _interopRequireDefault(require_align());
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    function transformPxStringToInt(pxValue) {
      var value = parseFloat(pxValue.split("px")[0]);
      return typeof value === "number" && !isNaN(value) ? value : 0;
    }
    function _default(props2, state, domNode) {
      var _this = this;
      if (state.activeSubMenuIndex == null || !this.componentIsMounted) {
        this.prevMenuIndex = -1;
        return;
      }
      var overItem = this.getItemByIndex(state.activeSubMenuIndex);
      var offset = overItem && overItem.getOffset();
      var left = offset.left + offset.width;
      var top = offset.top;
      var menuIndex = state.activeSubMenuIndex;
      var sameMenu = this.prevMenuIndex == menuIndex;
      if (this.aligning && !sameMenu) {
        this.aligning = false;
      }
      this.prevMenuIndex = menuIndex;
      var style = {
        left,
        top,
        pointerEvents: "none",
        position: "absolute"
      };
      if (!this.aligning && !sameMenu) {
        setTimeout(function() {
          if (!_this.componentIsMounted) {
            return;
          }
          var thisRegion = _regionAlign.default.from(domNode);
          var menuComputedStyle = globalObject.getComputedStyle(domNode);
          var paddingLeft = transformPxStringToInt(menuComputedStyle.paddingLeft);
          var menuItemRegion = _regionAlign.default.from({
            left: thisRegion.left + paddingLeft,
            top: thisRegion.top + offset.top,
            width: offset.width,
            height: offset.height
          });
          var subMenuMounted = _this.subMenu && _this.subMenu.componentIsMounted;
          if (!subMenuMounted) {
            return;
          }
          var submenuNode = _this.subMenu.node;
          var subMenuRegion = _regionAlign.default.from(submenuNode);
          var initialHeight = subMenuRegion.height;
          var alignPosition = (0, _align.default)(props2, subMenuRegion, menuItemRegion, props2.constrainTo, domNode);
          var newHeight = subMenuRegion.height;
          var maxHeight;
          if (newHeight < initialHeight && props2.subMenuConstrainMargin != null) {
            maxHeight = newHeight - props2.subMenuConstrainMargin;
          } else if (newHeight < initialHeight) {
            maxHeight = newHeight;
          }
          if (maxHeight && alignPosition == -1) {
            subMenuRegion.top = subMenuRegion.bottom - maxHeight;
          }
          var newLeft = subMenuRegion.left - thisRegion.left;
          var newTop = subMenuRegion.top - thisRegion.top;
          if (Math.abs(newLeft - left) < 5) {
            newLeft = left;
          }
          if (Math.abs(newTop - top) < 5) {
            newTop = top;
          }
          _this.subMenuPosition = newLeft < 0 ? "left" : "right";
          if (newHeight === 0) {
            return;
          }
          _this.alignOffset = {
            left: newLeft,
            top: newTop
          };
          _this.aligning = true;
          _this.setState({
            submenuAlignPosition: alignPosition,
            submenuMaxHeight: props2.submenuMaxHeight || maxHeight
          });
        }, 0);
      }
      if (sameMenu || this.aligning && this.alignOffset) {
        (0, _assign.default)(style, this.alignOffset);
        style.visibility = "visible";
        delete style.pointerEvents;
        delete style.overflow;
      }
      this.aligning = false;
      return style;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getItemStyleProps.js
var require_getItemStyleProps = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/utils/getItemStyleProps.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(props2) {
      var itemStyle = props2.itemStyle, itemOverStyle = props2.itemOverStyle, itemOverClassName = props2.itemOverClassName, itemActiveStyle = props2.itemActiveStyle, itemActiveClassName = props2.itemActiveClassName, itemDisabledStyle = props2.itemDisabledStyle, itemDisabledClassName = props2.itemDisabledClassName, itemExpandedStyle = props2.itemExpandedStyle, itemExpandedClassName = props2.itemExpandedClassName, cellStyle = props2.cellStyle, itemFocusedStyle = props2.itemFocusedStyle, itemFocusedClassName = props2.itemFocusedClassName, itemOverFocusedStyle = props2.itemOverFocusedStyle;
      return {
        style: itemStyle,
        overStyle: itemOverStyle,
        overClassName: itemOverClassName,
        activeStyle: itemActiveStyle,
        activeClassName: itemActiveClassName,
        disabledStyle: itemDisabledStyle,
        disabledClassName: itemDisabledClassName,
        expandedStyle: itemExpandedStyle,
        expandedClassName: itemExpandedClassName,
        focusedStyle: itemFocusedStyle,
        focusedClassName: itemFocusedClassName,
        overFocusedStyle: itemOverFocusedStyle,
        cellStyle
      };
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/submenuAlignPositions.js
var require_submenuAlignPositions = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/submenuAlignPositions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.alignPositionRTL = exports.alignPositionLTR = exports.alignOffsetRTL = exports.alignOffsetLTR = void 0;
    var alignPositionLTR = ["tl-tr", "bl-br", "tr-tl", "br-bl"];
    exports.alignPositionLTR = alignPositionLTR;
    var alignPositionRTL = ["tr-tl", "br-bl", "tl-tr", "bl-br"];
    exports.alignPositionRTL = alignPositionRTL;
    var alignOffsetLTR = [{
      x: -7,
      y: 5
    }, {
      x: -7,
      y: -5
    }, {
      x: 7,
      y: 5
    }, {
      x: 7,
      y: -5
    }];
    exports.alignOffsetLTR = alignOffsetLTR;
    var alignOffsetRTL = [{
      x: 7,
      y: 5
    }, {
      x: 7,
      y: -5
    }, {
      x: -7,
      y: 5
    }, {
      x: -7,
      y: -5
    }];
    exports.alignOffsetRTL = alignOffsetRTL;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/Menu.js
var require_Menu = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/Menu.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactClass = _interopRequireDefault(require_react_class());
    var _regionAlign = _interopRequireDefault(require_region_align());
    var _uglified = _interopRequireDefault(require_uglified());
    var _shallowequal = _interopRequireDefault(require_shallowequal3());
    var _ArrowScroller = _interopRequireDefault(require_ArrowScroller2());
    var _MenuItem = _interopRequireDefault(require_MenuItem());
    var _MenuSeparator = _interopRequireDefault(require_MenuSeparator());
    var _containsNode = _interopRequireDefault(require_containsNode());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _join = _interopRequireDefault(require_join());
    var _assign = _interopRequireDefault(require_assign());
    var _getConstrainRegion = _interopRequireDefault(require_getConstrainRegion2());
    var _isMobile = _interopRequireDefault(require_isMobile2());
    var _prepareStyle = _interopRequireDefault(require_prepareStyle());
    var _getFirstNonDisabledItem = _interopRequireDefault(require_getFirstNonDisabledItem());
    var _getNextNavigableItem = _interopRequireDefault(require_getNextNavigableItem());
    var _getSeparatorIndexes = _interopRequireDefault(require_getSeparatorIndexes());
    var _prepareAlignOffset = _interopRequireDefault(require_prepareAlignOffset());
    var _getSingleSelectNames = _interopRequireDefault(require_getSingleSelectNames());
    var _increaseColSpan = require_increaseColSpan();
    var _getRegionRelativeToParent = _interopRequireDefault(require_getRegionRelativeToParent());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate2());
    var _getSubMenuStyle = _interopRequireDefault(require_getSubMenuStyle());
    var _getItemStyleProps = _interopRequireDefault(require_getItemStyleProps());
    var _submenuAlignPositions = require_submenuAlignPositions();
    var _ua = require_ua();
    var _getGlobal = require_getGlobal();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    function emptyFn() {
    }
    var raf = globalObject.requestAnimationFrame;
    var getAlignToRegion = function getAlignToRegion2(alignTo, node) {
      if (typeof alignTo === "function") {
        alignTo = alignTo(node);
      }
      if (typeof alignTo == "string") {
        alignTo = globalObject.document ? globalObject.document.querySelector(alignTo) : alignTo;
      }
      return _regionAlign.default.from(alignTo);
    };
    var InovuaMenu = function(_Component) {
      (0, _inherits2.default)(InovuaMenu2, _Component);
      var _super = _createSuper(InovuaMenu2);
      function InovuaMenu2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaMenu2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updatePosition", function() {
          _this.checkAlignment(void 0, true);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateAlignment", function(alignTo) {
          _this.checkAlignment(void 0, true, alignTo);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDocumentScroll", function() {
          if (_this.props.updatePositionOnScroll) {
            _this.updatePosition();
          }
        });
        _this.state = {
          mouseOver: false,
          hidden: true,
          enableAnimation: false,
          transitionEnded: false,
          hasScroll: false,
          activeSubMenuIndex: null,
          nextActiveSubMenuIndex: null,
          showUpArrow: false,
          showDownArrow: true,
          focusedItem: props2.enableKeyboardNavigation ? props2.defaultFocusedItem : null,
          selected: props2.defaultSelected
        };
        _this.setupShowHideDelay();
        _this.setRootRef = function(ref) {
          _this.node = ref;
        };
        _this.setItemRef = function(index2) {
          return function(ref) {
            if (!_this.childrenRefs) {
              _this.childrenRefs = [];
            }
            _this.childrenRefs[index2] = ref;
          };
        };
        _this.setSubMenuRef = function(ref) {
          _this.subMenu = ref;
        };
        _this.setSubMenuWrapRef = function(ref) {
          _this.subMenuWrap = ref;
        };
        _this.setScrollerRef = function(ref) {
          _this.scroller = ref;
        };
        _this.setTableRef = function(ref) {
          _this.table = ref;
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaMenu2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextProps);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.componentIsMounted = false;
          this.chidrenRefs = null;
          this.props.componentWillUnmount(this, {
            hasFocus: this.hasFocus(),
            depth: this.props.depth
          });
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps, prevState) {
          if (this.props.autoFocus && prevState.hidden && !this.state.hidden) {
            this.focus();
          }
          if (prevProps.visible && !this.props.visible) {
            this.setState({
              positionStyle: null
            });
          }
          if (!prevProps.visible && this.props.visible || !(0, _shallowequal.default)(prevProps.alignTo, this.props.alignTo) || this.props.constrainTo != prevProps.constrainTo) {
            this.checkAlignment(this.props, true);
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          this.componentIsMounted = true;
          if (this.props.visible === false) {
            return;
          }
          if (this.props.componentDidMount) {
            this.props.componentDidMount(this);
          }
          this.checkAlignment();
          this.setupEnterAnimation();
          if (this.props.autoFocus) {
            requestAnimationFrame(function() {
              _this2.focus();
            });
          }
          if (this.props.updatePositionOnScroll) {
            window.addEventListener("scroll", this.handleDocumentScroll, {
              passive: true
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          var state = this.state, props2 = this.props;
          var style = (0, _prepareStyle.default)(props2, state);
          var className = this.prepareClassName(props2, state);
          var table = this.renderTable();
          var scrollerArrow = props2.showScrollArrows === void 0 ? "auto" : !!props2.showScrollArrows;
          return _react.default.createElement("div", _objectSpread(_objectSpread({
            tabIndex: 0
          }, (0, _cleanProps.default)(props2, InovuaMenu2.propTypes)), {}, {
            ref: this.setRootRef,
            onMouseLeave: this.handleMouseLeave,
            onMouseEnter: this.handleMouseEnter,
            onKeyDown: this.handleKeyDown,
            onBlur: this.handleOnBlur,
            className,
            style
          }), this.state.activeSubMenuIndex !== null && this.renderSubMenu(props2, state), props2.disableScroller ? table : _react.default.createElement(_ArrowScroller.default, _objectSpread({
            scroller: scrollerArrow
          }, this.getScrollerProps()), table));
        }
      }, {
        key: "renderTable",
        value: function renderTable() {
          var props2 = this.props, state = this.state;
          var className = (0, _join.default)("".concat(props2.rootClassName, "__table"), props2.tableClassName);
          return _react.default.createElement("table", {
            cellSpacing: 0,
            cellPadding: 0,
            className,
            ref: this.setTableRef
          }, _react.default.createElement("tbody", null, this.renderItems()));
        }
      }, {
        key: "renderItems",
        value: function renderItems() {
          var _this3 = this;
          var props2 = this.props, state = this.state;
          if (!props2.items) {
            return null;
          }
          var commonProps = this.getCommonItemProps();
          var siblingItemHasSubMenu = this.doesAnyItemHasSubMenu();
          var siblingItemHasSelectInput = this.dosAnyItemHaveSelectInput();
          var hasDescription = props2.items.filter(function(item) {
            return !!item.secondaryLabel;
          }).length;
          var hasIcon = props2.items.filter(function(item) {
            return !!item.icon;
          }).length;
          return props2.items.map(function(item, index2, items) {
            if (item === "-") {
              return _react.default.createElement(_MenuSeparator.default, {
                style: props2.menuSeparatorStyle,
                key: index2,
                rootClassName: props2.rootClassName
              });
            }
            var columns = props2.columns;
            if (hasDescription) {
              columns = [].concat((0, _toConsumableArray2.default)(columns), [{
                name: "secondaryLabel",
                isDescription: true,
                style: _objectSpread(_objectSpread({}, props2.secondaryLabelStyle), item.secondaryLabelStyle)
              }]);
            }
            if (hasIcon) {
              columns = [{
                name: "icon",
                isIcon: true
              }].concat((0, _toConsumableArray2.default)(columns));
            }
            if (props2.labelStyle || item.labelStyle) {
              columns = columns.map(function(column) {
                if (!column) {
                  return column;
                }
                if (typeof column === "string" && column === "label") {
                  return {
                    name: "label",
                    style: _objectSpread(_objectSpread({}, props2.labelStyle), item.labelStyle)
                  };
                }
                if (column && column.name && column.name === "label") {
                  return _objectSpread(_objectSpread({}, column), {}, {
                    style: _objectSpread(_objectSpread({}, columns.style), props2.labelStyle)
                  });
                }
                return column;
              });
            }
            var hasSubMenu = item.items && !!item.items.length || item.children && !!item.children.length;
            var focused = state.focusedItem === index2;
            var expanded = commonProps.expandedIndex === index2;
            var className = props2.itemClassName;
            var selectionProps = _this3.getSelectionProps(item);
            if (props2.enableSelection && siblingItemHasSelectInput && !selectionProps) {
              if (props2.selectionInputPosition === "start") {
                columns = (0, _increaseColSpan.increaseFirstColumnColSpan)(columns);
              } else {
                columns = (0, _increaseColSpan.increaseLastColumnColSpan)(columns);
              }
            }
            if (!hasSubMenu && siblingItemHasSubMenu) {
              columns = (0, _increaseColSpan.increaseLastColumnColSpan)(columns);
            }
            var itemProps = _objectSpread(_objectSpread(_objectSpread({
              index: index2,
              item,
              hasSubMenu,
              items,
              focused,
              expanded,
              className,
              columns,
              key: index2,
              disabled: item.disabled,
              theme: props2.theme,
              ref: _this3.setItemRef(index2)
            }, commonProps), selectionProps), item.props);
            var Component = props2.itemFactory || _MenuItem.default;
            return _react.default.createElement(Component, _objectSpread({}, itemProps));
          });
        }
      }, {
        key: "getSelectionProps",
        value: function getSelectionProps(item) {
          var props2 = this.props;
          if (!props2.items || props2.items && !props2.items.length) {
            return null;
          }
          var selected = this.getSelected();
          var singleSelectNames = (0, _getSingleSelectNames.default)({
            items: props2.items,
            nameProperty: props2.nameProperty
          });
          var selectionProps;
          if (props2.enableSelection) {
            var value = item[props2.valueProperty];
            var name = item[props2.nameProperty];
            var multiple = singleSelectNames && !singleSelectNames[name];
            var checked = multiple ? value !== void 0 ? selected[name] === value : selected[name] === name : selected[name] === value;
            if (name) {
              selectionProps = {
                name,
                value,
                checked,
                multiple,
                allowUnselect: props2.allowUnselect,
                enableSelection: true,
                browserNativeSelectInputs: props2.browserNativeSelectInputs,
                renderCheckInput: item.renderCheckInput !== void 0 ? item.renderCheckInput : props2.renderCheckInput,
                renderRadioInput: item.renderRadioInput !== void 0 ? item.renderRadioInput : props2.renderRadioInput,
                selectionInputPosition: item.selectionInputPosition !== void 0 ? item.selectionInputPosition : props2.selectionInputPosition
              };
            }
          }
          return selectionProps;
        }
      }, {
        key: "getCommonItemProps",
        value: function getCommonItemProps() {
          var _objectSpread2;
          var props2 = this.props;
          var menuHasSubmenu = !!props2.items.filter(function(item) {
            return item.items && item.items.length;
          }).length;
          var itemStyleProps = (0, _getItemStyleProps.default)(props2);
          return _objectSpread((_objectSpread2 = {
            menuHasSubmenu,
            expanderStyle: props2.expanderStyle,
            expanderSize: props2.expanderSize,
            globalCellStyle: props2.cellStyle,
            itemDisabledStyle: props2.itemDisabledStyle,
            itemDisabledClassName: props2.itemDisabledClassName,
            itemOverStyle: props2.itemOverStyle,
            itemActiveStyle: props2.itemActiveStyle
          }, (0, _defineProperty2.default)(_objectSpread2, "menuHasSubmenu", props2.menuHasSubmenu), (0, _defineProperty2.default)(_objectSpread2, "rootClassName", props2.rootClassName), (0, _defineProperty2.default)(_objectSpread2, "showWarnings", props2.showWarnings), (0, _defineProperty2.default)(_objectSpread2, "titleStyle", props2.titleStyle), (0, _defineProperty2.default)(_objectSpread2, "onClick", this.onMenuItemClick), (0, _defineProperty2.default)(_objectSpread2, "onMouseOver", this.onMenuItemMouseEnter), (0, _defineProperty2.default)(_objectSpread2, "onMouseOut", this.onMenuItemMouseLeave), (0, _defineProperty2.default)(_objectSpread2, "submenuWillUnmount", this.onSubmenuWillUnmount), (0, _defineProperty2.default)(_objectSpread2, "onExpanderClick", this.onMenuItemExpanderClick), (0, _defineProperty2.default)(_objectSpread2, "onSelectChange", this.handleSelectionChange), (0, _defineProperty2.default)(_objectSpread2, "selectOnClick", props2.selectOnClick), (0, _defineProperty2.default)(_objectSpread2, "expander", props2.expander), (0, _defineProperty2.default)(_objectSpread2, "rtl", props2.rtl), (0, _defineProperty2.default)(_objectSpread2, "height", props2.itemHeight), (0, _defineProperty2.default)(_objectSpread2, "checkIconSize", props2.checkIconSize), (0, _defineProperty2.default)(_objectSpread2, "radioIconSize", props2.radioIconSize), (0, _defineProperty2.default)(_objectSpread2, "closeSubmenuRecursively", this.closeSubmenuRecursively), (0, _defineProperty2.default)(_objectSpread2, "closeSubMenu", this.closeSubMenu), (0, _defineProperty2.default)(_objectSpread2, "expandedIndex", this.getExpandedIndex()), _objectSpread2), itemStyleProps);
        }
      }, {
        key: "renderSubMenu",
        value: function renderSubMenu(props2, state) {
          var domNode = this.node;
          var menuProps = this.getSubMenuProps();
          var wrapperStyle = _getSubMenuStyle.default.bind(this)(_objectSpread(_objectSpread({}, props2), {}, {
            alignPositions: this.getDefaultAlignPositions()
          }), state, domNode);
          var wrapperClassName = "".concat(this.props.rootClassName, "__submenu-wrapper");
          return _react.default.createElement("div", {
            className: wrapperClassName,
            ref: this.setSubMenuWrapRef,
            style: wrapperStyle,
            onMouseEnter: this.handleSubMenuMouseEnter,
            onMouseLeave: this.handleSubMenuMouseLeave
          }, _react.default.createElement(InovuaMenu2, _objectSpread({
            key: state.activeSubMenuIndex
          }, menuProps)));
        }
      }, {
        key: "hasItemSubMenu",
        value: function hasItemSubMenu(index2) {
          var items = this.getItemsByIndex(index2);
          return items && items.length;
        }
      }, {
        key: "getItemsByIndex",
        value: function getItemsByIndex(index2) {
          var item = this.props.items && this.props.items[index2];
          if (!item) {
            return null;
          }
          var items = item && item.items;
          return items;
        }
      }, {
        key: "getSubMenuProps",
        value: function getSubMenuProps() {
          var props2 = this.props, state = this.state;
          var index2 = this.state.activeSubMenuIndex;
          var items = this.getItemsByIndex(index2);
          var item = this.props.items[index2];
          var overridingProps = _objectSpread(_objectSpread({}, this.props.submenuProps), item.menuProps);
          if (overridingProps.selected === void 0 && overridingProps.defaultSelected === void 0) {
            overridingProps.selected = this.getSelected();
          }
          var menuProps = _objectSpread(_objectSpread(_objectSpread({}, this.props), {}, {
            onDismiss: emptyFn
          }, overridingProps), {}, {
            items,
            depth: props2.depth + 1,
            ref: this.setSubMenuRef,
            subMenu: true,
            parentMenu: this,
            closeSubMenu: this.closeSubMenu,
            closeSubmenuRecursively: this.closeSubmenuRecursively,
            componentWillUnmount: this.submenuWillUnmount,
            parentIndex: index2,
            maxHeight: state.submenuMaxHeight || props2.submenuMaxHeight || state.maxHeight || props2.maxHeight,
            onActivate: this.onSubMenuActivate,
            onInactivate: this.onSubMenuInactivate,
            scrollerProps: props2.scrollerProps,
            constrainTo: props2.constrainTo,
            expander: props2.expander,
            onSelectionChange: this.handleSubmenuSelectionChange,
            alignPosition: state.submenuAlignPosition
          });
          delete menuProps.autoFocus;
          delete menuProps.className;
          delete menuProps.onClick;
          delete menuProps.defaultFocusedItem;
          delete menuProps.onChildClick;
          delete menuProps.visible;
          return menuProps;
        }
      }, {
        key: "getAlignPositions",
        value: function getAlignPositions(props2) {
          if (props2.alignPositions == null) {
            return this.getDefaultAlignPositions();
          }
          return props2.alignPositions;
        }
      }, {
        key: "getDefaultAlignPositions",
        value: function getDefaultAlignPositions() {
          var props2 = this.props;
          return props2.rtl ? _submenuAlignPositions.alignPositionRTL : _submenuAlignPositions.alignPositionLTR;
        }
      }, {
        key: "getScrollerProps",
        value: function getScrollerProps() {
          var _this4 = this, _objectSpread3;
          var props2 = this.props, state = this.state;
          var className = (0, _join.default)(props2.scrollerProps.className, "".concat(props2.rootClassName, "__scroll-container"));
          var style = (0, _assign.default)({}, props2.scrollerProps.style);
          var maxHeight = state.maxHeight != void 0 && props2.submenu ? state.maxHeight : props2.maxHeight;
          if (maxHeight != null) {
            (0, _assign.default)(style, {
              maxHeight
            });
          }
          var scrollProps = _objectSpread(_objectSpread({}, props2.scrollerProps), {}, (_objectSpread3 = {
            renderScroller: props2.renderScroller,
            nativeScroll: props2.nativeScroll,
            scrollContainerProps: props2.scrollContainerProps,
            className,
            notifyResizeDelay: props2.notifyResizeDelay,
            ref: this.setScrollerRef,
            style,
            theme: props2.theme,
            vertical: true
          }, (0, _defineProperty2.default)(_objectSpread3, "theme", props2.theme), (0, _defineProperty2.default)(_objectSpread3, "scrollOnMouseEnter", props2.scrollOnMouseEnter), (0, _defineProperty2.default)(_objectSpread3, "onHasScrollChange", function onHasScrollChange(hasScroll) {
            return _this4.setState({
              hasScroll
            });
          }), _objectSpread3));
          return scrollProps;
        }
      }, {
        key: "prepareClassName",
        value: function prepareClassName(props2, state) {
          var hidden = props2.visible != void 0 ? !props2.visible : state.hidden;
          var className = (0, _join.default)(props2.rootClassName, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), props2.className, !props2.visible || props2.items && !props2.items.length && "".concat(props2.rootClassName, "--no-display"), props2.absolute && "".concat(props2.rootClassName, "--absolute"), !props2.rtl ? "".concat(props2.rootClassName, "--ltr") : "".concat(props2.rootClassName, "--rtl"), hidden && "".concat(props2.rootClassName, "--hidden"), _isMobile.default && "".concat(props2.rootClassName, "--mobile"), props2.subMenu && "".concat(props2.rootClassName, "__submenu"), "".concat(props2.rootClassName, "--depth-").concat(props2.depth), state.hasScroll && "".concat(props2.rootClassName, "--has-overflow"), props2.shadow && "".concat(props2.rootClassName, "--shadow"), state.hasScroll && "".concat(props2.rootClassName, "--has-scroll"));
          if (props2.alignPosition !== void 0) {
            var position = props2.alignPosition === 1 ? "up" : "down";
            className = (0, _join.default)(className, "".concat(props2.rootClassName, "--position-").concat(position));
          }
          if (state.enableAnimation) {
            className = (0, _join.default)(className, "".concat(props2.rootClassName, "--animation-enabled"), state.transitionEnded && "".concat(props2.rootClassName, "--transition-end"), state.transitionStart && "".concat(props2.rootClassName, "--transition-start"));
          }
          return className;
        }
      }, {
        key: "handleMouseEnter",
        value: function handleMouseEnter(event2) {
          if (typeof this.props.onMouseEnter === "function") {
            this.props.onMouseEnter(event2);
          }
          this.setState({
            mouseInside: true
          });
          this.onActivate();
        }
      }, {
        key: "handleMouseLeave",
        value: function handleMouseLeave(event2) {
          if (typeof this.props.onMouseLeave === "function") {
            this.props.onMouseLeave(event2);
          }
          this.setNextSubmenu();
          this.setState({
            mouseInside: false
          });
          if (!this.state.activeSubMenuIndex && !this.state.nextActiveSubMenuIndex) {
            this.onInactivate({
              hasFocus: this.hasFocus(),
              parentIndex: this.props.parentIndex
            });
          }
        }
      }, {
        key: "handleKeyDown",
        value: function handleKeyDown(event2) {
          if (typeof this.props.onKeyDown === "function") {
            this.props.onKeyDown(event2);
          }
          if (!this.props.enableKeyboardNavigation) {
            return;
          }
          var stop = function stop2(event3) {
            event3.stopPropagation();
          };
          stop(event2);
          switch (event2.key) {
            case "ArrowUp":
              this.handleArrowUp(event2);
              break;
            case "ArrowDown":
              this.handleArrowDown(event2);
              break;
            case "ArrowLeft":
              this.handleArrowLeft(event2);
              break;
            case "ArrowRight":
              this.handleArrowRight(event2);
              break;
            case "Enter":
              this.handleEnterOnFocusedItem(event2);
              break;
            case "Escape":
              this.handleEscape(event2);
            case " ":
              this.handleSpaceOnFocusedItem(event2);
              break;
          }
        }
      }, {
        key: "handleEscape",
        value: function handleEscape(event2) {
          if (this.props.dismissWithEscape) {
            this.dismiss(event2);
          }
        }
      }, {
        key: "handleArrowUp",
        value: function handleArrowUp(event2) {
          var lastItemIndex = this.props.items && this.props.items.length ? this.props.items.length : null;
          var props2 = this.props;
          var focusedItemIndex = this.state.focusedItem != null ? this.state.focusedItem : lastItemIndex;
          var newFocusedItemIndex = (0, _getNextNavigableItem.default)(props2.items, focusedItemIndex, -1);
          if (newFocusedItemIndex == null) {
            return;
          }
          this.setFocusedIndex(newFocusedItemIndex);
        }
      }, {
        key: "handleArrowDown",
        value: function handleArrowDown(event2) {
          var props2 = this.props;
          var focusedItemIndex = this.state.focusedItem != null ? this.state.focusedItem : -1;
          var newFocusedItemIndex = (0, _getNextNavigableItem.default)(props2.items, focusedItemIndex, 1);
          if (newFocusedItemIndex == null) {
            return;
          }
          this.setFocusedIndex(newFocusedItemIndex);
        }
      }, {
        key: "handleArrowLeft",
        value: function handleArrowLeft(event2) {
          if (this.props.rtl) {
            this.openSubMenuAction(this.state.focusedItem);
          } else {
            this.closeSubMenuAction();
          }
        }
      }, {
        key: "handleArrowRight",
        value: function handleArrowRight(event2) {
          if (this.props.rtl) {
            this.closeSubMenuAction();
          } else {
            this.openSubMenuAction(this.state.focusedItem);
          }
        }
      }, {
        key: "handleEnterOnFocusedItem",
        value: function handleEnterOnFocusedItem(event2) {
          var focusedItem = this.getFocusedItem();
          if (this.props.simulateClickOnEnterKeyPress && focusedItem != null && typeof focusedItem.handleClick === "function") {
            focusedItem.handleClick({
              stopPropagation: function stopPropagation() {
              }
            });
          }
        }
      }, {
        key: "handleSpaceOnFocusedItem",
        value: function handleSpaceOnFocusedItem() {
          var activeItemProps = this.getFocusedItemProps();
          if (!activeItemProps) {
            return;
          }
          this.handleSelectionChange({
            name: activeItemProps.name,
            value: activeItemProps.value,
            checked: !activeItemProps.checked,
            multiple: activeItemProps.multiple
          });
        }
      }, {
        key: "handleOnBlur",
        value: function handleOnBlur(event2) {
          var _this5 = this;
          if (typeof this.props.onBlur === "function") {
            this.props.onBlur(event2);
          }
          if (this.props.stopBlurPropagation) {
            event2.stopPropagation();
          }
          if (this.preventOnBlurRecursiveClose) {
            return;
          }
          this.dismissTriggeredByBlur = true;
          setTimeout(function() {
            if (!_this5.hasGeneralFocus()) {
              _this5.dismiss(event2);
            }
          }, _ua.IS_IE ? this.props.hideSubMenuDelay : 20);
        }
      }, {
        key: "dismiss",
        value: function dismiss(event2) {
          this.closeSubmenuRecursively();
          this.props.onDismiss(event2);
        }
      }, {
        key: "scrollItemIntoView",
        value: function scrollItemIntoView(index2) {
          var itemNode = this.getItemDOMNodeByIndex(index2);
          if (!this.scroller || !itemNode) {
            return;
          }
          this.scroller.scrollIntoView(itemNode);
        }
      }, {
        key: "closeSubmenuRecursively",
        value: function closeSubmenuRecursively() {
          this.closeSubMenu();
          this.props.closeSubmenuRecursively();
        }
      }, {
        key: "closeSubMenuAction",
        value: function closeSubMenuAction() {
          if (this.hasSubMenuOpened()) {
            this.closeSubMenu();
          } else if (this.isSubMenu()) {
            this.preventOnBlurRecursiveClose = true;
            this.props.closeSubMenu({
              autoFocus: true
            });
          }
        }
      }, {
        key: "openSubMenuAction",
        value: function openSubMenuAction(focusedItemIndex) {
          var focusedItem = this.getItemByIndex(focusedItemIndex);
          if (!focusedItem) {
            return;
          }
          if (focusedItem && !focusedItem.hasSubmenu()) {
            return;
          }
          if (focusedItemIndex === this.state.activeSubMenuIndex) {
            this.subMenu && this.subMenu.focusFirstItem();
            return;
          }
          var menuOffset = focusedItem && focusedItem.getOffset();
          this.setSubMenu({
            menuOffset,
            index: focusedItemIndex
          });
        }
      }, {
        key: "onActivate",
        value: function onActivate() {
          if (!this.state.activated) {
            this.setState({
              activated: true
            });
            if (this.props.onActivate) {
              this.props.onActivate();
            }
          }
        }
      }, {
        key: "onInactivate",
        value: function onInactivate(options) {
          if (this.state.activated) {
            this.setState({
              activated: false
            });
            if (this.props.onInactivate) {
              this.props.onInactivate(options);
            }
          }
        }
      }, {
        key: "handleSubMenuMouseEnter",
        value: function handleSubMenuMouseEnter() {
          this.setState({
            mouseOverSubMenu: true
          });
        }
      }, {
        key: "handleSubMenuMouseLeave",
        value: function handleSubMenuMouseLeave() {
          this.setState({
            mouseOverSubMenu: false
          });
        }
      }, {
        key: "isSubMenuActive",
        value: function isSubMenuActive() {
          return this.state.subMenuActive;
        }
      }, {
        key: "onSubMenuActivate",
        value: function onSubMenuActivate() {
          this.setState({
            subMenuActive: true
          });
          if (this.closeSubmenuTimeout) {
            clearTimeout(this.closeSubmenuTimeout);
          }
        }
      }, {
        key: "onSubMenuInactivate",
        value: function onSubMenuInactivate(submenuConfig) {
          var _this6 = this;
          var ts = +/* @__PURE__ */ new Date();
          var nextItem = this.state.nextItem;
          var nextTimestamp = this.state.nextTimestamp || 0;
          this.setState({
            subMenuActive: false,
            timestamp: ts
          }, function() {
            setTimeout(function() {
              if (ts != _this6.state.timestamp || nextItem && ts - nextTimestamp < 100) {
                _this6.setSubMenu({
                  menuOffset: _this6.state.nextOffset,
                  index: _this6.state.nextActiveSubMenuIndex
                }, function() {
                  _this6.focus();
                });
                return;
              } else {
                _this6.focus();
              }
              var mouseHasEnteredSubmenuParentItem = submenuConfig && submenuConfig.parentIndex === _this6.itemOverIndex;
              if (!_this6.isSubMenuActive() && !mouseHasEnteredSubmenuParentItem) {
                _this6.closeSubMenu({
                  autoFocus: submenuConfig && submenuConfig.hasFocus
                });
              }
            }, 10);
          });
        }
      }, {
        key: "onMenuItemMouseEnter",
        value: function onMenuItemMouseEnter(_ref) {
          var menuOffset = _ref.menuOffset, index2 = _ref.index, hasSubMenu = _ref.hasSubMenu;
          if (!this.componentIsMounted) {
            return;
          }
          this.itemOverIndex = index2;
          if (!hasSubMenu) {
            if (this.state.activeSubMenuIndex != null) {
              this.setNextSubmenu({
                menuOffset: null,
                index: null
              });
            }
            return;
          }
          if (this.state.activeSubMenuIndex == null) {
            this.setSubMenu({
              menuOffset,
              index: index2
            });
          } else {
            this.setNextSubmenu({
              menuOffset,
              index: index2
            });
          }
        }
      }, {
        key: "onMenuItemMouseLeave",
        value: function onMenuItemMouseLeave(_ref2) {
          var leaveOffset = _ref2.leaveOffset, index2 = _ref2.index, event2 = _ref2.event;
          if (this.itemOverIndex === index2) {
            this.itemOverIndex = null;
          }
          if (!leaveOffset) {
            return;
          }
          var elementAtMousePosition = globalObject.document.elementFromPoint(leaveOffset.x, leaveOffset.y);
          if (elementAtMousePosition === this.subMenuWrap || (0, _containsNode.default)(this.subMenuWrap, elementAtMousePosition)) {
            return;
          }
          if (this.state.activeSubMenuIndex !== null) {
            this.delayCloseSubmenu(leaveOffset);
          }
          if (this.showTimeout) {
            clearTimeout(this.showTimeout);
          }
        }
      }, {
        key: "delayCloseSubmenu",
        value: function delayCloseSubmenu() {
          var _this7 = this;
          if (!this.componentIsMounted) {
            return;
          }
          if (this.closeSubmenuTimeoutId) {
            return;
          }
          this.closeSubmenuTimeout = setTimeout(function() {
            _this7.closeSubmenuTimeout = null;
            _this7.setSubMenu({
              menuOffset: _this7.state.nextOffset,
              index: _this7.state.nextActiveSubMenuIndex
            });
          }, 100);
        }
      }, {
        key: "removeMouseMoveListener",
        value: function removeMouseMoveListener() {
          if (this.onWindowMouseMove) {
            globalObject.removeEventListener("mousemove", this.onWindowMouseMove);
            this.onWindowMouseMove = null;
          }
        }
      }, {
        key: "setSubMenu",
        value: function setSubMenu() {
          var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, menuOffset = _ref3.menuOffset, _ref3$index = _ref3.index, index2 = _ref3$index === void 0 ? null : _ref3$index;
          var callback = arguments.length > 1 ? arguments[1] : void 0;
          this.removeMouseMoveListener();
          if (!this.componentIsMounted) {
            return;
          }
          if (this.state.activeSubMenuIndex === index2) {
            if (callback) {
              callback();
            }
            return;
          }
          if (this.hasItemSubMenu(index2) && !this.state.mouseInside) {
            this.onInactivate();
          }
          this.setState({
            menuOffset,
            activeSubMenuIndex: index2,
            nextOffset: null,
            nextTimestamp: null,
            timestamp: +/* @__PURE__ */ new Date()
          }, callback);
        }
      }, {
        key: "setNextSubmenu",
        value: function setNextSubmenu() {
          var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref4$menuOffset = _ref4.menuOffset, menuOffset = _ref4$menuOffset === void 0 ? null : _ref4$menuOffset, _ref4$index = _ref4.index, index2 = _ref4$index === void 0 ? null : _ref4$index;
          var ts = +/* @__PURE__ */ new Date();
          this.setState({
            timestamp: ts,
            nextOffset: menuOffset,
            nextActiveSubMenuIndex: index2,
            nextTimestamp: +/* @__PURE__ */ new Date()
          });
        }
      }, {
        key: "closeSubMenu",
        value: function closeSubMenu(options) {
          return;
          this.setSubMenu();
          if (options && options.autoFocus) {
            this.focus();
          }
        }
      }, {
        key: "onMenuItemExpanderClick",
        value: function onMenuItemExpanderClick(event2) {
          event2.nativeEvent.expanderClick = true;
        }
      }, {
        key: "onMenuItemClick",
        value: function onMenuItemClick() {
          var event2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var itemProps = arguments.length > 1 ? arguments[1] : void 0;
          var index2 = arguments.length > 2 ? arguments[2] : void 0;
          var props2 = this.props;
          var stopped = event2 && event2.isPropagationStopped ? event2.isPropagationStopped() : false;
          if (props2.stopClickPropagation && event2.stopPropagation) {
            event2.stopPropagation();
          }
          if (_isMobile.default && itemProps && event2 && event2.nativeEvent && event2.nativeEvent.expanderClick) {
            var offset = {
              x: event2.pageX,
              y: event2.pageY
            };
            var menuOffset = (0, _getRegionRelativeToParent.default)(event2.currentTarget, props2.rootClassName);
            this.onMenuItemMouseEnter({
              hasSubMenu: itemProps.hasSubMenu,
              menuOffset,
              index: itemProps.index
            });
            return;
          }
          if (!stopped) {
            props2.onClick(event2, itemProps, index2);
            if (_isMobile.default && props2.onTouchStart) {
              props2.onTouchStart(event2, itemProps, index2);
            }
            var dismissOnClick = itemProps && itemProps.item && itemProps.item.dismissOnClick !== void 0 ? itemProps.item.dismissOnClick : props2.dismissOnClick;
            if (props2.autoDismiss) {
              if (!itemProps.hasSubMenu) {
                this.dismiss();
              } else if (dismissOnClick) {
                props2.closeSubmenuRecursively();
              }
            } else if (dismissOnClick) {
              props2.closeSubmenuRecursively();
            }
            if (props2.selectOnClick && itemProps.name !== void 0) {
              this.handleSelectionChange({
                name: itemProps.name,
                value: itemProps.value,
                checked: !itemProps.checked,
                multiple: itemProps.multiple
              });
            }
            this.onChildClick(event2, itemProps);
          }
          if (!this.isSeparator(index2)) {
            this.setFocusedIndex(index2);
          }
        }
      }, {
        key: "onChildClick",
        value: function onChildClick(event2, props2) {
          if (this.props.onChildClick) {
            this.props.onChildClick(event2, props2);
          }
          if (this.props.parentMenu) {
            this.props.parentMenu.onChildClick(event2, props2);
          }
        }
      }, {
        key: "setupShowHideDelay",
        value: function setupShowHideDelay() {
          var _this8 = this;
          var setSubMenu = this.setSubMenu;
          this.setSubMenu = function() {
            var _ref5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, menuOffset = _ref5.menuOffset, index2 = _ref5.index;
            var callback = arguments.length > 1 ? arguments[1] : void 0;
            if (_this8.showTimeout) {
              clearTimeout(_this8.showTimeout);
            }
            if (_this8.hideTimeout) {
              clearTimeout(_this8.hideTimeout);
            }
            if (index2 != null) {
              if (_this8.props.showSubMenuDelay) {
                _this8.showTimeout = setTimeout(function() {
                  return setSubMenu({
                    menuOffset,
                    index: index2
                  }, callback);
                }, _this8.props.showSubMenuDelay);
              } else {
                setSubMenu({
                  menuOffset,
                  index: index2
                }, callback);
              }
            } else {
              if (_this8.props.hideSubMenuDelay) {
                _this8.hideTimeout = setTimeout(function() {
                  return setSubMenu({
                    menuOffset,
                    index: index2
                  }, callback);
                }, _this8.props.hideSubMenuDelay);
              } else {
                setSubMenu({
                  menuOffset,
                  index: index2
                }, callback);
              }
            }
          };
        }
      }, {
        key: "setupEnterAnimation",
        value: function setupEnterAnimation() {
          var _this9 = this;
          setTimeout(function() {
            var enableAnimation = _this9.props.enableAnimation && _this9.props.subMenu || _this9.props.enableRootAnimation && !_this9.props.subMenu;
            if (_this9.componentIsMounted) {
              _this9.setState({
                hidden: false,
                enableAnimation
              });
            }
            if (enableAnimation) {
              setTimeout(function() {
                if (_this9.componentIsMounted) {
                  _this9.setState({
                    transitionStart: true
                  });
                }
                setTimeout(function() {
                  if (_this9.componentIsMounted) {
                    _this9.setState({
                      transitionEnded: true
                    });
                  }
                }, 16);
              }, 16);
            }
          }, 0);
        }
      }, {
        key: "checkAlignment",
        value: function checkAlignment(props2, skipReset, alignTo) {
          var _this10 = this;
          props2 = props2 || this.props;
          alignTo = alignTo || props2.alignTo;
          if (alignTo && alignTo instanceof HTMLElement && !(0, _containsNode.default)(document.body, alignTo)) {
            return;
          }
          if (props2.visible === false) {
            return;
          }
          if ((props2.constrainTo || alignTo) && !props2.subMenu) {
            var doAlign = function doAlign2() {
              var props3 = _this10.props;
              var alignPositions = _this10.getAlignPositions(props3);
              var domNode = _this10.node;
              if (!domNode) {
                return;
              }
              domNode.style.visibility = "";
              var alignOffset = (0, _prepareAlignOffset.default)(props3.alignOffset);
              var domRegion = _regionAlign.default.from(domNode);
              var actualRegion = domRegion.clone();
              var constrainRegion = props3.constrainTo ? (0, _getConstrainRegion.default)(props3.constrainTo, domNode) : null;
              var positionStyle;
              if (alignTo) {
                var alignRegion = getAlignToRegion(alignTo, domNode);
                actualRegion.alignTo(alignRegion, alignPositions, {
                  offset: alignOffset,
                  constrain: constrainRegion
                });
                var offsetParent = domNode.offsetParent;
                if (_ua.IS_FF && offsetParent === document.body && getComputedStyle(domNode).position === "fixed") {
                  offsetParent = null;
                }
                var offsetParentRect = offsetParent ? null : domNode.getBoundingClientRect();
                var offsetParentRegion = _regionAlign.default.from(offsetParent || {
                  top: offsetParentRect.top,
                  left: offsetParentRect.left
                });
                var newTop = actualRegion.top - offsetParentRegion.top;
                var newLeft = actualRegion.left - offsetParentRegion.left;
                var transform = "translate3d(".concat(Math.floor(newLeft), "px, ").concat(Math.floor(newTop), "px, 0px)");
                positionStyle = {
                  transform,
                  top: 0,
                  left: 0
                };
              }
              if (constrainRegion) {
                positionStyle = positionStyle || {};
                if (actualRegion.bottom >= constrainRegion.bottom) {
                  positionStyle.maxHeight = constrainRegion.bottom - actualRegion.top;
                }
              }
              if (positionStyle) {
                _this10.setState({
                  positionStyle
                });
              }
            };
            if (!skipReset) {
              this.node.style.transform = "translate3d(0px, 0px, 0px)";
              this.node.style.visibility = "hidden";
              this.node.style.top = "0px";
              this.node.style.left = "0px";
            }
            raf(doAlign);
          }
        }
      }, {
        key: "setFocusedIndex",
        value: function setFocusedIndex(newFocusedItem) {
          if (this.props.enableKeyboardNavigation) {
            var focusedItem = this.state.focusedItem;
            if (focusedItem === newFocusedItem) {
              newFocusedItem = null;
            }
            this.scrollItemIntoView(newFocusedItem);
            this.setState({
              focusedItem: newFocusedItem
            });
          }
        }
      }, {
        key: "getItemDOMNodeByIndex",
        value: function getItemDOMNodeByIndex(index2) {
          var item = this.getItemByIndex(index2);
          var itemNode = item && item.getDOMNode();
          return itemNode;
        }
      }, {
        key: "getItemByIndex",
        value: function getItemByIndex(index2) {
          return this.childrenRefs[index2];
        }
      }, {
        key: "getItemPropsByIndex",
        value: function getItemPropsByIndex(index2) {
          var item = this.getItemByIndex(index2);
          return item && item.props;
        }
      }, {
        key: "getFocusedItemProps",
        value: function getFocusedItemProps() {
          var focusedItemIndex = this.state.focusedItem;
          var focusedItemProps = this.getItemPropsByIndex(focusedItemIndex);
          return focusedItemProps;
        }
      }, {
        key: "getFocusedItem",
        value: function getFocusedItem() {
          return this.state.focusedItem != null && this.getItemByIndex(this.state.focusedItem);
        }
      }, {
        key: "focus",
        value: function focus() {
          if (!this.node) {
            return;
          }
          if (this.node.focus) {
            this.node.focus();
          }
        }
      }, {
        key: "hasSubMenuOpened",
        value: function hasSubMenuOpened() {
          return this.state.activeSubMenuIndex != null;
        }
      }, {
        key: "isSubMenu",
        value: function isSubMenu() {
          return !!this.props.subMenu;
        }
      }, {
        key: "doesAnyItemHasSubMenu",
        value: function doesAnyItemHasSubMenu() {
          var props2 = this.props;
          return props2.items && !!props2.items.filter(function(item) {
            return item.items && item.items.length;
          }).length;
        }
      }, {
        key: "dosAnyItemHaveSelectInput",
        value: function dosAnyItemHaveSelectInput() {
          var _this11 = this;
          var props2 = this.props;
          return props2.items && !!props2.items.filter(function(item) {
            return item[_this11.props.nameProperty];
          }).length;
        }
      }, {
        key: "hasGeneralFocus",
        value: function hasGeneralFocus() {
          var hasFocus = this.hasFocus();
          if (hasFocus) {
            return hasFocus;
          }
          if (this.hasSubMenuOpened()) {
            return this.hasSubMenuFocus();
          }
          return this.hasChildFocus();
        }
      }, {
        key: "hasSubMenuFocus",
        value: function hasSubMenuFocus() {
          if (this.subMenu) {
            return this.subMenu.hasFocus();
          }
          return null;
        }
      }, {
        key: "hasFocus",
        value: function hasFocus() {
          return globalObject.document ? this.node === globalObject.document.activeElement : false;
        }
      }, {
        key: "hasChildFocus",
        value: function hasChildFocus() {
          if (!globalObject.document) {
            return false;
          }
          return (0, _containsNode.default)(this.node, globalObject.document.activeElement);
        }
      }, {
        key: "onSubmenuWillUnmount",
        value: function onSubmenuWillUnmount(instance, config) {
          var _this12 = this;
          if (config && config.hasFocus) {
            setTimeout(function() {
              _this12.focus();
            }, 0);
          }
        }
      }, {
        key: "focusFirstItem",
        value: function focusFirstItem() {
          var fistNonDisabledItem = (0, _getFirstNonDisabledItem.default)(this.props.items);
          this.focusItem(fistNonDisabledItem);
        }
      }, {
        key: "focusItem",
        value: function focusItem(index2) {
          this.focus();
          this.setFocusedIndex(index2);
        }
      }, {
        key: "getSubmenuNode",
        value: function getSubmenuNode() {
          return this.subMenu && this.subMenu.getNode();
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this.node;
        }
      }, {
        key: "getSelected",
        value: function getSelected() {
          return this.isSelectedControlled() ? this.props.selected : this.state.selected;
        }
      }, {
        key: "isSelectedControlled",
        value: function isSelectedControlled() {
          return this.props.selected !== void 0;
        }
      }, {
        key: "handleSelectionChange",
        value: function handleSelectionChange(_ref6) {
          var name = _ref6.name, value = _ref6.value, checked = _ref6.checked, multiple = _ref6.multiple;
          var newSelected = _objectSpread({}, this.getSelected());
          var options = {
            name,
            value,
            checked,
            multiple
          };
          if (!multiple) {
            newSelected[name] = value;
          } else if (checked) {
            newSelected[name] = value === void 0 ? name : value;
          }
          if (!checked) {
            if (multiple || this.props.allowUnselect) {
              delete newSelected[name];
            }
          }
          this.setSelected(newSelected, options);
        }
      }, {
        key: "setSelected",
        value: function setSelected(newSelected, options) {
          if (!this.isSelectedControlled()) {
            this.setState({
              selected: newSelected
            });
          }
          this.props.onSelectionChange(newSelected, options);
        }
      }, {
        key: "handleSubmenuSelectionChange",
        value: function handleSubmenuSelectionChange(selected, options) {
          this.setSelected(selected, options);
        }
      }, {
        key: "getExpandedIndex",
        value: function getExpandedIndex() {
          return this.state.activeSubMenuIndex;
        }
      }, {
        key: "isSeparator",
        value: function isSeparator(index2) {
          var props2 = this.props;
          var separatorIndexes = (0, _getSeparatorIndexes.default)(props2.items);
          return separatorIndexes.indexOf(index2) !== -1;
        }
      }]);
      return InovuaMenu2;
    }(_reactClass.default);
    InovuaMenu.defaultProps = {
      rootClassName: "inovua-react-toolkit-menu",
      depth: 0,
      rtl: false,
      isMenu: true,
      enableScroll: true,
      submenuStyle: null,
      scrollerProps: {},
      theme: "default-light",
      dismissOnClick: true,
      disableScroller: false,
      shadow: true,
      submenuAlignOffset: _submenuAlignPositions.alignOffsetLTR,
      rtlSubmenuAlignOffset: _submenuAlignPositions.alignOffsetRTL,
      showSubMenuDelay: 150,
      hideSubMenuDelay: 150,
      expanderSize: 10,
      scrollOnMouseEnter: true,
      onClick: function onClick() {
      },
      onSelectionChange: function onSelectionChange() {
      },
      columns: ["label"],
      items: null,
      maxHeight: "auto",
      scrollArrowIncrementType: "step",
      enableAnimation: true,
      fadeDuration: 100,
      fadeTransitionFunction: "ease",
      enableRootAnimation: false,
      itemStyle: {},
      itemOverStyle: {},
      itemDisabledStyle: {},
      itemExpandedStyle: {},
      cellStyle: {},
      stopClickPropagation: true,
      stopBlurPropagation: true,
      scrollProps: {},
      inTriangleWaitDelay: 300,
      alignOffset: {
        x: 0,
        y: 0
      },
      simulateClickOnEnterKeyPress: true,
      enableKeyboardNavigation: true,
      defaultFocusedItem: null,
      autoFocus: false,
      closeSubMenu: function closeSubMenu() {
      },
      closeSubmenuRecursively: function closeSubmenuRecursively() {
      },
      onDismiss: function onDismiss() {
      },
      componentWillUnmount: function componentWillUnmount() {
      },
      componentDidMount: function componentDidMount() {
      },
      useMouseInTriangleCheck: false,
      allowUnselect: false,
      enableSelection: false,
      nameProperty: "name",
      valueProperty: "value",
      selectionInputPosition: "start",
      defaultSelected: {},
      selectOnClick: true,
      checkIconSize: 16,
      radioIconSize: 16,
      notifyResizeDelay: 16,
      browserNativeSelectInputs: false,
      showWarnings: !_uglified.default
    };
    InovuaMenu.propTypes = {
      rootClassName: _propTypes.default.string,
      items: _propTypes.default.array,
      columns: _propTypes.default.array,
      dismissOnClick: _propTypes.default.bool,
      autoDismiss: _propTypes.default.bool,
      disableScroller: _propTypes.default.bool,
      showSubMenuDelay: _propTypes.default.number,
      hideSubMenuDelay: _propTypes.default.number,
      notifyResizeDelay: _propTypes.default.number,
      scrollOnMouseEnter: _propTypes.default.bool,
      padding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      border: _propTypes.default.string,
      borderRadius: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      rowActiveStyle: _propTypes.default.object,
      rowOverStyle: _propTypes.default.object,
      rowStyle: _propTypes.default.object,
      maxHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      submenuMaxHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      minSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
        height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      })]),
      maxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
        height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      })]),
      onClick: _propTypes.default.func,
      showScrollArrows: _propTypes.default.bool,
      scrollProps: _propTypes.default.object,
      scrollArrowIncrementType: _propTypes.default.oneOf(["step", "page"]),
      renderScroller: _propTypes.default.func,
      enableAnimation: _propTypes.default.bool,
      fadeDuration: _propTypes.default.number,
      fadeTransitionFunction: _propTypes.default.string,
      enableRootAnimation: _propTypes.default.bool,
      itemStyle: _propTypes.default.object,
      itemClassName: _propTypes.default.string,
      itemActiveStyle: _propTypes.default.object,
      itemActiveClassName: _propTypes.default.string,
      itemOverStyle: _propTypes.default.object,
      itemOverClassName: _propTypes.default.string,
      itemDisabledStyle: _propTypes.default.object,
      itemDisabledClassName: _propTypes.default.string,
      itemExpandedStyle: _propTypes.default.object,
      itemExpandedClassName: _propTypes.default.string,
      itemFocusedStyle: _propTypes.default.object,
      itemFocusedClassName: _propTypes.default.string,
      itemOverFocusedStyle: _propTypes.default.object,
      visible: _propTypes.default.bool,
      itemHeight: _propTypes.default.number,
      cellStyle: _propTypes.default.object,
      secondaryLabelStyle: _propTypes.default.object,
      labelStyle: _propTypes.default.object,
      titleStyle: _propTypes.default.object,
      alignTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func, _propTypes.default.string]),
      inTriangleWaitDelay: _propTypes.default.number,
      alignPositions: _propTypes.default.arrayOf(_propTypes.default.string),
      alignOffset: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object, _propTypes.default.number]),
      submenuAlignOffset: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }), _propTypes.default.number]),
      rtlSubmenuAlignOffset: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.shape({
        x: _propTypes.default.number,
        y: _propTypes.default.number
      }), _propTypes.default.number]),
      alignPosition: _propTypes.default.oneOf([1, -1]),
      rtl: _propTypes.default.bool,
      enableKeyboardNavigation: _propTypes.default.bool,
      defaultFocusedItem: _propTypes.default.number,
      autoFocus: _propTypes.default.bool,
      closeSubMenu: _propTypes.default.func,
      closeSubmenuRecursively: _propTypes.default.func,
      simulateClickOnEnterKeyPress: _propTypes.default.bool,
      onChildClick: _propTypes.default.func,
      onDismiss: _propTypes.default.func,
      expanderStyle: _propTypes.default.object,
      depth: _propTypes.default.number,
      isMenu: _propTypes.default.bool,
      constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
      enableScroll: _propTypes.default.bool,
      submenuStyle: _propTypes.default.object,
      scrollerProps: _propTypes.default.object,
      theme: _propTypes.default.string,
      stopClickPropagation: _propTypes.default.bool,
      componentWillUnmount: _propTypes.default.func,
      componentDidMount: _propTypes.default.func,
      itemStyleProps: _propTypes.default.object,
      childrenLength: _propTypes.default.number,
      separatorIndexes: _propTypes.default.string,
      tableClassName: _propTypes.default.string,
      shadow: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      stopBlurPropagation: _propTypes.default.bool,
      submenuProps: _propTypes.default.object,
      menuHasSubmenu: _propTypes.default.bool,
      depthSet: _propTypes.default.bool,
      subMenu: _propTypes.default.bool,
      parentIndex: _propTypes.default.number,
      parentMenu: _propTypes.default.object,
      onActivate: _propTypes.default.func,
      onInactivate: _propTypes.default.func,
      expander: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool, _propTypes.default.func]),
      expanderSize: _propTypes.default.number,
      overStyle: _propTypes.default.object,
      activeStyle: _propTypes.default.object,
      disabledStyle: _propTypes.default.object,
      expandedStyle: _propTypes.default.object,
      menuSeparatorStyle: _propTypes.default.object,
      useMouseInTriangleCheck: _propTypes.default.bool,
      selected: _propTypes.default.object,
      defaultSelected: _propTypes.default.object,
      allowUnselect: _propTypes.default.bool,
      enableSelection: _propTypes.default.bool,
      nativeScroll: _propTypes.default.bool,
      scrollContainerProps: _propTypes.default.object,
      nameProperty: _propTypes.default.string,
      valueProperty: _propTypes.default.string,
      renderCheckInput: _propTypes.default.func,
      renderRadioInput: _propTypes.default.func,
      onSelectionChange: _propTypes.default.func,
      selectionInputPosition: _propTypes.default.oneOf(["start", "end"]),
      selectOnClick: _propTypes.default.bool,
      checkIconSize: _propTypes.default.number,
      radioIconSize: _propTypes.default.number,
      showWarnings: _propTypes.default.bool,
      updatePositionOnScroll: _propTypes.default.bool,
      browserNativeSelectInputs: _propTypes.default.bool,
      dismissWithEscape: _propTypes.default.bool
    };
    var _default = InovuaMenu;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/src/index.js
var require_src12 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Cell", {
      enumerable: true,
      get: function get() {
        return _MenuItemCell.default;
      }
    });
    Object.defineProperty(exports, "Item", {
      enumerable: true,
      get: function get() {
        return _MenuItem.default;
      }
    });
    Object.defineProperty(exports, "ItemCell", {
      enumerable: true,
      get: function get() {
        return _MenuItemCell.default;
      }
    });
    Object.defineProperty(exports, "Separator", {
      enumerable: true,
      get: function get() {
        return _MenuSeparator.default;
      }
    });
    exports.default = void 0;
    var _Menu = _interopRequireDefault(require_Menu());
    var _MenuItem = _interopRequireDefault(require_MenuItem());
    var _MenuItemCell = _interopRequireDefault(require_MenuItemCell());
    var _MenuSeparator = _interopRequireDefault(require_MenuSeparator());
    var _default = _Menu.default;
    exports.default = _default;
    _Menu.default.Item = _MenuItem.default;
    _Menu.default.Item.Cell = _MenuItemCell.default;
    _MenuItem.default.Cell = _MenuItemCell.default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Menu/index.js
var require_Menu2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Menu/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src12());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Button/src/prepareClassName.js
var require_prepareClassName = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Button/src/prepareClassName.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _join = _interopRequireDefault(require_join());
    function prepareClassName() {
      var states = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var classNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var disabled = states.disabled, icon = states.icon, active = states.active, pressed = states.pressed, over = states.over, children = states.children, focused = states.focused, iconFirst = states.iconFirst, rtl = states.rtl, ellipsis = states.ellipsis, align = states.align, verticalAlign = states.verticalAlign, wrap = states.wrap, overflow = states.overflow, iconPosition = states.iconPosition;
      var className = classNames.className, rootClassName = classNames.rootClassName, disabledClassName = classNames.disabledClassName, activeClassName = classNames.activeClassName, pressedClassName = classNames.pressedClassName, overClassName = classNames.overClassName, focusedClassName = classNames.focusedClassName, theme = classNames.theme;
      var preparedClassname = (0, _join.default)(className, rootClassName, theme && "".concat(rootClassName, "--theme-").concat(theme), disabled && disabledClassName, disabled && "".concat(rootClassName, "--disabled"), active && activeClassName, active && "".concat(rootClassName, "--active"), pressed && pressedClassName, pressed && "".concat(rootClassName, "--pressed"), over && overClassName, over && "".concat(rootClassName, "--over"), focused && focusedClassName, focused && "".concat(rootClassName, "--focused"), rtl ? "".concat(rootClassName, "--rtl") : "".concat(rootClassName, "--ltr"), ellipsis && "".concat(rootClassName, "--ellipsis"), align && "".concat(rootClassName, "--align-").concat(align), !children && "".concat(rootClassName, "--no-children"), verticalAlign && "".concat(rootClassName, "--vertical-align-").concat(verticalAlign), overflow === true && "".concat(rootClassName, "--overflow-visible"), overflow === false && "".concat(rootClassName, "--overflow-hidden"), wrap === true && "".concat(rootClassName, "--wrap"), wrap === false && "".concat(rootClassName, "--nowrap"), icon && "".concat(rootClassName, "--has-icon"), iconPosition && "".concat(rootClassName, "--icon-position-").concat(iconPosition), iconFirst ? "".concat(rootClassName, "--icon-first") : "".concat(rootClassName, "--icon-last"));
      return preparedClassname;
    }
    var _default = prepareClassName;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Button/src/Button.js
var require_Button = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Button/src/Button.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _assign = _interopRequireDefault(require_assign());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _prepareClassName = _interopRequireDefault(require_prepareClassName());
    var _uglified = _interopRequireDefault(require_uglified());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var InovuaButton = function(_Component) {
      (0, _inherits2.default)(InovuaButton2, _Component);
      var _super = _createSuper(InovuaButton2);
      function InovuaButton2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaButton2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps, prevState) {
          if (!prevProps.disabled && _this.props.disabled && prevState.focused) {
            _this.handleBlur();
            _this.setState({
              mouseOver: false
            });
          }
          if (prevProps.disabled && !_this.props.disabled && _this.state.focused) {
            _this.handleBlur();
          }
        });
        _this.state = {
          mouseOver: false,
          active: false,
          pressed: _this.props.defaultPressed
        };
        _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleMouseEnter = _this.handleMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleMouseLeave = _this.handleMouseLeave.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleMouseDown = _this.handleMouseDown.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleMouseUp = _this.handleMouseUp.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2.default)(_this));
        _this.getRootRef = function(ref) {
          _this.rootNode = ref;
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaButton2, [{
        key: "handleKeyDown",
        value: function handleKeyDown(event2) {
          var key = event2.key;
          if (this.tagName != "button" && key == "Enter") {
            this.props.onClick(event2);
            event2.preventDefault();
          }
          if (this.props.onKeyDown) {
            this.props.onKeyDown(event2);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var buttonStates = this.getButtonStates();
          var style = this.prepareStyle(this.props, buttonStates);
          var className = (0, _prepareClassName.default)(buttonStates, props2);
          var domProps = _objectSpread(_objectSpread({}, (0, _cleanProps.default)(this.props, InovuaButton2.propTypes)), {}, {
            style,
            className,
            onClick: this.handleClick,
            onKeyDown: this.handleKeyDown,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            onMouseDown: this.handleMouseDown,
            onMouseUp: this.handleMouseUp,
            href: props2.href
          });
          var topBottomVerticalAlign = this.props.verticalAlign == "top" || this.props.verticalAlign == "bottom";
          var avoidButtonTag = !!this.props.icon || topBottomVerticalAlign;
          var TagName = this.props.tagName;
          if (!TagName && !avoidButtonTag) {
            TagName = "button";
          }
          if (TagName == "button" && avoidButtonTag) {
            if (this.props.showWarnings && console && console.warn) {
              console.warn(`Button html tags are not fully compatible with flexbox, so we're rendering a "div" instead. See http://stackoverflow.com/questions/35464067/flexbox-not-working-on-button-element-in-some-browsers for details.`);
            }
          }
          if (props2.href) {
            TagName = "a";
          }
          TagName = TagName || "div";
          this.tagName = TagName;
          if (TagName === "div" && domProps.tabIndex === void 0 && !this.props.disabled) {
            domProps.tabIndex = 0;
          }
          return _react.default.createElement(TagName, _objectSpread(_objectSpread({}, domProps), {}, {
            ref: this.getRootRef,
            children: this.prepareChildren(props2, buttonStates)
          }));
        }
      }, {
        key: "handleFocus",
        value: function handleFocus(event2) {
          if (this.props.disabled) {
            return;
          }
          this.setState({
            focused: true
          });
          this.props.onFocus(event2);
        }
      }, {
        key: "handleBlur",
        value: function handleBlur(event2) {
          this.setState({
            focused: false
          });
          this.props.onBlur(event2);
        }
      }, {
        key: "handleClick",
        value: function handleClick(event2) {
          var props2 = this.props;
          if (props2.disabled) {
            event2.preventDefault();
            event2.stopPropagation();
            return;
          }
          if (this.isToggleButon()) {
            this.toggle();
          }
          this.props.onClick(event2);
        }
      }, {
        key: "isToggleButon",
        value: function isToggleButon() {
          return this.isPressed() !== void 0;
        }
      }, {
        key: "toggle",
        value: function toggle() {
          var isPressed = this.isPressed();
          var newPressed = !isPressed;
          if (!this.isPressedControlled()) {
            this.setState({
              pressed: newPressed
            });
          }
          this.props.onToggle(newPressed);
        }
      }, {
        key: "isToggleButton",
        value: function isToggleButton() {
          return this.props.defaultPressed !== null || this.props.pressed !== null;
        }
      }, {
        key: "handleMouseEnter",
        value: function handleMouseEnter(event2) {
          var props2 = this.props;
          if (props2.disabled) {
            return;
          }
          this.setState({
            mouseOver: true
          });
          this.props.onMouseEnter(event2);
        }
      }, {
        key: "handleMouseLeave",
        value: function handleMouseLeave(event2) {
          var props2 = this.props;
          if (props2.disabled) {
            return;
          }
          this.setState({
            mouseOver: false
          });
          this.props.onMouseLeave(event2);
        }
      }, {
        key: "handleMouseUp",
        value: function handleMouseUp(event2) {
          var props2 = this.props;
          if (props2.disabled) {
            return;
          }
          this.setState({
            active: false
          });
          globalObject.removeEventListener("mouseup", this.handleMouseUp);
          props2.onMouseUp(event2);
          props2.onDeactivate(event2);
        }
      }, {
        key: "handleMouseDown",
        value: function handleMouseDown(event2) {
          var props2 = this.props;
          if (props2.disabled) {
            return;
          }
          this.setState({
            active: true
          });
          globalObject.addEventListener("mouseup", this.handleMouseUp);
          props2.onMouseDown(event2);
          props2.onActivate(event2);
        }
      }, {
        key: "isIconFirst",
        value: function isIconFirst() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          var iconPosition = props2.iconPosition, rtl = props2.rtl;
          var iconFirst = iconPosition == "left" && !rtl || iconPosition == "top" || rtl && iconPosition == "start" || rtl && iconPosition == "right" || !rtl && iconPosition == "start";
          return iconFirst;
        }
      }, {
        key: "prepareChildren",
        value: function prepareChildren(props2, buttonStates) {
          var _this2 = this;
          var children = props2.children;
          children = _react.default.createElement("div", {
            key: "text",
            className: "".concat(this.props.rootClassName, "__text"),
            children
          });
          var icon = this.props.icon;
          var rtl = this.props.rtl;
          if (icon) {
            var iconPosition = this.props.iconPosition;
            var iconFirst = this.isIconFirst(this.props);
            if (typeof icon == "function") {
              icon = icon(buttonStates);
            }
            var wrapIcon = function wrapIcon2(icon2) {
              return _react.default.createElement("div", {
                key: "iconWrapper",
                className: "".concat(_this2.props.rootClassName, "__icon-wrap") + (_this2.props.disabled ? " ".concat(_this2.props.rootClassName, "__icon-wrap--disabled") : ""),
                children: icon2
              });
            };
            if (iconFirst) {
              children = [wrapIcon(icon), children];
            } else {
              children = [children, wrapIcon(icon)];
            }
          }
          if (this.props.renderChildren) {
            children = this.props.renderChildren(children);
          }
          return children;
        }
      }, {
        key: "getButtonStates",
        value: function getButtonStates(props2) {
          props2 = props2 || this.props;
          return {
            disabled: props2.disabled,
            children: props2.children,
            active: this.isActive(),
            pressed: this.isPressed(),
            over: this.isOver(),
            focused: this.isFocused(),
            iconFirst: this.isIconFirst(),
            rtl: this.props.rtl,
            icon: this.props.icon,
            ellipsis: props2.ellipsis,
            align: props2.align,
            verticalAlign: props2.verticalAlign,
            wrap: props2.wrap,
            overflow: props2.overflow,
            iconPosition: this.props.icon ? this.props.iconPosition : void 0
          };
        }
      }, {
        key: "prepareStyle",
        value: function prepareStyle() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          var buttonStates = arguments.length > 1 ? arguments[1] : void 0;
          var style = typeof props2.style !== "function" ? (0, _assign.default)({}, props2.style) : props2.style(props2, buttonStates);
          if (props2.disabled) {
            (0, _assign.default)(style, props2.disabledStyle);
          } else {
            if (this.isPressed()) {
              (0, _assign.default)(style, props2.pressedStyle);
            }
            if (this.isFocused()) {
              (0, _assign.default)(style, props2.focusedStyle);
            }
            if (this.isOver()) {
              (0, _assign.default)(style, props2.overStyle);
            }
            if (this.isActive()) {
              (0, _assign.default)(style, this.props.activeStyle);
            }
          }
          return style;
        }
      }, {
        key: "isActive",
        value: function isActive() {
          return this.props.activeState == null ? !!this.state.active : this.props.activeState;
        }
      }, {
        key: "isOver",
        value: function isOver() {
          return this.props.overState == null ? !!this.state.mouseOver : this.props.overState;
        }
      }, {
        key: "isFocused",
        value: function isFocused() {
          return this.props.focusedState == null ? !!this.state.focused : this.props.focusedState;
        }
      }, {
        key: "isPressedControlled",
        value: function isPressedControlled() {
          return this.props.pressed != null;
        }
      }, {
        key: "isPressed",
        value: function isPressed() {
          return this.isPressedControlled() ? this.props.pressed : this.state.pressed;
        }
      }, {
        key: "getRootNode",
        value: function getRootNode() {
          return this.rootNode;
        }
      }]);
      return InovuaButton2;
    }(_react.Component);
    function emptyFn() {
    }
    InovuaButton.defaultProps = {
      isInovuaButton: true,
      theme: "default-light",
      rootClassName: "inovua-react-toolkit-button",
      align: "center",
      verticalAlign: "middle",
      ellipsis: true,
      href: null,
      iconPosition: "start",
      onFocus: emptyFn,
      onBlur: emptyFn,
      onToggle: emptyFn,
      onClick: emptyFn,
      onMouseEnter: emptyFn,
      onMouseUp: emptyFn,
      onMouseDown: emptyFn,
      onDeactivate: emptyFn,
      onMouseLeave: emptyFn,
      onActivate: emptyFn,
      showWarnings: !_uglified.default
    };
    InovuaButton.propTypes = {
      isInovuaButton: _propTypes.default.bool,
      tagName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
      primary: _propTypes.default.bool,
      disabled: _propTypes.default.bool,
      pressed: _propTypes.default.bool,
      defaultPressed: _propTypes.default.bool,
      href: _propTypes.default.string,
      align: _propTypes.default.oneOf(["start", "end", "center", "left", "right"]),
      verticalAlign: _propTypes.default.oneOf(["top", "middle", "center", "bottom"]),
      rtl: _propTypes.default.bool,
      wrap: _propTypes.default.bool,
      overflow: _propTypes.default.bool,
      icon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
      iconPosition: _propTypes.default.oneOf(["top", "bottom", "left", "right", "start", "end"]),
      style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
      disabledStyle: _propTypes.default.object,
      focusedStyle: _propTypes.default.object,
      pressedStyle: _propTypes.default.object,
      overStyle: _propTypes.default.object,
      activeStyle: _propTypes.default.object,
      className: _propTypes.default.string,
      activeClassName: _propTypes.default.string,
      overClassName: _propTypes.default.string,
      focusedClassName: _propTypes.default.string,
      disabledClassName: _propTypes.default.string,
      pressedClassName: _propTypes.default.string,
      theme: _propTypes.default.string,
      rootClassName: _propTypes.default.string,
      ellipsis: _propTypes.default.bool,
      onClick: _propTypes.default.func,
      onFocus: _propTypes.default.func,
      onBlur: _propTypes.default.func,
      onToggle: _propTypes.default.func,
      onMouseEnter: _propTypes.default.func,
      onMouseUp: _propTypes.default.func,
      onMouseDown: _propTypes.default.func,
      onDeactivate: _propTypes.default.func,
      onMouseLeave: _propTypes.default.func,
      onActivate: _propTypes.default.func,
      showWarnings: _propTypes.default.bool
    };
    var _default = InovuaButton;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Button/src/index.js
var require_src13 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Button/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _Button = _interopRequireDefault(require_Button());
    var _default = _Button.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Button/index.js
var require_Button2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Button/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src13());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/common/ToggleIcon.js
var require_ToggleIcon = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/common/ToggleIcon.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
    var _react = _interopRequireDefault(require_react());
    var _excluded = ["onClick", "className", "expanded", "size"];
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function ToggleIcon(_ref) {
      var onClick = _ref.onClick, className = _ref.className, expanded = _ref.expanded, _ref$size = _ref.size, size = _ref$size === void 0 ? 17 : _ref$size, rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, rest), {}, {
        className,
        onClick
      }), _react.default.createElement("svg", {
        height: size,
        width: size,
        viewBox: "0 0 24 24"
      }, expanded ? _react.default.createElement("path", {
        d: "M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z"
      }) : _react.default.createElement("path", {
        d: "M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"
      })));
    }
    var _default = ToggleIcon;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/DropdownButton/src/DropdownButton.js
var require_DropdownButton = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/DropdownButton/src/DropdownButton.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _regionAlign = _interopRequireDefault(require_region_align());
    var _join = _interopRequireDefault(require_join());
    var _Menu = _interopRequireDefault(require_Menu2());
    var _Button = _interopRequireDefault(require_Button2());
    var _ToggleIcon = _interopRequireDefault(require_ToggleIcon());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _containsNode = _interopRequireDefault(require_containsNode());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var ALIGN_OFFSET = {
      top: 5
    };
    var returnFalse = function returnFalse2() {
      return false;
    };
    var InovuaDropDownButton = function(_Component) {
      (0, _inherits2.default)(InovuaDropDownButton2, _Component);
      var _super = _createSuper(InovuaDropDownButton2);
      function InovuaDropDownButton2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaDropDownButton2);
        _this = _super.call(this, props2);
        _this.state = {
          expanded: props2.defaultExpanded,
          focused: false
        };
        _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleClickOutside = _this.handleClickOutside.bind((0, _assertThisInitialized2.default)(_this));
        _this.handleWindowScroll = _this.handleWindowScroll.bind((0, _assertThisInitialized2.default)(_this));
        _this.onMenuDismiss = _this.onMenuDismiss.bind((0, _assertThisInitialized2.default)(_this));
        _this.rootRef = function(ref) {
          _this.rootNode = ref;
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaDropDownButton2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          if (nextProps.shouldComponentUpdate) {
            return nextProps.shouldComponentUpdate(nextProps, nextState, this);
          }
          return true;
        }
      }, {
        key: "onMenuDismiss",
        value: function onMenuDismiss() {
          this.props.onDismiss();
        }
      }, {
        key: "handleKeyDown",
        value: function handleKeyDown(event2) {
          var key = event2.key;
          if (this.props.hideMenuOnEscape && this.getExpanded()) {
            this.collapse();
            event2.preventDefault();
          }
          if (this.props.onKeyDown) {
            this.props.onKeyDown(event2);
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateComponentReferenceRegion();
          if (this.props.dismissOnScroll) {
            window.addEventListener("scroll", this.handleWindowScroll, {
              capture: true
            });
            window.addEventListener("scroll", this.handleWindowScroll, {
              capture: false
            });
          }
          globalObject.addEventListener("click", this.handleClickOutside);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          globalObject.removeEventListener("click", this.handleClickOutside);
          globalObject.removeEventListener("scroll", this.handleWindowScroll, {
            capture: true
          });
          globalObject.removeEventListener("scroll", this.handleWindowScroll, {
            capture: false
          });
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var className = (0, _join.default)(props2.rootClassName, props2.className, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), this.state.focused && "".concat(props2.rootClassName, "--focused"), props2.disabled && "".concat(props2.rootClassName, "--disabled"), this.getExpanded() && "".concat(props2.rootClassName, "--expanded"), props2.rtl ? "".concat(props2.rootClassName, "--rtl") : "".concat(props2.rootClassName, "--ltr"));
          return _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props2, InovuaDropDownButton2.propTypes)), {}, {
            ref: this.rootRef,
            className
          }), this.renderButton(), this.renderMenu());
        }
      }, {
        key: "renderButton",
        value: function renderButton() {
          var _objectSpread2;
          var props2 = this.props;
          var className = "".concat(props2.rootClassName, "__button");
          var buttonProps = _objectSpread(_objectSpread(_objectSpread({}, this.getCommonProps()), {}, {
            key: "button",
            iconPosition: this.props.iconPosition || this.props.arrowPosition,
            style: _objectSpread({}, props2.buttonProps)
          }, props2.buttonProps), {}, (_objectSpread2 = {
            className,
            icon: props2.icon,
            disabled: props2.disabled,
            onClick: this.handleClick,
            rtl: props2.rtl,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
            onKeyDown: this.handleKeyDown
          }, (0, _defineProperty2.default)(_objectSpread2, "icon", [props2.icon && props2.icon.type ? (0, _react.cloneElement)(props2.icon, {
            key: "inovua-ddbuttonicon"
          }) : props2.icon, this.renderArrow()]), (0, _defineProperty2.default)(_objectSpread2, "children", props2.children), (0, _defineProperty2.default)(_objectSpread2, "tagName", "div"), _objectSpread2));
          var result;
          if (typeof props2.renderButton === "function") {
            result = props2.renderButton(buttonProps);
          }
          if (result === void 0) {
            result = _react.default.createElement(_Button.default, _objectSpread({}, buttonProps));
          }
          return result;
        }
      }, {
        key: "handleClick",
        value: function handleClick(event2) {
          if (this.props.hideMenuOnClick) {
            this.toggle();
          } else {
            this.expand();
          }
          this.props.onClick(event2);
        }
      }, {
        key: "handleFocus",
        value: function handleFocus(event2) {
          if (this.props.disabled) {
            return;
          }
          this.setState({
            focused: true
          });
          this.props.onFocus(event2);
        }
      }, {
        key: "handleBlur",
        value: function handleBlur(event2) {
          if (this.props.disabled) {
            return;
          }
          this.setState({
            focused: false
          });
          this.props.onBlur(event2);
        }
      }, {
        key: "expand",
        value: function expand() {
          this.setExpanded(true);
        }
      }, {
        key: "collapse",
        value: function collapse() {
          this.setExpanded(false);
        }
      }, {
        key: "toggle",
        value: function toggle() {
          var expanded = this.getExpanded();
          this.setExpanded(!expanded);
        }
      }, {
        key: "isExpandedControlled",
        value: function isExpandedControlled() {
          return this.props.expanded != void 0;
        }
      }, {
        key: "setExpanded",
        value: function setExpanded(expanded) {
          if (expanded === this.getExpanded()) {
            return null;
          }
          if (!this.isExpandedControlled()) {
            this.setState({
              expanded
            });
            this.updateComponentReferenceRegion();
          }
          if (!expanded) {
            this.props.onDismiss();
          }
          this.props.onExpandedChange(expanded);
        }
      }, {
        key: "getExpanded",
        value: function getExpanded() {
          return this.isExpandedControlled() ? this.props.expanded : this.state.expanded;
        }
      }, {
        key: "updateComponentReferenceRegion",
        value: function updateComponentReferenceRegion() {
          var node = this.props.getAlignNode ? this.props.getAlignNode() : this.rootNode;
          if (!node) {
            return null;
          }
          var referenceRegion = _regionAlign.default.from(node);
          this.setState({
            referenceRegion
          });
        }
      }, {
        key: "renderMenu",
        value: function renderMenu() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          var expanded = this.getExpanded();
          if (!expanded && !this.props.renderMenuWhenCollapsed) {
            return;
          }
          if (!props2.items || !props2.items.length) {
            return null;
          }
          var style = _objectSpread({}, props2.menuProps.style);
          if (!expanded) {
            style.display = "none";
          }
          var menuProps = _objectSpread(_objectSpread(_objectSpread({}, this.getCommonProps()), {}, {
            key: "menu",
            items: props2.items,
            alignOffset: ALIGN_OFFSET,
            constrainTo: props2.constrainTo
          }, props2.menuProps), {}, {
            alignTo: this.state.referenceRegion,
            alignPositions: props2.alignPositions,
            onChildClick: props2.onMenuClick,
            rtl: props2.rtl,
            style,
            visible: expanded,
            theme: "default-light",
            className: "".concat(props2.rootClassName, "__menu"),
            onDismiss: this.onMenuDismiss
          });
          if (!expanded && !this.prevExpanded && this.props.optimizeMenuSCUWhenCollapsed) {
            menuProps.shouldComponentUpdate = returnFalse;
          }
          this.prevExpanded = expanded;
          var MenuComp = this.props.menu ? this.props.menu : _Menu.default;
          if (!MenuComp) {
            return null;
          }
          var result;
          if (typeof props2.renderMenu === "function") {
            result = props2.renderMenu(menuProps);
          }
          if (result === void 0) {
            result = _react.default.createElement(MenuComp, _objectSpread({}, menuProps));
          }
          return result;
        }
      }, {
        key: "renderArrow",
        value: function renderArrow() {
          var props2 = this.props;
          var result = null;
          if (props2.arrow !== true) {
            if (typeof props2.arrow === "function") {
              result = props2.arrow(this.getExpanded());
            } else {
              result = props2.arrow;
            }
          }
          if (result === null) {
            result = _react.default.createElement(_ToggleIcon.default, {
              key: "icon",
              className: "".concat(props2.rootClassName, "__arrow"),
              expanded: this.getExpanded()
            });
          }
          return result;
        }
      }, {
        key: "getCommonProps",
        value: function getCommonProps() {
          var props2 = this.props;
          return {
            theme: props2.theme
          };
        }
      }, {
        key: "handleClickOutside",
        value: function handleClickOutside(event2) {
          var node = this.rootNode;
          var target = event2.target;
          if (!node || !target) {
            return null;
          }
          if (node !== target && !node.contains(target)) {
            if (this.props.hideMenuOnClickOutside) {
              this.collapse();
            }
          }
        }
      }, {
        key: "handleWindowScroll",
        value: function handleWindowScroll(event2) {
          if (this.getExpanded() && !(0, _containsNode.default)(this.rootNode, event2.target)) {
            this.setExpanded(false);
          }
        }
      }]);
      return InovuaDropDownButton2;
    }(_react.Component);
    function emptyFn() {
    }
    InovuaDropDownButton.defaultProps = {
      rootClassName: "inovua-react-toolkit-dropdown-button",
      theme: "default-light",
      menuProps: {},
      rtl: false,
      menu: null,
      alignPositions: ["tl-bl", "tr-br", "bl-tl", "br-tr", "tl-tr", "bl-br", "tr-tl", "tr-br"],
      arrow: true,
      arrowPosition: "end",
      constrainTo: true,
      disabled: false,
      hideMenuOnClick: true,
      hideMenuOnClickOutside: true,
      hideMenuOnEscape: true,
      onExpandedChange: emptyFn,
      onMenuClick: emptyFn,
      optimizeMenuSCUWhenCollapsed: false,
      onClick: emptyFn,
      onFocus: emptyFn,
      onBlur: emptyFn,
      onDismiss: emptyFn,
      defaultExpanded: false,
      dismissOnScroll: false,
      isInovuaButton: true
    };
    InovuaDropDownButton.propTypes = {
      theme: _propTypes.default.string,
      rtl: _propTypes.default.bool,
      dismissOnScroll: _propTypes.default.bool,
      icon: _propTypes.default.node,
      iconPosition: _propTypes.default.oneOf(["left", "right", "start", "end"]),
      rootClassName: _propTypes.default.string,
      menuProps: _propTypes.default.object,
      buttonProps: _propTypes.default.object,
      disabled: _propTypes.default.bool,
      menu: _propTypes.default.func,
      arrow: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool, _propTypes.default.func]),
      alignPositions: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),
      onDismiss: _propTypes.default.func,
      arrowPosition: _propTypes.default.oneOf(["left", "right", "start", "end"]),
      hideMenuOnClick: _propTypes.default.bool,
      hideMenuOnEscape: _propTypes.default.bool,
      hideMenuOnClickOutside: _propTypes.default.bool,
      renderMenuWhenCollapsed: _propTypes.default.bool,
      optimizeMenuSCUWhenCollapsed: _propTypes.default.bool,
      onExpandedChange: _propTypes.default.func,
      onMenuClick: _propTypes.default.func,
      onClick: _propTypes.default.func,
      getAlignNode: _propTypes.default.func,
      constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
      items: _propTypes.default.array,
      expanded: _propTypes.default.bool,
      defaultExpanded: _propTypes.default.bool,
      pressed: _propTypes.default.bool,
      renderMenu: _propTypes.default.func,
      renderButton: _propTypes.default.func,
      isInovuaButton: _propTypes.default.bool
    };
    var _default = InovuaDropDownButton;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/DropdownButton/src/index.js
var require_src14 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/DropdownButton/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _DropdownButton = _interopRequireDefault(require_DropdownButton());
    var _default = _DropdownButton.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/DropdownButton/index.js
var require_DropdownButton2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/DropdownButton/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src14());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ToolBar/src/utils/getGroupedItems.js
var require_getGroupedItems = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ToolBar/src/utils/getGroupedItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function sum(a, b) {
      return a + b;
    }
    function getGroupedItems(_ref) {
      var boxes = _ref.boxes, maxSize = _ref.maxSize, _ref$overflowControlS = _ref.overflowControlSize, overflowControlSize = _ref$overflowControlS === void 0 ? 0 : _ref$overflowControlS;
      var boxesSize = boxes.reduce(sum);
      if (boxesSize <= maxSize) {
        return false;
      }
      var availableSize = maxSize - overflowControlSize;
      var groups = boxes.reduce(function(acc, box, index2) {
        if (availableSize - box >= 0) {
          acc.visibleIndexes.push(index2);
          availableSize -= box;
        } else {
          availableSize = 0;
          acc.overflowIndexes.push(index2);
        }
        return acc;
      }, {
        visibleIndexes: [],
        overflowIndexes: []
      });
      return groups;
    }
    var _default = getGroupedItems;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ToolBar/src/DropdownOverflow.js
var require_DropdownOverflow = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ToolBar/src/DropdownOverflow.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _NotifyResize = require_NotifyResize();
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _assign = _interopRequireDefault(require_assign());
    var _join = _interopRequireDefault(require_join());
    var _DropdownButton = _interopRequireDefault(require_DropdownButton2());
    var _getGroupedItems = _interopRequireDefault(require_getGroupedItems());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var firstRenderStyle = {
      visibility: "hidden",
      overflow: "hidden"
    };
    var ghostStyle = {
      visibility: "hidden",
      overflow: "hidden",
      position: "absolute"
    };
    var DropDownOverflow = function(_Component) {
      (0, _inherits2.default)(DropDownOverflow2, _Component);
      var _super = _createSuper(DropDownOverflow2);
      function DropDownOverflow2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, DropDownOverflow2);
        _this = _super.call(this, props2);
        _this.setRootRef = function(ref) {
          _this.rootNode = ref;
        };
        _this.setGhostRef = function(ref) {
          _this.ghostNode = ref;
        };
        _this.state = {};
        _this.handleResize = _this.handleResize.bind((0, _assertThisInitialized2.default)(_this));
        _this.isFirstRender = true;
        return _this;
      }
      (0, _createClass2.default)(DropDownOverflow2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateOverflowItems();
          this.isFirstRender = false;
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var style = _objectSpread(_objectSpread({}, props2.style), this.isFirstRender && firstRenderStyle);
          var className = (0, _join.default)(props2.rootClassName, props2.className, props2.rtl && "".concat(props2.rootClassName, "--rtl"));
          var dropdownProps = (0, _assign.default)({}, props2);
          delete dropdownProps.scrollOnClick;
          delete dropdownProps.mouseoverScrollSpeed;
          delete dropdownProps.scrollSpeed;
          delete dropdownProps.scrollStep;
          delete dropdownProps.useTransformOnScroll;
          var domProps = (0, _cleanProps.default)(dropdownProps, DropDownOverflow2.propTypes);
          return _react.default.createElement("div", _objectSpread(_objectSpread({}, domProps), {}, {
            ref: this.setRootRef,
            style,
            className
          }), _react.default.createElement(_NotifyResize.NotifyResize, {
            key: "notify",
            rafOnResize: true,
            notifyOnMount: false,
            onResize: this.handleResize
          }), this.renderVisibleItems(), (this.isFirstRender || this.state.overflowIndexes) && this.renderDropdownButton(), this.renderGhost());
        }
      }, {
        key: "renderVisibleItems",
        value: function renderVisibleItems() {
          var visibleItems = this.props.children;
          if (this.state.visibleIndexes) {
            var children = this.getChildrenArray();
            visibleItems = this.state.visibleIndexes.map(function(index2) {
              return children[index2];
            });
          }
          return visibleItems;
        }
      }, {
        key: "renderDropdownButton",
        value: function renderDropdownButton() {
          var items = [];
          if (this.state.overflowIndexes) {
            var children = this.getChildrenArray();
            items = this.state.overflowIndexes.map(function(index2) {
              return {
                id: index2,
                label: children[index2]
              };
            });
          }
          var domProps = _objectSpread({
            items,
            constrainTo: this.props.constrainTo,
            menuProps: _objectSpread(_objectSpread({
              constrainTo: this.props.constrainTo
            }, this.props.dropdownButtonProps && this.props.dropdownButtonProps.menuProps), {}, {
              theme: null,
              disableScroller: true
            })
          }, this.props.dropdownButtonProps);
          var result;
          if (typeof this.props.renderDropdownButton === "function") {
            result = this.props.renderDropdownButton({
              items,
              domProps,
              overflowIndexes: this.state.overflowIndexes
            });
          }
          if (result === void 0) {
            result = _react.default.createElement(_DropdownButton.default, _objectSpread({}, domProps));
          }
          return result;
        }
      }, {
        key: "renderGhost",
        value: function renderGhost() {
          if (!this.state.ghostVisible) {
            return null;
          }
          return _react.default.createElement("div", {
            ref: this.setGhostRef,
            style: _objectSpread(_objectSpread({}, ghostStyle), {}, {
              width: this.state.width,
              height: this.state.height
            })
          }, this.props.children, this.renderDropdownButton());
        }
      }, {
        key: "getRootSize",
        value: function getRootSize() {
          var maxSize = this.rootNode[this.getSizeName()];
          return maxSize;
        }
      }, {
        key: "updateOverflowItems",
        value: function updateOverflowItems() {
          var _this2 = this;
          if (!this.rootNode) {
            return;
          }
          var parentNode = this.state.ghostVisible ? this.ghostNode : this.rootNode;
          var children = parentNode.children;
          var maxSize = this.getRootSize();
          var boxes = [].slice.call(children).map(function(child) {
            return child[_this2.getSizeName()];
          });
          var overflowControlSize = boxes[boxes.length - 1];
          if (this.isFirstRender) {
            boxes = boxes.slice(1);
          }
          boxes = boxes.slice(0, -1);
          var groupedItems = (0, _getGroupedItems.default)({
            boxes,
            maxSize,
            overflowControlSize
          });
          if (groupedItems) {
            this.setState({
              visibleIndexes: groupedItems.visibleIndexes,
              overflowIndexes: groupedItems.overflowIndexes
            });
          } else {
            this.setState({
              visibleIndexes: null,
              overflowIndexes: null
            });
          }
        }
      }, {
        key: "handleResize",
        value: function handleResize(_ref) {
          var _this3 = this;
          var width = _ref.width, height = _ref.height;
          this.setState({
            width,
            height,
            ghostVisible: true
          }, function() {
            _this3.updateOverflowItems();
            _this3.setState({
              ghostVisible: false
            });
          });
        }
      }, {
        key: "getSizeName",
        value: function getSizeName() {
          return "offsetWidth";
        }
      }, {
        key: "getChildrenArray",
        value: function getChildrenArray() {
          return _react.default.Children.toArray(this.props.children);
        }
      }]);
      return DropDownOverflow2;
    }(_react.Component);
    DropDownOverflow.defaultProps = {
      rootClassName: "react-toolkit-dropdown-overflow",
      rtl: false
    };
    DropDownOverflow.propTypes = {
      rootClassName: _propTypes.default.string,
      dropdownButtonProps: _propTypes.default.object,
      constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
      renderDropdownButton: _propTypes.default.func,
      rtl: _propTypes.default.bool
    };
    var _default = DropDownOverflow;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ToolBar/src/ToolBar.js
var require_ToolBar = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ToolBar/src/ToolBar.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.Separator = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _join = _interopRequireDefault(require_join());
    var _ArrowScroller = _interopRequireDefault(require_ArrowScroller2());
    var _DropdownOverflow = _interopRequireDefault(require_DropdownOverflow());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var InovuaToolbar = function(_Component) {
      (0, _inherits2.default)(InovuaToolbar2, _Component);
      var _super = _createSuper(InovuaToolbar2);
      function InovuaToolbar2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaToolbar2);
        _this = _super.call(this, props2);
        _this.setRootRef = function(ref) {
          _this.node = ref;
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaToolbar2, [{
        key: "render",
        value: function render() {
          var props2 = this.props;
          var className = props2.className;
          var rootProps = _objectSpread(_objectSpread({
            useTransformOnScroll: props2.useTransformOnScroll,
            ref: this.setRootRef
          }, (0, _cleanProps.default)(props2, InovuaToolbar2.propTypes)), {}, {
            className,
            rtl: props2.rtl,
            rootClassName: props2.rootClassName,
            theme: props2.theme
          });
          return props2.overflowStrategy === "scroll" ? _react.default.createElement(_ArrowScroller.default, _objectSpread(_objectSpread({}, rootProps), this.getScrollerProps())) : _react.default.createElement(_DropdownOverflow.default, _objectSpread(_objectSpread({}, rootProps), this.getDropdownOverflowProps()));
        }
      }, {
        key: "scrollIntoView",
        value: function scrollIntoView(node) {
          return this.node && this.node.scrollIntoView(node);
        }
      }, {
        key: "getInstance",
        value: function getInstance() {
          return this.node;
        }
      }, {
        key: "getClassName",
        value: function getClassName() {
          var props2 = this.props;
          return (0, _join.default)(this.props.className, props2.rootClassName, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), props2.changeButtonStyles && "".concat(props2.rootClassName, "--change-button-styles"));
        }
      }, {
        key: "getScrollerProps",
        value: function getScrollerProps() {
          var props2 = this.props;
          var result = {
            vertical: props2.vertical,
            scrollOnMouseEnter: props2.scrollOnMouseEnter,
            arrowSize: props2.arrowSize,
            className: (0, _join.default)(this.getClassName(), "".concat(props2.rootClassName, "--arrowScroller"))
          };
          if (this.props.rtl) {
            result.nativeScroll = false;
          }
          return result;
        }
      }, {
        key: "getDropdownOverflowProps",
        value: function getDropdownOverflowProps() {
          var props2 = this.props;
          return {
            className: (0, _join.default)(this.getClassName(), "".concat(props2.rootClassName, "--dropdown")),
            constrainTo: props2.constrainTo,
            dropdownButtonProps: props2.dropdownButtonProps,
            renderDropdownButton: props2.renderDropdownButton
          };
        }
      }]);
      return InovuaToolbar2;
    }(_react.Component);
    InovuaToolbar.defaultProps = {
      rootClassName: "inovua-react-toolkit-toolbar",
      vertical: false,
      useTransformOnScroll: false,
      changeButtonStyles: true,
      rtl: false,
      theme: "default-light",
      overflowStrategy: "scroll"
    };
    InovuaToolbar.propTypes = {
      rtl: _propTypes.default.bool,
      rootClassName: _propTypes.default.string,
      changeButtonStyles: _propTypes.default.bool,
      scrollOnMouseEnter: _propTypes.default.bool,
      theme: _propTypes.default.string,
      constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
      arrowSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
        width: _propTypes.default.number,
        height: _propTypes.default.number
      })]),
      overflowStrategy: _propTypes.default.oneOf(["scroll", "dropdown"]),
      vertical: _propTypes.default.bool,
      dropdownButtonProps: _propTypes.default.object,
      renderDropdownButton: _propTypes.default.func,
      useTransformOnScroll: _propTypes.default.bool
    };
    var Separator = function Separator2(props2) {
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, props2), {}, {
        className: (0, _join.default)(props2.className, "inovua-react-toolkit-toolbar__separator")
      }));
    };
    exports.Separator = Separator;
    InovuaToolbar.Separator = Separator;
    var _default = InovuaToolbar;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ToolBar/src/index.js
var require_src15 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ToolBar/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "DropdownOverflow", {
      enumerable: true,
      get: function get() {
        return _DropdownOverflow.default;
      }
    });
    Object.defineProperty(exports, "Separator", {
      enumerable: true,
      get: function get() {
        return _ToolBar.Separator;
      }
    });
    exports.default = void 0;
    var _ToolBar = _interopRequireWildcard(require_ToolBar());
    var _DropdownOverflow = _interopRequireDefault(require_DropdownOverflow());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = _ToolBar.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ToolBar/index.js
var require_ToolBar2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ToolBar/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Separator", {
      enumerable: true,
      get: function get() {
        return _src.Separator;
      }
    });
    exports.default = void 0;
    var _src = _interopRequireWildcard(require_src15());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/ToolBar/Separator.js
var require_Separator = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/ToolBar/Separator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = require_src15();
    var _default = _src.Separator;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/src/PaginationIcon.js
var require_PaginationIcon = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/src/PaginationIcon.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _Button = _interopRequireDefault(require_Button2());
    var _join = _interopRequireDefault(require_join());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var ICON_CLASS_NAME = "inovua-react-pagination-toolbar__icon";
    var PaginationIcon = function PaginationIcon2(props2) {
      var icon = props2.icon, size = props2.size, disabled = props2.disabled, action = props2.action, name = props2.name, theme = props2.theme;
      var className = (0, _join.default)(ICON_CLASS_NAME, "".concat(ICON_CLASS_NAME, "--named--").concat(name));
      return _react.default.createElement(_Button.default, {
        disabled,
        className,
        icon: (0, _react.cloneElement)(icon, {
          width: size,
          height: size
        }),
        onClick: action,
        theme
      });
    };
    PaginationIcon.propTypes = {
      name: _propTypes.default.string,
      action: _propTypes.default.func,
      disabled: _propTypes.default.bool,
      icon: _propTypes.default.node,
      size: _propTypes.default.number
    };
    var _default = PaginationIcon;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/src/getIcons.js
var require_getIcons = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/src/getIcons.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.REFRESH = exports.PREV_PAGE = exports.NEXT_PAGE = exports.LAST_PAGE = exports.FIRST_PAGE = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
    var _react = _interopRequireDefault(require_react());
    var _excluded = ["size"];
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var emptyObject = {};
    var SIZE = 20;
    var getIcons = function getIcons2() {
      var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyObject, size = _ref.size, props2 = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      size = size || SIZE;
      var FIRST_PAGE2 = _react.default.createElement("svg", _objectSpread(_objectSpread({}, props2), {}, {
        height: size,
        viewBox: "0 0 24 24",
        width: size
      }), _react.default.createElement("path", {
        d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
      }));
      var LAST_PAGE2 = _react.default.createElement("svg", _objectSpread(_objectSpread({}, props2), {}, {
        height: size,
        viewBox: "0 0 24 24",
        width: size
      }), _react.default.createElement("path", {
        d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
      }));
      var PREV_PAGE2 = _react.default.createElement("svg", _objectSpread(_objectSpread({}, props2), {}, {
        height: size,
        viewBox: "0 0 24 24",
        width: size
      }), _react.default.createElement("path", {
        d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
      }));
      var NEXT_PAGE2 = _react.default.createElement("svg", _objectSpread(_objectSpread({}, props2), {}, {
        height: size,
        viewBox: "0 0 24 24",
        width: size
      }), _react.default.createElement("path", {
        d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
      }));
      var REFRESH2 = _react.default.createElement("svg", _objectSpread(_objectSpread({}, props2), {}, {
        height: size,
        viewBox: "0 0 24 24",
        width: size
      }), _react.default.createElement("path", {
        d: "M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
      }));
      return {
        FIRST_PAGE: FIRST_PAGE2,
        LAST_PAGE: LAST_PAGE2,
        PREV_PAGE: PREV_PAGE2,
        NEXT_PAGE: NEXT_PAGE2,
        REFRESH: REFRESH2
      };
    };
    var _getIcons = getIcons();
    var FIRST_PAGE = _getIcons.FIRST_PAGE;
    var LAST_PAGE = _getIcons.LAST_PAGE;
    var PREV_PAGE = _getIcons.PREV_PAGE;
    var NEXT_PAGE = _getIcons.NEXT_PAGE;
    var REFRESH = _getIcons.REFRESH;
    exports.REFRESH = REFRESH;
    exports.NEXT_PAGE = NEXT_PAGE;
    exports.PREV_PAGE = PREV_PAGE;
    exports.LAST_PAGE = LAST_PAGE;
    exports.FIRST_PAGE = FIRST_PAGE;
    var _default = getIcons;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/src/PaginationToolbar.js
var require_PaginationToolbar = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/src/PaginationToolbar.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.hasPrevPage = exports.hasNextPage = exports.getSkipForPage = exports.getPageCount = exports.getCurrentPage = exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _autoBind = _interopRequireDefault(require_autoBind());
    var _NumericInput = _interopRequireDefault(require_NumericInput());
    var _ComboBox = _interopRequireDefault(require_ComboBox2());
    var _ToolBar = _interopRequireDefault(require_ToolBar2());
    var _Separator = _interopRequireDefault(require_Separator());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate());
    var _join = _interopRequireDefault(require_join4());
    var _PaginationIcon = _interopRequireDefault(require_PaginationIcon());
    var _getIcons = require_getIcons();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var stopPropagation = function stopPropagation2(e) {
      return e.stopPropagation();
    };
    var emptyObject = {};
    var PAGE_SIZES = [{
      value: 5
    }, {
      value: 10
    }, {
      value: 20
    }, {
      value: 25
    }, {
      value: 40
    }, {
      value: 50
    }, {
      value: 100
    }];
    var ICONS = {
      FIRST_PAGE: _getIcons.FIRST_PAGE,
      LAST_PAGE: _getIcons.LAST_PAGE,
      PREV_PAGE: _getIcons.PREV_PAGE,
      NEXT_PAGE: _getIcons.NEXT_PAGE,
      REFRESH: _getIcons.REFRESH
    };
    var CLASS_NAME = "inovua-react-pagination-toolbar";
    var SPACER = _react.default.createElement("div", {
      className: "".concat(CLASS_NAME, "__spacer")
    });
    var getPageCount = function getPageCount2(_ref) {
      var count = _ref.count, limit = _ref.limit;
      return Math.ceil(count / limit);
    };
    exports.getPageCount = getPageCount;
    var getSkipForPage = function getSkipForPage2(_ref2) {
      var page = _ref2.page, limit = _ref2.limit;
      return Math.max(0, limit * (page - 1));
    };
    exports.getSkipForPage = getSkipForPage;
    var getCurrentPage = function getCurrentPage2(_ref3) {
      var skip = _ref3.skip, limit = _ref3.limit;
      return Math.floor(skip / limit) + 1;
    };
    exports.getCurrentPage = getCurrentPage;
    var hasNextPage = function hasNextPage2(_ref4) {
      var skip = _ref4.skip, limit = _ref4.limit, count = _ref4.count;
      return getCurrentPage({
        skip,
        limit
      }) < getPageCount({
        count,
        limit
      });
    };
    exports.hasNextPage = hasNextPage;
    var hasPrevPage = function hasPrevPage2(_ref5) {
      var skip = _ref5.skip, limit = _ref5.limit;
      return getCurrentPage({
        skip,
        limit
      }) > 1;
    };
    exports.hasPrevPage = hasPrevPage;
    var InovuaPaginationToolbar = function(_React$Component) {
      (0, _inherits2.default)(InovuaPaginationToolbar2, _React$Component);
      var _super = _createSuper(InovuaPaginationToolbar2);
      function InovuaPaginationToolbar2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaPaginationToolbar2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps) {
          var skip = _this.getSkip(prevProps);
          var limit = _this.getLimit(prevProps);
          var pageCount = getPageCount({
            count: prevProps.totalCount,
            limit
          });
          var currentPage = Math.min(pageCount, getCurrentPage({
            skip,
            limit
          }));
          var nextSkip = _this.getSkip(_this.props);
          var nextLimit = _this.getLimit(_this.props);
          var nextPageCount = getPageCount({
            count: _this.props.totalCount,
            limit: nextLimit
          });
          var nextCurrentPage = Math.min(nextPageCount, getCurrentPage({
            skip: nextSkip,
            limit: nextLimit
          }));
          if (prevProps.totalCount !== _this.props.totalCount || currentPage !== nextCurrentPage) {
            _this.forceUpdate(function() {
              _this.setCurrentPageInputValue(nextCurrentPage, _this.props);
            });
          }
        });
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
        _this.state = {
          skip: props2.defaultSkip,
          limit: props2.defaultLimit
        };
        _this.ACTIONS = {
          REFRESH: _this.refresh,
          FIRST_PAGE: _this.gotoFirstPage,
          LAST_PAGE: _this.gotoLastPage,
          PREV_PAGE: _this.gotoPrevPage,
          NEXT_PAGE: _this.gotoNextPage
        };
        _this.refNumberInput = function(cmp) {
          _this.numberInput = cmp;
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaPaginationToolbar2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "getSkip",
        value: function getSkip() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          return props2.skip === void 0 ? this.state.skip : props2.skip;
        }
      }, {
        key: "getLimit",
        value: function getLimit() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
          return props2.limit === void 0 ? this.state.limit : props2.limit;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, totalCount = _this$props.totalCount, theme = _this$props.theme, rtl = _this$props.rtl, remotePagination = _this$props.remotePagination, rootClassName = _this$props.rootClassName, changeButtonStyles = _this$props.changeButtonStyles;
          var skip = this.getSkip();
          var limit = this.getLimit();
          var skipLimitCount = {
            skip,
            limit,
            count: totalCount
          };
          var currentPage = getCurrentPage(skipLimitCount);
          var pageCount = getPageCount(skipLimitCount);
          var firstPage = this.renderIcon("FIRST_PAGE", currentPage <= 1);
          var lastPage = this.renderIcon("LAST_PAGE", currentPage >= pageCount);
          var prevPage = this.renderIcon("PREV_PAGE", !hasPrevPage(skipLimitCount));
          var nextPage = this.renderIcon("NEXT_PAGE", !hasNextPage(skipLimitCount));
          var refresh = remotePagination ? this.renderIcon("REFRESH", false) : null;
          var start = totalCount ? skip + 1 : 0;
          var end = Math.min(skip + limit, totalCount);
          var className = (0, _join.default)(this.props.className, CLASS_NAME, theme && "".concat(CLASS_NAME, "--theme-").concat(theme), "".concat(CLASS_NAME, "--").concat(rtl ? "rtl" : "ltr"), this.props.bordered && "".concat(CLASS_NAME, "--bordered"));
          var combo = this.renderPageSizeCombo();
          var currentPageInput = this.renderCurrentPageInput({
            pageCount,
            currentPage
          });
          var domProps = _objectSpread(_objectSpread({}, (0, _reactCleanProps.default)(this.props, InovuaPaginationToolbar2.propTypes)), {}, {
            className,
            theme
          });
          var result;
          if (this.props.renderToolbar) {
            result = this.props.renderToolbar(domProps, {
              gotoFirstPageIcon: firstPage,
              gotoLastPageIcon: lastPage,
              gotoPrevPageIcon: prevPage,
              gotoNextPageIcon: nextPage,
              refreshIcon: refresh,
              pageSizeCombo: combo,
              start,
              end,
              totalCount,
              currentPageInput
            });
            if (result !== void 0) {
              return result;
            }
          }
          return _react.default.createElement(_ToolBar.default, _objectSpread(_objectSpread({}, domProps), {}, {
            useTransformOnScroll: false,
            onKeyDown: stopPropagation,
            rtl
          }), _react.default.createElement("div", {
            className: "".concat(CLASS_NAME, "__region")
          }, firstPage, prevPage, _react.default.createElement("span", {
            className: "".concat(CLASS_NAME, "__page-text")
          }, this.props.pageText), " ", currentPageInput, " ", this.props.ofText, " ", _react.default.createElement("span", {
            className: "".concat(CLASS_NAME, "__page-count-text"),
            style: {
              minWidth: Math.max("".concat(pageCount).length * 10, 25)
            }
          }, " " + (pageCount.toLocaleString ? pageCount.toLocaleString() : pageCount)), nextPage, lastPage, _react.default.createElement(_Separator.default, null), _react.default.createElement("span", {
            className: "".concat(CLASS_NAME, "__per-page-text")
          }, this.props.pageSizes === false ? null : this.props.perPageText), " ", combo, this.props.pageSizes !== false && refresh ? _react.default.createElement(_Separator.default, null) : null, refresh), SPACER, _react.default.createElement("div", {
            className: "".concat(CLASS_NAME, "__region")
          }, this.props.showingText, " ", start.toLocaleString ? start.toLocaleString() : start, " -", " ", end.toLocaleString ? end.toLocaleString() : end, " ", this.props.ofText, " ", totalCount.toLocaleString ? totalCount.toLocaleString() : totalCount));
        }
      }, {
        key: "renderCurrentPageInput",
        value: function renderCurrentPageInput(_ref6) {
          var pageCount = _ref6.pageCount, currentPage = _ref6.currentPage;
          var inputProps = {
            updateOnArrowKeys: false,
            className: "".concat(CLASS_NAME, "__current-page"),
            onBlur: this.onBlur,
            ref: this.refNumberInput,
            defaultValue: currentPage,
            currentPage,
            onChange: this.onNumberInputChange,
            enableClearButton: false,
            allowFloat: false,
            allowNegative: false,
            rtl: this.props.rtl,
            minValue: 1,
            maxValue: pageCount,
            style: {
              minWidth: 70
            },
            size: "".concat(pageCount).length,
            theme: this.props.theme
          };
          var result;
          if (this.props.renderCurrentPageInput) {
            result = this.props.renderCurrentPageInput(inputProps);
          }
          if (result === void 0) {
            delete inputProps.currentPage;
            result = _react.default.createElement(_NumericInput.default, _objectSpread({}, inputProps));
          }
          return result;
        }
      }, {
        key: "renderPageSizeCombo",
        value: function renderPageSizeCombo() {
          var _comboProps;
          if (this.props.pageSizes === false) {
            return null;
          }
          var limit = this.getLimit();
          var comboProps = (_comboProps = {
            shadow: false,
            style: {
              minWidth: 70,
              width: 70
            },
            className: "".concat(CLASS_NAME, "__page-size-combo"),
            borderRadius: 0,
            idProperty: "value",
            displayProperty: "value",
            value: limit,
            renderListComponent: this.props.renderPageList,
            constrainTo: this.props.constrainTo,
            onChange: this.setPageSize,
            dataSource: this.props.pageSizes ? this.props.pageSizes.map(function(s) {
              return {
                value: s
              };
            }) : PAGE_SIZES,
            collapseOnSelect: true,
            changeValueOnNavigation: false,
            multiple: false,
            searchable: false,
            clearIcon: false
          }, (0, _defineProperty2.default)(_comboProps, "shadow", true), (0, _defineProperty2.default)(_comboProps, "rtl", this.props.rtl), (0, _defineProperty2.default)(_comboProps, "showShadowOnMouseOver", true), (0, _defineProperty2.default)(_comboProps, "allowSelectionToggle", false), (0, _defineProperty2.default)(_comboProps, "highlightFirst", false), (0, _defineProperty2.default)(_comboProps, "theme", this.props.theme), _comboProps);
          var result;
          if (this.props.renderPageSizeCombo) {
            result = this.props.renderPageSizeCombo(comboProps);
          }
          if (result === void 0) {
            result = _react.default.createElement(_ComboBox.default, _objectSpread(_objectSpread({}, comboProps), {}, {
              relativeToViewport: true
            }));
          }
          return result;
        }
      }, {
        key: "renderIcon",
        value: function renderIcon(name, disabled) {
          var icons = this.props.icons || ICONS;
          var icon = icons[name];
          if (this.props.rtl) {
            if (name === "LAST_PAGE") {
              icon = icons["FIRST_PAGE"];
            } else if (name === "FIRST_PAGE") {
              icon = icons["LAST_PAGE"];
            }
            if (name === "NEXT_PAGE") {
              icon = icons["PREV_PAGE"];
            } else if (name === "PREV_PAGE") {
              icon = icons["NEXT_PAGE"];
            }
          }
          var iconProps = {
            name,
            size: this.props.iconSize,
            icon,
            disabled,
            action: this.ACTIONS[name],
            theme: this.props.theme
          };
          var result;
          if (this.props.renderIcon) {
            result = this.props.renderIcon(iconProps);
          }
          if (result === void 0) {
            result = _react.default.createElement(_PaginationIcon.default, _objectSpread({}, iconProps));
          }
          return result;
        }
      }, {
        key: "setCurrentPageInputValue",
        value: function setCurrentPageInputValue(value) {
          var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.props;
          this.lastNotifiedSkip = getSkipForPage({
            page: value,
            limit: this.getLimit(props2)
          });
          if (this.numberInput && typeof this.numberInput.setValue === "function") {
            this.numberInput.setValue("".concat(value));
          }
        }
      }, {
        key: "onBlur",
        value: function onBlur() {
          var currentPage = getCurrentPage({
            skip: this.getSkip(),
            limit: this.getLimit()
          });
          this.setCurrentPageInputValue(currentPage);
        }
      }, {
        key: "onNumberInputChange",
        value: function onNumberInputChange(numericValue) {
          this.gotoPage(numericValue || 1);
        }
      }, {
        key: "setPageSize",
        value: function setPageSize(limit) {
          var currentSkip = this.getSkip();
          var currentPage = getCurrentPage({
            skip: currentSkip,
            limit: this.getLimit()
          });
          var maxPage = getPageCount({
            count: this.props.totalCount,
            limit
          });
          var newPage = Math.min(currentPage, maxPage);
          var newSkip = getSkipForPage({
            page: newPage,
            limit
          });
          if (this.props.onPageSizeChange) {
            this.props.onPageSizeChange(limit);
          }
          if (this.props.onLimitChange) {
            this.props.onLimitChange(limit);
          }
          if (this.props.limit === void 0) {
            this.setState({
              limit
            });
          }
          if (newSkip != currentSkip && this.props.adjustSkipOnLimitChange) {
            this.gotoPage(newPage, {
              limit
            });
          }
        }
      }, {
        key: "gotoPage",
        value: function gotoPage(page) {
          var _this2 = this;
          var _ref7 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, _ref7$limit = _ref7.limit, limit = _ref7$limit === void 0 ? this.getLimit() : _ref7$limit;
          var skip = getSkipForPage({
            page,
            limit
          });
          if (this.lastNotifiedSkip === skip) {
            return;
          }
          setTimeout(function() {
            delete _this2.lastNotifiedSkip;
          }, 50);
          this.lastNotifiedSkip = skip;
          if (this.props.onPageChange) {
            this.props.onPageChange(page);
          }
          if (this.props.onSkipChange) {
            this.props.onSkipChange(skip);
          }
          if (this.props.skip === void 0) {
            this.setCurrentPageInputValue("".concat(page));
            this.setState({
              skip
            });
          }
        }
      }, {
        key: "refresh",
        value: function refresh() {
          if (this.props.onRefresh) {
            this.props.onRefresh();
          }
        }
      }, {
        key: "gotoFirstPage",
        value: function gotoFirstPage() {
          this.gotoPage(1);
        }
      }, {
        key: "gotoLastPage",
        value: function gotoLastPage() {
          var lastPage = getPageCount({
            count: this.props.totalCount,
            limit: this.getLimit()
          });
          this.gotoPage(lastPage);
        }
      }, {
        key: "gotoNextPage",
        value: function gotoNextPage() {
          var nextPage = getCurrentPage({
            skip: this.getSkip(),
            limit: this.getLimit()
          }) + 1;
          this.gotoPage(nextPage);
        }
      }, {
        key: "gotoPrevPage",
        value: function gotoPrevPage() {
          var prevPage = getCurrentPage({
            skip: this.getSkip(),
            limit: this.getLimit()
          }) - 1;
          this.gotoPage(prevPage);
        }
      }]);
      return InovuaPaginationToolbar2;
    }(_react.default.Component);
    exports.default = InovuaPaginationToolbar;
    InovuaPaginationToolbar.defaultProps = {
      adjustSkipOnLimitChange: true,
      theme: "default-light",
      bordered: true,
      iconSize: 24,
      rtl: false,
      remotePagination: false,
      pageText: "Page ",
      ofText: " of ",
      perPageText: "Results per page",
      showingText: "Showing ",
      rootClassName: "inovua-react-pagination-toolbar"
    };
    InovuaPaginationToolbar.propTypes = {
      adjustSkipOnLimitChange: _propTypes.default.bool,
      pagination: _propTypes.default.any,
      bordered: _propTypes.default.bool,
      iconSize: _propTypes.default.number,
      pageText: _propTypes.default.node,
      ofText: _propTypes.default.node,
      perPageText: _propTypes.default.node,
      showingText: _propTypes.default.node,
      limit: _propTypes.default.number,
      defaultLimit: _propTypes.default.number,
      skip: _propTypes.default.number,
      defaultSkip: _propTypes.default.number,
      totalCount: _propTypes.default.number,
      gotoNextPage: _propTypes.default.func,
      gotoPrevPage: _propTypes.default.func,
      pageSize: _propTypes.default.number,
      currentPage: _propTypes.default.number,
      pageCount: _propTypes.default.number,
      gotoPage: _propTypes.default.func,
      onRefresh: _propTypes.default.func,
      hasNextPage: _propTypes.default.func,
      hasPrevPage: _propTypes.default.func,
      gotoLastPage: _propTypes.default.func,
      gotoFirstPage: _propTypes.default.func,
      remotePagination: _propTypes.default.bool,
      localPagination: _propTypes.default.any,
      renderPageList: _propTypes.default.any,
      reload: _propTypes.default.any,
      constrainTo: _propTypes.default.any,
      onPageChange: _propTypes.default.func,
      onSkipChange: _propTypes.default.func,
      onLimitChange: _propTypes.default.func,
      onPageSizeChange: _propTypes.default.func,
      pageSizes: _propTypes.default.arrayOf(_propTypes.default.number),
      renderCurrentPageInput: _propTypes.default.func,
      rootClassName: _propTypes.default.string,
      renderIcon: _propTypes.default.func,
      renderPageSizeCombo: _propTypes.default.func,
      renderToolbar: _propTypes.default.func,
      rtl: _propTypes.default.bool,
      theme: _propTypes.default.string
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/src/index.js
var require_src16 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/src/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {};
    exports.default = void 0;
    var _PaginationToolbar = _interopRequireWildcard(require_PaginationToolbar());
    Object.keys(_PaginationToolbar).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _PaginationToolbar[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _PaginationToolbar[key];
        }
      });
    });
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = _PaginationToolbar.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/index.js
var require_PaginationToolbar2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/PaginationToolbar/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {};
    exports.default = void 0;
    var _src = _interopRequireWildcard(require_src16());
    Object.keys(_src).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _src[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _src[key];
        }
      });
    });
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/ResizeOverlay.js
var require_ResizeOverlay = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/ResizeOverlay.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _join = _interopRequireDefault(require_join4());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var ResizeOverlay = function(_React$Component) {
      (0, _inherits2.default)(ResizeOverlay2, _React$Component);
      var _super = _createSuper(ResizeOverlay2);
      function ResizeOverlay2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, ResizeOverlay2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setConstrained", function(constrained) {
          if (_this.state.constrained != constrained) {
            _this.setState({
              constrained
            });
          }
          return (0, _assertThisInitialized2.default)(_this);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setOffset", function(offset) {
          _this.setState({
            offset
          });
          return (0, _assertThisInitialized2.default)(_this);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setActive", function(active, cfg) {
          _this.setState({
            active,
            offsetTop: cfg ? cfg.offsetTop || 0 : 0
          });
          return (0, _assertThisInitialized2.default)(_this);
        });
        _this.state = {
          offset: 0,
          constrained: false,
          active: false
        };
        return _this;
      }
      (0, _createClass2.default)(ResizeOverlay2, [{
        key: "render",
        value: function render() {
          var _proxyStyle;
          var props2 = this.props;
          var state = this.state;
          var constrained = state.constrained;
          var active = props2.active !== void 0 ? props2.active : state.active;
          var rtl = props2.rtl, columnResizeProxyWidth = props2.columnResizeProxyWidth, columnResizeHandleWidth = props2.columnResizeHandleWidth;
          var style = props2.style;
          if (active && props2.activeStyle) {
            style = Object.assign({}, style, props2.activeStyle);
          }
          var className = (0, _join.default)(props2.className, "InovuaReactDataGrid__resize-overlay", active && "InovuaReactDataGrid__resize-overlay--active");
          var proxyClassName = (0, _join.default)("InovuaReactDataGrid__resize-proxy", constrained && "InovuaReactDataGrid__resize-proxy--constrained");
          var offset = this.state.offset + (columnResizeHandleWidth - columnResizeProxyWidth) / 2;
          var proxyStyle = (_proxyStyle = {
            transform: "translate3d(".concat((rtl ? -1 : 1) * offset, "px,0px, 0px)")
          }, (0, _defineProperty2.default)(_proxyStyle, rtl ? "right" : "left", 0), (0, _defineProperty2.default)(_proxyStyle, rtl ? "left" : "right", "unset"), (0, _defineProperty2.default)(_proxyStyle, "width", columnResizeProxyWidth), (0, _defineProperty2.default)(_proxyStyle, "top", this.state.active ? this.state.offsetTop || 0 : 0), (0, _defineProperty2.default)(_proxyStyle, "bottom", 0), (0, _defineProperty2.default)(_proxyStyle, "height", "initial"), _proxyStyle);
          if (this.props.resizeProxyStyle) {
            proxyStyle = Object.assign({}, this.props.resizeProxyStyle, proxyStyle);
          }
          return _react.default.createElement("div", {
            style,
            className
          }, _react.default.createElement("div", {
            className: proxyClassName,
            style: proxyStyle
          }));
        }
      }]);
      return ResizeOverlay2;
    }(_react.default.Component);
    exports.default = ResizeOverlay;
    ResizeOverlay.propTypes = {
      resizeProxyStyle: _propTypes.default.shape({})
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/drag-helper/utils/once.js
var require_once = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/drag-helper/utils/once.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = once;
    function once(fn, scope) {
      var called;
      var result;
      return function() {
        if (called) {
          return result;
        }
        called = true;
        return result = fn && fn.apply(scope || this, arguments);
      };
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/drag-helper/index.js
var require_drag_helper = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/drag-helper/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _regionAlign = _interopRequireDefault(require_region_align());
    var _once = _interopRequireDefault(require_once());
    var _isMobile = _interopRequireDefault(require_isMobile());
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var Helper = function Helper2(config) {
      this.config = config;
    };
    var getEvents = function getEvents2(mobile) {
      return {
        move: mobile ? "touchmove" : "mousemove",
        up: mobile ? "touchend" : "mouseup"
      };
    };
    function getPageCoords(event2, mobile) {
      var firstTouch;
      var pageX = event2.pageX;
      var pageY = event2.pageY;
      if (mobile && event2.touches && (firstTouch = event2.touches[0])) {
        pageX = firstTouch.pageX;
        pageY = firstTouch.pageY;
      }
      return {
        pageX,
        pageY
      };
    }
    Object.assign(Helper.prototype, {
      initDrag: function initDrag(event2) {
        this.onDragInit(event2);
        var mobile = this.config.mobile;
        if (mobile === void 0) {
          mobile = _isMobile.default;
        }
        var events = this.config.events || getEvents(mobile);
        var onDragStart = (0, _once.default)(this.onDragStart, this);
        var target = mobile ? event2.target : globalObject;
        var mouseUpListener = (function(event3) {
          this.onDrop(event3);
          target && target.removeEventListener(events.move, mouseMoveListener);
          target && target.removeEventListener(events.up, mouseUpListener);
        }).bind(this);
        var mouseMoveListener = (function(event3) {
          if (!mobile && event3.which !== 1) {
            mouseUpListener(event3);
            return;
          }
          onDragStart(event3, mobile);
          this.onDrag(event3, mobile);
        }).bind(this);
        target && target.addEventListener(events.move, mouseMoveListener, false);
        target && target.addEventListener(events.up, mouseUpListener);
      },
      onDragInit: function onDragInit(event2) {
        var config = {
          diff: {
            left: 0,
            top: 0
          }
        };
        this.state = {
          config
        };
        if (this.config.region) {
          this.state.initialRegion = _regionAlign.default.from(this.config.region);
          this.state.dragRegion = config.dragRegion = this.state.initialRegion.clone();
        }
        if (this.config.constrainTo) {
          this.state.constrainTo = _regionAlign.default.from(this.config.constrainTo);
        }
        this.callConfig("onDragInit", event2);
      },
      onDragStart: function onDragStart(event2, mobile) {
        this.state.initPageCoords = getPageCoords(event2, mobile);
        this.state.didDrag = this.state.config.didDrag = true;
        this.callConfig("onDragStart", event2);
      },
      onDrag: function onDrag(event2, mobile) {
        var config = this.state.config;
        var initPageCoords = this.state.initPageCoords;
        var eventCoords = getPageCoords(event2, mobile);
        var diff = config.diff = {
          left: eventCoords.pageX - initPageCoords.pageX,
          top: eventCoords.pageY - initPageCoords.pageY
        };
        if (this.state.initialRegion) {
          var dragRegion = config.dragRegion;
          dragRegion.set(this.state.initialRegion);
          dragRegion.shift(diff);
          if (this.state.constrainTo) {
            diff.left = dragRegion.left - this.state.initialRegion.left;
            diff.top = dragRegion.top - this.state.initialRegion.top;
          }
          config.dragRegion = dragRegion;
        }
        this.callConfig("onDrag", event2);
      },
      onDrop: function onDrop(event2) {
        this.callConfig("onDrop", event2);
        this.state = null;
      },
      callConfig: function callConfig(fnName, event2) {
        var config = this.state.config;
        var args = [event2, config];
        var fn = this.config[fnName];
        if (fn) {
          fn.apply(this, args);
        }
      }
    });
    function _default(event2, config) {
      if (config.scope) {
        var skippedKeys = {
          scope: 1,
          region: 1,
          constrainTo: 1
        };
        Object.keys(config).forEach(function(key) {
          var value = config[key];
          if (key in skippedKeys) {
            return;
          }
          if (typeof value == "function") {
            config[key] = value.bind(config.scope);
          }
        });
      }
      var helper = new Helper(config);
      helper.initDrag(event2);
      return helper;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/setupColumnResize.js
var require_setupColumnResize = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/setupColumnResize.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _dragHelper = _interopRequireDefault(require_drag_helper());
    var emptyFn = function emptyFn2() {
    };
    function _default(_ref, _ref2, event2) {
      var region = _ref.region, headerRegion = _ref.headerRegion, constrainTo = _ref.constrainTo, columnHeaderNodes = _ref.columnHeaderNodes, columns = _ref.columns, rtl = _ref.rtl, index2 = _ref.index, firstFlexIndex = _ref.firstFlexIndex, shareSpace = _ref.shareSpace, shareSpaceOnResize = _ref.shareSpaceOnResize, initialSize = _ref.initialSize, nextColumnSize = _ref.nextColumnSize, extraOffset = _ref.extraOffset, groupColumns = _ref.groupColumns;
      var _ref2$onResizeDragIni = _ref2.onResizeDragInit, onResizeDragInit = _ref2$onResizeDragIni === void 0 ? emptyFn : _ref2$onResizeDragIni, _ref2$onResizeDragSta = _ref2.onResizeDragStart, onResizeDragStart = _ref2$onResizeDragSta === void 0 ? emptyFn : _ref2$onResizeDragSta, _ref2$onResizeDrag = _ref2.onResizeDrag, onResizeDrag = _ref2$onResizeDrag === void 0 ? emptyFn : _ref2$onResizeDrag, _ref2$onResizeDrop = _ref2.onResizeDrop, onResizeDrop = _ref2$onResizeDrop === void 0 ? emptyFn : _ref2$onResizeDrop;
      var column = columns[index2];
      var nextColumn = columns[index2 + 1];
      var initialPosition = rtl ? headerRegion.right - region.right : region.left - headerRegion.left;
      var isContrained = function isContrained2(dragRegion) {
        var constrained = dragRegion.left <= constrainTo.left || dragRegion.right >= constrainTo.right;
        return constrained;
      };
      (0, _dragHelper.default)(event2, {
        constrainTo,
        region,
        onDragInit: onResizeDragInit.bind(this, {
          offset: initialPosition,
          region,
          initialPosition,
          constrained: isContrained(region)
        }),
        onDragStart: function onDragStart(e, config) {
          var constrained = isContrained(config.dragRegion);
          onResizeDragStart({
            initialPosition,
            offset: initialPosition,
            constrained,
            resizing: true,
            region,
            column
          });
        },
        onDrag: function onDrag(e, config) {
          var diff = config.diff.left;
          var offset = initialPosition + (rtl ? -1 : 1) * diff;
          var constrained = isContrained(config.dragRegion);
          e.preventDefault();
          onResizeDrag({
            constrained,
            initialPosition,
            diff,
            offset,
            region,
            column
          });
        },
        onDrop: function onDrop(e, config) {
          var diff = (rtl ? -1 : 1) * Math.round(config.diff.left);
          var offset = initialPosition + diff;
          var constrained = isContrained(config.dragRegion);
          var size = initialSize + diff;
          var doShare = shareSpace;
          var nextColSize;
          if (doShare) {
            nextColSize = nextColumnSize - diff;
          }
          onResizeDrop({
            index: index2,
            constrained,
            initialPosition,
            region,
            diff,
            offset,
            size,
            shareSpaceOnResize,
            groupColumns,
            initialSize,
            firstFlexIndex,
            shareSpace: doShare,
            column,
            nextColumn,
            nextColumnSize: nextColSize
          });
        }
      });
    }
  }
});

// node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var ResizeObserver_es_exports = {};
__export(ResizeObserver_es_exports, {
  default: () => ResizeObserver_es_default
});
function throttle(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size, position) {
    var value = styles["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width), height = toFloat(styles.height);
  if (styles.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a) {
  var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x,
    y,
    width,
    height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
function createRectInit(x, y, width, height) {
  return { x, y, width, height };
}
var MapShim, isBrowser, global$1, requestAnimationFrame$1, trailingTimeout, REFRESH_DELAY, transitionKeys, mutationObserverSupported, ResizeObserverController, defineConfigurable, getWindowOf, emptyRect, isSVGGraphicsElement, ResizeObservation, ResizeObserverEntry, ResizeObserverSPI, observers, ResizeObserver, index, ResizeObserver_es_default;
var init_ResizeObserver_es = __esm({
  "node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"() {
    MapShim = function() {
      if (typeof Map !== "undefined") {
        return Map;
      }
      function getIndex(arr, key) {
        var result = -1;
        arr.some(function(entry, index2) {
          if (entry[0] === key) {
            result = index2;
            return true;
          }
          return false;
        });
        return result;
      }
      return (
        /** @class */
        function() {
          function class_1() {
            this.__entries__ = [];
          }
          Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */
            get: function() {
              return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
          });
          class_1.prototype.get = function(key) {
            var index2 = getIndex(this.__entries__, key);
            var entry = this.__entries__[index2];
            return entry && entry[1];
          };
          class_1.prototype.set = function(key, value) {
            var index2 = getIndex(this.__entries__, key);
            if (~index2) {
              this.__entries__[index2][1] = value;
            } else {
              this.__entries__.push([key, value]);
            }
          };
          class_1.prototype.delete = function(key) {
            var entries = this.__entries__;
            var index2 = getIndex(entries, key);
            if (~index2) {
              entries.splice(index2, 1);
            }
          };
          class_1.prototype.has = function(key) {
            return !!~getIndex(this.__entries__, key);
          };
          class_1.prototype.clear = function() {
            this.__entries__.splice(0);
          };
          class_1.prototype.forEach = function(callback, ctx) {
            if (ctx === void 0) {
              ctx = null;
            }
            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
              var entry = _a[_i];
              callback.call(ctx, entry[1], entry[0]);
            }
          };
          return class_1;
        }()
      );
    }();
    isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
    global$1 = function() {
      if (typeof global !== "undefined" && global.Math === Math) {
        return global;
      }
      if (typeof self !== "undefined" && self.Math === Math) {
        return self;
      }
      if (typeof window !== "undefined" && window.Math === Math) {
        return window;
      }
      return Function("return this")();
    }();
    requestAnimationFrame$1 = function() {
      if (typeof requestAnimationFrame === "function") {
        return requestAnimationFrame.bind(global$1);
      }
      return function(callback) {
        return setTimeout(function() {
          return callback(Date.now());
        }, 1e3 / 60);
      };
    }();
    trailingTimeout = 2;
    REFRESH_DELAY = 20;
    transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
    mutationObserverSupported = typeof MutationObserver !== "undefined";
    ResizeObserverController = /** @class */
    function() {
      function ResizeObserverController2() {
        this.connected_ = false;
        this.mutationEventsAdded_ = false;
        this.mutationsObserver_ = null;
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
      }
      ResizeObserverController2.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) {
          this.observers_.push(observer);
        }
        if (!this.connected_) {
          this.connect_();
        }
      };
      ResizeObserverController2.prototype.removeObserver = function(observer) {
        var observers2 = this.observers_;
        var index2 = observers2.indexOf(observer);
        if (~index2) {
          observers2.splice(index2, 1);
        }
        if (!observers2.length && this.connected_) {
          this.disconnect_();
        }
      };
      ResizeObserverController2.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        if (changesDetected) {
          this.refresh();
        }
      };
      ResizeObserverController2.prototype.updateObservers_ = function() {
        var activeObservers = this.observers_.filter(function(observer) {
          return observer.gatherActive(), observer.hasActive();
        });
        activeObservers.forEach(function(observer) {
          return observer.broadcastActive();
        });
        return activeObservers.length > 0;
      };
      ResizeObserverController2.prototype.connect_ = function() {
        if (!isBrowser || this.connected_) {
          return;
        }
        document.addEventListener("transitionend", this.onTransitionEnd_);
        window.addEventListener("resize", this.refresh);
        if (mutationObserverSupported) {
          this.mutationsObserver_ = new MutationObserver(this.refresh);
          this.mutationsObserver_.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        } else {
          document.addEventListener("DOMSubtreeModified", this.refresh);
          this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
      };
      ResizeObserverController2.prototype.disconnect_ = function() {
        if (!isBrowser || !this.connected_) {
          return;
        }
        document.removeEventListener("transitionend", this.onTransitionEnd_);
        window.removeEventListener("resize", this.refresh);
        if (this.mutationsObserver_) {
          this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
          document.removeEventListener("DOMSubtreeModified", this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
      };
      ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
        var isReflowProperty = transitionKeys.some(function(key) {
          return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
          this.refresh();
        }
      };
      ResizeObserverController2.getInstance = function() {
        if (!this.instance_) {
          this.instance_ = new ResizeObserverController2();
        }
        return this.instance_;
      };
      ResizeObserverController2.instance_ = null;
      return ResizeObserverController2;
    }();
    defineConfigurable = function(target, props2) {
      for (var _i = 0, _a = Object.keys(props2); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
          value: props2[key],
          enumerable: false,
          writable: false,
          configurable: true
        });
      }
      return target;
    };
    getWindowOf = function(target) {
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
      return ownerGlobal || global$1;
    };
    emptyRect = createRectInit(0, 0, 0, 0);
    isSVGGraphicsElement = function() {
      if (typeof SVGGraphicsElement !== "undefined") {
        return function(target) {
          return target instanceof getWindowOf(target).SVGGraphicsElement;
        };
      }
      return function(target) {
        return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
      };
    }();
    ResizeObservation = /** @class */
    function() {
      function ResizeObservation2(target) {
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
      }
      ResizeObservation2.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
      };
      ResizeObservation2.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
      };
      return ResizeObservation2;
    }();
    ResizeObserverEntry = /** @class */
    /* @__PURE__ */ function() {
      function ResizeObserverEntry2(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        defineConfigurable(this, { target, contentRect });
      }
      return ResizeObserverEntry2;
    }();
    ResizeObserverSPI = /** @class */
    function() {
      function ResizeObserverSPI2(callback, controller, callbackCtx) {
        this.activeObservations_ = [];
        this.observations_ = new MapShim();
        if (typeof callback !== "function") {
          throw new TypeError("The callback provided as parameter 1 is not a function.");
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
      }
      ResizeObserverSPI2.prototype.observe = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (observations.has(target)) {
          return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        this.controller_.refresh();
      };
      ResizeObserverSPI2.prototype.unobserve = function(target) {
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        if (typeof Element === "undefined" || !(Element instanceof Object)) {
          return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
          throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        if (!observations.has(target)) {
          return;
        }
        observations.delete(target);
        if (!observations.size) {
          this.controller_.removeObserver(this);
        }
      };
      ResizeObserverSPI2.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
      };
      ResizeObserverSPI2.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
          if (observation.isActive()) {
            _this.activeObservations_.push(observation);
          }
        });
      };
      ResizeObserverSPI2.prototype.broadcastActive = function() {
        if (!this.hasActive()) {
          return;
        }
        var ctx = this.callbackCtx_;
        var entries = this.activeObservations_.map(function(observation) {
          return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
      };
      ResizeObserverSPI2.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
      };
      ResizeObserverSPI2.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI2;
    }();
    observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
    ResizeObserver = /** @class */
    /* @__PURE__ */ function() {
      function ResizeObserver2(callback) {
        if (!(this instanceof ResizeObserver2)) {
          throw new TypeError("Cannot call a class as a function.");
        }
        if (!arguments.length) {
          throw new TypeError("1 argument required, but only 0 present.");
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
      }
      return ResizeObserver2;
    }();
    [
      "observe",
      "unobserve",
      "disconnect"
    ].forEach(function(method) {
      ResizeObserver.prototype[method] = function() {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
      };
    });
    index = function() {
      if (typeof global$1.ResizeObserver !== "undefined") {
        return global$1.ResizeObserver;
      }
      return ResizeObserver;
    }();
    ResizeObserver_es_default = index;
  }
});

// node_modules/@inovua/reactdatagrid-community/FakeFlex.js
var require_FakeFlex = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/FakeFlex.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _resizeObserverPolyfill = _interopRequireDefault((init_ResizeObserver_es(), __toCommonJS(ResizeObserver_es_exports)));
    var _NotifyResize = _interopRequireDefault(require_NotifyResize());
    var _autoBind = _interopRequireDefault(require_autoBind());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var ResizeObserver2 = globalObject.ResizeObserver || _resizeObserverPolyfill.default;
    var useFragment = !!_react.default.Fragment;
    var coverStyle = !useFragment ? {
      height: "100%",
      position: "absolute",
      width: "100%",
      top: 0,
      left: 0
    } : null;
    var FLEX_1_STYLE = {
      flex: 1
    };
    var nativeFlexCoverStyle = {
      height: "100%",
      position: "absolute",
      width: "100%",
      top: 0,
      left: 0,
      display: "flex",
      flexFlow: "column"
    };
    var FakeFlex = function(_Component) {
      (0, _inherits2.default)(FakeFlex2, _Component);
      var _super = _createSuper(FakeFlex2);
      function FakeFlex2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, FakeFlex2);
        _this = _super.call(this, props2);
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
        _this.state = {
          flexHeight: null
        };
        _this.flexRef = (0, _react.createRef)();
        return _this;
      }
      (0, _createClass2.default)(FakeFlex2, [{
        key: "onResize",
        value: function onResize(size) {
          var _this2 = this;
          if (this.props.useNativeFlex) {
            return;
          }
          this.size = size;
          if (size.height === this.availableHeight) {
            return;
          }
          this.availableHeight = size.height;
          requestAnimationFrame(function() {
            _this2.computeSize();
            requestAnimationFrame(_this2.resync);
          });
        }
      }, {
        key: "resync",
        value: function resync() {
          var node = this.getNode();
          if (!node || this.unmounted) {
            return;
          }
          var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
          this.onResize({
            width,
            height
          });
        }
      }, {
        key: "onChildResize",
        value: function onChildResize() {
          this.computeSize();
        }
      }, {
        key: "computeSize",
        value: function computeSize() {
          var _this3 = this;
          var availableHeight = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.availableHeight;
          var node = this.getNode();
          if (!node || this.unmounted) {
            return;
          }
          var flexIndex = this.props.flexIndex;
          var sum = [].slice.call(node.children).reduce(function(acc, child, index2) {
            if (index2 >= _this3.length) {
              return acc;
            }
            if (index2 === flexIndex) {
              return acc;
            }
            return acc + child.offsetHeight;
          }, 0);
          var flexHeight = availableHeight - sum;
          if (flexHeight != this.state.flexHeight) {
            this.setState({
              flexHeight
            });
          }
        }
      }, {
        key: "getNode",
        value: function getNode() {
          if (this.node) {
            return this.node;
          }
          if (this.props.getNode) {
            this.node = this.props.getNode();
          } else {
            this.node = this.flexRef.current;
          }
          return this.node;
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this4 = this;
          this.unmounted = false;
          requestAnimationFrame(function() {
            _this4.setupObservers();
          });
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this.prevLength && this.prevLength !== this.length) {
            this.clearObservers();
            this.setupObservers();
          }
          this.prevLength = this.length;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.unmounted = true;
          this.clearObservers();
        }
      }, {
        key: "setupObservers",
        value: function setupObservers() {
          var _this5 = this;
          if (this.props.useNativeFlex) {
            return;
          }
          var node = this.getNode();
          if (!node) {
            return;
          }
          var flexIndex = this.props.flexIndex;
          this.observers = [].slice.call(node.children).map(function(child, index2) {
            if (index2 >= _this5.length) {
              return null;
            }
            if (index2 === flexIndex) {
              return null;
            }
            if (child.__observer) {
              return child.__observer;
            }
            var observer = new ResizeObserver2(function(entries) {
              var first = entries[0];
              if (first) {
                _this5.onChildResize(first.contentRect);
              }
            });
            observer.observe(child);
            observer.__obsTarget = child;
            child.__observer = observer;
            return observer;
          }).filter(Boolean);
        }
      }, {
        key: "clearObservers",
        value: function clearObservers() {
          var node = this.getNode();
          if (!node) {
            return;
          }
          [].slice.call(node.children).map(function(child) {
            if (child && child.__observer) {
              child.__observer.__obsTarget = null;
              child.__observer = null;
            }
          });
          if (this.observers) {
            this.observers.forEach(function(o) {
              if (o.unobserve && o.__obsTarget) {
                o.__obsTarget.__observer = null;
                o.unobserve(o.__obsTarget);
              }
              if (o.disconnect) {
                o.disconnect();
              }
            });
          }
          delete this.observers;
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var flexIndex = props2.flexIndex, useNativeFlex = props2.useNativeFlex;
          var flexHeight = this.state.flexHeight;
          var children = _react.default.Children.toArray(props2.children).filter(Boolean).map(function(x, i) {
            if (i === flexIndex && (useNativeFlex || flexHeight)) {
              var additionalStyle = useNativeFlex ? FLEX_1_STYLE : {
                height: flexHeight
              };
              x = (0, _react.cloneElement)(x, {
                style: x.props.style ? _objectSpread(_objectSpread({}, x.props.style), additionalStyle) : additionalStyle
              });
            }
            return x;
          });
          this.length = children.length;
          var resizer = !useNativeFlex ? _react.default.createElement(_NotifyResize.default, {
            key: "fakeflexresizer",
            onResize: this.onResize,
            notifyOnMount: true,
            ResizeObserver: ResizeObserver2
          }) : null;
          if (useFragment && !useNativeFlex) {
            return _react.default.createElement(_react.default.Fragment, {
              key: "fragment"
            }, children, resizer);
          }
          return _react.default.createElement("div", {
            ref: this.flexRef,
            style: useNativeFlex ? nativeFlexCoverStyle : coverStyle
          }, children, resizer);
        }
      }]);
      return FakeFlex2;
    }(_react.Component);
    FakeFlex.propTypes = {
      flexIndex: _propTypes.default.number.isRequired,
      getNode: _propTypes.default.func.isRequired,
      useNativeFlex: _propTypes.default.bool
    };
    var _default = FakeFlex;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/contains/index.js
var require_contains = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/contains/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DOCUMENT_POSITION_CONTAINED_BY = 16;
    var _default = contains;
    exports.default = _default;
    function contains(container, elem) {
      if (container.contains) {
        return container.contains(elem);
      }
      var comparison = container.compareDocumentPosition(elem);
      return comparison === 0 || comparison & DOCUMENT_POSITION_CONTAINED_BY;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/assign-filter/index.js
var require_assign_filter = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/assign-filter/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    function assignFilter(filter, target) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
      var filteredArgs = args.map(function(obj) {
        if (obj == null) {
          return obj;
        }
        return Object.keys(obj).reduce(function(acc, propName) {
          var value = obj[propName];
          if (filter(value, propName, obj)) {
            acc[propName] = value;
          }
          return acc;
        }, {});
      });
      return Object.assign.apply(Object, [target].concat((0, _toConsumableArray2.default)(filteredArgs)));
    }
    var _default = assignFilter;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/assign-defined/index.js
var require_assign_defined = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/assign-defined/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _assignFilter = _interopRequireDefault(require_assign_filter());
    function isDefined(value) {
      return value !== void 0;
    }
    var _default = function _default2(target) {
      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        sources[_key - 1] = arguments[_key];
      }
      return _assignFilter.default.apply(void 0, [isDefined, target].concat(sources));
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/getRangesForBoxes.js
var require_getRangesForBoxes = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/getRangesForBoxes.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _region = _interopRequireDefault(require_region());
    var _default = function _default2(cells, getIndex) {
      return (cells || []).map(function(c, i) {
        var node = c.domRef ? c.domRef.current : c.getDOMNode ? c.getDOMNode() : null;
        var reg = _region.default.from(node);
        var isCell = typeof c.getProps === "function";
        var props2 = isCell ? c.getProps() : c.props;
        var result = {
          left: reg.left,
          right: reg.right,
          width: reg.width,
          computedLocked: props2.computedLocked,
          index: getIndex === void 0 ? i : getIndex(i, c, props2)
        };
        return result;
      });
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/getRangesForColumns.js
var require_getRangesForColumns = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/getRangesForColumns.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _default = function _default2(columns, _ref) {
      var headerRegion = _ref.headerRegion, initialOffset = _ref.initialOffset, availableWidth = _ref.availableWidth, totalLockedEndWidth = _ref.totalLockedEndWidth, initialScrollLeft = _ref.initialScrollLeft, rtlOffset = _ref.rtlOffset, rtl = _ref.rtl;
      var lockedEndOffset = 0;
      var result = columns.map(function(c, i) {
        var _result;
        var computedLocked = c.computedLocked;
        var offset = rtl ? initialOffset - (initialScrollLeft || 0) - c.computedOffset : c.computedOffset + (initialOffset - (initialScrollLeft || 0));
        if (rtl) {
          offset += rtlOffset;
        }
        if (computedLocked === "end") {
          offset = !rtl ? availableWidth - totalLockedEndWidth + lockedEndOffset + initialOffset : initialOffset - availableWidth + totalLockedEndWidth - lockedEndOffset;
          lockedEndOffset += c.computedWidth;
        }
        if (computedLocked === "start") {
          offset = c.computedOffset + (initialOffset || 0);
        }
        var result2 = (_result = {}, (0, _defineProperty2.default)(_result, rtl ? "right" : "left", offset), (0, _defineProperty2.default)(_result, rtl ? "left" : "right", rtl ? offset - c.computedWidth : offset + c.computedWidth), (0, _defineProperty2.default)(_result, "width", c.computedWidth), (0, _defineProperty2.default)(_result, "computedLocked", computedLocked), (0, _defineProperty2.default)(_result, "index", i), _result);
        return result2;
      });
      return result;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/setupColumnDrag.js
var require_setupColumnDrag = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/setupColumnDrag.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _dragHelper = _interopRequireDefault(require_drag_helper());
    var emptyFn = function emptyFn2() {
    };
    var _default = function _default2(_ref) {
      var constrainTo = _ref.constrainTo, region = _ref.region;
      var cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var event2 = arguments.length > 2 ? arguments[2] : void 0;
      var _onDrag = cfg.onDrag || emptyFn;
      var _onDrop = cfg.onDrop || emptyFn;
      (0, _dragHelper.default)(event2, {
        constrainTo,
        region,
        onDrag: function onDrag(event3, config) {
          event3.preventDefault();
          _onDrag({
            left: config.diff.left || 0,
            top: config.diff.top || 0
          }, event3);
        },
        onDrop: function onDrop(event3, config) {
          _onDrop(config.diff);
        }
      });
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/moveXBeforeY.js
var require_moveXBeforeY = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/moveXBeforeY.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(array, from, to) {
      if (!Array.isArray(array)) {
        array = [];
      }
      var result = [].concat(array);
      var len = array.length;
      if (from === to || !len || from == null || to == null || from >= len || to > len) {
        return result;
      }
      from = Array.isArray(from) ? from : [from];
      var lessThanCount = from.reduce(function(acc, index2) {
        return acc + (index2 < to ? 1 : 0);
      }, 0);
      var values = from.map(function(index2) {
        return array[index2];
      }).reverse();
      var emptyArray = [];
      emptyArray.concat(from).sort(function(a, b) {
        return b - a;
      }).forEach(function(index2) {
        result.splice(index2, 1);
      });
      from.reverse().forEach(function(_, i) {
        result.splice(to - lessThanCount, 0, values[i]);
      });
      return result;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/matchesSelector.js
var require_matchesSelector2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/matchesSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(element, selector) {
      var proto = Element.prototype;
      var vendor = proto.matches || proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;
      function match(el, sel) {
        if (vendor) {
          return vendor.call(el, sel);
        }
        var nodes = el.parentNode.querySelectorAll(sel);
        for (var i = 0, len = nodes.length; i < len; i++) {
          if (nodes[i] == el) {
            return true;
          }
        }
        return false;
      }
      return match(element, selector);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/isFocusable.js
var require_isFocusable = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/isFocusable.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _matchesSelector = _interopRequireDefault(require_matchesSelector2());
    var FOCUSABLE_SELECTOR = "input, select, textarea, button, object, a[href], [tabindex]";
    var _default = function _default2(element) {
      return (0, _matchesSelector.default)(element, FOCUSABLE_SELECTOR);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/getDropIndex.js
var require_getDropIndex = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/getDropIndex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(_ref) {
      var dragTarget = _ref.dragTarget, dropTarget = _ref.dropTarget, dragMinIndex = _ref.dragMinIndex, dragMaxIndex = _ref.dragMaxIndex, dragRange = _ref.dragRange, ranges = _ref.ranges, rtl = _ref.rtl, dir = _ref.dir, validDropPositions = _ref.validDropPositions;
      ranges = ranges || [];
      var dragIndex = dragRange.index;
      var draggingLocked = dragRange.computedLocked;
      var locked = draggingLocked;
      var isValid = function isValid2(i2) {
        if (i2 === void 0) {
          return false;
        }
        var validDropIndex = dropTarget === "group" || !validDropPositions || validDropPositions[i2];
        if (dragMinIndex !== void 0 && i2 < dragMinIndex || dragMaxIndex !== void 0 && i2 > dragMaxIndex || !validDropIndex || i2 > ranges.length) {
          return false;
        }
        return true;
      };
      var searchInRanges = dragTarget != dropTarget ? ranges : dir == 1 ? ranges.slice(dragIndex) : ranges.slice(0, dragIndex);
      var currentRange;
      var halfSize;
      var thisDir;
      var index2;
      var foundIndex;
      for (var i = 0, len = searchInRanges.length; i < len; i++) {
        currentRange = searchInRanges[i];
        if (!currentRange) {
          continue;
        }
        index2 = currentRange.index;
        thisDir = index2 <= dragIndex || dragTarget !== dropTarget ? -1 : 1;
        halfSize = (currentRange.right - currentRange.left) / 2;
        if (thisDir > 0) {
          if (isValid(index2 + 1) && (rtl ? dragRange.left <= currentRange.right - halfSize : dragRange.right >= currentRange.left + halfSize)) {
            foundIndex = index2 + 1;
          }
        } else {
          if (isValid(index2) && (rtl ? dragRange.right > currentRange.right - halfSize : dragRange.left < currentRange.left + halfSize)) {
            foundIndex = index2;
            if (dropTarget !== dragTarget || dir === -1) {
              break;
            }
          }
        }
      }
      if (dragTarget === dropTarget) {
        if (foundIndex === dragIndex + 1) {
          foundIndex++;
        } else if (foundIndex === void 0) {
          foundIndex = dragIndex === ranges.length - 1 || dragIndex === 0 ? dragIndex : dir > 1 ? ranges.length : void 0;
        }
      } else if (foundIndex === void 0) {
        foundIndex = ranges.length;
      }
      if (!isValid(foundIndex)) {
        foundIndex = void 0;
      }
      if (dragMinIndex !== void 0 && foundIndex < dragMinIndex) {
        foundIndex = dragMinIndex;
      }
      if (dragMaxIndex !== void 0 && foundIndex > dragMaxIndex) {
        foundIndex = dragMaxIndex;
      }
      if (!isValid(foundIndex)) {
        foundIndex = dragIndex;
      }
      if (!isValid(foundIndex)) {
        foundIndex = void 0;
      }
      if (isValid(foundIndex) && ranges[foundIndex]) {
        locked = ranges[foundIndex].computedLocked;
      }
      var initialLocked = locked;
      if (dir === 1) {
        var targetRange = ranges[foundIndex];
        var beforeTargetRange = ranges[foundIndex - 1];
        var afterTargetRange = ranges[foundIndex + 1];
        if (targetRange && !targetRange.computedLocked) {
          if (rtl) {
            if (dragRange.left < targetRange.right) {
              locked = targetRange.computedLocked;
            } else {
              locked = beforeTargetRange ? beforeTargetRange.computedLocked : initialLocked;
            }
          } else {
            if (dragRange.right > targetRange.left) {
              locked = targetRange.computedLocked;
            } else {
              locked = beforeTargetRange ? beforeTargetRange.computedLocked : initialLocked;
            }
          }
        } else if (targetRange && targetRange.computedLocked === "end") {
          if (rtl) {
            locked = dragRange.left < targetRange.right ? "end" : beforeTargetRange ? beforeTargetRange.computedLocked : initialLocked;
          } else {
            locked = dragRange.right > targetRange.left ? "end" : beforeTargetRange ? beforeTargetRange.computedLocked : initialLocked;
          }
        } else if (afterTargetRange && !afterTargetRange.computedLocked && (rtl ? dragRange.left > afterTargetRange.right : dragRange.right > afterTargetRange.left)) {
          locked = null;
        } else if (beforeTargetRange && beforeTargetRange.computedLocked === "end") {
          locked = "end";
        }
      }
      if (dir === -1) {
        var _targetRange = ranges[foundIndex];
        var _beforeTargetRange = ranges[foundIndex - 1];
        if (_beforeTargetRange && !_beforeTargetRange.computedLocked && (rtl ? dragRange.right > _beforeTargetRange.left : dragRange.left < _beforeTargetRange.right)) {
          locked = null;
        } else if (_beforeTargetRange && _beforeTargetRange.computedLocked === "start" && (rtl ? dragRange.right > _beforeTargetRange.left : dragRange.left < _beforeTargetRange.right)) {
          locked = "start";
        } else if (_targetRange && _targetRange.computedLocked === "end" && (rtl ? dragRange.right > _targetRange.left : dragRange.left < _targetRange.right)) {
          locked = "end";
        }
      }
      if (draggingLocked === "start" && ranges[foundIndex] && ranges[foundIndex].computedLocked === "start" && locked == null) {
        foundIndex++;
      }
      return {
        index: foundIndex,
        locked
      };
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/getUndraggableSuccessiveCount.js
var require_getUndraggableSuccessiveCount = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/getUndraggableSuccessiveCount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(columns) {
      return columns.reduce(function(acc, col) {
        if (col.draggable !== false) {
          acc.stop = true;
        }
        if (col.draggable === false && !acc.stop) {
          acc.count++;
        }
        return acc;
      }, {
        count: 0
      }).count;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Field/src/index.js
var require_src17 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Field/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var InovuaField = function(_Component) {
      (0, _inherits2.default)(InovuaField2, _Component);
      var _super = _createSuper(InovuaField2);
      function InovuaField2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaField2);
        _this = _super.call(this, props2);
        _this.ref = function(ref) {
          _this.input = ref;
        };
        _this.onChange = _this.onChange.bind((0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(InovuaField2, [{
        key: "render",
        value: function render() {
          var inputProps = _objectSpread({}, this.props);
          delete inputProps.stopChangePropagation;
          return _react.default.createElement("input", _objectSpread(_objectSpread({}, inputProps), {}, {
            onChange: this.onChange,
            ref: this.ref
          }));
        }
      }, {
        key: "focus",
        value: function focus() {
          if (this.input) {
            this.input.focus();
          }
        }
      }, {
        key: "onChange",
        value: function onChange(event2) {
          if (this.props.stopChangePropagation) {
            event2.stopPropagation();
          }
          this.props.onChange(event2.target.value, event2);
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this.input;
        }
      }]);
      return InovuaField2;
    }(_react.Component);
    InovuaField.propTypes = {
      type: _propTypes.default.string,
      stopChangePropagation: _propTypes.default.bool
    };
    InovuaField.defaultProps = {
      stopChangePropagation: true,
      onChange: function onChange() {
      },
      type: "text"
    };
    var _default = InovuaField;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/Field/index.js
var require_Field = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/Field/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src17());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/TextInput/src/index.js
var require_src18 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/TextInput/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _autoBind = _interopRequireDefault(require_autoBind());
    var _Field = _interopRequireDefault(require_Field());
    var _join = _interopRequireDefault(require_join());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var preventDefault = function preventDefault2(e) {
      return e.preventDefault();
    };
    var getClearButtonClassNames = function getClearButtonClassNames2(props2) {
      var clearButtonClassName = (0, _join.default)("".concat(props2.rootClassName, "__clear-button"), props2.clearButtonClassName);
      return {
        clearButtonClassName
      };
    };
    var isControlled = function isControlled2(props2) {
      return props2.value !== void 0;
    };
    var emptyObject = {};
    var TextInput = function(_Component) {
      (0, _inherits2.default)(TextInput2, _Component);
      var _super = _createSuper(TextInput2);
      function TextInput2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, TextInput2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderClearIcon", function(svgProps) {
          var result;
          if (_this.props.renderClearIcon && typeof _this.props.renderClearIcon === "function") {
            result = _this.props.renderClearIcon(_objectSpread({}, svgProps));
          }
          if (result === void 0) {
            result = _react.default.createElement("svg", {
              style: _objectSpread({}, svgProps),
              viewBox: "0 0 10 10"
            }, _react.default.createElement("path", {
              fill: "none",
              fillRule: "evenodd",
              strokeLinecap: "round",
              strokeWidth: "1.33",
              d: "M1 1l8 8m0-8L1 9"
            }));
          }
          return result;
        });
        _this.fieldRef = function(field) {
          _this.field = field;
        };
        _this.state = {
          focused: false,
          value: props2.defaultValue == null ? "" : props2.defaultValue
        };
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(TextInput2, [{
        key: "handleChange",
        value: function handleChange(value, event2) {
          this.setValue(value, event2);
        }
      }, {
        key: "focus",
        value: function focus() {
          this.field.focus();
        }
      }, {
        key: "setValue",
        value: function setValue(value, event2) {
          if (!isControlled(this.props)) {
            this.setState({
              value
            });
          }
          if (this.props.inputProps && this.props.inputProps.onChange) {
            this.props.inputProps.onChange(value, event2);
          }
          if (this.props.onChange) {
            this.props.onChange(value, event2);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props, state = this.state;
          var wrapperProps = props2.wrapperProps, style = props2.style, enableClearButton = props2.enableClearButton;
          var inputProps = props2.inputProps || emptyObject;
          var inputClassName = (0, _join.default)("".concat(props2.rootClassName, "__input"), inputProps.className);
          var value = isControlled(props2) ? props2.value : state.value;
          var fieldProps = _objectSpread(_objectSpread({
            size: 1
          }, inputProps), {}, {
            ref: this.fieldRef,
            className: inputClassName,
            onChange: this.handleChange,
            value,
            type: props2.type,
            stopChangePropagation: props2.stopChangePropagation
          });
          if (props2.hidden) {
            fieldProps.hidden = props2.hidden;
          }
          if (props2.name) {
            fieldProps.name = props2.name;
          }
          if (props2.placeholder) {
            fieldProps.placeholder = props2.placeholder;
          }
          if (props2.required) {
            fieldProps.required = props2.required;
          }
          if (props2.readOnly) {
            fieldProps.readOnly = props2.readOnly;
          }
          if (props2.autoFocus) {
            fieldProps.autoFocus = props2.autoFocus;
          }
          if (props2.maxLength != void 0) {
            fieldProps.maxLength = props2.maxLength;
          }
          if (props2.minLength != void 0) {
            fieldProps.minLength = props2.minLength;
          }
          if (props2.size != void 0) {
            fieldProps.size = props2.size;
          }
          if (props2.disabled) {
            fieldProps.disabled = props2.disabled;
          }
          var className = (0, _join.default)(props2.rootClassName, props2.className, props2.rtl ? "".concat(props2.rootClassName, "--rtl") : "".concat(props2.rootClassName, "--ltr"), props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), enableClearButton && "".concat(props2.rootClassName, "--enable-clear-button"), state.focused && "".concat(props2.rootClassName, "--focused"), fieldProps.disabled && "".concat(props2.rootClassName, "--disabled"));
          var input = _react.default.createElement(_Field.default, _objectSpread({}, fieldProps));
          var wrapperDomProps = (0, _cleanProps.default)(wrapperProps, TextInput2.propTypes);
          var domProps = (0, _cleanProps.default)(props2, TextInput2.propTypes);
          delete domProps.onChange;
          return _react.default.createElement("div", _objectSpread(_objectSpread(_objectSpread({}, domProps), wrapperDomProps), {}, {
            className,
            style,
            onBlur: this.onBlur,
            onClick: this.onClick,
            onFocus: this.onFocus
          }), input, this.renderClearButtonWrapper(fieldProps));
        }
      }, {
        key: "handleClearButtonClick",
        value: function handleClearButtonClick(event2) {
          this.setState({
            focused: true
          });
          this.setValue("");
          this.focus();
        }
      }, {
        key: "renderClearButtonWrapper",
        value: function renderClearButtonWrapper(fieldProps) {
          var props2 = this.props, state = this.state;
          var clearButtonColor = props2.clearButtonColor, clearButtonStyle = props2.clearButtonStyle, clearButtonSize = props2.clearButtonSize, enableClearButton = props2.enableClearButton, rootClassName = props2.rootClassName;
          var value = isControlled(props2) ? props2.value : state.value;
          var emptyValue = value == "" || value == null;
          var showButton = enableClearButton && !emptyValue && !fieldProps.disabled && !fieldProps.readOnly;
          return _react.default.createElement("div", {
            key: "clearButton",
            className: (0, _join.default)("".concat(rootClassName, "__clear-button-wrapper"), !showButton && "".concat(rootClassName, "__clear-button-wrapper--hidden"))
          }, this.renderClearButton(_objectSpread({
            clearButtonColor,
            clearButtonStyle,
            clearButtonSize
          }, getClearButtonClassNames(props2))));
        }
      }, {
        key: "renderClearButton",
        value: function renderClearButton(config) {
          var clearButtonColor = config.clearButtonColor, clearButtonStyle = config.clearButtonStyle, clearButtonClassName = config.clearButtonClassName, clearButtonSize = config.clearButtonSize;
          var svgProps = {};
          var tabIndex = this.props.acceptClearToolFocus ? 0 : -1;
          if (clearButtonColor) {
            svgProps.fill = clearButtonColor;
          }
          if (clearButtonSize) {
            if (Array.isArray(clearButtonSize)) {
              svgProps.width = clearButtonSize[0];
              svgProps.height = clearButtonSize[1];
            } else {
              svgProps.width = clearButtonSize;
              svgProps.height = clearButtonSize;
            }
          }
          return _react.default.createElement("button", {
            key: "clearButton",
            type: "button",
            onClick: this.handleClearButtonClick,
            onMouseDown: preventDefault,
            className: clearButtonClassName,
            style: _objectSpread({}, clearButtonStyle),
            tabIndex
          }, this.renderClearIcon(svgProps));
        }
      }, {
        key: "onClick",
        value: function onClick(event2) {
          if (!this.state.focused) {
            this.focus();
          }
          if (this.props.wrapperProps && this.props.wrapperProps.onClick) {
            this.props.wrapperProps.onClick(event2);
          }
        }
      }, {
        key: "onBlur",
        value: function onBlur(event2) {
          this.setState({
            focused: false
          });
          if (this.props.onBlur) {
            this.props.onBlur(event2);
          }
        }
      }, {
        key: "onFocus",
        value: function onFocus(event2) {
          this.setState({
            focused: true
          });
          if (this.props.onFocus) {
            this.props.onFocus(event2);
          }
        }
      }]);
      return TextInput2;
    }(_react.Component);
    TextInput.defaultProps = {
      hidden: false,
      type: "text",
      theme: "default-light",
      rootClassName: "inovua-react-toolkit-text-input",
      enableClearButton: true,
      clearButtonSize: 10,
      stopChangePropagation: true,
      acceptClearToolFocus: false
    };
    TextInput.propTypes = {
      type: _propTypes.default.string,
      theme: _propTypes.default.string,
      name: _propTypes.default.string,
      placeholder: _propTypes.default.string,
      autoFocus: _propTypes.default.bool,
      maxLength: _propTypes.default.number,
      size: _propTypes.default.number,
      minLength: _propTypes.default.number,
      required: _propTypes.default.bool,
      readOnly: _propTypes.default.bool,
      disabled: _propTypes.default.bool,
      hidden: _propTypes.default.bool,
      stopChangePropagation: _propTypes.default.bool,
      enableClearButton: _propTypes.default.bool,
      acceptClearToolFocus: _propTypes.default.bool,
      rtl: _propTypes.default.bool,
      rootClassName: _propTypes.default.string,
      clearButtonSize: _propTypes.default.number,
      clearButtonColor: _propTypes.default.string,
      clearButtonStyle: _propTypes.default.object,
      clearButtonClassName: _propTypes.default.string,
      renderClearIcon: _propTypes.default.func
    };
    var _default = TextInput;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/TextInput/index.js
var require_TextInput2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/TextInput/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src18());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/StringFilter/StringFilter.js
var require_StringFilter = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/StringFilter/StringFilter.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _TextInput = _interopRequireDefault(require_TextInput2());
    var _debounce = _interopRequireDefault(require_debounce());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var StringFilter = function(_React$Component) {
      (0, _inherits2.default)(StringFilter2, _React$Component);
      var _super = _createSuper(StringFilter2);
      function StringFilter2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, StringFilter2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "input", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refInput", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(_ref) {
          var value = _ref.filterValue.value;
          if (String(value).localeCompare(String(_this.props.filterValue && _this.props.filterValue.value))) {
            if (_this.props.filterValue) {
              _this.onChange(_this.props.filterValue.value);
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getInputRef", function() {
          return _this.input;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderClearIcon", function(_ref2) {
          var width = _ref2.width, height = _ref2.height;
          return _react.default.createElement("svg", {
            style: {
              width,
              height
            },
            viewBox: "0 0 10 10"
          }, _react.default.createElement("path", {
            fill: "none",
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeWidth: "1.33",
            d: "M1 1l8 8m0-8L1 9"
          }));
        });
        _this.refInput = function(i) {
          var _props$filterEditorPr;
          var inputRef = props2.inputRef || ((_props$filterEditorPr = props2.filterEditorProps) === null || _props$filterEditorPr === void 0 ? void 0 : _props$filterEditorPr.inputRef);
          if (inputRef) {
            if (typeof inputRef === "function") {
              inputRef(i);
            } else {
              inputRef.current = i;
            }
          }
          _this.input = i;
        };
        var filterValue = props2.filterValue;
        _this.state = {
          value: filterValue ? filterValue.value || "" : ""
        };
        _this.onChange = _this.onChange.bind((0, _assertThisInitialized2.default)(_this));
        _this.onValueChange = _this.onValueChange.bind((0, _assertThisInitialized2.default)(_this));
        if (props2.filterDelay && props2.filterDelay >= 1) {
          _this.onValueChange = (0, _debounce.default)(_this.onValueChange, props2.filterDelay, {
            leading: false,
            trailing: true
          });
        }
        return _this;
      }
      (0, _createClass2.default)(StringFilter2, [{
        key: "onChange",
        value: function onChange(value) {
          this.onValueChange(value);
          this.setValue(value);
        }
      }, {
        key: "setValue",
        value: function setValue(value) {
          this.setState({
            value
          });
        }
      }, {
        key: "onValueChange",
        value: function onValueChange(value) {
          this.props.onChange && this.props.onChange(_objectSpread(_objectSpread({}, this.props.filterValue), {}, {
            value
          }));
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, filterValue = _this$props.filterValue, readOnly = _this$props.readOnly, disabled = _this$props.disabled, style = _this$props.style, rtl = _this$props.rtl, theme = _this$props.theme, placeholder = _this$props.placeholder;
          var inputProps = {
            readOnly,
            disabled,
            theme,
            rtl,
            value: this.state.value,
            placeholder,
            style: _objectSpread({
              minWidth: 0
            }, style)
          };
          var filterEditorProps;
          if (filterValue) {
            filterEditorProps = filterValue.filterEditorProps;
            inputProps.value = this.state.value;
          }
          return this.props.render && this.props.render(_react.default.createElement(_TextInput.default, _objectSpread(_objectSpread({}, filterEditorProps), {}, {
            type: "text",
            ref: this.refInput,
            onChange: this.onChange,
            renderClearIcon: this.renderClearIcon,
            className: "InovuaReactDataGrid__column-header__filter InovuaReactDataGrid__column-header__filter--string"
          }, inputProps)));
        }
      }]);
      return StringFilter2;
    }(_react.default.Component);
    var _default = StringFilter;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderFilter/index.js
var require_renderFilter = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderFilter/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _StringFilter = _interopRequireDefault(require_StringFilter());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var filterWrapperClassName = "InovuaReactDataGrid__column-header__filter-wrapper";
    var GenericFilter = function(_React$Component) {
      (0, _inherits2.default)(GenericFilter2, _React$Component);
      var _super = _createSuper(GenericFilter2);
      function GenericFilter2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, GenericFilter2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSettingsClickListener", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "settings", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refSettings", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "ref", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "specificFilter", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "unsubscribeColumnFilterVisibility", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupEventListener", function() {
          _this.unsubscribeColumnFilterVisibility = _this.props.props.notifyColumnFilterVisibleStateChange.onCalled(function(visible) {
            if (!visible && _this.state.open) {
              _this.close(_this.settings);
            }
          });
          _this.refSettings = function(s) {
            if (s) {
              if (!_this.onSettingsClickListener) {
                _this.onSettingsClickListener = s.addEventListener("mousedown", _this.onSettingsClick);
              }
            } else {
              if (_this.settings && _this.onSettingsClickListener) {
                _this.settings.removeEventListener(_this.onSettingsClickListener);
              }
            }
            _this.settings = s;
          };
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSettingsClick", function(e) {
          if (!_this.state.open) {
            _this.onMenuOpen(e);
          } else {
            _this.onMenuClose(e);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function() {
          _this.setState({
            focused: true
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onBlur", function() {
          _this.setState({
            focused: false
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMenuOpen", function(e) {
          e.preventDefault();
          _this.props.cellInstance.showFilterContextMenu(_this.settings);
          _this.setState({
            focused: true,
            open: true
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMenuClose", function(e) {
          e.preventDefault();
          _this.close();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onKeyDown", function(event2) {
          if (event2.key === "Enter") {
            _this.onMenuOpen(event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "close", function(settings) {
          _this.setState({
            focused: false,
            open: false
          }, function() {
            _this.props.cellInstance.hideFilterContextMenu(settings);
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setValue", function(value) {
          if (_this.specificFilter.setValue) {
            _this.specificFilter.setValue(value);
          }
        });
        _this.onSettingsClick = _this.onSettingsClick.bind((0, _assertThisInitialized2.default)(_this));
        _this.onSettingsClickListener = null;
        _this.ref = function(specificFilter) {
          var inputRef = props2.inputRef || props2.props.filterEditorProps && props2.props.filterEditorProps.inputRef;
          if (inputRef) {
            if (typeof inputRef === "function") {
              inputRef(specificFilter);
            } else {
              inputRef.current = specificFilter;
            }
          }
          _this.specificFilter = specificFilter;
        };
        _this.state = {
          focused: false,
          open: false
        };
        return _this;
      }
      (0, _createClass2.default)(GenericFilter2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this.props.cellInstance) {
            this.props.cellInstance.filter = this;
          }
          this.setupEventListener();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.props.cellInstance) {
            this.props.cellInstance.filter = null;
          }
          if (this.settings && this.onSettingsClickListener) {
            this.settings.removeEventListener(this.onSettingsClickListener);
          }
          this.onSettingsClickListener = null;
          this.settings = null;
          if (this.unsubscribeColumnFilterVisibility) {
            this.unsubscribeColumnFilterVisibility();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, props2 = _this$props.props, cellInstance = _this$props.cellInstance;
          var filterValue = props2.computedFilterValue;
          var active = filterValue ? filterValue.active !== false : false;
          var filterType = filterValue ? filterValue.type || props2.filterType || props2.type : props2.filterType || props2.type || "string";
          if (filterValue && !filterValue.type) {
            filterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
              type: filterType
            });
          }
          var className = filterWrapperClassName;
          if (filterValue) {
            if (!active) {
              className += " ".concat(className, "--disabled");
            }
          }
          var settings;
          var style = {
            minHeight: props2.filterRowHeight + 1
          };
          if (filterValue) {
            var settingsIconClassName = "InovuaReactDataGrid__column-header__filter-settings-icon";
            var settingsIcon = props2.filterEditorProps && props2.filterEditorProps.renderSettings ? props2.filterEditorProps.renderSettings({
              className: settingsIconClassName,
              filterValue
            }) : _react.default.createElement("svg", {
              tabIndex: 0,
              className: settingsIconClassName,
              width: "14",
              height: "14",
              viewBox: "0 0 14 14"
            }, _react.default.createElement("path", {
              fillRule: "evenodd",
              d: "M13.222 2H.778C.348 2 0 1.552 0 1s.348-1 .778-1h12.444c.43 0 .778.448.778 1s-.348 1-.778 1zM1.556 3.111l3.888 4.667v5.444c0 .43.349.778.778.778h1.556c.43 0 .778-.348.778-.778V7.778l3.888-4.667H1.556z"
            }));
            settings = _react.default.createElement("div", {
              className: "InovuaReactDataGrid__column-header__filter-settings",
              ref: this.refSettings,
              onKeyDown: this.onKeyDown,
              onFocus: this.onFocus,
              onBlur: this.onBlur
            }, settingsIcon);
          }
          if (!filterValue) {
            className += " ".concat(filterWrapperClassName, "--empty");
            return _react.default.createElement("div", {
              style,
              className
            });
          }
          var filterTypes = props2.filterTypes;
          var filterTypeDescription = filterTypes[filterType] || {
            operators: []
          };
          var operator = filterTypeDescription.operators.filter(function(op) {
            return op.name === filterValue.operator;
          })[0];
          var operatorDisabled = operator && operator.disableFilterEditor;
          var filterProps = _objectSpread(_objectSpread({
            i18n: props2.i18n,
            rtl: props2.rtl,
            nativeScroll: props2.nativeScroll,
            filterDelay: props2.filterDelay !== void 0 ? props2.filterDelay : 250
          }, props2.filterEditorProps), {}, {
            filterEditorProps: props2.filterEditorProps,
            ref: this.ref,
            cellProps: props2,
            renderInPortal: props2.renderInPortal,
            cell: cellInstance,
            filterValue,
            emptyValue: filterTypeDescription.emptyValue,
            onChange: cellInstance.onFilterValueChange,
            active,
            disabled: !active || operatorDisabled,
            filterType,
            theme: props2.theme,
            render: function render2(node) {
              return _react.default.createElement("div", {
                style,
                className
              }, node, props2.enableColumnFilterContextMenu && settings);
            }
          });
          var FilterEditor = props2.filterEditor;
          if (FilterEditor && typeof FilterEditor != "string") {
            return _react.default.createElement(FilterEditor, _objectSpread({}, filterProps));
          }
          if (props2.renderFilterEditor) {
            return props2.renderFilterEditor(filterProps, props2, cellInstance);
          }
          return _react.default.createElement(_StringFilter.default, _objectSpread({}, filterProps));
        }
      }]);
      return GenericFilter2;
    }(_react.default.Component);
    var _default = function _default2(props2, cellInstance) {
      return _react.default.createElement(GenericFilter, {
        key: "filter-".concat(cellInstance.getProps().id),
        props: props2,
        rtl: props2.rtl,
        cellInstance
      });
    };
    exports.default = _default;
  }
});

// node_modules/lodash.throttle/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.throttle/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function throttle2(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = throttle2;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/ColumnResizer.js
var require_ColumnResizer = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/ColumnResizer.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _lodash = _interopRequireDefault(require_lodash2());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var propTypes = {
      onMouseDown: _propTypes.default.func.isRequired,
      onTouchStart: _propTypes.default.func.isRequired,
      resizeHandleClassName: _propTypes.default.string.isRequired
    };
    var ColumnResizer = function(_Component) {
      (0, _inherits2.default)(ColumnResizer2, _Component);
      var _super = _createSuper(ColumnResizer2);
      function ColumnResizer2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, ColumnResizer2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "overHeight", 0);
        _this.state = {
          over: false
        };
        _this.domRef = _react.default.createRef();
        _this.onMouseDown = _this.onMouseDown.bind((0, _assertThisInitialized2.default)(_this));
        _this.onTouchStart = _this.onTouchStart.bind((0, _assertThisInitialized2.default)(_this));
        _this.onMouseEnter = _this.onMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
        _this.onMouseLeave = _this.onMouseLeave.bind((0, _assertThisInitialized2.default)(_this));
        _this.setOver = (0, _lodash.default)(_this.setOver, 50, {
          leading: false
        });
        return _this;
      }
      (0, _createClass2.default)(ColumnResizer2, [{
        key: "onMouseEnter",
        value: function onMouseEnter() {
          var parent = this.domRef.current.parentElement;
          var overHeight = parent ? parent.offsetHeight : null;
          this.overHeight = overHeight;
          this.setOver(true);
        }
      }, {
        key: "setOver",
        value: function setOver(value) {
          if (value) {
            this.setState({
              over: true,
              overHeight: this.overHeight
            });
          } else {
            this.setState({
              over: false
            });
          }
        }
      }, {
        key: "onMouseLeave",
        value: function onMouseLeave() {
          this.setOver(false);
        }
      }, {
        key: "onMouseDown",
        value: function onMouseDown(event2) {
          event2.preventDefault();
          if (this.props.onMouseDown) {
            this.props.onMouseDown(event2);
          }
          this.setState({
            over: false
          });
        }
      }, {
        key: "onTouchStart",
        value: function onTouchStart(event2) {
          event2.preventDefault();
          if (this.props.onTouchStart) {
            this.props.onTouchStart(event2);
          }
          this.setState({
            over: false
          });
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var _this$props = this.props, className = _this$props.className, resizeHandleClassName = _this$props.resizeHandleClassName;
          var style = _objectSpread(_objectSpread({}, props2.style), {}, {
            height: this.state.overHeight
          });
          var resizeHandleStyle = _objectSpread({}, props2.resizeHandleStyle);
          if (this.state.over) {
            resizeHandleStyle.visibility = "visible";
          } else {
            resizeHandleStyle.visibility = "hidden";
          }
          return _react.default.createElement("div", {
            ref: this.domRef,
            draggable: "false",
            className,
            onMouseDown: this.onMouseDown,
            onTouchStart: this.onTouchStart,
            onMouseEnter: this.onMouseEnter,
            onMouseLeave: this.onMouseLeave,
            style
          }, _react.default.createElement("div", {
            style: resizeHandleStyle,
            className: resizeHandleClassName
          }));
        }
      }]);
      return ColumnResizer2;
    }(_react.Component);
    exports.default = ColumnResizer;
    (0, _defineProperty2.default)(ColumnResizer, "propTypes", propTypes);
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderMenuTool.js
var require_renderMenuTool = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderMenuTool.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.MenuTool = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = _interopRequireWildcard(require_react());
    var _join = _interopRequireDefault(require_join4());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var BASE_CLASS_NAME = "InovuaReactDataGrid__column-header__menu-tool";
    var MenuTool = function MenuTool2(props2) {
      var _useState = (0, _react.useState)(false), _useState2 = (0, _slicedToArray2.default)(_useState, 2), keepVisible = _useState2[0], setKeepVisible = _useState2[1];
      var domRef = (0, _react.useRef)();
      var _unmounted = (0, _react.useRef)();
      (0, _react.useEffect)(function() {
        _unmounted.current = false;
        return function() {
          _unmounted.current = true;
        };
      }, []);
      var onClick = function onClick2(event2) {
        event2.stopPropagation();
      };
      var onMouseDown = function onMouseDown2(event2) {
        event2.preventDefault();
        props2.showContextMenu && props2.showContextMenu(domRef.current, props2.showOnHover ? onHide : null);
        if (_unmounted.current) {
          return;
        }
        if (props2.showOnHover && !keepVisible) {
          setKeepVisible(true);
        }
      };
      var onHide = function onHide2() {
        if (_unmounted.current) {
          return;
        }
        setKeepVisible(false);
      };
      var renderMenuTool = function renderMenuTool2() {
        var domProps = {
          className: (0, _join.default)("", "InovuaReactDataGrid__sort-icon--desc"),
          width: 14,
          height: 12
        };
        if (props2.renderMenuTool) {
          return props2.renderMenuTool(domProps);
        }
        return _react.default.createElement("svg", _objectSpread(_objectSpread({}, domProps), {}, {
          viewBox: "0 0 14 12"
        }), _react.default.createElement("g", {
          fillRule: "evenodd"
        }, _react.default.createElement("rect", {
          width: "14",
          height: "2",
          rx: "1"
        }), _react.default.createElement("rect", {
          width: "14",
          height: "2",
          y: "5",
          rx: "1"
        }), _react.default.createElement("rect", {
          width: "14",
          height: "2",
          y: "10",
          rx: "1"
        })));
      };
      var className = BASE_CLASS_NAME;
      var showOnHover = props2.showOnHover, rtl = props2.rtl;
      if (showOnHover) {
        className += " ".concat(BASE_CLASS_NAME, "--show-on-hover");
      }
      if (!showOnHover || keepVisible) {
        className += " ".concat(BASE_CLASS_NAME, "--visible");
      }
      className += " ".concat(BASE_CLASS_NAME, "--direction-").concat(rtl ? "rtl" : "ltr");
      return _react.default.createElement("div", {
        className,
        onMouseDown,
        onClick,
        ref: domRef
      }, renderMenuTool());
    };
    exports.MenuTool = MenuTool;
    var _default = function _default2(props2, cellInstance) {
      if (props2.groupSpacerColumn) {
        return null;
      }
      if (!props2.showColumnMenuTool) {
        return null;
      }
      return _react.default.createElement(MenuTool, {
        key: "menuTool",
        name: props2.name,
        rtl: props2.rtl,
        showOnHover: props2.showColumnMenuToolOnHover,
        showContextMenu: cellInstance.showContextMenu,
        renderMenuTool: props2.renderMenuTool
      });
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderHeader.js
var require_renderHeader = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderHeader.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _join = _interopRequireDefault(require_join4());
    var _renderFilter = _interopRequireDefault(require_renderFilter());
    var _ColumnResizer = _interopRequireDefault(require_ColumnResizer());
    var _renderMenuTool = _interopRequireDefault(require_renderMenuTool());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var RESIZE_WRAPPER_CLASS_NAME = "InovuaReactDataGrid__column-header__resize-wrapper";
    var HEADER_CONTENT_CLASS_NAME = "InovuaReactDataGrid__column-header__content";
    var EMPTY_OBJECT = {};
    var renderContent = function renderContent2(props2) {
      if (!props2) {
        return;
      }
      if (props2.renderColumnReorderProxy) {
        return props2.renderColumnReorderProxy(props2);
      }
      return props2.children;
    };
    var renderHeader = function renderHeader2(props2, domProps, cellInstance) {
      var state = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : EMPTY_OBJECT;
      var dragging = props2.dragging !== void 0 ? props2.dragging : state.dragging;
      var last = props2.last || props2.computedVisibleIndex == props2.computedVisibleCount - 1;
      var depth = props2.depth, showBorderRight = props2.showBorderRight, showBorderLeft = props2.showBorderLeft, computedLocked = props2.computedLocked, firstInSection = props2.firstInSection, lastInSection = props2.lastInSection, group = props2.group, rtl = props2.rtl, virtualizeColumns = props2.virtualizeColumns, headerProps = props2.headerProps;
      var style = headerProps && headerProps.headerCellStyle ? headerProps.headerCellStyle : null;
      var content = _react.default.createElement("div", {
        key: "content",
        style,
        className: "".concat(HEADER_CONTENT_CLASS_NAME, " ").concat(props2.headerEllipsis !== false ? "InovuaReactDataGrid__box--ellipsis" : ""),
        children: renderContent(props2)
      });
      var menuTool = (0, _renderMenuTool.default)(props2, cellInstance);
      var headerAlign = props2.headerAlign != null ? props2.headerAlign : props2.textAlign;
      content = [headerAlign == "end" && menuTool, content, headerAlign != "end" && menuTool];
      if (props2.computedResizable || props2.computedFilterable) {
        var innerStyle = Object.assign({}, domProps.style || EMPTY_OBJECT);
        if (!dragging) {
          delete innerStyle.width;
          delete innerStyle.minWidth;
        }
        if (virtualizeColumns) {
          delete innerStyle.position;
        }
        var resizeHandleStyle;
        var right;
        var resizerClassName;
        if (props2.computedResizable) {
          right = props2.computedVisibleIndex === props2.computedVisibleCount - 1 && !showBorderRight || lastInSection ? 0 : -props2.columnResizeHandleWidth / 2;
          resizeHandleStyle = {
            width: props2.columnResizeHandleWidth,
            zIndex: 1e4 * (depth || 0)
          };
          if (lastInSection && computedLocked === "start") {
            right = -props2.columnResizeHandleWidth + 1;
          }
          if (props2.resizeProxyStyle) {
            resizeHandleStyle = Object.assign({}, props2.resizeProxyStyle, resizeHandleStyle);
          }
          if (dragging) {
            delete innerStyle.top;
            if (rtl) {
              delete innerStyle.right;
            } else {
              delete innerStyle.left;
            }
          }
          resizerClassName = "InovuaReactDataGrid__column-resizer";
          if (props2.lastUnlocked && !props2.last) {
            resizerClassName += " ".concat(resizerClassName, "--last-unlocked");
          }
          resizerClassName += " InovuaReactDataGrid__column-resizer--direction-".concat(rtl ? "rtl" : "ltr");
        }
        if (innerStyle.transform) {
          delete innerStyle.transform;
        }
        var theStyle = props2.style;
        var styleCloned = false;
        if (computedLocked) {
          theStyle = _objectSpread({}, theStyle);
          styleCloned = true;
        }
        var resizeHandle;
        if (!dragging && !computedLocked && virtualizeColumns) {
          theStyle.left = props2.computedOffset;
          theStyle.position = "absolute";
        }
        if (props2.computedResizable) {
          var _style;
          resizeHandle = _react.default.createElement(_ColumnResizer.default, {
            key: "columnResizer",
            className: resizerClassName,
            onMouseDown: props2.onResizeMouseDown,
            onTouchStart: props2.onResizeTouchStart,
            style: (_style = {
              width: props2.columnResizeHandleWidth
            }, (0, _defineProperty2.default)(_style, props2.rtl ? "left" : "right", right), (0, _defineProperty2.default)(_style, "zIndex", (depth || 0) * 1e4 + (100 - props2.computedVisibleIndex || 0)), (0, _defineProperty2.default)(_style, "height", props2.headerHeight), _style),
            resizeHandleStyle,
            resizeHandleClassName: "InovuaReactDataGrid__column-resize-handle"
          });
        } else {
          if (dragging && props2.computedFilterable) {
            if (!styleCloned) {
              styleCloned = true;
              theStyle = _objectSpread({}, theStyle);
            }
            if (rtl) {
              theStyle.right = state.right || 0;
            } else {
              theStyle.left = state.left || 0;
            }
            theStyle.top = state.top || 0;
          }
        }
        return _react.default.createElement("div", {
          ref: domProps.ref,
          style: theStyle,
          onFocus: domProps.onFocus,
          className: (0, _join.default)(RESIZE_WRAPPER_CLASS_NAME, dragging && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--dragging"), group ? "".concat(RESIZE_WRAPPER_CLASS_NAME, "--has-group") : "".concat(RESIZE_WRAPPER_CLASS_NAME, "--has-no-group"), showBorderLeft && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--show-border-").concat(rtl ? "right" : "left"), (showBorderRight || props2.computedShowHeaderBorderRight && last && !firstInSection) && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--show-border-").concat(rtl ? "left" : "right"), "".concat(RESIZE_WRAPPER_CLASS_NAME, "--direction-").concat(rtl ? "rtl" : "ltr"), computedLocked && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--locked"), computedLocked && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--locked-").concat(computedLocked), firstInSection && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--first-in-section"), lastInSection && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--last-in-section"), last && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--last"), props2.headerWrapperClassName)
        }, _react.default.createElement("div", _objectSpread(_objectSpread({}, cleanup(domProps)), {}, {
          style: innerStyle,
          children: content
        })), resizeHandle, props2.computedFilterable && !dragging ? (0, _renderFilter.default)(props2, cellInstance) : null);
      }
      var ref = domProps.ref;
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, cleanup(domProps)), {}, {
        ref,
        id: null,
        name: null,
        title: null,
        type: null,
        value: null,
        children: content
      }));
    };
    var cleanup = function cleanup2(domProps) {
      delete domProps.ref;
      delete domProps.id;
      delete domProps.computedOffset;
      delete domProps.name;
      delete domProps.title;
      delete domProps.type;
      delete domProps.value;
      delete domProps.onFocus;
      return domProps;
    };
    var _default = renderHeader;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderGroupTool.js
var require_renderGroupTool = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderGroupTool.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var DEFAULT_STYLE = {
      position: "relative",
      verticalAlign: "middle",
      cursor: "pointer"
    };
    var stopPropagation = function stopPropagation2(e) {
      return e.stopPropagation();
    };
    var _default = function _default2(_ref, cellProps) {
      var render = _ref.render, rtl = _ref.rtl, collapsed = _ref.collapsed, toggleGroup = _ref.toggleGroup, style = _ref.style, size = _ref.size, renderGroupCollapseTool = _ref.renderGroupCollapseTool, renderGroupExpandTool = _ref.renderGroupExpandTool;
      size = size || 18;
      style = style ? _objectSpread(_objectSpread({}, DEFAULT_STYLE), style) : DEFAULT_STYLE;
      var domProps = {
        onMouseDown: toggleGroup,
        onClick: stopPropagation,
        style
      };
      var result;
      if (render) {
        domProps.style = _objectSpread({}, domProps.style);
        result = render(domProps, _objectSpread(_objectSpread({}, cellProps), {}, {
          collapsed,
          toggleGroup,
          size
        }));
        if (result != void 0) {
          return result;
        }
      }
      var renderCollapseTool = function renderCollapseTool2() {
        var result2;
        if (renderGroupCollapseTool) {
          result2 = renderGroupCollapseTool({
            domProps,
            size,
            rtl
          });
        }
        if (result2 === void 0) {
          result2 = _react.default.createElement("svg", _objectSpread(_objectSpread({}, domProps), {}, {
            height: size,
            viewBox: "0 0 24 24",
            width: size
          }), rtl ? _react.default.createElement("path", {
            d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
          }) : _react.default.createElement("path", {
            d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
          }));
        }
        return result2;
      };
      var renderExpandTool = function renderExpandTool2() {
        var result2;
        if (renderGroupExpandTool) {
          result2 = renderGroupExpandTool({
            domProps,
            size,
            rtl
          });
        }
        if (result2 === void 0) {
          result2 = _react.default.createElement("svg", _objectSpread(_objectSpread({}, domProps), {}, {
            height: size,
            viewBox: "0 0 24 24",
            width: size
          }), _react.default.createElement("path", {
            d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
          }));
        }
        return result2;
      };
      if (collapsed) {
        return renderCollapseTool();
      }
      return renderExpandTool();
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderNodeTool.js
var require_renderNodeTool = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderNodeTool.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var DEFAULT_STYLE = {
      position: "relative",
      verticalAlign: "middle",
      cursor: "pointer"
    };
    var stopPropagation = function stopPropagation2(e) {
      return e.stopPropagation();
    };
    var _default = function _default2(_ref, cellProps) {
      var render = _ref.render, nodeLoading = _ref.nodeLoading, nodeCollapsed = _ref.nodeCollapsed, leafNode = _ref.leafNode, node = _ref.node, nodeProps = _ref.nodeProps, toggleNodeExpand = _ref.toggleNodeExpand, style = _ref.style, size = _ref.size, renderTreeCollapseTool = _ref.renderTreeCollapseTool, renderTreeExpandTool = _ref.renderTreeExpandTool, renderTreeLoadingTool = _ref.renderTreeLoadingTool;
      size = size || 18;
      if (!leafNode) {
        style = style ? _objectSpread(_objectSpread({}, DEFAULT_STYLE), style) : DEFAULT_STYLE;
      }
      var domProps = {
        onMouseDown: leafNode ? null : toggleNodeExpand,
        onClick: leafNode ? null : stopPropagation,
        style
      };
      var result;
      if (render) {
        domProps.style = _objectSpread({}, domProps.style);
        result = render(domProps, _objectSpread(_objectSpread({}, cellProps), {}, {
          leafNode,
          nodeCollapsed,
          node,
          nodeLoading,
          nodeProps,
          toggleNodeExpand,
          size
        }));
        if (result != void 0) {
          return result;
        }
      }
      if (leafNode) {
        var tools = true;
        if (renderTreeCollapseTool === null && renderTreeExpandTool === null) {
          tools = false;
        }
        return _react.default.createElement("div", _objectSpread(_objectSpread({}, domProps), {}, {
          style: _objectSpread(_objectSpread({}, domProps.style), {}, {
            width: tools ? size : 0,
            height: size
          })
        }));
      }
      var renderNodeLoading = function renderNodeLoading2(_ref2) {
        var domProps2 = _ref2.domProps, size2 = _ref2.size;
        var className = "".concat(domProps2.className || "", " InovuaReactDataGrid__cell__node-tool--loading");
        var loadingTool;
        if (renderTreeLoadingTool === null) {
          return _react.default.createElement("div", {
            style: domProps2.style
          });
        }
        if (renderTreeLoadingTool) {
          loadingTool = renderTreeLoadingTool({
            domProps: domProps2,
            size: size2,
            className
          });
        }
        if (loadingTool === void 0) {
          loadingTool = _react.default.createElement("svg", _objectSpread(_objectSpread({}, domProps2), {}, {
            className,
            height: size2,
            width: size2,
            viewBox: "0 0 24 24"
          }), _react.default.createElement("path", {
            d: "M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"
          }));
        }
        return loadingTool;
      };
      if (nodeLoading) {
        return renderNodeLoading({
          domProps,
          size
        });
      }
      var renderCollapseToolHandle = function renderCollapseToolHandle2() {
        var result2;
        if (renderTreeCollapseTool === null) {
          return _react.default.createElement("div", {
            style: domProps.style
          });
        }
        if (renderTreeCollapseTool) {
          result2 = renderTreeCollapseTool({
            domProps,
            size
          });
        }
        if (result2 === void 0) {
          result2 = _react.default.createElement("svg", _objectSpread(_objectSpread({}, domProps), {}, {
            height: size,
            viewBox: "0 0 24 24",
            width: size
          }), _react.default.createElement("path", {
            d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
          }));
        }
        return result2;
      };
      var renderExpandToolHandle = function renderExpandToolHandle2() {
        var result2;
        if (renderTreeExpandTool === null) {
          return _react.default.createElement("div", {
            style: domProps.style
          });
        }
        if (renderTreeExpandTool) {
          result2 = renderTreeExpandTool({
            domProps,
            size
          });
        }
        if (result2 === void 0) {
          result2 = _react.default.createElement("svg", _objectSpread(_objectSpread({}, domProps), {}, {
            height: size,
            viewBox: "0 0 24 24",
            width: size
          }), _react.default.createElement("path", {
            d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
          }));
        }
        return result2;
      };
      if (nodeCollapsed) {
        return renderCollapseToolHandle();
      }
      return renderExpandToolHandle();
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/sealedObjectFactory.js
var require_sealedObjectFactory = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/sealedObjectFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(props2) {
      var rowProps = Object.seal ? Object.seal(props2) : {};
      return rowProps;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/bemFactory.js
var require_bemFactory = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/bemFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(className) {
      return function(element, modifier) {
        var el = element ? "-".concat(element) : "";
        var mod = modifier ? "--".concat(modifier) : "";
        return "".concat(className).concat(el).concat(mod);
      };
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderSortTool.js
var require_renderSortTool = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/renderSortTool.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _join = _interopRequireDefault(require_join4());
    var DEFAULT_SIZE = 10;
    var _default = function _default2(_ref, extraProps) {
      var sortable = _ref.sortable, size = _ref.size, direction = _ref.direction, renderSortTool = _ref.renderSortTool;
      if (!sortable) {
        return null;
      }
      size = size || DEFAULT_SIZE;
      if (renderSortTool) {
        return renderSortTool(direction, extraProps);
      }
      var visibilityClassName = "InovuaReactDataGrid__sort-icon";
      if (!direction) {
        visibilityClassName += " InovuaReactDataGrid__sort-icon--hidden";
      }
      return _react.default.createElement("div", {
        className: "InovuaReactDataGrid__sort-icon-wrapper",
        key: "iconWrapper"
      }, _react.default.createElement("svg", {
        key: "sortToolAsc",
        className: (0, _join.default)(visibilityClassName, "InovuaReactDataGrid__sort-icon--asc", direction === 1 && "InovuaReactDataGrid__sort-icon--active"),
        width: size,
        height: size / 2,
        viewBox: "0 0 10 5"
      }, _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M4.767.276L8.395 4.04c.142.147.138.382-.01.524-.069.066-.16.104-.257.104H.872c-.205 0-.37-.166-.37-.37 0-.097.036-.189.103-.258L4.233.276c.142-.147.377-.151.524-.009l.01.01z"
      })), _react.default.createElement("svg", {
        key: "sortToolDesc",
        className: (0, _join.default)(visibilityClassName, "InovuaReactDataGrid__sort-icon--desc", direction === -1 && "InovuaReactDataGrid__sort-icon--active"),
        width: size,
        height: size / 2,
        viewBox: "0 0 10 5"
      }, _react.default.createElement("path", {
        fillRule: "evenodd",
        d: "M4.233 4.724L.605.96C.463.814.467.579.615.437.684.371.775.333.872.333h7.256c.205 0 .37.166.37.37 0 .097-.036.189-.103.258L4.767 4.724c-.142.147-.377.151-.524.009l-.01-.01z"
      })));
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultRowReorderColumnId.js
var require_defaultRowReorderColumnId = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultRowReorderColumnId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.id = void 0;
    var id = "__reorder-column";
    exports.id = id;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/editors/Text.js
var require_Text = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/editors/Text.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _TextInput = _interopRequireDefault(require_TextInput2());
    var _autoBind = _interopRequireDefault(require_autoBind());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var InovuaTextEditor = function(_React$Component) {
      (0, _inherits2.default)(InovuaTextEditor2, _React$Component);
      var _super = _createSuper(InovuaTextEditor2);
      function InovuaTextEditor2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaTextEditor2);
        _this = _super.call(this, props2);
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(InovuaTextEditor2, [{
        key: "render",
        value: function render() {
          var props2 = this.props;
          var value = props2.value;
          var domProps = (0, _reactCleanProps.default)(props2, InovuaTextEditor2.propTypes);
          var className = "InovuaReactDataGrid__cell__editor InovuaReactDataGrid__cell__editor--text " + (domProps.className || "");
          return _react.default.createElement(_TextInput.default, _objectSpread(_objectSpread({
            autoFocus: props2.autoFocus,
            value,
            theme: props2.theme,
            onChange: this.onChange,
            onBlur: this.onBlur,
            onKeyDown: this.onKeyDown,
            enableClearButton: true
          }, domProps), {}, {
            className
          }));
        }
      }, {
        key: "onChange",
        value: function onChange(value, e) {
          var onChange2 = this.props.onChange;
          if (onChange2) {
            onChange2(value, e);
          }
        }
      }, {
        key: "onBlur",
        value: function onBlur(e) {
          if (this.props.onComplete) {
            this.props.onComplete(e);
          }
        }
      }, {
        key: "onKeyDown",
        value: function onKeyDown(e) {
          if (e.key === "Enter") {
            if (this.props.onComplete) {
              this.props.onEnterNavigation(true, e.shiftKey ? -1 : 1, e);
            }
          }
          if (e.key === "Escape") {
            if (this.props.onCancel) {
              this.props.onCancel(e);
            }
          }
          if (e.key == "Tab") {
            e.preventDefault();
            this.props.onTabNavigation(true, e.shiftKey ? -1 : 1, e);
          }
        }
      }]);
      return InovuaTextEditor2;
    }(_react.default.Component);
    InovuaTextEditor.propTypes = {
      onCancel: _propTypes.default.func,
      onChange: _propTypes.default.func,
      onComplete: _propTypes.default.func,
      onKeyDown: _propTypes.default.func,
      onTabNavigation: _propTypes.default.func,
      gotoNext: _propTypes.default.func,
      gotoPrev: _propTypes.default.func,
      value: _propTypes.default.any,
      cell: _propTypes.default.any,
      cellProps: _propTypes.default.any,
      nativeScroll: _propTypes.default.any,
      editorProps: _propTypes.default.any,
      onEnterNavigation: _propTypes.default.func
    };
    var _default = InovuaTextEditor;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/index.js
var require_Cell = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Cell/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _region = _interopRequireDefault(require_region());
    var _shallowequal = _interopRequireWildcard(require_shallowequal2());
    var _renderHeader = _interopRequireDefault(require_renderHeader());
    var _renderGroupTool = _interopRequireDefault(require_renderGroupTool());
    var _renderNodeTool = _interopRequireDefault(require_renderNodeTool());
    var _sealedObjectFactory = _interopRequireDefault(require_sealedObjectFactory());
    var _join = _interopRequireDefault(require_join4());
    var _isFocusable = _interopRequireDefault(require_isFocusable());
    var _bemFactory = _interopRequireDefault(require_bemFactory());
    var _renderSortTool = _interopRequireDefault(require_renderSortTool());
    var _defaultRowReorderColumnId = require_defaultRowReorderColumnId();
    var _Text = _interopRequireDefault(require_Text());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var cellBem = (0, _bemFactory.default)("InovuaReactDataGrid__cell");
    var headerBem = (0, _bemFactory.default)("InovuaReactDataGrid__column-header");
    var emptyObject = Object.freeze ? Object.freeze({}) : {};
    var emptyFn = function emptyFn2() {
    };
    var CELL_RENDER_OBJECT = (0, _sealedObjectFactory.default)({
      empty: null,
      value: null,
      data: null,
      columnIndex: null,
      rowIndex: null,
      remoteRowIndex: null,
      rowIndexInGroup: null,
      nodeProps: null,
      rowSelected: null,
      rowExpanded: null,
      treeColumn: null,
      setRowSelected: null,
      setRowExpanded: null,
      isRowExpandable: null,
      toggleRowExpand: null,
      toggleNodeExpand: null,
      loadNodeAsync: null,
      toggleGroup: null,
      cellProps: null,
      totalDataCount: null,
      rendersInlineEditor: null,
      renderRowDetailsExpandIcon: null,
      renderRowDetailsCollapsedIcon: null,
      renderRowDetailsMoreIcon: null
    });
    var CELL_RENDER_SECOND_OBJ = (0, _sealedObjectFactory.default)({
      cellProps: null,
      column: null,
      headerProps: null
    });
    var wrapInContent = function wrapInContent2(value) {
      return _react.default.createElement("div", {
        key: "content",
        className: "InovuaReactDataGrid__cell__content",
        children: value
      });
    };
    function InovuaDataGridCell(props2) {
      var domRef = (0, _react.useRef)(null);
      var isCancelled = (0, _react.useRef)(false);
      var sortTimeoutId = (0, _react.useRef)(null);
      var lastEditCompleteTimestamp = (0, _react.useRef)(0);
      var unmounted = (0, _react.useRef)(false);
      var cleanupResizeObserver = (0, _react.useRef)(null);
      var callbackRef = (0, _react.useRef)(void 0);
      var _useState = (0, _react.useState)({
        props: props2
      }), _useState2 = (0, _slicedToArray2.default)(_useState, 2), theState = _useState2[0], setState = _useState2[1];
      var useInitialProps = !theState.props || props2.timestamp > theState.props.timestamp;
      var state = useInitialProps ? _objectSpread(_objectSpread({}, theState), {}, {
        props: props2,
        left: props2.left || 0
      }) : theState;
      var latestPropsRef = (0, _react.useRef)(state.props);
      latestPropsRef.current = state.props;
      var getProps = (0, _react.useCallback)(function() {
        return latestPropsRef.current;
      }, []);
      var updateState = (0, _react.useCallback)(function(newState, callback) {
        callbackRef.current = callback;
        setState(function(oldState) {
          return _objectSpread(_objectSpread({}, oldState), newState);
        });
      }, []);
      var updateProps = (0, _react.useCallback)(function(props3, callback) {
        props3.timestamp = Date.now();
        var newState = {
          props: props3
        };
        requestAnimationFrame(function() {
          updateState(newState, callback);
        });
      }, []);
      var setStateProps = (0, _react.useCallback)(function(stateProps) {
        if (unmounted.current) {
          return;
        }
        var newProps = Object.assign({}, InovuaDataGridCell.defaultProps, stateProps);
        if (!(0, _shallowequal.default)(newProps, getProps(), {
          timestamp: 1
        })) {
          updateProps(newProps);
        }
      }, [getProps]);
      (0, _react.useEffect)(function() {
        var callback = callbackRef.current;
        if (callback && typeof callback === "function") {
          callback();
        }
        callbackRef.current = null;
      }, [state]);
      (0, _react.useEffect)(function() {
        var _props$cellRef;
        unmounted.current = false;
        if (props2.onMount) {
          props2.onMount(props2, cellInstance);
        }
        (_props$cellRef = props2.cellRef) === null || _props$cellRef === void 0 ? void 0 : _props$cellRef.call(props2, cellInstance);
        return function() {
          if (cleanupResizeObserver.current) {
            var cleanupResizeObserverFn = cleanupResizeObserver.current;
            cleanupResizeObserverFn();
          }
          if (props2.onUnmount) {
            props2.onUnmount(props2, cellInstance);
          }
          unmounted.current = true;
        };
      }, []);
      var getDOMNode = (0, _react.useCallback)(function() {
        return domRef.current;
      }, []);
      var onUpdate = (0, _react.useCallback)(function() {
        if (props2.onUpdate) {
          props2.onUpdate(getProps(), cellInstance);
        }
      }, [props2.onUpdate]);
      var setDragging = (0, _react.useCallback)(function(dragging, callback) {
        var newState = {
          dragging
        };
        if (!dragging) {
          newState.top = 0;
          if (props2.rtl) {
            newState.right = 0;
          } else {
            newState.left = 0;
          }
        }
        updateState(newState, callback);
      }, [props2.rtl]);
      var setLeft = (0, _react.useCallback)(function(left) {
        updateState({
          left
        });
      }, []);
      var setRight = (0, _react.useCallback)(function(right) {
        updateState({
          right
        });
      }, []);
      var setTop = (0, _react.useCallback)(function(top) {
        updateState({
          top
        });
      }, []);
      var setHeight = (0, _react.useCallback)(function(height) {
        updateState({
          height
        });
      }, []);
      var setWidth = (0, _react.useCallback)(function(width) {
        updateState({
          width
        });
      }, []);
      var prepareStyle = function prepareStyle2(thisProps2) {
        var maxWidth = thisProps2.maxWidth, minRowHeight = thisProps2.minRowHeight, computedLocked = thisProps2.computedLocked, computedWidth = thisProps2.computedWidth, computedOffset = thisProps2.computedOffset, rowHeight = thisProps2.rowHeight, initialRowHeight = thisProps2.initialRowHeight, naturalRowHeight = thisProps2.naturalRowHeight, headerCell2 = thisProps2.headerCell, hidden2 = thisProps2.hidden, rtl = thisProps2.rtl, inTransition = thisProps2.inTransition, inShowTransition = thisProps2.inShowTransition, computedRowspan = thisProps2.computedRowspan, zIndex = thisProps2.zIndex;
        var style2 = {};
        if (typeof thisProps2.style === "function") {
          if (!headerCell2) {
            Object.assign(style2, thisProps2.style(thisProps2));
          }
        } else {
          Object.assign(style2, thisProps2.style);
        }
        style2.width = computedWidth;
        style2.minWidth = computedWidth;
        if (minRowHeight) {
          style2.minHeight = minRowHeight;
        }
        if (headerCell2) {
          style2.maxWidth = computedWidth;
        }
        if (maxWidth) {
          style2.maxWidth = maxWidth;
        }
        if (!headerCell2) {
          if (rowHeight && !naturalRowHeight) {
            style2.height = rowHeight;
          }
          if (naturalRowHeight) {
            style2.minHeight = minRowHeight;
          } else {
            if (initialRowHeight) {
              style2.height = initialRowHeight;
            }
            if (rowHeight && computedRowspan > 1) {
              style2.height = (initialRowHeight || rowHeight) * computedRowspan;
            }
          }
        }
        if (hidden2) {
          style2.display = "none";
        }
        if (!headerCell2 && !computedLocked) {
          style2.position = naturalRowHeight ? "relative" : "absolute";
          style2.top = 0;
          if (!naturalRowHeight) {
            if (rtl) {
              style2.right = computedOffset;
            } else {
              style2.left = computedOffset;
            }
          }
        }
        if (state && state.dragging) {
          if (rtl) {
            style2.right = state.right || 0;
          } else {
            style2.left = state.left || 0;
          }
          style2.top = state.top || 0;
          style2.height = state.height || "";
          if (!thisProps2.computedResizable && thisProps2.computedFilterable) {
            if (rtl) {
              style2.right = 0;
            } else {
              style2.left = 0;
            }
            style2.top = 0;
          }
          style2.position = "absolute";
          style2.zIndex = 100;
        }
        if (zIndex) {
          style2.zIndex = zIndex;
        }
        if (computedWidth === 0) {
          style2.paddingLeft = 0;
          style2.paddingRight = 0;
        }
        if (inTransition) {
          var duration = inShowTransition ? thisProps2.showTransitionDuration : thisProps2.hideTransitionDuration;
          duration = duration || thisProps2.visibilityTransitionDuration;
          style2.transitionDuration = typeof duration == "number" ? "".concat(duration, "ms") : duration;
        }
        return style2;
      };
      var prepareClassName = function prepareClassName2(thisProps2) {
        var isGroupCell = thisProps2.groupCell, groupTitleCell = thisProps2.groupTitleCell, groupExpandCell = thisProps2.groupExpandCell, isHeaderCell = thisProps2.headerCell, headerCellDefaultClassName = thisProps2.headerCellDefaultClassName, cellDefaultClassName = thisProps2.cellDefaultClassName, computedGroupBy = thisProps2.computedGroupBy, depth = thisProps2.depth, computedVisibleIndex2 = thisProps2.computedVisibleIndex, headerCell2 = thisProps2.headerCell, headerEllipsis = thisProps2.headerEllipsis, groupProps2 = thisProps2.groupProps, hidden2 = thisProps2.hidden, showBorderRight = thisProps2.showBorderRight, showBorderTop = thisProps2.showBorderTop, showBorderBottom = thisProps2.showBorderBottom, showBorderLeft = thisProps2.showBorderLeft, firstInSection = thisProps2.firstInSection, lastInSection = thisProps2.lastInSection, noBackground = thisProps2.noBackground, computedLocked = thisProps2.computedLocked, computedWidth = thisProps2.computedWidth, inTransition = thisProps2.inTransition, rowSelected2 = thisProps2.rowSelected, computedRowspan = thisProps2.computedRowspan, cellSelected2 = thisProps2.cellSelected, cellActive2 = thisProps2.cellActive, groupSpacerColumn2 = thisProps2.groupSpacerColumn, computedPivot = thisProps2.computedPivot, computedResizable = thisProps2.computedResizable, groupColumnVisible2 = thisProps2.groupColumnVisible, computedFilterable = thisProps2.computedFilterable, rtl = thisProps2.rtl, inEdit2 = thisProps2.inEdit, columnIndex = thisProps2.columnIndex, columnIndexHovered = thisProps2.columnIndexHovered, columnHoverClassName = thisProps2.columnHoverClassName, bulkUpdate = thisProps2.bulkUpdateMouseDown;
        var userSelect = thisProps2.userSelect, headerUserSelect = thisProps2.headerUserSelect;
        if (typeof userSelect === "boolean") {
          userSelect = userSelect ? "text" : "none";
        }
        if (typeof headerUserSelect === "boolean") {
          headerUserSelect = headerUserSelect ? "text" : "none";
        }
        var nested = depth != null && computedVisibleIndex2 == 0 && !headerCell2 && !groupColumnVisible2;
        var baseClassName = isHeaderCell ? headerCellDefaultClassName : cellDefaultClassName;
        var commonClassName = (0, _join.default)(!computedLocked && "".concat(baseClassName, "--unlocked"), computedLocked && "".concat(baseClassName, "--locked"), computedLocked && "".concat(baseClassName, "--locked-").concat(computedLocked));
        var last = thisProps2.last || thisProps2.computedVisibleIndex == thisProps2.computedVisibleCount - 1;
        var propsClassName = typeof thisProps2.className === "function" ? thisProps2.className(thisProps2) : thisProps2.className;
        var className2 = (0, _join.default)(propsClassName, baseClassName, commonClassName, !isHeaderCell && thisProps2.cellClassName, (nested || hidden2) && "".concat(baseClassName, "--no-padding"), hidden2 && "".concat(baseClassName, "--hidden"), "".concat(baseClassName, "--direction-").concat(rtl ? "rtl" : "ltr"), computedRowspan > 1 && "".concat(baseClassName, "--rowspan"), inTransition && "".concat(baseClassName, "--transition"), inTransition && computedWidth && "".concat(baseClassName, "--showing"), inTransition && !computedWidth && "".concat(baseClassName, "--hiding"), computedWidth === 0 && "".concat(baseClassName, "--no-size"), nested && "".concat(baseClassName, "--stretch"), isHeaderCell && headerUserSelect == null || !isHeaderCell ? userSelect && "".concat(baseClassName, "--user-select-").concat(userSelect) : null, groupExpandCell && "".concat(baseClassName, "--group-expand-cell"), groupTitleCell && "".concat(baseClassName, "--group-title-cell"), rowSelected2 && "".concat(baseClassName, "--selected"), groupProps2 && "".concat(baseClassName, "--group-cell"), computedPivot && "".concat(baseClassName, "--pivot-enabled"), groupSpacerColumn2 && "".concat(baseClassName, "--group-column-cell"), inEdit2 && "".concat(baseClassName, "--in-edit"), cellSelected2 && "".concat(baseClassName, "--cell-selected"), cellActive2 && "".concat(baseClassName, "--cell-active"), bulkUpdate && cellSelected2 && "".concat(baseClassName, "--cell-bulk-update-mouse-down"), thisProps2.textAlign && (isHeaderCell ? !thisProps2.headerAlign : true) && "".concat(baseClassName, "--align-").concat(thisProps2.textAlign), thisProps2.textVerticalAlign && (isHeaderCell ? !thisProps2.headerVerticalAlign : true) && "".concat(baseClassName, "--vertical-align-").concat(thisProps2.textVerticalAlign), thisProps2.virtualizeColumns && "".concat(baseClassName, "--virtualize-columns"), thisProps2.computedVisibleIndex === 0 && "".concat(baseClassName, "--first"), thisProps2.rowIndexInGroup === 0 && "".concat(baseClassName, "--first-row-in-group"), last && "".concat(baseClassName, "--last"), showBorderLeft && computedWidth !== 0 && (!isHeaderCell || !(computedResizable || computedFilterable)) && "".concat(baseClassName, "--show-border-").concat(rtl ? "right" : "left"), firstInSection && "".concat(baseClassName, "--first-in-section"), lastInSection && "".concat(baseClassName, "--last-in-section"), showBorderRight && computedWidth !== 0 && (!isHeaderCell || !(computedResizable || computedFilterable)) && "".concat(baseClassName, "--show-border-").concat(rtl ? "left" : "right"), showBorderTop && "".concat(baseClassName, "--show-border-top"), showBorderBottom && "".concat(baseClassName, "--show-border-bottom"), noBackground && "".concat(baseClassName, "--no-background"), columnIndex === columnIndexHovered ? columnHoverClassName ? (0, _join.default)("".concat(baseClassName, "--over"), columnHoverClassName) : "".concat(baseClassName, "--over") : "");
        if (cellSelected2) {
          className2 = (0, _join.default)(className2, thisProps2.hasTopSelectedSibling && "".concat(baseClassName, "--cell-has-top-selected-sibling"), thisProps2.hasBottomSelectedSibling && "".concat(baseClassName, "--cell-has-bottom-selected-sibling"), thisProps2.hasLeftSelectedSibling && "".concat(baseClassName, "--cell-has-").concat(rtl ? "right" : "left", "-selected-sibling"), thisProps2.hasRightSelectedSibling && "".concat(baseClassName, "--cell-has-").concat(rtl ? "left" : "right", "-selected-sibling"));
        }
        if (isHeaderCell) {
          className2 = (0, _join.default)(className2, commonClassName, thisProps2.headerClassName, thisProps2.titleClassName, state && state.dragging && "".concat(baseClassName, "--dragging"), state && state.left && "".concat(baseClassName, "--reordered"), thisProps2.computedSortable && "".concat(baseClassName, "--sortable"), headerUserSelect && "".concat(baseClassName, "--user-select-").concat(headerUserSelect), last && !headerEllipsis && "".concat(baseClassName, "--overflow-hidden"), "".concat(baseClassName, "--align-").concat(thisProps2.headerAlign || "start"), thisProps2.group ? "".concat(baseClassName, "--has-group") : "".concat(baseClassName, "--has-no-group"), thisProps2.headerVerticalAlign && "".concat(baseClassName, "--vertical-align-").concat(thisProps2.headerVerticalAlign), thisProps2.computedResizable ? "".concat(baseClassName, "--resizable") : "".concat(baseClassName, "--unresizable"), thisProps2.computedLockable ? "".concat(baseClassName, "--lockable") : "".concat(baseClassName, "--unlockable"), thisProps2.lastInGroup && "".concat(baseClassName, "--last-in-group"));
        } else {
          className2 = (0, _join.default)(className2, (groupProps2 ? groupProps2.depth == computedVisibleIndex2 : computedGroupBy ? computedGroupBy.length === computedVisibleIndex2 : computedVisibleIndex2 === 0) && "".concat(baseClassName, "--active-row-left-border"));
        }
        if (isGroupCell) {
          className2 = (0, _join.default)(className2, "InovuaReactDataGrid__group-cell");
        }
        return className2;
      };
      var getInitialIndex = (0, _react.useCallback)(function() {
        return props2.computedVisibleIndex;
      }, [props2.computedVisibleIndex]);
      var getcomputedVisibleIndex = (0, _react.useCallback)(function() {
        return getProps().computedVisibleIndex;
      }, []);
      var renderNodeTool = function renderNodeTool2(thisProps2) {
        var data2 = thisProps2.data, renderTreeCollapseTool = thisProps2.renderTreeCollapseTool, renderTreeExpandTool = thisProps2.renderTreeExpandTool, renderTreeLoadingTool = thisProps2.renderTreeLoadingTool;
        var nodeProps = data2.__nodeProps || emptyObject;
        var leafNode = nodeProps.leafNode;
        var loading = nodeProps.loading;
        var expanded = nodeProps.expanded;
        var collapsed = !expanded;
        var style2 = (0, _defineProperty2.default)({}, props2.rtl ? "marginRight" : "marginLeft", (nodeProps.depth || 0) * thisProps2.treeNestingSize);
        if (props2.rtl && collapsed) {
          style2.transform = "rotate(180deg)";
        }
        var element = (0, _renderNodeTool.default)({
          render: thisProps2.renderNodeTool,
          nodeExpanded: expanded,
          nodeCollapsed: collapsed,
          nodeLoading: loading,
          leafNode,
          nodeProps,
          node: data2,
          rtl: props2.rtl,
          size: 20,
          style: style2,
          toggleNodeExpand: thisProps2.toggleNodeExpand,
          renderTreeCollapseTool,
          renderTreeExpandTool,
          renderTreeLoadingTool
        }, thisProps2);
        if (!element) {
          return;
        }
        return (0, _react.cloneElement)(element, {
          key: "nodeTool"
        });
      };
      var getInitialDOMProps = (0, _react.useCallback)(function() {
        var thisProps2 = getProps();
        var domProps2 = thisProps2.domProps;
        var specificDomProps = thisProps2.headerCell ? thisProps2.headerDOMProps : thisProps2.cellDOMProps;
        if (typeof domProps2 == "function") {
          domProps2 = domProps2(thisProps2);
        }
        if (typeof specificDomProps == "function") {
          specificDomProps = specificDomProps(thisProps2);
        }
        return Object.assign({}, domProps2, specificDomProps);
      }, [getProps, props2.domProps, props2.headerCell, props2.headerDOMProps, props2.cellDOMProps]);
      var renderEditor = function renderEditor2(_props) {
        var thisProps2 = getProps();
        var editorProps = _objectSpread(_objectSpread({
          nativeScroll: thisProps2.nativeScroll
        }, thisProps2.editorProps), {}, {
          editorProps: thisProps2.editorProps,
          cell: cellInstance,
          cellProps: thisProps2,
          value: thisProps2.editValue,
          theme: thisProps2.theme,
          rtl: thisProps2.rtl,
          autoFocus: true,
          onChange: onEditValueChange,
          onComplete: onEditorComplete,
          onCancel: onEditorCancel,
          onEnterNavigation: onEditorEnterNavigation,
          onTabNavigation: onEditorTabNavigation,
          gotoNext: gotoNextEditor,
          gotoPrev: gotoPrevEditor,
          key: "editor",
          onClick: onEditorClick
        });
        var Editor = thisProps2.editor;
        if (Editor) {
          return _react.default.createElement(Editor, _objectSpread({}, editorProps));
        }
        if (thisProps2.renderEditor) {
          return thisProps2.renderEditor(editorProps, editorProps.cellProps, cellInstance);
        }
        return _react.default.createElement(_Text.default, _objectSpread({}, editorProps));
      };
      var isInEdit = (0, _react.useCallback)(function() {
        return getProps().inEdit;
      }, [props2.inEdit]);
      var getEditable = (0, _react.useCallback)(function(editValue) {
        var thisProps2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getProps();
        if (thisProps2.groupSpacerColumn || thisProps2.groupProps) {
          return Promise.resolve(false);
        }
        var editable = thisProps2.computedEditable;
        if (typeof editable === "function") {
          return Promise.resolve(editable(editValue, thisProps2));
        }
        return Promise.resolve(editable);
      }, [props2.groupSpacerColumn, props2.groupProps, props2.computedEditable]);
      var onEditorTabLeave = function onEditorTabLeave2(_direction) {
      };
      var gotoNextEditor = (0, _react.useCallback)(function() {
        return props2.tryRowCellEdit && props2.tryRowCellEdit(getProps().computedVisibleIndex + 1, 1);
      }, [props2.tryRowCellEdit, props2.computedVisibleIndex]);
      var gotoPrevEditor = (0, _react.useCallback)(function() {
        props2.tryRowCellEdit && props2.tryRowCellEdit(getProps().computedVisibleIndex - 1, -1);
      }, [props2.tryRowCellEdit, props2.computedVisibleIndex]);
      var onEditorEnterNavigation = (0, _react.useCallback)(function(complete, dir) {
        var thisProps2 = getProps();
        if (typeof dir !== "number") {
          dir = 0;
        }
        var newIndex = props2.rowIndex + dir;
        if (!complete) {
          stopEdit();
          if (newIndex != props2.rowIndex) {
            thisProps2.tryNextRowEdit && thisProps2.tryNextRowEdit(dir, props2.columnIndex, true);
          }
        } else {
          onEditorComplete();
          if (newIndex != thisProps2.rowIndex) {
            thisProps2.tryNextRowEdit && thisProps2.tryNextRowEdit(dir, thisProps2.columnIndex, true);
          }
        }
      }, [props2.tryNextRowEdit, props2.rowIndex, props2.columnIndex]);
      var onEditorTabNavigation = (0, _react.useCallback)(function(complete, dir) {
        var thisProps2 = getProps();
        if (typeof dir !== "number") {
          dir = 0;
        }
        var newIndex = thisProps2.computedVisibleIndex + dir;
        if (!complete) {
          stopEdit();
          if (newIndex != thisProps2.computedVisibleIndex) {
            thisProps2.tryRowCellEdit && thisProps2.tryRowCellEdit(newIndex, dir);
          }
        } else {
          onEditorComplete();
          if (newIndex != thisProps2.computedVisibleIndex) {
            thisProps2.tryRowCellEdit && thisProps2.tryRowCellEdit(newIndex, dir);
          }
        }
      }, [props2.computedVisibleIndex]);
      var onEditorClick = (0, _react.useCallback)(function(event2) {
        event2.stopPropagation();
      }, []);
      var onEditorCancel = (0, _react.useCallback)(function() {
        cancelEdit();
      }, []);
      var startEdit = (0, _react.useCallback)(function(editValue, errBack) {
        var thisProps2 = getProps();
        isCancelled.current = false;
        var editValuePromise = editValue === void 0 ? getEditStartValue(thisProps2) : Promise.resolve(editValue);
        return editValuePromise.then(function(editValue2) {
          return getEditable(editValue2, thisProps2).then(function(editable) {
            if (!editable) {
              return Promise.reject(editable);
            }
            if (thisProps2.onEditStart) {
              thisProps2.onEditStart(editValue2, thisProps2);
            }
            if (thisProps2.onEditStartForRow) {
              thisProps2.onEditStartForRow(editValue2, thisProps2);
            }
            return editValue2;
          });
        }).catch(errBack || function(_err) {
        });
      }, [props2.onEditStart, props2.onEditStartForRow]);
      var stopEdit = (0, _react.useCallback)(function() {
        var editValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getCurrentEditValue();
        var thisProps2 = getProps();
        if (thisProps2.onEditStop) {
          thisProps2.onEditStop(editValue, thisProps2);
        }
        if (thisProps2.onEditStopForRow) {
          thisProps2.onEditStopForRow(editValue, thisProps2);
        }
      }, [props2.onEditStop, props2.onEditStopForRow]);
      var cancelEdit = (0, _react.useCallback)(function() {
        isCancelled.current = true;
        stopEdit();
        var thisProps2 = getProps();
        if (thisProps2.onEditCancel) {
          thisProps2.onEditCancel(thisProps2);
        }
        if (thisProps2.onEditCancelForRow) {
          thisProps2.onEditCancelForRow(thisProps2);
        }
      }, [props2.onEditCancel, props2.onEditCancelForRow]);
      var onEditorComplete = (0, _react.useCallback)(function() {
        var now = Date.now();
        if (lastEditCompleteTimestamp.current && now - lastEditCompleteTimestamp.current < 50) {
          return;
        }
        lastEditCompleteTimestamp.current = now;
        if (!isCancelled.current) {
          completeEdit();
        }
        isCancelled.current = false;
      }, []);
      var getEditCompleteValue = (0, _react.useCallback)(function() {
        var value2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getCurrentEditValue();
        if (props2.getEditCompleteValue) {
          return props2.getEditCompleteValue(value2, getProps());
        }
        return value2;
      }, [props2.getEditCompleteValue, props2.editValue]);
      var completeEdit = (0, _react.useCallback)(function() {
        var completeValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getEditCompleteValue();
        var thisProps2 = getProps();
        stopEdit();
        if (thisProps2.onEditComplete) {
          thisProps2.onEditComplete(completeValue, thisProps2);
        }
        if (thisProps2.onEditCompleteForRow) {
          thisProps2.onEditCompleteForRow(completeValue, thisProps2);
        }
      }, [props2.onEditComplete, props2.onEditCompleteForRow, getEditCompleteValue]);
      var getCurrentEditValue = function getCurrentEditValue2() {
        var editValue = getProps().editValue;
        return editValue;
      };
      var onFilterValueChange = (0, _react.useCallback)(function(filterValue) {
        var thisProps2 = getProps();
        if (thisProps2.onFilterValueChange) {
          thisProps2.onFilterValueChange(filterValue, thisProps2);
        }
      }, [props2.onFilterValueChange]);
      var onEditValueChange = (0, _react.useCallback)(function(e) {
        var value2 = e && e.target ? e.target.value : e;
        var thisProps2 = getProps();
        if (thisProps2.onEditValueChange) {
          thisProps2.onEditValueChange(value2, thisProps2);
        }
        if (thisProps2.onEditValueChangeForRow) {
          thisProps2.onEditValueChangeForRow(value2, thisProps2);
        }
      }, [props2.onEditValueChange, props2.onEditValueChangeForRow]);
      var renderSelectionBox = (0, _react.useCallback)(function(_props) {
        var thisProps2 = getProps();
        var inTransition = thisProps2.inTransition, inShowTransition = thisProps2.inShowTransition, cellSelected2 = thisProps2.cellSelected, cellActive2 = thisProps2.cellActive, bulkUpdate = thisProps2.bulkUpdateMouseDown;
        if (!cellSelected2 && !cellActive2) {
          return null;
        }
        var style2 = {};
        if (inTransition) {
          var duration = inShowTransition ? props2.showTransitionDuration : props2.hideTransitionDuration;
          duration = duration || props2.visibilityTransitionDuration;
          style2.transitionDuration = typeof duration == "number" ? "".concat(duration, "ms") : duration;
        }
        var className2 = (0, _join.default)("InovuaReactDataGrid__cell__selection", bulkUpdate && "InovuaReactDataGrid__cell__selection__bulk-update-mouse-down");
        return _react.default.createElement("div", {
          key: "selectionBox",
          style: style2,
          className: className2
        }, props2.lastInRange && props2.computedCellMultiSelectionEnabled && _react.default.createElement("div", {
          className: "InovuaReactDataGrid__cell__selection-dragger InovuaReactDataGrid__cell__selection-dragger--direction-".concat(props2.rtl ? "rtl" : "ltr"),
          onMouseDown: onCellSelectionDraggerMouseDown
        }));
      }, [props2.computedCellMultiSelectionEnabled, props2.lastInRange, props2.rtl, props2.inTransition, props2.inShowTransition, props2.cellSelected, props2.cellActive, props2.showTransitionDuration, props2.hideTransitionDuration, props2.visibilityTransitionDuration]);
      var onHeaderCellFocus = (0, _react.useCallback)(function(event2) {
        var thisProps2 = getProps();
        if (thisProps2.onFocus) {
          thisProps2.onFocus(event2, thisProps2);
        }
        var initialProps = getInitialDOMProps();
        if (initialProps.onFocus) {
          initialProps.onFocus(event2, thisProps2);
        }
      }, [props2.onFocus, getInitialDOMProps]);
      var onColumnHoverMouseEnter = (0, _react.useCallback)(function(thisProps2) {
        if (thisProps2.groupProps || thisProps2.groupSpacerColumn || thisProps2.isRowDetailsCell || thisProps2.isCheckboxColumn) {
          return;
        }
        if (thisProps2.onColumnMouseEnter) {
          thisProps2.onColumnMouseEnter(thisProps2);
        }
      }, [props2.groupProps, props2.groupSpacerColumn, props2.isRowDetailsCell, props2.isCheckboxColumn, props2.onColumnMouseEnter]);
      var onColumnHoverMouseLeave = (0, _react.useCallback)(function(thisProps2) {
        if (thisProps2.groupProps || thisProps2.groupSpacerColumn || thisProps2.isRowDetailsCell || thisProps2.isCheckboxColumn) {
          return;
        }
        if (thisProps2.onColumnMouseLeave) {
          thisProps2.onColumnMouseLeave(thisProps2);
        }
      }, [props2.groupProps, props2.groupSpacerColumn, props2.isRowDetailsCell, props2.isCheckboxColumn, props2.onColumnMouseLeave]);
      var onCellEnterHandle = (0, _react.useCallback)(function(event2) {
        var thisProps2 = getProps();
        var initialProps = getInitialDOMProps();
        if (thisProps2.onCellEnter) {
          thisProps2.onCellEnter(event2, thisProps2);
        }
        if (thisProps2.computedEnableColumnHover) {
          onColumnHoverMouseEnter(thisProps2);
        }
        if (initialProps.onMouseEnter) {
          initialProps.onMouseEnter(event2, thisProps2);
        }
      }, [props2.onCellEnter, props2.computedEnableColumnHover, getInitialDOMProps]);
      var onCellLeave = (0, _react.useCallback)(function(event2) {
        var thisProps2 = getProps();
        var initialProps = getInitialDOMProps();
        if (thisProps2.onCellLeave) {
          thisProps2.onCellLeave(event2, thisProps2);
        }
        if (thisProps2.computedEnableColumnHover) {
          onColumnHoverMouseLeave(thisProps2);
        }
        if (initialProps.onMouseLeave) {
          initialProps.onMouseLeave(event2, thisProps2);
        }
      }, [props2.onCellLeave, props2.computedEnableColumnHover, getInitialDOMProps]);
      var onCellSelectionDraggerMouseDown = (0, _react.useCallback)(function(event2) {
        event2.preventDefault();
        event2.stopPropagation();
        if (props2.onCellSelectionDraggerMouseDown) {
          props2.onCellSelectionDraggerMouseDown(event2, getProps());
        }
        if (props2.onCellBulkUpdateMouseDown) {
          props2.onCellBulkUpdateMouseDown(event2, getProps());
        }
      }, [props2.onCellSelectionDraggerMouseDown, props2.onCellBulkUpdateMouseDown]);
      var prepareHeaderCellProps = (0, _react.useCallback)(function(cellProps2) {
        var thisProps2 = getProps();
        var children2 = cellProps2.children, computedSortInfo = cellProps2.computedSortInfo;
        var computedSortable = thisProps2.computedSortable;
        var sortTools = computedSortable ? getSortTools(computedSortInfo ? computedSortInfo.dir : null, cellProps2) : null;
        if (sortTools) {
          cellProps2.children = [children2 && children2.props ? (0, _react.cloneElement)(children2, {
            key: "content"
          }) : children2, sortTools];
          if (thisProps2.headerAlign === "end" || !thisProps2.headerAlign && thisProps2.textAlign == "end") {
            cellProps2.children.reverse();
          }
        }
        if (cellProps2.renderHeader) {
          if (!Array.isArray(cellProps2.children)) {
            cellProps2.children = [cellProps2.children];
          }
          cellProps2.children = cellProps2.renderHeader(cellProps2);
        }
        if (computedSortInfo && computedSortInfo.dir) {
          var dirName = computedSortInfo.dir === 1 ? "asc" : "desc";
          cellProps2.className = (0, _join.default)(cellProps2.className, "".concat(thisProps2.headerCellDefaultClassName, "--sort-").concat(dirName));
        }
        cellProps2.onResizeMouseDown = onResizeMouseDown.bind(cellInstance, cellProps2);
        cellProps2.onResizeTouchStart = onResizeTouchStart.bind(cellInstance, cellProps2);
        return cellProps2;
      }, [props2.computedSortable, props2.headerAlign, props2.textAlign, props2.headerCellDefaultClassName]);
      var onMouseDown = (0, _react.useCallback)(function(event2) {
        var thisProps2 = getProps();
        var initialDOMProps2 = getInitialDOMProps();
        if (event2.button === 2) {
          return;
        }
        if (thisProps2.onMouseDown) {
          thisProps2.onMouseDown(thisProps2, event2);
        }
        if (initialDOMProps2.onMouseDown) {
          initialDOMProps2.onMouseDown(event2, thisProps2);
        }
        if (thisProps2.onCellMouseDown) {
          thisProps2.onCellMouseDown(event2, thisProps2);
        }
        if (thisProps2.onDragRowMouseDown && thisProps2.id === _defaultRowReorderColumnId.id) {
          thisProps2.onDragRowMouseDown(event2, thisProps2.rowIndex, domRef);
        }
      }, [props2.onMouseDown, props2.onCellMouseDown, props2.onDragRowMouseDown, props2.id, props2.rowIndex]);
      var onContextMenu = (0, _react.useCallback)(function(event2) {
        var thisProps2 = getProps();
        var initialDOMProps2 = getInitialDOMProps();
        if (event2.nativeEvent) {
          event2.nativeEvent.__cellProps = thisProps2;
        }
        if (thisProps2.onContextMenu) {
          thisProps2.onContextMenu(event2, thisProps2);
        }
        if (initialDOMProps2.onContextMenu) {
          initialDOMProps2.onContextMenu(event2, thisProps2);
        }
      }, [props2.onContextMenu, getProps]);
      var onTouchStart = (0, _react.useCallback)(function(event2) {
        var thisProps2 = getProps();
        var initialDOMProps2 = getInitialDOMProps();
        if (thisProps2.onTouchStart) {
          thisProps2.onTouchStart(thisProps2, event2);
        }
        if (initialDOMProps2.onTouchStart) {
          initialDOMProps2.onTouchStart(event2, thisProps2);
        }
        if (thisProps2.onCellTouchStart) {
          thisProps2.onCellTouchStart(event2, thisProps2);
        }
        if (thisProps2.onDragRowMouseDown && thisProps2.id === _defaultRowReorderColumnId.id) {
          thisProps2.onDragRowMouseDown(event2, thisProps2.rowIndex, domRef);
        }
        event2.stopPropagation();
      }, [props2.onTouchStart, props2.onCellTouchStart, props2.onDragRowMouseDown, props2.id, props2.rowIndex]);
      var onResizeMouseDown = (0, _react.useCallback)(function(cellProps2, event2) {
        var thisProps2 = getProps();
        hideFilterContextMenu();
        if (thisProps2.hideColumnContextMenu) {
          thisProps2.hideColumnContextMenu();
        }
        if (thisProps2.onResizeMouseDown) {
          var node = getDOMNode();
          thisProps2.onResizeMouseDown(cellProps2, {
            colHeaderNode: node,
            event: event2
          });
        }
      }, [props2.hideColumnContextMenu, props2.onResizeMouseDown]);
      var onResizeTouchStart = (0, _react.useCallback)(function(cellProps2, event2) {
        var thisProps2 = getProps();
        if (thisProps2.onResizeTouchStart) {
          thisProps2.onResizeTouchStart(cellProps2, {
            colHeaderNode: getDOMNode(),
            event: event2
          });
        }
      }, [props2.onResizeTouchStart]);
      var onClick = (0, _react.useCallback)(function(event2) {
        var thisProps2 = getProps();
        var initialDOMProps2 = getInitialDOMProps();
        if (thisProps2.onClick) {
          thisProps2.onClick(event2, thisProps2);
        }
        if (initialDOMProps2.onClick) {
          initialDOMProps2.onClick(event2, thisProps2);
        }
        if (!thisProps2.headerCell && thisProps2.onCellClick) {
          thisProps2.onCellClick(event2, thisProps2);
        }
        if (!thisProps2.headerCell) {
          if (thisProps2.computedEditable && !thisProps2.inEdit && (thisProps2.editStartEvent === "onClick" || thisProps2.editStartEvent === "click")) {
            startEdit();
          }
          return;
        }
        if (thisProps2.preventSortOnClick) {
          if (thisProps2.preventSortOnClick(event2, thisProps2) === true) {
            return;
          }
        }
        if (!thisProps2.sortDelay || thisProps2.sortDelay < 1) {
          return onSortClick();
        }
        if (sortTimeoutId.current) {
          clearTimeout(sortTimeoutId.current);
          sortTimeoutId.current = null;
        }
        sortTimeoutId.current = setTimeout(function() {
          onSortClick();
          sortTimeoutId.current = null;
        }, parseInt(thisProps2.sortDelay, 10));
        return void 0;
      }, [props2.onClick, props2.onCellClick, props2.headerCell, props2.computedEditable, props2.inEdit, props2.editStartEvent, props2.preventSortOnClick, props2.sortDelay]);
      var onDoubleClick = function onDoubleClick2(event2) {
        var thisProps2 = getProps();
        var initialDOMProps2 = getInitialDOMProps();
        if (thisProps2.onDoubleClick) {
          thisProps2.onDoubleClick(event2, thisProps2);
        }
        if (initialDOMProps2.onDoubleClick) {
          initialDOMProps2.onDoubleClick(event2, thisProps2);
        }
        var headerProps2 = thisProps2.headerProps, headerCell2 = thisProps2.headerCell;
        if (!headerCell2) {
          if (thisProps2.computedEditable && !thisProps2.inEdit && (thisProps2.editStartEvent === "onDoubleClick" || thisProps2.editStartEvent === "dblclick" || thisProps2.editStartEvent === "doubleclick")) {
            startEdit();
          }
          return;
        }
        if (headerProps2 && headerProps2.onDoubleClick) {
          headerProps2.onDoubleClick(event2, thisProps2);
        }
        if (sortTimeoutId.current) {
          clearTimeout(sortTimeoutId.current);
          sortTimeoutId.current = null;
        }
      };
      var getEditStartValue = function getEditStartValue2() {
        var thisProps2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getProps();
        if (typeof thisProps2.getEditStartValue == "function") {
          return Promise.resolve(thisProps2.getEditStartValue(thisProps2.value, thisProps2));
        }
        return Promise.resolve(thisProps2.value);
      };
      var onSortClick = function onSortClick2() {
        var thisProps2 = getProps();
        if (thisProps2.headerCell && thisProps2.computedSortable) {
          if (thisProps2.onSortClick) {
            thisProps2.onSortClick(thisProps2);
          }
        }
      };
      var getSortTools = (0, _react.useCallback)(function() {
        var direction = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        var cellProps2 = arguments.length > 1 ? arguments[1] : void 0;
        var _getProps = getProps(), computedSortable = _getProps.computedSortable, render = _getProps.renderSortTool;
        return (0, _renderSortTool.default)({
          sortable: computedSortable,
          direction,
          renderSortTool: render
        }, cellProps2);
      }, [props2.computedSortable, props2.renderSortTool]);
      var showFilterContextMenu = (0, _react.useCallback)(function(node) {
        if (props2.showColumnFilterContextMenu) {
          props2.showColumnFilterContextMenu(node, getProps());
        }
      }, [props2.showColumnFilterContextMenu]);
      var hideFilterContextMenu = (0, _react.useCallback)(function(node) {
        if (props2.hideColumnFilterContextMenu) {
          props2.hideColumnFilterContextMenu(node);
        }
      }, [props2.hideColumnFilterContextMenu]);
      var showContextMenu = (0, _react.useCallback)(function(domRef2, onHide) {
        if (props2.showColumnContextMenu) {
          props2.showColumnContextMenu(domRef2 ? domRef2 : null, getProps(), {
            computedVisibleIndex: props2.computedVisibleIndex
          }, onHide);
        }
      }, [props2.showColumnContextMenu]);
      var getProxyRegion = (0, _react.useCallback)(function() {
        var node = getDOMNode();
        var _getProps2 = getProps(), computedResizable = _getProps2.computedResizable, computedFilterable = _getProps2.computedFilterable;
        return computedFilterable ? _region.default.from(node.firstChild) : _region.default.from(computedResizable ? node.firstChild : node);
      }, [props2.computedResizable, props2.computedFilterable]);
      var renderGroupTool = (0, _react.useCallback)(function() {
        var thisProps2 = getProps();
        var rtl = thisProps2.rtl, collapsed = thisProps2.collapsed, groupProps2 = thisProps2.groupProps, renderGroupCollapseTool = thisProps2.renderGroupCollapseTool, renderGroupExpandTool = thisProps2.renderGroupExpandTool;
        return (0, _renderGroupTool.default)({
          render: groupProps2 === null || groupProps2 === void 0 ? void 0 : groupProps2.renderGroupTool,
          collapsed,
          rtl,
          size: 20,
          renderGroupCollapseTool,
          renderGroupExpandTool,
          toggleGroup
        });
      }, [props2.rtl, props2.collapsed, props2.groupProps]);
      var toggleGroup = (0, _react.useCallback)(function(event2) {
        if (event2 && event2.preventDefault) {
          event2.preventDefault();
        }
        var props3 = getProps();
        if (typeof props3.onGroupToggle === "function") {
          var _data = props3.data;
          props3.onGroupToggle(_data.keyPath, props3, event2);
        }
      }, [props2.onGroupToggle, props2.data, getProps]);
      var cellInstance = {
        showContextMenu,
        getProps,
        setLeft,
        setRight,
        setTop,
        setHeight,
        setWidth,
        setDragging,
        setStateProps,
        updateState,
        updateProps,
        getDOMNode,
        onUpdate,
        getInitialIndex,
        getcomputedVisibleIndex,
        getInitialDOMProps,
        isInEdit,
        getEditable,
        onEditorTabLeave,
        gotoNextEditor,
        gotoPrevEditor,
        onEditorEnterNavigation,
        onEditorTabNavigation,
        onEditorClick,
        onEditorCancel,
        startEdit,
        stopEdit,
        cancelEdit,
        onEditorComplete,
        getEditCompleteValue,
        completeEdit,
        getCurrentEditValue,
        onFilterValueChange,
        onEditValueChange,
        onHeaderCellFocus,
        onColumnHoverMouseEnter,
        onColumnHoverMouseLeave,
        onCellEnterHandle,
        onCellLeave,
        onCellSelectionDraggerMouseDown,
        prepareHeaderCellProps,
        onMouseDown,
        onContextMenu,
        onTouchStart,
        onResizeMouseDown,
        onResizeTouchStart,
        onClick,
        onDoubleClick,
        getEditStartValue,
        onSortClick,
        getSortTools,
        showFilterContextMenu,
        hideFilterContextMenu,
        getProxyRegion,
        renderGroupTool,
        toggleGroup,
        domRef: getDOMNode(),
        props: props2
      };
      var thisProps = getProps();
      var cellActive = thisProps.cellActive, cellSelected = thisProps.cellSelected, data = thisProps.data, empty = thisProps.empty, groupProps = thisProps.groupProps, headerCell = thisProps.headerCell, hidden = thisProps.hidden, name = thisProps.name, onRender = thisProps.onRender, treeColumn = thisProps.treeColumn, groupSpacerColumn = thisProps.groupSpacerColumn, loadNodeAsync = thisProps.loadNodeAsync, groupColumnVisible = thisProps.groupColumnVisible, rowIndex = thisProps.rowIndex, remoteRowIndex = thisProps.remoteRowIndex, rowSelected = thisProps.rowSelected, rowExpanded = thisProps.rowExpanded, setRowSelected = thisProps.setRowSelected, setRowExpanded = thisProps.setRowExpanded, isRowExpandable = thisProps.isRowExpandable, toggleRowExpand = thisProps.toggleRowExpand, toggleNodeExpand = thisProps.toggleNodeExpand, totalDataCount = thisProps.totalDataCount, computedVisibleIndex = thisProps.computedVisibleIndex, inEdit = thisProps.inEdit, renderRowDetailsMoreIcon = thisProps.renderRowDetailsMoreIcon, renderRowDetailsExpandIcon = thisProps.renderRowDetailsExpandIcon, renderRowDetailsCollapsedIcon = thisProps.renderRowDetailsCollapsedIcon, notifyColumnFilterVisibleStateChange = thisProps.notifyColumnFilterVisibleStateChange;
      var value = thisProps.value, renderCell = thisProps.render, renderSummary = thisProps.renderSummary;
      var className = prepareClassName(thisProps);
      var style = prepareStyle(thisProps);
      var headerProps = headerCell ? thisProps.headerProps || emptyObject : null;
      if (!headerCell && groupSpacerColumn && groupProps && groupProps.depth == computedVisibleIndex) {
        value = renderGroupTool();
      }
      var children = value;
      var cellProps = Object.assign({}, thisProps, headerCell ? headerProps : thisProps.cellProps, {
        instance: cellInstance,
        value,
        name,
        notifyColumnFilterVisibleStateChange,
        columnIndex: computedVisibleIndex,
        children,
        onClick,
        onDoubleClick,
        onContextMenu,
        onMouseDown,
        onTouchStart,
        onMouseEnter: onCellEnterHandle,
        onMouseLeave: onCellLeave
      });
      cellProps.className = headerCell ? headerProps.className ? "".concat(className, " ").concat(headerProps.className) : className : thisProps.cellProps && thisProps.cellProps.className ? typeof thisProps.cellProps.className === "function" ? "".concat(className, " ").concat(thisProps.cellProps.className(cellProps)) : "".concat(className, " ").concat(thisProps.cellProps.className) : className;
      if (!headerCell) {
        CELL_RENDER_OBJECT.empty = empty;
        CELL_RENDER_OBJECT.value = value;
        CELL_RENDER_OBJECT.data = data;
        CELL_RENDER_OBJECT.cellProps = cellProps;
        CELL_RENDER_OBJECT.columnIndex = computedVisibleIndex;
        CELL_RENDER_OBJECT.treeColumn = treeColumn;
        CELL_RENDER_OBJECT.rowIndex = rowIndex;
        CELL_RENDER_OBJECT.remoteRowIndex = remoteRowIndex;
        CELL_RENDER_OBJECT.rowIndexInGroup = thisProps.rowIndexInGroup;
        CELL_RENDER_OBJECT.rowSelected = rowSelected;
        CELL_RENDER_OBJECT.rowExpanded = rowExpanded;
        CELL_RENDER_OBJECT.nodeProps = data ? data.__nodeProps : emptyObject;
        CELL_RENDER_OBJECT.setRowSelected = setRowSelected;
        CELL_RENDER_OBJECT.setRowExpanded = setRowExpanded;
        CELL_RENDER_OBJECT.toggleGroup = toggleGroup;
        CELL_RENDER_OBJECT.toggleRowExpand = toggleRowExpand;
        CELL_RENDER_OBJECT.toggleNodeExpand = toggleNodeExpand;
        CELL_RENDER_OBJECT.loadNodeAsync = loadNodeAsync;
        CELL_RENDER_OBJECT.isRowExpandable = isRowExpandable;
        CELL_RENDER_OBJECT.totalDataCount = totalDataCount;
        CELL_RENDER_OBJECT.renderRowDetailsExpandIcon = renderRowDetailsExpandIcon;
        CELL_RENDER_OBJECT.renderRowDetailsCollapsedIcon = renderRowDetailsCollapsedIcon;
      }
      var rendersInlineEditor = headerCell ? false : cellProps.rendersInlineEditor;
      if (rendersInlineEditor && typeof rendersInlineEditor === "function") {
        rendersInlineEditor = cellProps.rendersInlineEditor(CELL_RENDER_OBJECT);
      }
      CELL_RENDER_OBJECT.rendersInlineEditor = rendersInlineEditor;
      cellProps.style = headerCell ? headerProps.style ? Object.assign({}, style, headerProps.style) : style : thisProps.cellProps && thisProps.cellProps.style ? typeof thisProps.cellProps.style === "function" ? Object.assign({}, style, thisProps.cellProps.style(cellProps)) : Object.assign({}, style, thisProps.cellProps.style) : style;
      if (inEdit || rendersInlineEditor) {
        cellProps.editProps = {
          inEdit,
          startEdit,
          value: thisProps.editValue,
          onClick: onEditorClick,
          onChange: onEditValueChange,
          onComplete: onEditorComplete,
          onCancel: onEditorCancel,
          onEnterNavigation: onEditorEnterNavigation,
          onTabNavigation: onEditorTabNavigation,
          gotoNext: gotoNextEditor,
          gotoPrev: gotoPrevEditor
        };
      }
      if (headerCell) {
        cellProps.onFocus = onHeaderCellFocus;
      }
      if (headerCell) {
        CELL_RENDER_OBJECT.renderRowDetailsMoreIcon = renderRowDetailsMoreIcon;
      }
      if (headerCell) {
        cellProps = prepareHeaderCellProps(cellProps);
      } else {
        if (data && (data.__summary || data.__group && data.groupColumnSummary) && renderSummary) {
          renderCell = renderSummary;
        }
        if (renderCell) {
          CELL_RENDER_SECOND_OBJ.cellProps = cellProps;
          CELL_RENDER_SECOND_OBJ.column = cellProps;
          CELL_RENDER_SECOND_OBJ.headerProps = null;
          if (data && (!data.__group || groupColumnVisible)) {
            cellProps.children = renderCell(CELL_RENDER_OBJECT, CELL_RENDER_SECOND_OBJ);
          }
        }
        if (!hidden && cellProps.children != null && cellProps.textEllipsis !== false) {
          cellProps.children = wrapInContent(cellProps.children);
        }
        if (onRender) {
          onRender(cellProps, CELL_RENDER_OBJECT);
        }
        if (cellSelected || cellActive || inEdit || rendersInlineEditor) {
          cellProps.children = [cellProps.children, renderSelectionBox(cellProps), inEdit && !rendersInlineEditor ? renderEditor(cellProps) : null];
        }
        if (treeColumn) {
          if (Array.isArray(cellProps.children)) {
            cellProps.children = [renderNodeTool(thisProps)].concat((0, _toConsumableArray2.default)(cellProps.children));
          } else {
            cellProps.children = [renderNodeTool(thisProps), cellProps.children];
          }
        }
      }
      var initialDOMProps = getInitialDOMProps();
      var domProps = Object.assign({}, initialDOMProps, {
        onFocus: cellProps.onFocus || initialDOMProps.onFocus,
        onClick: cellProps.onClick || initialDOMProps.onClick,
        onContextMenu: cellProps.onContextMenu || initialDOMProps.onContextMenu,
        onDoubleClick: cellProps.onDoubleClick || initialDOMProps.onDoubleClick,
        onMouseDown: cellProps.onMouseDown || initialDOMProps.onMouseDown,
        onTouchStart: cellProps.onTouchStart || initialDOMProps.onTouchStart,
        onMouseEnter: cellProps.onMouseEnter || initialDOMProps.onMouseEnter,
        onMouseLeave: cellProps.onMouseLeave || initialDOMProps.onMouseLeave,
        style: initialDOMProps.style ? Object.assign({}, initialDOMProps.style, cellProps.style) : cellProps.style,
        className: (0, _join.default)(initialDOMProps.className, cellProps.className)
      });
      domProps.ref = domRef;
      return headerCell ? (0, _renderHeader.default)(cellProps, domProps, cellInstance, state) : _react.default.createElement("div", _objectSpread(_objectSpread({}, domProps), {}, {
        children: cellProps.children,
        "data-props-id": props2.id,
        "data-state-props-id": getProps().id,
        id: null,
        name: null,
        value: null,
        title: null,
        data: null
      }));
    }
    InovuaDataGridCell.defaultProps = {
      cellDefaultClassName: cellBem(),
      headerCellDefaultClassName: headerBem(),
      computedMinWidth: 40,
      groupNestingSize: 10,
      treeNestingSize: 10,
      checkboxTabIndex: null,
      onSortClick: emptyFn,
      preventSortOnClick: function preventSortOnClick(event2) {
        var target = event2.target;
        return (0, _isFocusable.default)(target);
      }
    };
    InovuaDataGridCell.propTypes = {
      computedAbsoluteIndex: _propTypes.default.number,
      checkboxTabIndex: _propTypes.default.number,
      cellActive: _propTypes.default.bool,
      cellClassName: _propTypes.default.string,
      cellDefaultClassName: _propTypes.default.string,
      cellDOMProps: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
      computedCellMultiSelectionEnabled: _propTypes.default.bool,
      cellSelectable: _propTypes.default.bool,
      cellSelected: _propTypes.default.bool,
      checkboxColumn: _propTypes.default.any,
      collapsed: _propTypes.default.bool,
      computedColspan: _propTypes.default.number,
      computedRowspan: _propTypes.default.number,
      columnIndex: _propTypes.default.number,
      columnResizeHandleWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      computedLocked: _propTypes.default.oneOf([false, "start", "end"]),
      computedWidth: _propTypes.default.number,
      data: _propTypes.default.oneOfType([_propTypes.default.shape({}), _propTypes.default.array]),
      defaultWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      depth: _propTypes.default.number,
      deselectAll: _propTypes.default.func,
      domProps: _propTypes.default.object,
      empty: _propTypes.default.bool,
      first: _propTypes.default.bool,
      firstInSection: _propTypes.default.bool,
      computedFlex: _propTypes.default.number,
      flex: _propTypes.default.number,
      group: _propTypes.default.string,
      computedGroupBy: _propTypes.default.any,
      groupCell: _propTypes.default.bool,
      groupSpacerColumn: _propTypes.default.bool,
      groupNestingSize: _propTypes.default.number,
      groupProps: _propTypes.default.object,
      hasBottomSelectedSibling: _propTypes.default.bool,
      hasLeftSelectedSibling: _propTypes.default.bool,
      hasLockedStart: _propTypes.default.bool,
      hasRightSelectedSibling: _propTypes.default.bool,
      hasTopSelectedSibling: _propTypes.default.bool,
      header: _propTypes.default.any,
      headerAlign: _propTypes.default.oneOf(["start", "center", "end"]),
      headerCell: _propTypes.default.bool,
      headerCellDefaultClassName: _propTypes.default.string,
      headerClassName: _propTypes.default.string,
      headerDOMProps: _propTypes.default.object,
      headerEllipsis: _propTypes.default.bool,
      headerHeight: _propTypes.default.number,
      headerProps: _propTypes.default.any,
      headerUserSelect: _propTypes.default.oneOf([true, false, "text", "none"]),
      headerVerticalAlign: _propTypes.default.oneOf(["top", "middle", "center", "bottom", "start", "end"]),
      headerWrapperClassName: _propTypes.default.string,
      hidden: _propTypes.default.bool,
      hideIntermediateState: _propTypes.default.bool,
      hideTransitionDuration: _propTypes.default.number,
      hiding: _propTypes.default.bool,
      id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      inHideTransition: _propTypes.default.bool,
      inShowTransition: _propTypes.default.bool,
      inTransition: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
      index: _propTypes.default.number,
      initialIndex: _propTypes.default.number,
      isColumn: _propTypes.default.bool,
      last: _propTypes.default.bool,
      lastInRange: _propTypes.default.bool,
      lastInSection: _propTypes.default.bool,
      lastRowInGroup: _propTypes.default.bool,
      lastUnlocked: _propTypes.default.bool,
      locked: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      maxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      computedMaxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      minWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      computedMinWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      minRowHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      multiSelect: _propTypes.default.bool,
      name: _propTypes.default.string,
      nativeScroll: _propTypes.default.bool,
      nextBorderLeft: _propTypes.default.bool,
      noBackground: _propTypes.default.bool,
      onCellClick: _propTypes.default.func,
      onCellEnter: _propTypes.default.func,
      onCellMouseDown: _propTypes.default.func,
      preventSortOnClick: _propTypes.default.func,
      onCellSelectionDraggerMouseDown: _propTypes.default.func,
      onGroupToggle: _propTypes.default.func,
      onMount: _propTypes.default.func,
      onRender: _propTypes.default.func,
      onResizeMouseDown: _propTypes.default.func,
      onResizeTouchStart: _propTypes.default.func,
      onSortClick: _propTypes.default.func,
      onUnmount: _propTypes.default.func,
      prevBorderRight: _propTypes.default.bool,
      render: _propTypes.default.func,
      renderCheckbox: _propTypes.default.func,
      renderGroupTitle: _propTypes.default.func,
      renderHeader: _propTypes.default.func,
      renderSortTool: _propTypes.default.func,
      computedResizable: _propTypes.default.bool,
      lockable: _propTypes.default.bool,
      resizeProxyStyle: _propTypes.default.object,
      rowActive: _propTypes.default.bool,
      rowHeight: _propTypes.default.number,
      initialRowHeight: _propTypes.default.number,
      rowIndex: _propTypes.default.number,
      rowIndexInGroup: _propTypes.default.number,
      rowRenderIndex: _propTypes.default.number,
      rowSelected: _propTypes.default.bool,
      scrollbarWidth: _propTypes.default.number,
      indexInHeaderGroup: _propTypes.default.number,
      parentGroups: _propTypes.default.array,
      selectAll: _propTypes.default.func,
      selectedCount: _propTypes.default.number,
      selection: _propTypes.default.any,
      setRowSelected: _propTypes.default.func,
      setRowExpanded: _propTypes.default.func,
      toggleRowExpand: _propTypes.default.func,
      toggleNodeExpand: _propTypes.default.func,
      shouldComponentUpdate: _propTypes.default.func,
      showBorderBottom: _propTypes.default.bool,
      showBorderLeft: _propTypes.default.bool,
      showBorderRight: _propTypes.default.any,
      showBorderTop: _propTypes.default.bool,
      showColumnContextMenu: _propTypes.default.func,
      showColumnMenuSortOptions: _propTypes.default.bool,
      showColumnMenuFilterOptions: _propTypes.default.bool,
      showColumnMenuLockOptions: _propTypes.default.bool,
      showColumnMenuGroupOptions: _propTypes.default.bool,
      showTransitionDuration: _propTypes.default.number,
      sort: _propTypes.default.any,
      sortDelay: _propTypes.default.number,
      computedSortInfo: _propTypes.default.any,
      computedSortable: _propTypes.default.bool,
      textAlign: _propTypes.default.oneOf(["start", "center", "end"]),
      textEllipsis: _propTypes.default.bool,
      textVerticalAlign: _propTypes.default.oneOf(["top", "middle", "center", "bottom", "start", "end"]),
      titleClassName: _propTypes.default.string,
      tryRowCellEdit: _propTypes.default.func,
      totalCount: _propTypes.default.number,
      totalDataCount: _propTypes.default.number,
      unselectedCount: _propTypes.default.number,
      userSelect: _propTypes.default.oneOf([true, false, "text", "none"]),
      value: _propTypes.default.any,
      virtualizeColumns: _propTypes.default.bool,
      visibilityTransitionDuration: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
      computedVisible: _propTypes.default.bool,
      computedVisibleCount: _propTypes.default.number,
      computedVisibleIndex: _propTypes.default.number,
      indexInColumns: _propTypes.default.number,
      width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      editable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
      onEditStop: _propTypes.default.func,
      onEditStart: _propTypes.default.func,
      onEditCancel: _propTypes.default.func,
      onEditValueChange: _propTypes.default.func,
      onEditComplete: _propTypes.default.func,
      onEditStopForRow: _propTypes.default.func,
      onEditStartForRow: _propTypes.default.func,
      onEditCancelForRow: _propTypes.default.func,
      onEditValueChangeForRow: _propTypes.default.func,
      onEditCompleteForRow: _propTypes.default.func,
      onDragRowMouseDown: _propTypes.default.func,
      isRowExpandable: _propTypes.default.func,
      editorProps: _propTypes.default.any,
      editValue: _propTypes.default.any,
      Editor: _propTypes.default.func,
      renderEditor: _propTypes.default.func,
      zIndex: _propTypes.default.number,
      computedOffset: _propTypes.default.number,
      groupTitleCell: _propTypes.default.bool,
      groupExpandCell: _propTypes.default.bool,
      rendersInlineEditor: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
      groupColumn: _propTypes.default.bool,
      treeColumn: _propTypes.default.bool,
      renderNodeTool: _propTypes.default.func,
      showInContextMenu: _propTypes.default.bool,
      naturalRowHeight: _propTypes.default.bool,
      rtl: _propTypes.default.bool,
      computedFilterable: _propTypes.default.bool,
      computedEditable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
      groupColumnVisible: _propTypes.default.bool,
      filterTypes: _propTypes.default.any,
      filterDelay: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
      getFilterValue: _propTypes.default.func,
      onFilterValueChange: _propTypes.default.func,
      getEditStartValue: _propTypes.default.func,
      getEditCompleteValue: _propTypes.default.func,
      editStartEvent: _propTypes.default.string,
      setActiveIndex: _propTypes.default.func,
      renderColumnReorderProxy: _propTypes.default.func,
      columnHoverClassName: _propTypes.default.string,
      renderRowDetailsExpandIcon: _propTypes.default.func,
      renderRowDetailsCollapsedIcon: _propTypes.default.func
    };
    var _default = _react.default.memo(InovuaDataGridCell, function(prevProps, nextProps) {
      var areEqual = (0, _shallowequal.equalReturnKey)(nextProps, prevProps, {
        computedActiveIndex: 1,
        activeRowRef: 1,
        active: 1,
        timestamp: 1,
        remoteRowIndex: 1,
        onResizeMouseDown: 1,
        onResizeTouchStart: 1,
        onFocus: 1,
        onSortClick: 1,
        onTouchStart: 1,
        onColumnMouseEnter: 1,
        onColumnMouseLeave: 1
      });
      var equalProps = areEqual.result;
      if (!equalProps) {
        return false;
      }
      return true;
    });
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/DragCell.js
var require_DragCell = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/DragCell.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.MAX_WIDTH = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _Cell = _interopRequireDefault(require_Cell());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MAX_WIDTH = 350;
    exports.MAX_WIDTH = MAX_WIDTH;
    var DragCell = function(_React$Component) {
      (0, _inherits2.default)(DragCell2, _React$Component);
      var _super = _createSuper(DragCell2);
      function DragCell2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, DragCell2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "left", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "right", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "top", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "height", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "width", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getProps", function() {
          return _this.state.props || _this.props;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setProps", function(props2) {
          _this.setState({
            props: props2
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellMount", function(props2, cell) {
          if (_this.left) {
            cell.setLeft(_this.left);
          }
          if (_this.right) {
            cell.setRight(_this.right);
          }
          if (_this.top) {
            cell.setTop(_this.top);
          }
          if (_this.height) {
            cell.setHeight(_this.height);
          }
          if (_this.width) {
            cell.setWidth(_this.width);
          }
          cell.setDragging(true);
          _this.cell = cell;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellUnmount", function() {
          _this.cell = null;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setDragging", function(visible, callback) {
          if (!visible) {
            _this.top = void 0;
            _this.left = void 0;
            _this.right = void 0;
            _this.height = void 0;
            _this.width = void 0;
          }
          _this.setState({
            visible
          }, function() {
            if (_this.cell && visible) {
              _this.cell.setDragging(visible, callback);
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setTop", function(top) {
          _this.top = top;
          if (_this.cell && _this.state.visible) {
            _this.cell.setTop(top);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setHeight", function(height) {
          _this.height = height;
          if (_this.cell && _this.state.visible) {
            _this.cell.setHeight(height);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setWidth", function(width) {
          _this.width = width;
          if (_this.cell && _this.state.visible) {
            _this.cell.setWidth(width);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setLeft", function(left) {
          _this.left = left;
          if (_this.cell && _this.state.visible) {
            _this.cell.setLeft(left);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRight", function(right) {
          _this.right = right;
          if (_this.cell && _this.state.visible) {
            _this.cell.setRight(right);
          }
        });
        _this.state = {
          visible: false
        };
        return _this;
      }
      (0, _createClass2.default)(DragCell2, [{
        key: "render",
        value: function render() {
          if (this.state.visible) {
            var props2 = this.getProps();
            var className = props2.className ? "".concat(props2.className, " InovuaReactDataGrid__drag-proxy") : "InovuaReactDataGrid__drag-proxy";
            var headerWrapperClassName = props2.headerWrapperClassName ? "".concat(props2.headerWrapperClassName, " InovuaReactDataGrid__drag-proxy") : "InovuaReactDataGrid__drag-proxy";
            var maxWidth = props2.maxWidth ? Math.min(props2.maxWidth, MAX_WIDTH) : MAX_WIDTH;
            var computedWidth = Math.min(props2.computedWidth, maxWidth);
            return _react.default.createElement(_Cell.default, _objectSpread(_objectSpread({}, props2), {}, {
              maxWidth,
              computedWidth,
              className,
              headerWrapperClassName,
              onMount: this.onCellMount,
              onUnmount: this.onCellUnmount
            }));
          }
          return null;
        }
      }]);
      return DragCell2;
    }(_react.default.Component);
    exports.default = DragCell;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/humanize.js
var require_humanize = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/humanize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(x) {
      return x || "";
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/Header/HeaderGroup.js
var require_HeaderGroup = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/Header/HeaderGroup.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _region = _interopRequireDefault(require_region());
    var _join = _interopRequireDefault(require_join4());
    var _humanize = _interopRequireDefault(require_humanize());
    var _ColumnResizer = _interopRequireDefault(require_ColumnResizer());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var emptyObject = Object.freeze ? Object.freeze({}) : {};
    var BASE_CLASS_NAME = "InovuaReactDataGrid__header-group__title";
    var TOP_Z_INDEX = 1e4;
    var defaultProps = {
      isHeaderGroup: true
    };
    var propTypes = {
      columnResizeHandleWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      group: _propTypes.default.shape({
        name: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
        className: _propTypes.default.string,
        style: _propTypes.default.object,
        headerClassName: _propTypes.default.string,
        headerStyle: _propTypes.default.object
      }),
      depth: _propTypes.default.number.isRequired,
      columns: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])).isRequired,
      children: _propTypes.default.node,
      extraChildrenProps: _propTypes.default.object,
      containsLastColumn: _propTypes.default.bool,
      lastInSection: _propTypes.default.bool,
      filterable: _propTypes.default.bool,
      onResizeMouseDown: _propTypes.default.func,
      onResizeTouchStart: _propTypes.default.func,
      parentGroups: _propTypes.default.array,
      showBorderLeft: _propTypes.default.bool,
      showBorderRight: _propTypes.default.bool,
      siblingCount: _propTypes.default.number,
      siblingIndex: _propTypes.default.number
    };
    var getHeader = function getHeader2() {
      var group = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyObject;
      var header = group.header, name = group.name;
      if (header) {
        if (typeof header !== "function") {
          return header;
        }
        return header(group);
      }
      return (0, _humanize.default)(name || "");
    };
    var HeaderGroup = function(_React$Component) {
      (0, _inherits2.default)(HeaderGroup2, _React$Component);
      var _super = _createSuper(HeaderGroup2);
      function HeaderGroup2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, HeaderGroup2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMNode", function() {
          return _this.domRef && _this.domRef.current;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setTop", function(top) {
          _this.setState({
            top
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setLeft", function(left) {
          _this.setState({
            left
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRight", function(right) {
          _this.setState({
            right
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setHeight", function(height) {
          _this.setState({
            height
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setWidth", function(width) {
          _this.setState({
            width
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setDragging", function(dragging, callback) {
          var newState = {
            dragging
          };
          if (!dragging) {
            newState.top = 0;
            newState.left = 0;
            newState.width = 0;
            newState.height = 0;
          }
          _this.setState(newState, callback);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "prepareStyle", function() {
          var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this), state = _assertThisInitialize.state, props2 = _assertThisInitialize.props;
          var style = props2.style || {};
          var group = props2.group;
          var headerProps = group.headerProps;
          if (props2.group.style) {
            style = _objectSpread(_objectSpread({}, style), props2.group.style);
          }
          if (headerProps && headerProps.style) {
            style = _objectSpread(_objectSpread({}, style), headerProps.style);
          }
          if (state.dragging) {
            style = Object.assign({}, style, {
              zIndex: TOP_Z_INDEX
            });
            if (_this.props.rtl) {
              style.right = state.right || 0;
            } else {
              style.left = state.left || 0;
            }
            style.top = state.top || 0;
            style.height = state.height || "";
            style.width = state.width || "";
            style.position = "absolute";
            style.overflow = "hidden";
          }
          return style;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getProxyRegion", function() {
          var node = _this.domRef ? _this.domRef.current : null;
          var region = _region.default.from(node);
          if (_this.props.filterable) {
            var filterWrapper = node.querySelector(".InovuaReactDataGrid__column-header__filter-wrapper");
            if (filterWrapper) {
              region.setHeight(region.getHeight() - filterWrapper.offsetHeight);
            }
          }
          return region;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderChild", function(child, index2) {
          var extraProps = {
            parent: (0, _assertThisInitialized2.default)(_this),
            indexInHeaderGroup: index2
          };
          var dragging = _this.props.dragging || _this.state.dragging;
          if (_this.props.extraChildrenProps) {
            Object.assign(extraProps, _this.props.extraChildrenProps);
          }
          if (dragging) {
            extraProps.dragging = dragging;
          }
          extraProps.key = index2;
          return (0, _react.cloneElement)(child, extraProps);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeMouseDown", function(event2) {
          if (_this.props.onResizeMouseDown) {
            event2.stopPropagation();
            _this.props.onResizeMouseDown(_this.props, (0, _assertThisInitialized2.default)(_this), event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeTouchStart", function(event2) {
          if (_this.props.onResizeTouchStart) {
            event2.stopPropagation();
            _this.props.onResizeTouchStart(_this.props, (0, _assertThisInitialized2.default)(_this), event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMouseDown", function(event2) {
          if (_this.props.onMouseDown) {
            _this.props.onMouseDown(event2, _this.props, (0, _assertThisInitialized2.default)(_this));
          }
        });
        _this.state = {
          dragging: false
        };
        _this.domRef = _react.default.createRef();
        return _this;
      }
      (0, _createClass2.default)(HeaderGroup2, [{
        key: "render",
        value: function render() {
          var _style;
          var props2 = this.props;
          var showBorderLeft = props2.showBorderLeft, showBorderRight = props2.showBorderRight, resizable = props2.resizable, children = props2.children, group = props2.group, dragging = props2.dragging, depth = props2.depth, columnResizeHandleWidth = props2.columnResizeHandleWidth, containsLastColumn = props2.containsLastColumn, firstInSection = props2.firstInSection, lastInSection = props2.lastInSection, adjustResizer = props2.adjustResizer, locked = props2.locked, rtl = props2.rtl, resizeProxyStyle = props2.resizeProxyStyle;
          var style = this.prepareStyle();
          var resizerRight = containsLastColumn || adjustResizer || lastInSection ? 0 : -props2.columnResizeHandleWidth / 2;
          var header = getHeader(group);
          var _ref = group || emptyObject, headerAlign = _ref.headerAlign;
          var className = (0, _join.default)(BASE_CLASS_NAME, firstInSection && "InovuaReactDataGrid__header-group__title--first-in-section", "InovuaReactDataGrid__header-group__title--depth-".concat(depth), group.headerClassName, "InovuaReactDataGrid__header-group__title--direction-".concat(rtl ? "rtl" : "ltr"), showBorderLeft && "InovuaReactDataGrid__header-group__title--show-border-".concat(rtl ? "right" : "left"), showBorderRight && "InovuaReactDataGrid__header-group__title--show-border-".concat(rtl ? "left" : "right"), locked && "InovuaReactDataGrid__header-group__title--locked-".concat(locked), dragging && "InovuaReactDataGrid__header-group__title--dragging", containsLastColumn && "InovuaReactDataGrid__header-group__title--last", !header ? "InovuaReactDataGrid__header-group__title--empty" : null, "".concat(BASE_CLASS_NAME, "--align-").concat(headerAlign || "start"));
          var groupHeader = !header && !depth ? null : _react.default.createElement("div", {
            style: group.headerStyle,
            className
          }, header || " ");
          var resizeHandleStyle;
          if (resizable) {
            resizeHandleStyle = {
              width: columnResizeHandleWidth
            };
            if (resizeProxyStyle) {
              resizeHandleStyle = Object.assign({}, resizeProxyStyle, resizeHandleStyle);
            }
          }
          var resizer = resizable ? _react.default.createElement(_ColumnResizer.default, {
            className: "InovuaReactDataGrid__header-group-resizer",
            onMouseDown: this.onResizeMouseDown,
            onTouchStart: this.onResizeTouchStart,
            style: (_style = {
              width: columnResizeHandleWidth
            }, (0, _defineProperty2.default)(_style, rtl ? "left" : "right", resizerRight), (0, _defineProperty2.default)(_style, rtl ? "right" : "left", "unset"), (0, _defineProperty2.default)(_style, "zIndex", depth * 1e4 + (100 - this.props.firstIndex || 0)), _style),
            resizeHandleStyle,
            resizeHandleClassName: "InovuaReactDataGrid__header-group-resize-handle"
          }) : null;
          var headerProps = group.headerProps;
          return _react.default.createElement("div", {
            onMouseDown: this.onMouseDown,
            style,
            ref: this.domRef,
            className: (0, _join.default)(props2.className, "InovuaReactDataGrid__header-group", group.className, props2.inTransition && "InovuaReactDataGrid__header-group--transition", this.state.dragging && "InovuaReactDataGrid__header-group--dragging", headerProps && headerProps.className ? headerProps.className : "")
          }, resizer, groupHeader, _react.default.createElement("div", {
            className: "InovuaReactDataGrid__header-group-cells"
          }, children.map(this.renderChild)));
        }
      }]);
      return HeaderGroup2;
    }(_react.default.Component);
    exports.default = HeaderGroup;
    (0, _defineProperty2.default)(HeaderGroup, "defaultProps", defaultProps);
    (0, _defineProperty2.default)(HeaderGroup, "propTypes", propTypes);
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/DragHeaderGroup.js
var require_DragHeaderGroup = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/DragHeaderGroup.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _HeaderGroup = _interopRequireDefault(require_HeaderGroup());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var extraChildrenProps = {
      onUnmount: null,
      ref: null,
      dragging: true
    };
    var DragHeaderGroup = function(_React$Component) {
      (0, _inherits2.default)(DragHeaderGroup2, _React$Component);
      var _super = _createSuper(DragHeaderGroup2);
      function DragHeaderGroup2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, DragHeaderGroup2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getProps", function() {
          return _this.state.props || _this.props;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setProps", function(props2) {
          _this.setState({
            props: props2
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setDragging", function(visible, callback) {
          if (!visible) {
            _this.top = void 0;
            _this.left = void 0;
            _this.right = void 0;
            _this.width = void 0;
            _this.height = void 0;
          }
          _this.setState({
            visible
          }, function() {
            if (_this.headerGroup && visible) {
              _this.headerGroup.setDragging(visible, callback);
              if (_this.top !== void 0) {
                _this.headerGroup.setTop(_this.top);
              }
              if (_this.left !== void 0) {
                _this.headerGroup.setLeft(_this.left);
              }
              if (_this.right !== void 0) {
                _this.headerGroup.setRight(_this.right);
              }
              if (_this.height !== void 0) {
                _this.headerGroup.setHeight(_this.height);
              }
              if (_this.width !== void 0) {
                _this.headerGroup.setWidth(_this.width);
              }
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setHeight", function(height) {
          _this.height = height;
          if (_this.headerGroup && _this.state.visible) {
            _this.headerGroup.setHeight(height);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setWidth", function(width) {
          _this.width = width;
          if (_this.headerGroup && _this.state.visible) {
            _this.headerGroup.setWidth(width);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setTop", function(top) {
          _this.top = top;
          if (_this.headerGroup && _this.state.visible) {
            _this.headerGroup.setTop(top);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setLeft", function(left) {
          _this.left = left;
          if (_this.headerGroup && _this.state.visible) {
            _this.headerGroup.setLeft(left);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRight", function(right) {
          _this.right = right;
          if (_this.headerGroup && _this.state.visible) {
            _this.headerGroup.setRight(right);
          }
        });
        _this.refHeaderGroup = function(group) {
          _this.headerGroup = group;
        };
        _this.state = {
          visible: false
        };
        return _this;
      }
      (0, _createClass2.default)(DragHeaderGroup2, [{
        key: "render",
        value: function render() {
          if (this.state.visible) {
            var props2 = this.getProps();
            var className = props2.className ? "".concat(props2.className, " InovuaReactDataGrid__drag-proxy") : "InovuaReactDataGrid__drag-proxy";
            return _react.default.createElement(_HeaderGroup.default, _objectSpread(_objectSpread({}, props2), {}, {
              dragging: true,
              extraChildrenProps,
              className,
              ref: this.refHeaderGroup
            }));
          }
          return null;
        }
      }]);
      return DragHeaderGroup2;
    }(_react.default.Component);
    exports.default = DragHeaderGroup;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/renderCellsMaybeLocked.js
var require_renderCellsMaybeLocked = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/renderCellsMaybeLocked.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var emptyObject = Object.freeze ? Object.freeze({}) : null;
    var addTransitionDuration = function addTransitionDuration2(cols, style) {
      var firstCol = cols[0];
      if (firstCol.inTransition) {
        var duration = firstCol.inShowTransition ? firstCol.showTransitionDuration : firstCol.hideTransitionDuration;
        duration = duration || firstCol.visibilityTransitionDuration;
        style.transitionDuration = typeof duration == "number" ? "".concat(duration, "ms") : duration;
        return true;
      }
      return false;
    };
    var _default = function _default2(initialCells, _ref, scrollLeft) {
      var renderLockedStartCells = _ref.renderLockedStartCells, renderLockedEndCells = _ref.renderLockedEndCells, lockedStartColumns = _ref.lockedStartColumns, lockedEndColumns = _ref.lockedEndColumns, availableWidth = _ref.availableWidth, virtualizeColumns = _ref.virtualizeColumns, sticky = _ref.sticky, rowHeight = _ref.rowHeight, columns = _ref.columns, depth = _ref.depth, data = _ref.data, initialRowHeight = _ref.initialRowHeight, groupNestingSize = _ref.groupNestingSize, nativeScroll = _ref.nativeScroll, scrollbarWidth = _ref.scrollbarWidth, groupProps = _ref.groupProps, expandGroupTitle = _ref.expandGroupTitle, computedRowExpandEnabled = _ref.computedRowExpandEnabled, expanded = _ref.expanded, shouldRenderCollapsedRowDetails = _ref.shouldRenderCollapsedRowDetails, virtualListBorderLeft = _ref.virtualListBorderLeft, virtualListBorderRight = _ref.virtualListBorderRight, getScrollLeftMax = _ref.getScrollLeftMax, rtl = _ref.rtl;
      var _ref2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : emptyObject, lockedStartContent = _ref2.lockedStartContent, lockedEndContent = _ref2.lockedEndContent, unlockedContent = _ref2.unlockedContent, isHeader = _ref2.isHeader;
      var style = arguments.length > 4 ? arguments[4] : void 0;
      var lockedStartCount = lockedStartColumns ? lockedStartColumns.length : 0;
      var lockedEndCount = lockedEndColumns ? lockedEndColumns.length : 0;
      var lockedEndStartIndex = initialCells.length - lockedEndCount;
      var groupDepth = data && data.__group ? data.depth - 1 : depth || 0;
      var lockedStartCells = null;
      var lockedEndCells = null;
      var unlockedCells = null;
      var hasRowDetails = computedRowExpandEnabled && (expanded || shouldRenderCollapsedRowDetails);
      var lockedStartEndArgs = {
        lockedStartCount,
        isHeader,
        virtualListBorderLeft,
        lockedStartColumns,
        style,
        virtualizeColumns,
        rtl,
        getScrollLeftMax,
        addTransitionDuration,
        lockedStartContent,
        initialCells,
        sticky,
        scrollLeft,
        rowHeight,
        groupProps,
        expandGroupTitle,
        lockedEndColumns,
        nativeScroll,
        scrollbarWidth,
        virtualListBorderRight,
        lockedEndContent,
        hasRowDetails,
        initialRowHeight,
        lockedEndStartIndex,
        availableWidth
      };
      if (lockedStartCount && renderLockedStartCells) {
        lockedStartCells = renderLockedStartCells(lockedStartEndArgs);
      }
      if (lockedEndCount && renderLockedEndCells) {
        lockedEndCells = renderLockedEndCells(lockedStartEndArgs);
      }
      unlockedCells = unlockedContent || initialCells.slice(lockedStartCount, lockedEndStartIndex);
      if (lockedStartCount || lockedEndCount) {
        return [lockedStartCells, unlockedCells, lockedEndCells];
      }
      return initialCells;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/Header/getCellHeader.js
var require_getCellHeader = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/Header/getCellHeader.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _humanize = _interopRequireDefault(require_humanize());
    var _default = function _default2(cellProps, column, headerProps, contextMenu) {
      var header = cellProps.header, name = cellProps.name;
      if (header !== void 0) {
        if (typeof header !== "function") {
          return header;
        }
        return header(cellProps, {
          cellProps,
          column,
          headerProps,
          contextMenu
        });
      }
      return (0, _humanize.default)(name || "");
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/Header/index.js
var require_Header = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/Header/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getCellHeader", {
      enumerable: true,
      get: function get() {
        return _getCellHeader.default;
      }
    });
    exports.getParentGroups = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    var _region = _interopRequireDefault(require_region());
    var _selectParent = _interopRequireDefault(require_selectParent());
    var _uglified = _interopRequireDefault(require_uglified());
    var _Cell = _interopRequireDefault(require_Cell());
    var _HeaderGroup = _interopRequireDefault(require_HeaderGroup());
    var _renderCellsMaybeLocked = _interopRequireDefault(require_renderCellsMaybeLocked());
    var _join = _interopRequireDefault(require_join4());
    var _getCellHeader = _interopRequireDefault(require_getCellHeader());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var emptyFn = function emptyFn2() {
    };
    var getParentGroups = function getParentGroups2(groupName, groups) {
      var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        includeSelf: false
      }, includeSelf = _ref.includeSelf;
      var parentGroups = [];
      if (!groups) {
        return parentGroups;
      }
      var nextGroup = groups[groupName] ? groups[groups[groupName].group] : null;
      if (includeSelf && groups[groupName]) {
        parentGroups.push(groups[groupName]);
      }
      while (nextGroup) {
        parentGroups.push(nextGroup);
        nextGroup = groups[nextGroup.group];
      }
      return parentGroups;
    };
    exports.getParentGroups = getParentGroups;
    var defaultProps = {
      onResize: function onResize() {
      },
      showWarnings: !_uglified.default
    };
    var propTypes = {
      availableWidth: _propTypes.default.number,
      columnHeaderUserSelect: _propTypes.default.bool,
      columnRenderCount: _propTypes.default.number,
      columnResizeHandleWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      columnUserSelect: _propTypes.default.bool,
      columns: _propTypes.default.array,
      columnsMap: _propTypes.default.object,
      lockedStartColumns: _propTypes.default.array,
      unlockedColumns: _propTypes.default.array,
      lockedEndColumns: _propTypes.default.array,
      deselectAll: _propTypes.default.func,
      notifyColumnFilterVisibleStateChange: _propTypes.default.func,
      firstLockedEndIndex: _propTypes.default.number,
      firstLockedStartIndex: _propTypes.default.number,
      isMultiSort: _propTypes.default.bool,
      onGroupMouseDown: _propTypes.default.func,
      onResizeMouseDown: _propTypes.default.func,
      onResizeTouchStart: _propTypes.default.func,
      resizable: _propTypes.default.bool,
      resizeProxyStyle: _propTypes.default.object,
      scrollbarWidth: _propTypes.default.number,
      selectAll: _propTypes.default.func,
      selectedCount: _propTypes.default.number,
      sortInfo: _propTypes.default.any,
      sortable: _propTypes.default.bool,
      totalCount: _propTypes.default.number,
      unselectedCount: _propTypes.default.number,
      virtualListBorderLeft: _propTypes.default.number,
      virtualListBorderRight: _propTypes.default.number,
      nativeScroll: _propTypes.default.bool,
      computedShowHeaderBorderRight: _propTypes.default.any,
      hasLockedEnd: _propTypes.default.bool,
      hasLockedStart: _propTypes.default.bool,
      showColumnContextMenu: _propTypes.default.func,
      showColumnFilterContextMenu: _propTypes.default.func,
      hideColumnFilterContextMenu: _propTypes.default.func,
      onColumnHeaderFocus: _propTypes.default.func,
      showColumnMenuTool: _propTypes.default.bool,
      showColumnMenuToolOnHover: _propTypes.default.bool,
      firstUnlockedIndex: _propTypes.default.number,
      lockedRows: _propTypes.default.any,
      i18n: _propTypes.default.any,
      filterable: _propTypes.default.bool,
      filterTypes: _propTypes.default.any,
      computedGroupsDepth: _propTypes.default.number,
      computedGroupsMap: _propTypes.default.objectOf(_propTypes.default.shape({
        name: _propTypes.default.string.isRequired
      })),
      headerHeight: _propTypes.default.number,
      maxWidth: _propTypes.default.number,
      renderSortTool: _propTypes.default.func,
      minWidth: _propTypes.default.number,
      onCellMouseDown: _propTypes.default.func,
      onCellTouchStart: _propTypes.default.func,
      onCellClick: _propTypes.default.func,
      computedOnColumnFilterValueChange: _propTypes.default.func,
      onSortClick: _propTypes.default.func,
      onResize: _propTypes.default.func,
      scrollLeft: _propTypes.default.number,
      showWarnings: _propTypes.default.bool,
      unselected: _propTypes.default.any,
      virtualizeColumns: _propTypes.default.bool,
      width: _propTypes.default.number,
      updateLockedWrapperPositions: _propTypes.default.func,
      lastLockedEndIndex: _propTypes.default.number,
      lastLockedStartIndex: _propTypes.default.number,
      lastUnlockedIndex: _propTypes.default.number,
      getScrollLeftMax: _propTypes.default.func,
      rtl: _propTypes.default.bool,
      renderLockedEndCells: _propTypes.default.func,
      renderLockedStartCells: _propTypes.default.func,
      renderInPortal: _propTypes.default.any,
      onFilterValueChange: _propTypes.default.func,
      setScrollLeft: _propTypes.default.func,
      sortedColumnsInfo: _propTypes.default.any,
      renderMenuTool: _propTypes.default.func,
      columnHoverClassName: _propTypes.default.string,
      onColumnMouseEnter: _propTypes.default.func,
      onColumnMouseLeave: _propTypes.default.func,
      columnIndexHovered: _propTypes.default.number,
      enableColumnFilterContextMenu: _propTypes.default.bool,
      computedEnableColumnHover: _propTypes.default.bool,
      renderRowDetailsMoreIcon: _propTypes.default.func,
      hideColumnContextMenu: _propTypes.default.func,
      updateMenuPosition: _propTypes.default.func,
      computedFilterable: _propTypes.default.bool,
      filterRowHeight: _propTypes.default.number
    };
    var InovuaDataGridHeader = function(_React$Component) {
      (0, _inherits2.default)(InovuaDataGridHeader2, _React$Component);
      var _super = _createSuper(InovuaDataGridHeader2);
      function InovuaDataGridHeader2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaDataGridHeader2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "unlockedCells", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cells", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "columnRenderStartIndex", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollLeft", 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startIndex", 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "endIndex", 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps) {
          if (_this.props.columnRenderCount < prevProps.columnRenderCount) {
            _this.getUnlockedCells(prevProps).forEach(function(cell) {
              cell.setStateProps(null);
            });
          }
          if (prevProps.hasLockedStart && !_this.props.hasLockedStart) {
            setTimeout(function() {
              return _this.updateColumns();
            }, 0);
          }
          if (_this.props.virtualizeColumns && prevProps.columnRenderCount !== _this.props.columnRenderCount || _this.props.selectedCount !== prevProps.selectedCount || _this.props.unselectedCount !== prevProps.unselectedCount || _this.props.columns !== prevProps.columns || _this.props.columnIndexHovered !== prevProps.columnIndexHovered || _this.props.lockedStartColumns.length !== prevProps.lockedStartColumns.length) {
            _this.setState({
              children: _this.renderColumns()
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellMount", function(cellProps, c) {
          if (cellProps.dragging) {
            return;
          }
          if (_this.props.virtualizeColumns && !cellProps.computedLocked) {
            _this.unlockedCells.push(c);
          }
          _this.cells.push(c);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellUnmount", function(cellProps, cell) {
          if (cellProps.dragging) {
            return;
          }
          if (_this.props.virtualizeColumns && !cellProps.computedLocked) {
            if (_this.unlockedCells) {
              _this.unlockedCells = _this.unlockedCells.filter(function(c) {
                return c !== cell;
              });
            }
          }
          if (_this.cells) {
            _this.cells = _this.cells.filter(function(c) {
              return c !== cell;
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "findCellById", function(cellId) {
          var cellsArray = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _this.cells;
          return cellsArray.filter(function(c) {
            return c.getProps().id === cellId;
          })[0];
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCells", function() {
          var result = [];
          _this.props.columns.forEach(function(c) {
            var cell = _this.findCellById(c.id);
            if (cell) {
              var props2 = cell.getProps();
              result[props2.computedVisibleIndex] = cell;
            }
          });
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGroupsAndCells", function() {
          var cells = _this.getCells();
          var result = [];
          var add = function add2(item) {
            if (result.indexOf(item) == -1) {
              result.push(item);
            }
          };
          cells.forEach(function(cell) {
            var target = cell;
            while (target && target.props.parent) {
              add(target);
              target = target.props.parent;
            }
            if (target) {
              add(target);
            }
          });
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setCellIndex", function(cell, index2) {
          var cellProps = _this.getPropsForCells(index2)[0];
          cell.setStateProps(cellProps);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCellIndex", function(cell) {
          return cell.getProps().index;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sortCells", function(cells) {
          return cells.sort(function(cell1, cell2) {
            return _this.getCellIndex(cell1) - _this.getCellIndex(cell2);
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getUnlockedCells", function() {
          var thisProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var lockedStartColumns = thisProps.lockedStartColumns;
          var result = [];
          thisProps.columns.forEach(function(c) {
            var cell = _this.findCellById(c.id, _this.unlockedCells);
            if (cell) {
              var props2 = cell.getProps();
              var index2 = props2.computedVisibleIndex - lockedStartColumns.length;
              result[index2] = cell;
            }
          });
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSortedCells", function() {
          return _this.sortCells(_this.getUnlockedCells());
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGaps", function(startIndex, endIndex) {
          var visibleCellPositions = {};
          _this.getSortedCells().forEach(function(cell) {
            visibleCellPositions[_this.getCellIndex(cell)] = true;
          });
          var gaps = [];
          for (; startIndex <= endIndex; startIndex++) {
            if (!visibleCellPositions[startIndex]) {
              gaps.push(startIndex);
            }
          }
          return gaps;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setColumnRenderStartIndex", function(columnRenderStartIndex) {
          _this.columnRenderStartIndex = columnRenderStartIndex;
          var renderRange = _this.getColumnRenderRange();
          if (!renderRange) {
            return;
          }
          var start = renderRange.start, end = renderRange.end;
          var gaps = _this.getGaps(start, end);
          if (!gaps.length) {
            return;
          }
          _this.getUnlockedCells().forEach(function(cell) {
            var cellProps = cell.getProps();
            var cellIndex = cellProps.computedVisibleIndex, computedLocked = cellProps.computedLocked;
            if (computedLocked) {
              return;
            }
            var outOfView = cellIndex < start || cellIndex > end;
            var newIndex;
            if (outOfView && gaps.length) {
              newIndex = gaps[gaps.length - 1];
              _this.setCellIndex(cell, newIndex);
              gaps.length -= 1;
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getColumnRenderRange", function() {
          var _this$props = _this.props, columnRenderCount = _this$props.columnRenderCount, lockedStartColumns = _this$props.lockedStartColumns, lockedEndColumns = _this$props.lockedEndColumns, virtualizeColumns = _this$props.virtualizeColumns, columns = _this$props.columns;
          if (!virtualizeColumns) {
            return null;
          }
          var minStartIndex = lockedStartColumns.length;
          var maxEndIndex = columns.length - lockedEndColumns.length - 1;
          var columnRenderStartIndex = _this.columnRenderStartIndex == null ? _this.props.columnRenderStartIndex || 0 : _this.columnRenderStartIndex;
          columnRenderStartIndex = Math.max(columnRenderStartIndex, minStartIndex);
          if (columnRenderCount != null) {
            var columnRenderEndIndex = columnRenderStartIndex + columnRenderCount;
            columnRenderEndIndex = Math.min(columnRenderEndIndex, maxEndIndex);
            if (columnRenderEndIndex - columnRenderCount != columnRenderStartIndex) {
              columnRenderStartIndex = Math.max(columnRenderEndIndex - columnRenderCount, minStartIndex);
            }
            return {
              start: columnRenderStartIndex,
              end: columnRenderEndIndex
            };
          }
          return null;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "prepareStyle", function(props2) {
          var headerHeight = props2.headerHeight, width = props2.width, minWidth = props2.minWidth, index2 = props2.index;
          var style = _objectSpread({}, props2.style);
          if (width || minWidth) {
            if (width) {
              style.width = Math.max(width, minWidth || 0);
            }
            if (minWidth) {
              style.minWidth = minWidth;
            }
          }
          if (headerHeight) {
            style.height = headerHeight;
            if (props2.computedFilterable) {
              style.height += props2.filterRowHeight;
            }
          }
          style.zIndex = style.zIndex || 100 - (index2 || 0);
          var scrollLeft = _this.props.scrollLeft != null ? _this.props.scrollLeft : _this.scrollLeft;
          var transformPos = _this.props.rtl ? _this.props.getScrollLeftMax() - scrollLeft : -scrollLeft;
          style.transform = "translate3d(".concat(transformPos || 0, "px, 0px, 0px)");
          return style;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "notifyScrollLeftMax", function(scrollLeftMax) {
          var resizerClassName = "InovuaReactDataGrid__column-resizer";
          var lastUnlockedResizer = _this.getDOMNode().querySelector(".".concat(resizerClassName, "--last-unlocked"));
          if (lastUnlockedResizer) {
            var columnResizeHandleWidth = _this.props.columnResizeHandleWidth;
            var remaining = scrollLeftMax - (_this.scrollLeft + columnResizeHandleWidth / 2);
            var visible = remaining <= 0;
            lastUnlockedResizer.style.pointerEvents = visible ? "auto" : "none";
            var classList = lastUnlockedResizer.classList;
            if (classList && classList.add && classList.remove) {
              if (visible) {
                classList.add("".concat(resizerClassName, "--active"));
              } else {
                classList.remove("".concat(resizerClassName, "--active"));
              }
            } else {
              lastUnlockedResizer.style.zIndex = visible ? 5e3 : 2e3;
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollLeft", function(scrollLeft, scrollLeftMax) {
          _this.scrollLeft = scrollLeft;
          var node = _this.props.hasLocked ? _this.getDOMNode().querySelector(".InovuaReactDataGrid__unlocked-wrapper") : _this.getDOMNode();
          if (node) {
            var transformPos = _this.props.rtl ? _this.props.getScrollLeftMax() - scrollLeft : -scrollLeft;
            node.style.transform = "translate3d(".concat(transformPos, "px, 0px, 0px)");
          }
          if (_this.props.updateLockedWrapperPositions) {
            _this.props.updateLockedWrapperPositions.call((0, _assertThisInitialized2.default)(_this), _this.props, scrollLeft, {
              isHeader: true
            });
          }
          if (_this.props.virtualizeColumns) {
            _this.maybeUpdateColumns();
            if (scrollLeft === 0 || scrollLeft === scrollLeftMax) {
              requestAnimationFrame(function() {
                return _this.maybeUpdateColumns();
              });
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "maybeUpdateColumns", function() {
          var range = _this.getColumnRenderRange();
          if (range && range.start !== _this.startIndex && range.end !== _this.endIndex) {
            _this.updateColumns();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateColumns", function() {
          var newColumns = _this.renderColumns();
          _this.setState({
            children: newColumns
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function(event2) {
          var body = (0, _selectParent.default)(".InovuaReactDataGrid__body", event2.target);
          if (!body) {
            return;
          }
          var OFFSET = 15;
          var headerRegion = _region.default.from(body);
          var targetRegion = _region.default.from(event2.target);
          var scrollLeft = _this.scrollLeft || _this.props.scrollLeft || 0;
          if (!headerRegion.containsRegion(targetRegion)) {
            if (targetRegion.left < headerRegion.left) {
              var diff = headerRegion.left - targetRegion.left;
              var newScrollLeft = scrollLeft - (diff + OFFSET);
              _this.props.setScrollLeft(newScrollLeft);
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getPropsForCells", function(startIndex) {
          var endIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : startIndex + 1;
          var props2 = _this.props;
          var renderInPortal = props2.renderInPortal, columnHeaderUserSelect = props2.columnHeaderUserSelect, columnResizeHandleWidth = props2.columnResizeHandleWidth, columnUserSelect = props2.columnUserSelect, data = props2.data, showColumnContextMenu = props2.showColumnContextMenu, showColumnFilterContextMenu = props2.showColumnFilterContextMenu, hideColumnFilterContextMenu = props2.hideColumnFilterContextMenu, deselectAll = props2.deselectAll, notifyColumnFilterVisibleStateChange = props2.notifyColumnFilterVisibleStateChange, firstLockedEndIndex = props2.firstLockedEndIndex, firstUnlockedIndex = props2.firstUnlockedIndex, filterable = props2.filterable, computedShowHeaderBorderRight = props2.computedShowHeaderBorderRight, hasLockedEnd = props2.hasLockedEnd, hasLockedStart = props2.hasLockedStart, lockedEndColumns = props2.lockedEndColumns, nativeScroll = props2.nativeScroll, resizeProxyStyle = props2.resizeProxyStyle, rtl = props2.rtl, i18n = props2.i18n, scrollbarWidth = props2.scrollbarWidth, selectAll = props2.selectAll, selectedCount = props2.selectedCount, filterTypes = props2.filterTypes, totalCount = props2.totalCount, renderSortTool = props2.renderSortTool, unselectedCount = props2.unselectedCount, virtualizeColumns = props2.virtualizeColumns, showColumnMenuTool = props2.showColumnMenuTool, showColumnMenuToolOnHover = props2.showColumnMenuToolOnHover, lastUnlockedIndex = props2.lastUnlockedIndex, lastLockedStartIndex = props2.lastLockedStartIndex, lastLockedEndIndex = props2.lastLockedEndIndex, theme = props2.theme, renderMenuTool = props2.renderMenuTool, sortedColumnsInfo = props2.sortedColumnsInfo, onColumnMouseEnter = props2.onColumnMouseEnter, onColumnMouseLeave = props2.onColumnMouseLeave, columnIndexHovered = props2.columnIndexHovered, columnHoverClassName = props2.columnHoverClassName, enableColumnFilterContextMenu = props2.enableColumnFilterContextMenu, computedEnableColumnHover = props2.computedEnableColumnHover, renderRowDetailsMoreIcon = props2.renderRowDetailsMoreIcon, hideColumnContextMenu = props2.hideColumnContextMenu, updateMenuPosition = props2.updateMenuPosition, filterRowHeight = props2.filterRowHeight;
          var columns = props2.columns;
          if (startIndex !== void 0) {
            columns = columns.slice(startIndex, endIndex);
          }
          var firstLockedIndex = hasLockedEnd ? props2.columns.length - lockedEndColumns.length : -1;
          return columns.map(function(column, i) {
            var sortableColumn = column.computedSortable, resizableColumn = column.computedResizable;
            var isSortable = sortableColumn;
            var isResizable = resizableColumn;
            var cellStyle = column.style;
            if (props2.headerHeight) {
              if (column.style) {
                cellStyle = Object.assign({}, cellStyle);
              }
              if (!cellStyle) {
                cellStyle = {};
              }
              cellStyle.height = props2.headerHeight;
              if (props2.computedFilterable) {
                cellStyle.height += props2.filterRowHeight;
              }
            }
            var defaults = {
              filterable,
              renderSortTool,
              renderMenuTool,
              showColumnMenuTool,
              showColumnMenuToolOnHover
            };
            if (columnUserSelect !== void 0) {
              defaults.userSelect = columnUserSelect;
            }
            if (columnHeaderUserSelect !== void 0) {
              defaults.headerUserSelect = columnHeaderUserSelect;
            }
            var displayColumnFilterContextMenu = enableColumnFilterContextMenu;
            if (column.enableColumnFilterContextMenu != null) {
              displayColumnFilterContextMenu = column.enableColumnFilterContextMenu;
            }
            var cellProps = Object.assign(defaults, column, {
              headerCell: true,
              headerHeight: props2.headerHeight,
              i18n,
              selectedCount,
              unselectedCount,
              totalCount,
              showColumnContextMenu,
              showColumnFilterContextMenu,
              hideColumnFilterContextMenu,
              selectAll,
              deselectAll,
              style: cellStyle,
              resizeProxyStyle,
              renderInPortal,
              lastUnlockedIndex,
              lastLockedStartIndex,
              lastLockedEndIndex,
              notifyColumnFilterVisibleStateChange,
              filterTypes,
              onFilterValueChange: _this.onFilterValueChange,
              lastUnlocked: column.computedVisibleIndex === firstLockedIndex - 1,
              columnResizeHandleWidth,
              virtualizeColumns,
              rtl,
              onResizeMouseDown: props2.onResizeMouseDown,
              onResizeTouchStart: props2.onResizeTouchStart,
              onMouseDown: _this.onCellMouseDown,
              onTouchStart: _this.onCellTouchStart,
              computedSortable: isSortable,
              computedResizable: isResizable,
              hasLockedStart,
              nativeScroll,
              scrollbarWidth,
              data,
              theme,
              sortedColumnsInfo,
              onColumnMouseEnter,
              onColumnMouseLeave,
              columnIndex: i,
              columnIndexHovered,
              columnHoverClassName,
              enableColumnFilterContextMenu: displayColumnFilterContextMenu,
              computedEnableColumnHover,
              renderRowDetailsMoreIcon,
              hideColumnContextMenu,
              updateMenuPosition,
              filterRowHeight
            });
            cellProps.onFocus = _this.onHeaderCellFocus.bind((0, _assertThisInitialized2.default)(_this), cellProps, column);
            if (cellProps.group) {
              cellProps.parentGroups = getParentGroups(cellProps.group, _this.props.computedGroupsMap, {
                includeSelf: true
              });
            }
            if (props2.onCellClick) {
              cellProps.onClick = props2.onCellClick;
            }
            if (cellProps.visibilityTransitionDuration || cellProps.hideTransitionDuration || cellProps.showTransitionDuration) {
              cellProps.onTransitionEnd = _this.onTransitionEnd.bind((0, _assertThisInitialized2.default)(_this), cellProps, column);
            }
            cellProps.onSortClick = (props2.onSortClick || emptyFn).bind(null, cellProps);
            cellProps.value = (0, _getCellHeader.default)(cellProps, column, props2);
            cellProps.onUnmount = _this.onCellUnmount;
            cellProps.onMount = _this.onCellMount;
            var showBorderLeft = cellProps.showBorderLeft, showBorderRight = cellProps.showBorderRight;
            cellProps.showBorderRight = cellProps.computedLocked === "start" && cellProps.computedVisibleIndex == firstUnlockedIndex - 1 || computedShowHeaderBorderRight && column.computedVisibleIndex === column.computedVisibleCount - 1;
            cellProps.lastInSection = cellProps.computedLocked === "start" ? cellProps.computedVisibleIndex === lastLockedStartIndex : cellProps.computedLocked === "end" ? cellProps.computedVisibleIndex === lastLockedEndIndex : cellProps.computedVisibleIndex === lastUnlockedIndex;
            cellProps.firstInSection = cellProps.computedLocked === "start" ? cellProps.computedVisibleIndex == 0 : cellProps.computedLocked === "end" ? cellProps.computedVisibleIndex === firstLockedEndIndex : cellProps.computedVisibleIndex === firstUnlockedIndex;
            cellProps.showBorderLeft = cellProps.computedLocked === "end" ? cellProps.computedVisibleIndex >= firstLockedEndIndex : cellProps.computedLocked === "start" ? cellProps.computedVisibleIndex > 0 : cellProps.computedVisibleIndex > firstUnlockedIndex;
            var prevColumn = columns[i - 1];
            var nextColumn = columns[i + 1];
            if (prevColumn && prevColumn.nextBorderLeft !== void 0) {
              cellProps.showBorderLeft = prevColumn.nextBorderLeft;
            }
            if (nextColumn && nextColumn.prevBorderRight !== void 0) {
              cellProps.showBorderRight = nextColumn.prevBorderRight;
            }
            if (showBorderLeft !== void 0) {
              cellProps.showBorderLeft = showBorderLeft;
            }
            if (showBorderRight !== void 0) {
              cellProps.showBorderRight = showBorderRight;
            }
            return cellProps;
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onHeaderCellFocus", function(headerCellProps, column, e) {
          if (_this.props.onColumnHeaderFocus) {
            _this.props.onColumnHeaderFocus(headerCellProps, column, e);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onTransitionEnd", function(cellProps, column, e) {
          e.stopPropagation();
          if (column.onTransitionEnd) {
            column.onTransitionEnd(e);
          }
          if (_this.props.onTransitionEnd) {
            _this.props.onTransitionEnd(e, cellProps);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellMouseDown", function(headerCellProps, event2) {
          if (_this.props.onCellMouseDown) {
            _this.props.onCellMouseDown(headerCellProps, event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellTouchStart", function(headerCellProps, event2) {
          if (_this.props.onCellTouchStart) {
            _this.props.onCellTouchStart(headerCellProps, event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderColumns", function() {
          var _result2;
          var props2 = _this.props;
          var groups = props2.computedGroupsMap, hasLockedStart = props2.hasLockedStart, hasLockedEnd = props2.hasLockedEnd, lockedStartColumns = props2.lockedStartColumns, lockedEndColumns = props2.lockedEndColumns, columns = props2.columns;
          var renderRange = _this.getColumnRenderRange();
          _this.startIndex = renderRange === null || renderRange === void 0 ? void 0 : renderRange.start;
          _this.endIndex = renderRange === null || renderRange === void 0 ? void 0 : renderRange.end;
          var cellProps = renderRange ? _this.getPropsForCells(renderRange.start, renderRange.end + 1) : _this.getPropsForCells();
          var lockedStartCells;
          var lockedEndCells;
          if (renderRange) {
            if (hasLockedStart) {
              lockedStartCells = _this.getPropsForCells(0, lockedStartColumns.length);
            }
            if (hasLockedEnd) {
              lockedEndCells = _this.getPropsForCells(columns.length - lockedEndColumns.length, columns.length);
            }
          }
          if (groups) {
            if (hasLockedStart || hasLockedEnd) {
              if (hasLockedStart) {
                lockedStartCells = lockedStartCells || _this.getPropsForCells(0, lockedStartColumns.length);
                lockedStartCells = _this.renderGroupedCells(lockedStartCells);
              }
              if (hasLockedEnd) {
                lockedEndCells = lockedEndCells || _this.getPropsForCells(columns.length - lockedEndColumns.length, columns.length);
                lockedEndCells = _this.renderGroupedCells(lockedEndCells);
              }
              var unlockedCells = renderRange ? cellProps : _this.getPropsForCells(lockedStartColumns.length, columns.length - lockedEndColumns.length);
              unlockedCells = _this.renderGroupedCells(unlockedCells);
              return (0, _renderCellsMaybeLocked.default)([], _this.props, props2.scrollLeft, {
                lockedStartContent: lockedStartCells,
                lockedEndContent: lockedEndCells,
                unlockedContent: unlockedCells,
                isHeader: true
              });
            }
            return _this.renderGroupedCells(cellProps);
          }
          var result = [];
          if (hasLockedStart && lockedStartCells) {
            var _result;
            (_result = result).push.apply(_result, (0, _toConsumableArray2.default)(lockedStartCells));
          }
          (_result2 = result).push.apply(_result2, (0, _toConsumableArray2.default)(cellProps));
          if (hasLockedEnd && lockedEndCells) {
            var _result3;
            (_result3 = result).push.apply(_result3, (0, _toConsumableArray2.default)(lockedEndCells));
          }
          result = result.map(function(cProps, i) {
            var index2 = (renderRange === null || renderRange === void 0 ? void 0 : renderRange.start) + i;
            return _react.default.createElement(_Cell.default, _objectSpread(_objectSpread({}, cProps), {}, {
              timestamp: Date.now(),
              key: "".concat(index2, "__").concat(cProps.id),
              left: _this.props.columnWidthPrefixSums[index2]
            }));
          });
          return (0, _renderCellsMaybeLocked.default)(result, _this.props, props2.scrollLeft, {
            isHeader: true
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCellDOMNodeAt", function(index2) {
          var _this$props2 = _this.props, columns = _this$props2.columns, showWarnings = _this$props2.showWarnings, virtualizeColumns = _this$props2.virtualizeColumns;
          var column = columns[index2];
          if (!column) {
            return null;
          }
          var arr = column.computedLocked || !virtualizeColumns ? _this.getCells() : _this.getUnlockedCells();
          var cell = arr.filter(function(c) {
            return c.getProps().computedVisibleIndex === index2;
          })[0];
          if (!cell && showWarnings) {
            console.error("Cannot find dom cell at ".concat(index2, "."));
          }
          if (cell) {
            return cell.getDOMNode ? cell.getDOMNode() : cell.domRef ? cell.domRef.current : null;
          }
          return;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderHeaderGroup", function(groupName, groupItems, _) {
          var _this$props3 = _this.props, groups = _this$props3.computedGroupsMap, columnsMap = _this$props3.columnsMap, hasLockedEnd = _this$props3.hasLockedEnd, lockedStartColumns = _this$props3.lockedStartColumns, lockedEndColumns = _this$props3.lockedEndColumns, firstLockedEndIndex = _this$props3.firstLockedEndIndex, lastLockedStartIndex = _this$props3.lastLockedStartIndex, lastLockedEndIndex = _this$props3.lastLockedEndIndex, firstUnlockedIndex = _this$props3.firstUnlockedIndex, lastUnlockedIndex = _this$props3.lastUnlockedIndex, resizeProxyStyle = _this$props3.resizeProxyStyle, rtl = _this$props3.rtl;
          var group = groups[groupName];
          var parentGroups = getParentGroups(groupName, groups);
          var depth = group ? group.computedDepth : 0;
          var columns = groupItems.filter(function(x) {
            return !!x;
          }).reduce(function(acc, item) {
            if (item.type == _HeaderGroup.default) {
              acc.push.apply(acc, (0, _toConsumableArray2.default)(item.props.columns));
            } else {
              acc.push(item.props.id);
            }
            return acc;
          }, []);
          var style = {
            width: columns.reduce(function(width, colId) {
              return width + columnsMap[colId].computedWidth;
            }, 0)
          };
          var resizable = group && group.resizable !== void 0 ? group.resizable : _this.props.resizable;
          var allColumnsUnresizable = columns.reduce(function(acc, colId) {
            return acc && columnsMap[colId].computedResizable === false;
          }, true);
          if (allColumnsUnresizable) {
            resizable = false;
          }
          var firstColumn = columnsMap[columns[0]];
          var lastColumn = columnsMap[columns[columns.length - 1]];
          var firstIndex = firstColumn.computedVisibleIndex;
          var lastIndex = lastColumn.computedVisibleIndex;
          var showBorderLeft = firstIndex >= lockedStartColumns.length ? firstIndex > lockedStartColumns.length || firstColumn.computedLocked === "end" : firstIndex > 0;
          var containsLastColumn = lastColumn.computedVisibleIndex === _this.props.columns.length - 1;
          var showBorderRight = lastColumn.computedVisibleIndex === lockedStartColumns.length - 1;
          var adjustResizer = hasLockedEnd && lastColumn.computedVisibleIndex === _this.props.columns.length - lockedEndColumns.length - 1;
          var firstInSection = firstColumn.computedLocked === "start" ? firstIndex === 0 : firstColumn.computedLocked === "end" ? firstIndex == firstLockedEndIndex : firstIndex === firstUnlockedIndex;
          var lastInSection = lastColumn.computedLocked === "start" ? lastIndex === lastLockedStartIndex : lastColumn.computedLocked === "end" ? lastIndex == lastLockedEndIndex : lastIndex === lastUnlockedIndex;
          if (firstColumn.inTransition) {
            var duration = firstColumn.inShowTransition ? firstColumn.showTransitionDuration : firstColumn.hideTransitionDuration;
            duration = duration || firstColumn.visibilityTransitionDuration;
            style.transitionDuration = typeof duration == "number" ? "".concat(duration, "ms") : duration;
          }
          var key = "".concat(groupName, "-").concat(depth, "-").concat(columns.join("-"));
          return _react.default.createElement(_HeaderGroup.default, {
            key,
            depth,
            group,
            style,
            rtl,
            firstIndex,
            lastUnlockedIndex: _this.props.lastUnlockedIndex,
            lastLockedStartIndex: _this.props.lastLockedStartIndex,
            lastLockedEndIndex: _this.props.lastLockedEndIndex,
            filterable: _this.props.filterable,
            inTransition: firstColumn.inTransition,
            inShowTransition: firstColumn.inShowTransition,
            inHideTransition: firstColumn.inHideTransition,
            showTransitionDuration: firstColumn.showTransitionDuration,
            hideTransitionDuration: firstColumn.hideTransitionDuration,
            visibilityTransitionDuration: firstColumn.visibilityTransitionDuration,
            onMouseDown: _this.props.onGroupMouseDown,
            columns,
            resizeProxyStyle,
            locked: lastColumn.computedLocked === "start" ? "start" : firstColumn.computedLocked === "end" ? "end" : false,
            parentGroups,
            containsLastColumn,
            firstInSection,
            lastInSection,
            adjustResizer,
            showBorderLeft,
            showBorderRight,
            children: groupItems,
            resizable,
            columnResizeHandleWidth: _this.props.columnResizeHandleWidth,
            onResizeMouseDown: _this.onResizeMouseDown,
            onResizeTouchStart: _this.onResizeTouchStart
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeMouseDown", function(groupProps, headerGroupInstance, event2) {
          if (_this.props.onResizeMouseDown) {
            var colId = groupProps.columns[groupProps.columns.length - 1];
            var visibleIndex = _this.props.columnsMap[colId].computedVisibleIndex;
            _this.props.onResizeMouseDown({
              visibleIndex,
              computedVisibleIndex: visibleIndex
            }, {
              colHeaderNode: headerGroupInstance.domRef ? headerGroupInstance.domRef.current : null,
              event: event2,
              groupColumns: groupProps.columns
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeTouchStart", function(groupProps, headerGroupInstance, event2) {
          if (_this.props.onResizeTouchStart) {
            var colId = groupProps.columns[groupProps.columns.length - 1];
            var visibleIndex = _this.props.columnsMap[colId].computedVisibleIndex;
            _this.props.onResizeTouchStart({
              visibleIndex
            }, {
              colHeaderNode: headerGroupInstance.domRef ? headerGroupInstance.domRef.current : null,
              event: event2,
              groupColumns: groupProps.columns
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getItemsForDepth", function(items, depth) {
          return items.map(function(item) {
            return item.props.depth === depth ? item : null;
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderItems", function(items) {
          var computedGroupsDepth = _this.props.computedGroupsDepth;
          var currentDepth = computedGroupsDepth + 1;
          while (currentDepth > 0) {
            items = _this.groupItemsForDepth(items, currentDepth);
            currentDepth--;
          }
          return items;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "groupItemsForDepth", function(items, depth) {
          var depthItems = _this.getItemsForDepth(items, depth);
          var index2 = 0;
          var item = depthItems[index2];
          var currentGroupName = _this.getItemGroupName(item);
          var itemGroupName;
          var groupItems;
          var headerGroup;
          var groupStartIndex = 0;
          var len = depthItems.length + 1;
          while (index2 <= len) {
            itemGroupName = _this.getItemGroupName(item);
            if (currentGroupName == null && itemGroupName != null) {
              groupStartIndex = index2;
              currentGroupName = itemGroupName;
            } else if (itemGroupName != currentGroupName) {
              groupItems = items.slice(groupStartIndex, index2);
              headerGroup = _this.renderHeaderGroup(currentGroupName, groupItems);
              items.splice(groupStartIndex, groupItems.length, headerGroup);
              depthItems.splice(groupStartIndex, groupItems.length, headerGroup);
              index2 = groupStartIndex;
              currentGroupName = null;
            }
            index2++;
            item = depthItems[index2];
          }
          return items;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getItemGroupName", function(item) {
          if (!item) {
            return null;
          }
          var groups = _this.props.computedGroupsMap;
          var groupName;
          if (item.type == _HeaderGroup.default) {
            groupName = item.props.group ? item.props.group.group : null;
          } else {
            groupName = item.props.group;
          }
          var group = groups[groupName];
          return group ? group.name || "" : "";
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "fixDepth", function(item, depthDiff) {
          while (depthDiff >= 0) {
            item = _this.renderHeaderGroup(_this.getItemGroupName(item), [item], {
              depth: item.props.depth - 1,
              forceHeader: true
            });
            depthDiff--;
          }
          return item;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderGroupedCells", function(cellProps) {
          var _this$props4 = _this.props, groups = _this$props4.computedGroupsMap, showWarnings = _this$props4.showWarnings;
          var items = cellProps.map(function(props2) {
            var group = groups[props2.group];
            if (showWarnings && props2.group && !group) {
              _this.warn('Column "'.concat(props2.id, '" references group "').concat(props2.group, '", but the group is never defined in the groups prop.'));
            }
            var depth = group ? group.computedDepth + 1 : 0;
            return _react.default.createElement(_Cell.default, _objectSpread(_objectSpread({}, props2), {}, {
              key: props2.id,
              depth,
              timestamp: Date.now()
            }));
          });
          return _this.renderItems(items);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFilterValueChange", function(filterValue, cellProps) {
          if (_this.props.onFilterValueChange) {
            _this.props.onFilterValueChange({
              filterValue,
              columnId: cellProps.id,
              columnIndex: cellProps.computedVisibleIndex,
              cellProps
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "warn", function(msg) {
          console.error(msg);
        });
        _this.cells = [];
        _this.unlockedCells = [];
        _this.startIndex = 0;
        _this.endIndex = 0;
        _this.domRef = _react.default.createRef();
        _this.state = {
          children: _this.renderColumns()
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaDataGridHeader2, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.cells = null;
          this.unlockedCells = null;
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          var _this$domRef;
          return (_this$domRef = this.domRef) === null || _this$domRef === void 0 ? void 0 : _this$domRef.current;
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var rtl = props2.rtl, virtualizeColumns = props2.virtualizeColumns;
          var className = (0, _join.default)("InovuaReactDataGrid__header", "InovuaReactDataGrid__header--direction-".concat(rtl ? "rtl" : "ltr"), props2.className);
          var style = this.prepareStyle(props2);
          var children = virtualizeColumns ? this.state.children : this.renderColumns();
          var cleanedProps = (0, _reactCleanProps.default)(props2, InovuaDataGridHeader2.propTypes);
          delete cleanedProps.columnWidthPrefixSums;
          return _react.default.createElement("div", _objectSpread(_objectSpread({}, cleanedProps), {}, {
            className,
            data: null,
            style,
            ref: this.domRef,
            onFocus: this.onFocus
          }), children);
        }
      }]);
      return InovuaDataGridHeader2;
    }(_react.default.Component);
    exports.default = InovuaDataGridHeader;
    (0, _defineProperty2.default)(InovuaDataGridHeader, "defaultProps", defaultProps);
    (0, _defineProperty2.default)(InovuaDataGridHeader, "propTypes", propTypes);
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/HeaderWrapper.js
var require_HeaderWrapper = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/HeaderWrapper.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _Header = _interopRequireDefault(require_Header());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var fixScrollLeft = function fixScrollLeft2(event2) {
      var target = event2.currentTarget;
      requestAnimationFrame(function() {
        if (target.scrollLeft) {
          target.scrollLeft = 0;
        }
      });
    };
    var HeaderWrapper = function(_React$Component) {
      (0, _inherits2.default)(HeaderWrapper2, _React$Component);
      var _super = _createSuper(HeaderWrapper2);
      function HeaderWrapper2() {
        var _this;
        (0, _classCallCheck2.default)(this, HeaderWrapper2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSortedColumnsInfo", function(_ref) {
          var computedSortInfo = _ref.computedSortInfo, columnsMap = _ref.columnsMap;
          if (!computedSortInfo) {
            return;
          }
          var sortedColumnsInfo = [];
          if (Array.isArray(computedSortInfo)) {
            computedSortInfo.map(function(sortInfo) {
              sortedColumnsInfo.push(columnsMap[sortInfo.columnName || sortInfo.name]);
            });
          } else {
            return columnsMap[computedSortInfo.columnName];
          }
          return sortedColumnsInfo;
        });
        return _this;
      }
      (0, _createClass2.default)(HeaderWrapper2, [{
        key: "render",
        value: function render() {
          var props2 = this.props;
          var data = props2.data, deselectAll = props2.deselectAll, computedShowHeaderBorderRight = props2.computedShowHeaderBorderRight, headerProps = props2.headerProps, filterTypes = props2.filterTypes, filterable = props2.filterable, isMultiSort = props2.isMultiSort, nativeScroll = props2.nativeScroll, resizable = props2.resizable, resizeProxyStyle = props2.resizeProxyStyle, scrollLeft = props2.scrollLeft, scrollbars = props2.scrollbars, selectAll = props2.selectAll, selected = props2.computedSelected, unselected = props2.computedUnselected, selectedCount = props2.computedSelectedCount, sortInfo = props2.sortInfo, sortable = props2.sortable, renderSortTool = props2.renderSortTool, totalCount = props2.paginationCount, unselectedCount = props2.computedUnselectedCount, virtualListBorderLeft = props2.virtualListBorderLeft, virtualListBorderRight = props2.virtualListBorderRight, columns = props2.visibleColumns, lastLockedStartIndex = props2.lastLockedStartIndex, lastLockedEndIndex = props2.lastLockedEndIndex, lastUnlockedIndex = props2.lastUnlockedIndex, updateLockedWrapperPositions = props2.updateLockedWrapperPositions, theme = props2.theme, columnWidthPrefixSums = props2.columnWidthPrefixSums, renderMenuTool = props2.renderMenuTool, computedSortInfo = props2.computedSortInfo, columnsMap = props2.columnsMap, columnIndexHovered = props2.columnIndexHovered, onColumnMouseEnter = props2.onColumnMouseEnter, onColumnMouseLeave = props2.onColumnMouseLeave, columnHoverClassName = props2.columnHoverClassName, enableColumnFilterContextMenu = props2.enableColumnFilterContextMenu, computedEnableColumnHover = props2.computedEnableColumnHover, renderRowDetailsMoreIcon = props2.renderRowDetailsMoreIcon, hideColumnContextMenu = props2.hideColumnContextMenu, updateMenuPosition = props2.updateMenuPosition;
          var scrollbarWidth = 0;
          if (nativeScroll && scrollbars.vertical) {
            scrollbarWidth = (0, _getScrollbarWidth.default)();
          }
          var sortedColumnsInfo = this.getSortedColumnsInfo({
            computedSortInfo,
            columnsMap
          });
          var headerHeight = !props2.computedGroups ? props2.headerHeight : void 0;
          return _react.default.createElement("div", {
            className: "InovuaReactDataGrid__header-wrapper InovuaReactDataGrid__header-wrapper--direction-".concat(this.props.rtl ? "rtl" : "ltr"),
            onFocus: fixScrollLeft
          }, nativeScroll && this.props.rtl ? _react.default.createElement("div", {
            className: "InovuaReactDataGrid__header-rtl-scroll-spacer",
            style: {
              minWidth: scrollbarWidth,
              display: scrollbarWidth ? "block" : "none"
            }
          }) : null, _react.default.createElement(_Header.default, _objectSpread(_objectSpread({}, headerProps), {}, {
            notifyColumnFilterVisibleStateChange: props2.notifyColumnFilterVisibleStateChange,
            setScrollLeft: props2.setScrollLeft,
            getScrollLeftMax: props2.getScrollLeftMax,
            availableWidth: props2.availableWidth,
            lockedRows: props2.lockedRows,
            rtl: props2.rtl,
            i18n: props2.i18n,
            lastLockedStartIndex,
            lastLockedEndIndex,
            lastUnlockedIndex,
            columnHeaderUserSelect: props2.columnHeaderUserSelect,
            columnRenderCount: props2.columnRenderCount,
            columnResizeHandleWidth: props2.columnResizeHandleWidth,
            columnUserSelect: props2.columnUserSelect,
            renderInPortal: props2.renderInPortal,
            columns,
            columnsMap: props2.columnsMap,
            data,
            filterTypes,
            showColumnMenuTool: props2.showColumnMenuTool,
            showColumnMenuToolOnHover: props2.showColumnMenuToolOnHover,
            deselectAll,
            firstLockedEndIndex: props2.firstLockedEndIndex,
            firstUnlockedIndex: props2.firstUnlockedIndex,
            computedGroupsMap: props2.computedGroupsMap,
            computedGroupsDepth: props2.computedGroupsDepth,
            onColumnHeaderFocus: props2.onColumnHeaderFocus,
            filterable,
            showColumnContextMenu: props2.showColumnContextMenu,
            showColumnFilterContextMenu: props2.showColumnFilterContextMenu,
            hideColumnFilterContextMenu: props2.hideColumnFilterContextMenu,
            computedShowHeaderBorderRight,
            hasLockedEnd: props2.hasLockedEnd,
            hasLockedStart: props2.hasLockedStart,
            headerHeight,
            isMultiSort,
            lockedEndColumns: props2.lockedEndColumns,
            lockedStartColumns: props2.lockedStartColumns,
            minWidth: props2.minRowWidth,
            nativeScroll,
            onCellClick: props2.onHeaderCellClick,
            onGroupMouseDown: props2.onHeaderGroupMouseDown,
            onCellMouseDown: props2.onHeaderCellMouseDown,
            onCellTouchStart: props2.onHeaderCellTouchStart,
            onResizeMouseDown: props2.onResizeMouseDown,
            onResizeTouchStart: props2.onResizeTouchStart,
            onSortClick: props2.onHeaderSortClick,
            onTransitionEnd: props2.onTransitionEnd,
            ref: props2.refHeader,
            renderSortTool,
            resizable,
            resizeProxyStyle,
            scrollLeft,
            scrollbarWidth,
            selectAll,
            selectedCount,
            selected,
            unselected,
            sortInfo,
            sortable,
            totalCount,
            theme,
            renderLockedStartCells: props2.renderLockedStartCells,
            renderLockedEndCells: props2.renderLockedEndCells,
            onFilterValueChange: props2.onFilterValueChange,
            unselectedCount,
            virtualListBorderLeft,
            virtualListBorderRight,
            updateLockedWrapperPositions,
            virtualizeColumns: props2.virtualizeColumns && !!headerHeight && !props2.computedGroups,
            columnWidthPrefixSums,
            renderMenuTool,
            sortedColumnsInfo,
            columnIndexHovered,
            onColumnMouseEnter,
            onColumnMouseLeave,
            columnHoverClassName,
            enableColumnFilterContextMenu,
            computedEnableColumnHover,
            renderRowDetailsMoreIcon,
            hideColumnContextMenu,
            updateMenuPosition,
            computedFilterable: props2.computedFilterable,
            filterRowHeight: props2.filterRowHeight
          })), _react.default.createElement("div", {
            className: "InovuaReactDataGrid__header-wrapper__fill"
          }, props2.computedFilterable && _react.default.createElement("div", {
            className: "InovuaReactDataGrid__header-wrapper__fill__filters"
          })));
        }
      }]);
      return HeaderWrapper2;
    }(_react.default.Component);
    exports.default = HeaderWrapper;
    HeaderWrapper.propTypes = {
      visibleColumns: _propTypes.default.array.isRequired,
      columnsMap: _propTypes.default.object.isRequired,
      deselectAll: _propTypes.default.func,
      headerHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      headerProps: _propTypes.default.object,
      isMultiSort: _propTypes.default.bool,
      refHeader: _propTypes.default.func.isRequired,
      selectAll: _propTypes.default.func,
      setScrollLeft: _propTypes.default.func,
      sortable: _propTypes.default.bool,
      virtualizeColumns: _propTypes.default.bool,
      updateLockedWrapperPositions: _propTypes.default.func,
      lastLockedStartIndex: _propTypes.default.number,
      lastLockedEndIndex: _propTypes.default.number,
      lastUnlockedIndex: _propTypes.default.number,
      computedEnableColumnHover: _propTypes.default.bool,
      renderRowDetailsMoreIcon: _propTypes.default.func,
      computedFilterable: _propTypes.default.bool,
      filterRowHeight: _propTypes.default.number
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/index.js
var require_HeaderLayout = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/HeaderLayout/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactClass = _interopRequireDefault(require_react_class());
    var _debounce = _interopRequireDefault(require_debounce());
    var _contains = _interopRequireDefault(require_contains());
    var _assignDefined2 = _interopRequireDefault(require_assign_defined());
    var _region = _interopRequireDefault(require_region());
    var _isMobile = _interopRequireDefault(require_isMobile());
    var _getRangesForBoxes = _interopRequireDefault(require_getRangesForBoxes());
    var _getRangesForColumns = _interopRequireDefault(require_getRangesForColumns());
    var _setupColumnDrag = _interopRequireDefault(require_setupColumnDrag());
    var _moveXBeforeY = _interopRequireDefault(require_moveXBeforeY());
    var _isFocusable = _interopRequireDefault(require_isFocusable());
    var _getDropIndex2 = _interopRequireDefault(require_getDropIndex());
    var _getUndraggableSuccessiveCount = _interopRequireDefault(require_getUndraggableSuccessiveCount());
    var _DragCell = _interopRequireWildcard(require_DragCell());
    var _DragHeaderGroup = _interopRequireDefault(require_DragHeaderGroup());
    var _HeaderWrapper = _interopRequireDefault(require_HeaderWrapper());
    var _Header = require_Header();
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _getGlobal = require_getGlobal();
    var _join = _interopRequireDefault(require_join4());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var SCROLL_MARGIN = 40;
    var DRAG_INFO = null;
    var preventDefault = function preventDefault2(e) {
      return e.preventDefault();
    };
    var getColumnOrder = function getColumnOrder2(props2, filter) {
      var doFilter = function doFilter2(c) {
        return !c.groupColumn && filter ? filter(c) : true;
      };
      var order;
      if (props2.computedColumnOrder) {
        order = props2.computedColumnOrder.map(function(id) {
          return props2.columnsMap[id];
        }).filter(Boolean);
      } else {
        order = props2.allColumns;
      }
      var toId = function toId2(c) {
        return c.id;
      };
      order = (order || []).filter(doFilter).map(toId);
      var lockedStart = props2.lockedStartColumns.filter(doFilter).map(toId);
      var lockedMap = lockedStart.reduce(function(acc, cId) {
        acc[cId] = true;
        return acc;
      }, {});
      var lockedEnd = props2.lockedEndColumns.filter(doFilter).map(toId);
      lockedEnd.reduce(function(acc, cId) {
        acc[cId] = true;
        return acc;
      }, lockedMap);
      return [].concat((0, _toConsumableArray2.default)(lockedStart), (0, _toConsumableArray2.default)(order.filter(function(cId) {
        return !lockedMap[cId];
      })), (0, _toConsumableArray2.default)(lockedEnd));
    };
    var getParentsForColumns = function getParentsForColumns2(columns, groups, maxDepth) {
      var parentsForColumns = columns.map(function(col) {
        var result = [col.id].concat((0, _toConsumableArray2.default)((0, _Header.getParentGroups)(col.group, groups, {
          includeSelf: true
        }).map(function(g) {
          return g.name;
        })));
        while (result.length <= maxDepth + 1) {
          result.splice(0, 0, result[0]);
        }
        return result;
      });
      return parentsForColumns;
    };
    var getValidDropPositions = function getValidDropPositions2(_ref) {
      var dragTargetDepth = _ref.dragTargetDepth, dragTargetIndex = _ref.dragTargetIndex, dragTargetLength = _ref.dragTargetLength, parentsForColumns = _ref.parentsForColumns, lockedForColumns = _ref.lockedForColumns, columns = _ref.columns, allowGroupSplitOnReorder = _ref.allowGroupSplitOnReorder;
      var getGroupsForColumn = function getGroupsForColumn2(parents) {
        parents = parents || [];
        var initialName = parents[0];
        var shouldCheck = true;
        var groups = [];
        parents.forEach(function(group) {
          if (!shouldCheck) {
            groups.push(group);
            return;
          }
          if (shouldCheck && group !== initialName) {
            shouldCheck = false;
            groups.push(group);
            return;
          }
          groups.push(null);
        });
        return groups;
      };
      var getGroupStartFor = function getGroupStartFor2(parents, depth, index2) {
        var initialParent = parents[index2].slice(-depth - 1)[0];
        var initialLocked = lockedForColumns[index2];
        var itParents;
        var currentParent;
        var currentLocked;
        do {
          itParents = parents[index2 - 1];
          if (!itParents) {
            break;
          }
          currentParent = itParents.slice(-depth - 1)[0];
          currentLocked = lockedForColumns[index2];
          if (currentParent !== initialParent || currentLocked !== initialLocked) {
            break;
          }
          index2--;
        } while (index2 >= 0);
        return index2;
      };
      var getGroupEndFor = function getGroupEndFor2(parents, depth, index2) {
        var initialParent = parents[index2].slice(-depth - 1)[0];
        var initialLocked = lockedForColumns[index2];
        var itParents;
        var currentParent;
        var currentLocked;
        do {
          index2++;
          itParents = parents[index2];
          if (!itParents) {
            break;
          }
          currentParent = itParents.slice(-depth - 1)[0];
          currentLocked = lockedForColumns[index2];
          if (currentParent !== initialParent || currentLocked !== initialLocked) {
            break;
          }
        } while (index2 < parents.length);
        return index2;
      };
      var res = columns.reduce(function(acc, col, index2) {
        if (index2 > dragTargetIndex && index2 <= dragTargetIndex + dragTargetLength) {
          return acc;
        }
        acc[index2] = true;
        return acc;
      }, {});
      res[columns.length] = true;
      if (!allowGroupSplitOnReorder) {
        var dragTargetParentGroups = getGroupsForColumn(parentsForColumns[dragTargetIndex]).filter(function(x) {
          return x;
        });
        var isSingleColumn = !dragTargetParentGroups.length;
        var usedDepth = isSingleColumn ? 0 : dragTargetDepth;
        var parentGroupStartIndex = !usedDepth ? 0 : getGroupStartFor(parentsForColumns, usedDepth - 1, dragTargetIndex);
        var parentGroupEndIndex = !usedDepth ? columns.length : getGroupEndFor(parentsForColumns, usedDepth - 1, dragTargetIndex);
        var currentGroupEndIndex = getGroupEndFor(parentsForColumns, usedDepth, dragTargetIndex);
        for (var i = 0; i <= columns.length; i++) {
          delete res[i];
        }
        for (var _i = parentGroupStartIndex; _i < parentGroupEndIndex; _i++) {
          var itGroupStartIndex = getGroupStartFor(parentsForColumns, usedDepth, _i);
          var itGroupEndIndex = getGroupEndFor(parentsForColumns, usedDepth, _i);
          res[itGroupStartIndex] = true;
          res[itGroupEndIndex] = true;
        }
        var groupEndIsLastUnlocked = columns[currentGroupEndIndex] && columns[currentGroupEndIndex].computedLocked === "end" && columns[currentGroupEndIndex - 1] && columns[currentGroupEndIndex - 1].computedLocked !== "end";
        if (!groupEndIsLastUnlocked) {
          delete res[currentGroupEndIndex];
        }
      }
      return res;
    };
    var ReorderArrow = function(_React$Component) {
      (0, _inherits2.default)(ReorderArrow2, _React$Component);
      var _super = _createSuper(ReorderArrow2);
      function ReorderArrow2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, ReorderArrow2);
        _this = _super.call(this, props2);
        _this.state = {
          visible: false,
          bottom: 0,
          top: 0,
          left: 0
        };
        return _this;
      }
      (0, _createClass2.default)(ReorderArrow2, [{
        key: "set",
        value: function set(_ref2) {
          var bottom = _ref2.bottom, top = _ref2.top, left = _ref2.left, right = _ref2.right, target = _ref2.target;
          this.setState({
            target,
            bottom,
            left,
            top,
            right
          });
        }
      }, {
        key: "setVisible",
        value: function setVisible(visible) {
          if (visible != this.state.visible) {
            this.setState({
              visible
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          var size = this.props.size;
          var _this$state = this.state, bottom = _this$state.bottom, top = _this$state.top, left = _this$state.left, right = _this$state.right, visible = _this$state.visible, target = _this$state.target;
          return _react.default.createElement("div", {
            ref: this.refReorderArrow,
            style: {
              position: "absolute",
              top,
              left,
              right,
              width: size,
              height: bottom - top,
              bottom,
              pointerEvents: "none",
              opacity: visible ? 1 : 0,
              display: "block"
            },
            className: "InovuaReactDataGrid__column-reorder-arrow InovuaReactDataGrid__column-reorder-arrow--direction-".concat(this.props.rtl ? "rtl" : "ltr")
          }, _react.default.createElement("div", {
            className: "InovuaReactDataGrid__column-reorder-arrow-fill InovuaReactDataGrid__column-reorder-arrow-fill--direction-".concat(this.props.rtl ? "rtl" : "ltr", " InovuaReactDataGrid__column-reorder-arrow-fill--target-").concat(target || "none")
          }), this.props.renderReorderIndicator());
        }
      }]);
      return ReorderArrow2;
    }(_react.default.Component);
    ReorderArrow.defaultProps = {
      renderReorderIndicator: function renderReorderIndicator() {
      }
    };
    var InovuaDataGridHeaderLayout = function(_Component) {
      (0, _inherits2.default)(InovuaDataGridHeaderLayout2, _Component);
      var _super2 = _createSuper(InovuaDataGridHeaderLayout2);
      function InovuaDataGridHeaderLayout2(props2) {
        var _this2;
        (0, _classCallCheck2.default)(this, InovuaDataGridHeaderLayout2);
        _this2 = _super2.call(this, props2);
        _this2.state = {
          draggingProps: null
        };
        _this2.refDragGroupItem = function(item) {
          _this2.dragGroupItem = item;
        };
        _this2.refDragCell = function(cell) {
          _this2.dragCell = cell;
        };
        _this2.refDragHeaderGroup = function(item) {
          _this2.dragHeaderGroup = item;
        };
        _this2.groupToolbar = (0, _react.createRef)();
        _this2.refHeader = function(h) {
          _this2.headerNode = null;
          if (h) {
            _this2.headerNode = h.getDOMNode ? h.getDOMNode() : null;
            if (!_this2.headerNode) {
              throw "Cannot find header node";
            }
            if (_isMobile.default) {
              _this2.headerNode.addEventListener("touchmove", preventDefault);
            }
          } else {
            if (_this2.headerNode && _isMobile.default) {
              _this2.headerNode.removeEventListener("touchmove", preventDefault);
            }
            _this2.headerNode = null;
          }
          _this2.header = h;
        };
        _this2.headerWrapper = (0, _react.createRef)();
        _this2.refReorderArrow = function(cmp) {
          _this2.reorderArrow = cmp;
        };
        _this2.headerDomNode = (0, _react.createRef)();
        _this2.lazyNotifyHeaderScrollLeftMax = (0, _debounce.default)(_this2.notifyHeaderScrollLeftMax, 150);
        return _this2;
      }
      (0, _createClass2.default)(InovuaDataGridHeaderLayout2, [{
        key: "notifyHeaderScrollLeftMax",
        value: function notifyHeaderScrollLeftMax(scrollLeftMax) {
          if (this.header && this.props.lockedEndColumns) {
            this.header.notifyScrollLeftMax(scrollLeftMax === void 0 ? this.getScrollLeftMax() : scrollLeftMax);
          }
        }
      }, {
        key: "onContainerScrollHorizontal",
        value: function onContainerScrollHorizontal(scrollLeft, scrollLeftMax) {
          this.scrollLeft = scrollLeft;
          if (this.header) {
            this.header.setScrollLeft(scrollLeft, scrollLeftMax);
            this.lazyNotifyHeaderScrollLeftMax();
          }
        }
      }, {
        key: "setScrollLeft",
        value: function setScrollLeft(scrollLeft) {
          this.props.setScrollLeft(scrollLeft);
        }
      }, {
        key: "getScrollLeft",
        value: function getScrollLeft() {
          return this.scrollLeft || 0;
        }
      }, {
        key: "getScrollLeftMax",
        value: function getScrollLeftMax() {
          return this.props.getScrollLeftMax();
        }
      }, {
        key: "setColumnRenderStartIndex",
        value: function setColumnRenderStartIndex(columnRenderStartIndex) {
          if (this.header) {
            this.header.setColumnRenderStartIndex(columnRenderStartIndex);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var className = (0, _join.default)("InovuaReactDataGrid__header-layout", this.props.stickyHeader && "InovuaReactDataGrid__header-layout__sticky-header");
          return _react.default.createElement("div", {
            ref: this.headerDomNode,
            className
          }, this.renderGroupToolbar(), this.renderHeaderWrapper(), this.renderDragCell(), this.renderDragGroupItem(), this.renderDragHeaderGroup(), this.renderReorderIndicator());
        }
      }, {
        key: "renderGroupToolbar",
        value: function renderGroupToolbar() {
          var _this$props = this.props, columnsMap = _this$props.columnsMap, onGroupByChange = _this$props.onGroupByChange, onHeaderSortClick = _this$props.onHeaderSortClick, renderGroupItem = _this$props.renderGroupItem, renderSortTool = _this$props.renderSortTool, renderGroupToolbar2 = _this$props.renderGroupToolbar, groupBy = _this$props.computedGroupBy, disableGroupByToolbar = _this$props.disableGroupByToolbar, i18n = _this$props.i18n, rtl = _this$props.rtl, theme = _this$props.theme;
          if (!groupBy || !renderGroupToolbar2) {
            return null;
          }
          return renderGroupToolbar2({
            columnsMap,
            groupBy,
            rtl,
            theme,
            renderSortTool,
            onGroupByChange,
            disableGroupByToolbar,
            renderGroupItem,
            headerGroupPlaceholderText: i18n("dragHeaderToGroup"),
            onItemMouseDown: this.onGroupItemMouseDown,
            onSortClick: onHeaderSortClick,
            ref: this.groupToolbar
          });
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          var props2 = this.props;
          var computedShowHeader = props2.computedShowHeader;
          if (!computedShowHeader) {
            return null;
          }
          var scrollLeft = (this.scrollLeft !== void 0 ? this.scrollLeft : props2.scrollLeft) || 0;
          var groupBy = this.props.computedGroupBy && this.props.computedGroupBy.length ? this.props.computedGroupBy : null;
          return _react.default.createElement(_HeaderWrapper.default, _objectSpread(_objectSpread({}, props2), {}, {
            groupBy,
            onHeaderGroupMouseDown: this.onHeaderGroupMouseDown,
            onHeaderCellMouseDown: this.onHeaderCellMouseDown,
            onHeaderCellTouchStart: this.onHeaderCellTouchStart,
            ref: this.headerWrapper,
            refHeader: this.refHeader,
            scrollLeft,
            setScrollLeft: this.setScrollLeft
          }));
        }
      }, {
        key: "renderDragCell",
        value: function renderDragCell() {
          return _react.default.createElement(_DragCell.default, {
            ref: this.refDragCell
          });
        }
      }, {
        key: "renderDragGroupItem",
        value: function renderDragGroupItem() {
          if (!this.props.renderDragGroupItem) {
            return null;
          }
          return this.props.renderDragGroupItem(this.refDragGroupItem);
        }
      }, {
        key: "renderDragHeaderGroup",
        value: function renderDragHeaderGroup() {
          if (!this.props.computedGroups) {
            return;
          }
          return _react.default.createElement(_DragHeaderGroup.default, {
            ref: this.refDragHeaderGroup
          });
        }
      }, {
        key: "onGroupItemMouseDown",
        value: function onGroupItemMouseDown(column, index2, event2) {
          this.onHeaderCellMouseDown(column, event2, {
            dragTarget: "group",
            dragIndex: index2
          });
        }
      }, {
        key: "getCellDOMNodeAt",
        value: function getCellDOMNodeAt(index2) {
          return this.header.getCellDOMNodeAt(index2);
        }
      }, {
        key: "getHeader",
        value: function getHeader() {
          return this.header;
        }
      }, {
        key: "onHeaderGroupMouseDown",
        value: function onHeaderGroupMouseDown(event2, headerGroupProps, headerGroup) {
          if (event2.ctrlKey || event2.metaKey) {
            return;
          }
          if (this._dragIndex !== void 0) {
            return;
          }
          if (headerGroupProps.group && headerGroupProps.group.draggable === false) {
            return;
          }
          var dragTargetNode = headerGroup.domRef ? headerGroup.domRef.current : null;
          var shouldStop = (0, _toConsumableArray2.default)(dragTargetNode.querySelectorAll(".InovuaReactDataGrid__column-header__filter-wrapper")).reduce(function(shouldStop2, filterWrapperNode) {
            if ((0, _contains.default)(filterWrapperNode, event2.target) || filterWrapperNode === event2.target) {
              return true;
            }
            return shouldStop2;
          }, false);
          if (shouldStop) {
            return;
          }
          var groupColumns = headerGroupProps.columns.reduce(function(acc, colId) {
            acc[colId] = true;
            return acc;
          }, {});
          this.groupColumns = groupColumns;
          var dragBoxes = this.header.getGroupsAndCells().filter(function(item) {
            if (item === headerGroup) {
              return true;
            }
            if (item.props.id in groupColumns) {
              return false;
            }
            return !item.props.isHeaderGroup;
          });
          var dragIndex = dragBoxes.indexOf(headerGroup);
          var dragTargetIndex = this.props.columnsMap[headerGroup.props.columns[0]].computedVisibleIndex;
          var dragTargetDepth = headerGroup.props.depth;
          var dragTargetLength = headerGroup.props.columns.length;
          var parentsForColumns = getParentsForColumns(this.props.visibleColumns, this.props.computedGroupsMap, this.props.computedGroupsDepth);
          this.maybeDragMouseDown(event2, {
            dragTarget: "headergroup",
            dragTargetIndex,
            dragTargetDepth,
            dragTargetLength,
            parentsForColumns,
            dragTargetNode,
            dragIndex,
            dragBoxes,
            allowTargetChange: false,
            ranges: (0, _getRangesForBoxes.default)(dragBoxes, function(i) {
              return i;
            })
          });
        }
      }, {
        key: "onHeaderCellTouchStart",
        value: function onHeaderCellTouchStart() {
          return this.onHeaderCellMouseDown.apply(this, arguments);
        }
      }, {
        key: "onHeaderCellMouseDown",
        value: function onHeaderCellMouseDown(_ref3, event2) {
          var visibleIndex = _ref3.computedVisibleIndex;
          var _ref4 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
            dragTarget: "header"
          }, _ref4$dragTarget = _ref4.dragTarget, dragTarget = _ref4$dragTarget === void 0 ? "header" : _ref4$dragTarget, dragIndex = _ref4.dragIndex;
          if (this.props.reorderColumns === false) {
            return;
          }
          if ((0, _isFocusable.default)(event2.target)) {
            return;
          }
          if (event2.nativeEvent.which == 3 || event2.metaKey || event2.ctrlKey) {
            return;
          }
          if (dragIndex === void 0) {
            dragIndex = visibleIndex;
          }
          if (event2.ctrlKey || event2.metaKey) {
            return;
          }
          var allowTargetChange = void 0;
          var dragColumn;
          var dragTargetNode = this.getCellDOMNodeAt(visibleIndex);
          if (dragTarget == "header") {
            dragColumn = this.props.visibleColumns[visibleIndex];
            if (!dragColumn || dragColumn.groupColumn || dragColumn.draggable === false) {
              event2.stopPropagation();
              return;
            }
            if (this.props.computedGroupBy) {
              if (this.props.computedGroupBy.indexOf(dragColumn.id) != -1 || this.props.computedGroupBy.indexOf(dragColumn.name) != -1) {
                allowTargetChange = false;
              }
            }
            if (dragColumn.draggable === false) {
              return;
            }
            if (dragColumn.groupBy === false) {
              allowTargetChange = false;
            }
          }
          var dragTargetIndex = dragIndex;
          var dragTargetDepth = dragColumn && dragColumn.group && this.props.computedGroupsMap && this.props.computedGroupsMap[dragColumn.group] ? this.props.computedGroupsMap[dragColumn.group].computedDepth + 1 : this.props.computedGroupsDepth + 1;
          var parentsForColumns = getParentsForColumns(this.props.visibleColumns, this.props.computedGroupsMap, this.props.computedGroupsDepth);
          this.maybeDragMouseDown(event2, {
            dragTarget,
            dragIndex,
            dragTargetNode,
            parentsForColumns,
            dragTargetIndex,
            dragTargetDepth,
            dragTargetLength: 1,
            allowTargetChange
          });
        }
      }, {
        key: "maybeDragMouseDown",
        value: function maybeDragMouseDown(event2, _ref5) {
          var _this3 = this;
          var dragTarget = _ref5.dragTarget, dragIndex = _ref5.dragIndex, allowTargetChange = _ref5.allowTargetChange, ranges = _ref5.ranges, parentsForColumns = _ref5.parentsForColumns, dragTargetIndex = _ref5.dragTargetIndex, dragTargetDepth = _ref5.dragTargetDepth, dragTargetNode = _ref5.dragTargetNode, dragTargetLength = _ref5.dragTargetLength;
          if (this.props.computedPivot) {
            return;
          }
          this._dragIndex = dragIndex;
          var _removeListeners;
          var mouseMoveEventCount = 0;
          var didSetupDrag = false;
          var cleanup = function cleanup2() {
            delete _this3._dragIndex;
            if (_removeListeners) {
              _removeListeners();
            }
          };
          var onMouseUp = cleanup;
          var onMouseMove = function onMouseMove2(event3) {
            if (didSetupDrag) {
              return;
            }
            mouseMoveEventCount++;
            if (mouseMoveEventCount > 1) {
              didSetupDrag = true;
              _removeListeners();
              _this3.setupDrag({
                dragTarget,
                dragIndex,
                allowTargetChange,
                ranges,
                parentsForColumns,
                dragTargetIndex,
                dragTargetDepth,
                dragTargetLength,
                dragTargetNode
              }, event3);
            }
          };
          var mouseup = _isMobile.default ? "touchend" : "mouseup";
          var mousemove = _isMobile.default ? "touchmove" : "mousemove";
          _removeListeners = function removeListeners() {
            _removeListeners = null;
            globalObject.removeEventListener(mouseup, onMouseUp, false);
            globalObject.removeEventListener(mousemove, onMouseMove, false);
          };
          if (_isMobile.default) {
            setTimeout(function() {
              onMouseUp();
            }, 350);
          }
          globalObject.addEventListener(mouseup, onMouseUp, false);
          globalObject.addEventListener(mousemove, onMouseMove, false);
        }
      }, {
        key: "renderReorderIndicator",
        value: function renderReorderIndicator() {
          var size = this.props.reorderProxySize;
          return _react.default.createElement(ReorderArrow, {
            ref: this.refReorderArrow,
            size,
            rtl: this.props.rtl,
            renderReorderIndicator: this.props.renderReorderIndicator
          });
        }
      }, {
        key: "setReorderArrowAt",
        value: function setReorderArrowAt(index2, ranges, target) {
          var offset = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
          var visible = arguments.length > 4 ? arguments[4] : void 0;
          visible = visible !== void 0 ? visible : index2 != DRAG_INFO.dragIndex || target != DRAG_INFO.dragTarget;
          if (offset) {
            visible = true;
          }
          var rtl = this.props.rtl;
          this.reorderArrow.setVisible(visible);
          var last = index2 == ranges.length;
          var box = ranges[index2];
          var _DRAG_INFO = DRAG_INFO, headerRegion = _DRAG_INFO.headerRegion, initialScrollLeft = _DRAG_INFO.initialScrollLeft;
          if (!box && last) {
            var _box;
            var lastBox = ranges[ranges.length - 1] || {
              left: headerRegion.left,
              right: headerRegion.left
            };
            box = (_box = {}, (0, _defineProperty2.default)(_box, rtl ? "right" : "left", rtl ? lastBox.left : lastBox.right), (0, _defineProperty2.default)(_box, "computedLocked", lastBox.computedLocked), _box);
          }
          box = box || (rtl ? {
            right: 0
          } : {
            left: 0
          });
          var boxPos = rtl ? box.right : box.left;
          if (rtl && this.props.nativeScroll && this.props.scrollbars.vertical) {
            boxPos -= (0, _getScrollbarWidth.default)();
          }
          return this.setReorderArrowPosition(rtl ? -boxPos + headerRegion.right - offset : boxPos - headerRegion.left + offset, target);
        }
      }, {
        key: "setReorderArrowPosition",
        value: function setReorderArrowPosition(pos, target) {
          var rtl = this.props.rtl;
          this.reorderArrowPosition = this.reorderArrowPosition || {};
          (0, _assignDefined2.default)(this.reorderArrowPosition, (0, _defineProperty2.default)({}, rtl ? "right" : "left", pos));
          this.reorderArrow.set(_objectSpread((0, _defineProperty2.default)({
            target
          }, rtl ? "right" : "left", rtl ? this.reorderArrowPosition.right : this.reorderArrowPosition.left), DRAG_INFO.reorderProxyPosition[target]));
          return this;
        }
      }, {
        key: "setReorderArrowVisible",
        value: function setReorderArrowVisible(visible) {
          this.reorderArrow.setVisible(visible);
          return this;
        }
      }, {
        key: "getGroupToolbar",
        value: function getGroupToolbar() {
          return this.groupToolbar.current;
        }
      }, {
        key: "getGroupByItems",
        value: function getGroupByItems() {
          if (!this.groupToolbar.current) {
            return null;
          }
          return this.groupToolbar.current.getSortedItemsInfo();
        }
      }, {
        key: "getHeaderCells",
        value: function getHeaderCells() {
          return this.header.getCells();
        }
      }, {
        key: "getBoxesFor",
        value: function getBoxesFor(target) {
          if (target == "header") {
            return this.header.getCells();
          }
          if (target == "group" && this.groupToolbar.current) {
            return this.groupToolbar.current.getCells();
          }
          if (target == "headergroup") {
            return this.header.getGroupsAndCells();
          }
          return [];
        }
      }, {
        key: "getDragBoxInstance",
        value: function getDragBoxInstance(dragIndex, dragTarget, dragTargetDepth, dragTargetLength) {
          if (dragTarget === "group") {
            return this.getGroupToolbar() && this.getGroupToolbar().getCells()[dragIndex];
          }
          var dragCell = this.getHeaderCells()[dragIndex];
          var dragBox = dragCell;
          if (dragTargetLength) {
            var cellProps = dragCell.getProps();
            while (cellProps.depth > dragTargetDepth) {
              if (cellProps.parent) {
                dragBox = cellProps.parent;
                cellProps = dragBox.props;
              } else {
                break;
              }
            }
          }
          return dragBox;
        }
      }, {
        key: "setupDrag",
        value: function setupDrag(_ref6, event2) {
          var _DRAG_INFO2;
          var dragTarget = _ref6.dragTarget, dragIndex = _ref6.dragIndex, _ref6$allowTargetChan = _ref6.allowTargetChange, allowTargetChange = _ref6$allowTargetChan === void 0 ? true : _ref6$allowTargetChan, parentsForColumns = _ref6.parentsForColumns, dragTargetIndex = _ref6.dragTargetIndex, dragTargetDepth = _ref6.dragTargetDepth, dragTargetLength = _ref6.dragTargetLength;
          var columns = this.props.visibleColumns;
          var rtl = this.props.rtl;
          var headerRegion = _region.default.from(this.headerDomNode.current);
          var dragBox = this.getDragBoxInstance(dragIndex, dragTarget, dragTargetDepth, dragTargetLength);
          var initialScrollLeft = this.getScrollLeft();
          var dragBoxProps = dragBox.getProps ? dragBox.getProps() : dragBox.props;
          var rtlOffset = Math.max(this.props.totalComputedWidth - this.props.size.width, 0);
          var columnRanges = (0, _getRangesForColumns.default)(columns, {
            rtl,
            rtlOffset,
            initialOffset: rtl ? headerRegion.right : headerRegion.left,
            headerRegion,
            initialScrollLeft,
            availableWidth: Math.min(this.props.availableWidth, this.props.totalComputedWidth),
            totalLockedEndWidth: this.props.totalLockedEndWidth
          });
          var groupToolbarCells = this.getGroupToolbar() && this.getGroupToolbar().getCells();
          var groupByRanges = this.props.computedGroupBy && this.props.computedGroupBy.length ? (0, _getRangesForBoxes.default)(groupToolbarCells) || [] : [];
          var dragProxy = dragTarget == "header" ? this.dragCell : dragTarget == "group" ? this.dragGroupItem : this.dragHeaderGroup;
          var dragColumn = dragTarget === "group" ? dragBoxProps.column : columns[dragIndex];
          var headerDragColumn = dragTarget == "header" ? dragColumn : null;
          var columnId = dragTarget == "header" ? headerDragColumn.id : dragTarget == "group" ? dragColumn.id : null;
          var dragBoxNode = dragBox.getDOMNode ? dragBox.getDOMNode() : null;
          var dragBoxInitialRegion = dragBox && dragBox.getProxyRegion ? dragBox.getProxyRegion() : _region.default.from(dragBoxNode);
          if (_DragCell.MAX_WIDTH && dragBoxInitialRegion.getWidth() > _DragCell.MAX_WIDTH) {
            dragBoxInitialRegion.setWidth(_DragCell.MAX_WIDTH);
          }
          if (_region.default.from(dragBoxNode).getWidth() > headerRegion.getWidth() / 2) {
            if (rtl) {
              dragBoxInitialRegion.shift({
                right: event2.pageX - dragBoxInitialRegion.right - this.props.columnReorderScrollByAmount
              });
            } else {
              dragBoxInitialRegion.shift({
                left: event2.pageX - dragBoxInitialRegion.left - this.props.columnReorderScrollByAmount
              });
            }
          }
          var dragBoxOffsets = (0, _defineProperty2.default)({
            top: headerRegion.top
          }, rtl ? "right" : "left", rtl ? headerRegion.right : headerRegion.left);
          var extendedDragBoxProps = _objectSpread({}, dragBoxProps);
          if (this.props.renderColumnReorderProxy) {
            Object.assign(extendedDragBoxProps, {
              renderColumnReorderProxy: this.props.renderColumnReorderProxy
            });
          }
          dragProxy.setProps(extendedDragBoxProps);
          var dragProxyPosition = (0, _defineProperty2.default)({
            top: dragBoxInitialRegion.top - dragBoxOffsets.top
          }, rtl ? "right" : "left", rtl ? dragBoxOffsets.right - dragBoxInitialRegion.right : dragBoxInitialRegion.left - dragBoxOffsets.left);
          dragProxy.setHeight(dragBoxInitialRegion.height);
          dragProxy.setWidth(dragBoxInitialRegion.width);
          dragProxy.setTop(dragProxyPosition.top);
          if (rtl) {
            dragProxy.setRight(dragProxyPosition.right);
          } else {
            dragProxy.setLeft(dragProxyPosition.left);
          }
          var maxHeaderIndex = columns.length - (0, _getUndraggableSuccessiveCount.default)((0, _toConsumableArray2.default)(columns).reverse());
          var minHeaderIndex = (0, _getUndraggableSuccessiveCount.default)(columns);
          var validDropPositions = columns.reduce(function(acc, col, i) {
            acc[i] = true;
            return acc;
          }, {});
          validDropPositions[columns.length] = true;
          if (this.props.groups && this.props.groups.length && !this.props.allowGroupSplitOnReorder) {
            validDropPositions = getValidDropPositions({
              dragTargetDepth,
              dragTargetIndex,
              dragTargetLength,
              parentsForColumns,
              lockedForColumns: columns.map(function(c) {
                return c.computedLocked;
              }),
              columns,
              allowGroupSplitOnReorder: this.props.allowGroupSplitOnReorder,
              maxDepth: this.props.computedGroupsDepth + 1
            });
          }
          if (validDropPositions && !validDropPositions[dragIndex] && dragTarget != "group") {
            validDropPositions[dragIndex] = true;
          }
          var wrapperNode = this.headerDomNode ? this.headerDomNode.current : null;
          var filterRowHeight = 0;
          if (this.props.computedFilterable) {
            var filterWrapperNode = wrapperNode.querySelector(".InovuaReactDataGrid__column-header__filter-wrapper");
            if (filterWrapperNode) {
              filterRowHeight = filterWrapperNode.offsetHeight;
            }
          }
          DRAG_INFO = (_DRAG_INFO2 = {
            allowTargetChange,
            columnId,
            headerRegion,
            headerDragColumn,
            minHeaderIndex,
            maxHeaderIndex,
            dragColumn,
            dragColumnsIds: dragTarget == "headergroup" ? dragBox.props.columns : null,
            dragBox,
            dragBoxInitialRegion,
            dragBoxRegion: dragBoxInitialRegion.clone(),
            dragBoxProps,
            dragBoxOffsets,
            dragProxy,
            dragProxyInitialPosition: dragProxyPosition,
            dragTarget,
            dropTarget: dragTarget,
            dragIndex,
            columnRanges,
            groupByRanges,
            parentsForColumns,
            dragTargetIndex,
            dragTargetDepth,
            dragTargetLength,
            scrollLeftMax: this.props.getScrollLeftMax(),
            initialScrollLeft
          }, (0, _defineProperty2.default)(_DRAG_INFO2, "headerRegion", headerRegion), (0, _defineProperty2.default)(_DRAG_INFO2, "validDropPositions", validDropPositions), _DRAG_INFO2);
          var groupToolbarNode = this.groupToolbar.current ? this.groupToolbar.current.domRef ? this.groupToolbar.current.domRef.current : null : null;
          var headerGroupTargetNode = wrapperNode;
          var groupTargetNode = groupToolbarNode || this.headerDomNode.current;
          var groupComputedStyle = getComputedStyle(groupTargetNode);
          DRAG_INFO.reorderProxyPosition = {
            group: {
              top: parseInt(groupComputedStyle.paddingTop),
              bottom: groupTargetNode.offsetHeight - parseInt(groupComputedStyle.paddingBottom)
            },
            header: {
              top: this.props.computedGroupBy ? groupToolbarNode ? groupTargetNode.offsetHeight : this.headerDomNode.current.offsetTop : 0,
              bottom: headerGroupTargetNode.offsetHeight - filterRowHeight
            },
            headergroup: {
              top: this.props.computedGroupBy ? groupToolbarNode ? groupTargetNode.offsetHeight : this.headerDomNode.current.offsetTop : 0,
              bottom: headerGroupTargetNode.offsetHeight - filterRowHeight
            }
          };
          this.setReorderArrowAt(dragIndex, dragTarget === "group" ? groupByRanges : columnRanges, dragTarget);
          this.setReorderArrowPosition(void 0, dragTarget);
          dragProxy.setDragging(true);
          this.props.coverHandleRef.current.setActive(true);
          this.props.coverHandleRef.current.setCursor("grabbing");
          var headerNode = this.headerDomNode ? this.headerDomNode.current : null;
          (0, _setupColumnDrag.default)({
            constrainTo: this.props.constrainReorder ? _region.default.from(headerNode.parentNode) : void 0,
            region: dragBoxInitialRegion
          }, {
            onDrag: this.onHeaderCellDrag,
            onDrop: this.onHeaderCellDrop
          }, event2);
        }
      }, {
        key: "onHeaderCellDrop",
        value: function onHeaderCellDrop() {
          var _this4 = this;
          this.props.coverHandleRef.current.setActive(false);
          delete this._dragIndex;
          var dropIndex = this.dropIndex, props2 = this.props;
          if (dropIndex === void 0 || !DRAG_INFO) {
            if (DRAG_INFO) {
              DRAG_INFO.dragProxy.setDragging(false);
            }
            this.setReorderArrowVisible(false);
            DRAG_INFO = null;
            return;
          }
          var _DRAG_INFO3 = DRAG_INFO, dragColumn = _DRAG_INFO3.dragColumn, columnId = _DRAG_INFO3.columnId, dragColumnsIds = _DRAG_INFO3.dragColumnsIds, dragTarget = _DRAG_INFO3.dragTarget, dropTarget = _DRAG_INFO3.dropTarget, dragProxy = _DRAG_INFO3.dragProxy, newLocked = _DRAG_INFO3.newLocked;
          var _DRAG_INFO4 = DRAG_INFO, dragIndex = _DRAG_INFO4.dragIndex;
          DRAG_INFO = null;
          this.setReorderArrowVisible(false);
          dragProxy.setDragging(false);
          var columns = this.props.visibleColumns;
          var currentLocked = columns[dragIndex].computedLocked;
          if (dropIndex == dragIndex && newLocked === currentLocked && dragTarget == dropTarget) {
            return;
          }
          if (this.props.virtualizeColumns) {
            setTimeout(function() {
              _this4.header.updateColumns();
            }, 10);
          }
          if (dragTarget == "headergroup") {
            if (dropIndex == dragIndex && dragTarget == dropTarget && newLocked === currentLocked) {
              return;
            }
            if (columns[dropIndex]) {
              this.moveColumnsBeforeIndex(dragColumnsIds, columns[dropIndex].computedVisibleIndex, newLocked);
            } else if (dropIndex == columns.length) {
              var col = columns[columns.length - 1];
              if (col) {
                this.moveColumnsBeforeIndex(dragColumnsIds, col.computedVisibleIndex + 1, newLocked);
              }
            }
            return;
          }
          var visibleColumns = props2.visibleColumns, groupBy = props2.computedGroupBy;
          if (dropTarget == dragTarget) {
            if (dragTarget == "group") {
              this.setGroupBy((0, _moveXBeforeY.default)(groupBy, dragIndex, dropIndex));
            }
            if (dragTarget == "header") {
              this.moveColumnsBeforeIndex([columnId], dropIndex, newLocked);
            }
          }
          if (dragTarget == "header" && dropTarget == "group") {
            var groupByColumn = visibleColumns[dragIndex];
            var newGroupBy = [].concat(groupBy);
            newGroupBy.splice(dropIndex, 0, groupByColumn.id);
            this.setGroupBy(newGroupBy);
          }
          if (dragTarget == "group" && dropTarget == "header") {
            this.ungroupColumnToIndex(columnId, dropIndex);
          }
        }
      }, {
        key: "ungroupColumnToIndex",
        value: function ungroupColumnToIndex(columnId, dropIndex) {
          var props2 = this.props;
          var allColumns = props2.allColumns, visibleColumns = props2.visibleColumns;
          var dragColumn = allColumns.filter(function(c) {
            return c.id === columnId;
          })[0];
          var newGroupBy = [].concat(this.props.computedGroupBy).filter(function(g) {
            return g != columnId;
          });
          var columnAtDropIndex = visibleColumns[dropIndex];
          if (columnAtDropIndex && columnAtDropIndex.id === columnId) {
            this.setGroupBy(newGroupBy);
            return;
          }
          var order = getColumnOrder(props2, function(c) {
            return c.id !== columnId;
          });
          var insertIndex = columnAtDropIndex ? order.indexOf(columnAtDropIndex.id) : order.length;
          order.splice(insertIndex, 0, columnId);
          var columnAtDropIndexOrLast = columnAtDropIndex || visibleColumns[visibleColumns.length - 1];
          if (columnAtDropIndexOrLast.computedLocked != dragColumn.computedLocked) {
            this.props.setColumnLocked(columnId, columnAtDropIndexOrLast.computedLocked);
          }
          this.setGroupBy(newGroupBy);
          this.setColumnOrder(order);
        }
      }, {
        key: "moveColumnsBeforeIndex",
        value: function moveColumnsBeforeIndex(columnsIds, dropIndex, newLocked) {
          var _this5 = this;
          var props2 = this.props;
          var visibleColumns = props2.visibleColumns, columnVisibilityMap = props2.columnVisibilityMap, allowGroupSplitOnReorder = props2.allowGroupSplitOnReorder;
          var columnOrder = getColumnOrder(props2);
          var columns = visibleColumns.filter(function(col) {
            return columnsIds.indexOf(col.id) != -1;
          });
          var dragColumnsIndexesInAllColumns = columnsIds.map(function(columnId) {
            return columnOrder.indexOf(columnId);
          });
          var dropBeforeIndexInAllColumns = visibleColumns[dropIndex] ? columnOrder.indexOf(visibleColumns[dropIndex].id) : columnOrder.length;
          var firstDragIndex = dragColumnsIndexesInAllColumns[0];
          if (!allowGroupSplitOnReorder && firstDragIndex < dropBeforeIndexInAllColumns) {
            while (true) {
              var columnRightBefore = columnOrder[dropBeforeIndexInAllColumns - 1];
              if (columnRightBefore && columnVisibilityMap[columnRightBefore] === false) {
                dropBeforeIndexInAllColumns--;
                continue;
              }
              break;
            }
          }
          var targetColumn = visibleColumns[dropIndex] || visibleColumns[visibleColumns.length - 1];
          columns.forEach(function(col) {
            if (newLocked != col.computedLocked) {
              _this5.props.setColumnLocked(col.id, newLocked);
            }
          });
          var newColumnOrder = (0, _moveXBeforeY.default)(columnOrder, dragColumnsIndexesInAllColumns, dropBeforeIndexInAllColumns);
          this.setColumnOrder(newColumnOrder);
        }
      }, {
        key: "onHeaderCellDrag",
        value: function onHeaderCellDrag(_ref7) {
          var diffLeft = _ref7.left, diffTop = _ref7.top;
          if (!DRAG_INFO) {
            return;
          }
          var _DRAG_INFO5 = DRAG_INFO, allowTargetChange = _DRAG_INFO5.allowTargetChange, dragTarget = _DRAG_INFO5.dragTarget, dragIndex = _DRAG_INFO5.dragIndex, dragProxy = _DRAG_INFO5.dragProxy, dragColumn = _DRAG_INFO5.dragColumn, dragBoxInitialRegion = _DRAG_INFO5.dragBoxInitialRegion, dragBoxOffsets = _DRAG_INFO5.dragBoxOffsets, dragBoxRegion = _DRAG_INFO5.dragBoxRegion, groupByRanges = _DRAG_INFO5.groupByRanges, theRanges = _DRAG_INFO5.columnRanges, headerRegion = _DRAG_INFO5.headerRegion, scrollLeftMax = _DRAG_INFO5.scrollLeftMax, initialScrollLeft = _DRAG_INFO5.initialScrollLeft, validDropPositions = _DRAG_INFO5.validDropPositions;
          dragBoxRegion.set({
            left: dragBoxInitialRegion.left,
            top: dragBoxInitialRegion.top,
            bottom: dragBoxInitialRegion.bottom,
            right: dragBoxInitialRegion.right
          });
          var _DRAG_INFO6 = DRAG_INFO, dropTarget = _DRAG_INFO6.dropTarget;
          var _this$props2 = this.props, columnReorderScrollByAmount = _this$props2.columnReorderScrollByAmount, rtl = _this$props2.rtl;
          var scrollLeft = this.getScrollLeft();
          var scrollDiff = scrollLeft - initialScrollLeft;
          var initialDiffLeft = diffLeft;
          dragBoxRegion.shift({
            top: diffTop,
            left: diffLeft
          });
          diffLeft += scrollDiff;
          var minScrollLeft = Math.max(headerRegion.left, 0);
          var maxScrollRight = headerRegion.right;
          var groupToolbarNode = this.groupToolbar && this.groupToolbar.current && this.groupToolbar.current.domRef ? this.groupToolbar.current.domRef.current : null;
          if (this.groupToolbar.current && allowTargetChange) {
            var groupToolbarRegion = _region.default.from(groupToolbarNode);
            if (dragBoxRegion.top + dragBoxRegion.height / 2 < groupToolbarRegion.bottom) {
              if (dropTarget !== "group" && dragColumn.groupBy !== false) {
                dropTarget = DRAG_INFO.dropTarget = "group";
              }
            } else {
              if (dropTarget != "header") {
                dropTarget = DRAG_INFO.dropTarget = "header";
              }
            }
          }
          var scrollAdjust = 0;
          var dragProxyAdjust = 0;
          var dragComputedLocked = this.props.visibleColumns[dragIndex].computedLocked;
          if (dropTarget == "header" || dropTarget == "headergroup") {
            if (dragBoxInitialRegion.left + initialDiffLeft - this.props.totalLockedStartWidth < minScrollLeft + SCROLL_MARGIN && initialDiffLeft < 0) {
              scrollAdjust = -columnReorderScrollByAmount;
            } else if (dragBoxInitialRegion.right + initialDiffLeft > maxScrollRight - SCROLL_MARGIN - this.props.totalLockedEndWidth && initialDiffLeft > 0) {
              scrollAdjust = columnReorderScrollByAmount;
            }
            if (scrollAdjust) {
              if (scrollLeft + scrollAdjust < 0) {
                scrollAdjust = -scrollLeft;
              }
              if (scrollLeft + scrollAdjust > scrollLeftMax) {
                scrollAdjust = scrollLeftMax - scrollLeft;
              }
              if (scrollAdjust) {
                this.setScrollLeft(scrollLeft + scrollAdjust);
                dragProxyAdjust = scrollAdjust;
              }
            }
          }
          if (rtl) {
            dragProxy.setRight(dragBoxOffsets.right + -initialDiffLeft - dragBoxInitialRegion.right - dragProxyAdjust);
          } else {
            dragProxy.setLeft(dragBoxInitialRegion.left + initialDiffLeft - dragBoxOffsets.left - dragProxyAdjust);
          }
          dragProxy.setTop(dragBoxRegion.top - dragBoxOffsets.top);
          var dir = dropTarget == "group" && dragTarget == "group" ? initialDiffLeft < 0 ? -1 : 1 : dragTarget != dropTarget || diffLeft < 0 ? -1 : 1;
          if (dragComputedLocked) {
            dir = initialDiffLeft < 0 ? -1 : 1;
          }
          if (rtl) {
            dir *= -1;
          }
          var mapRange = function mapRange2(r) {
            if (!r.computedLocked) {
              return _objectSpread(_objectSpread({}, r), {}, {
                left: r.left - scrollDiff,
                right: r.right - scrollDiff
              });
            }
            return r;
          };
          var currentRanges = dropTarget === "group" ? groupByRanges : theRanges;
          var ranges = currentRanges.map(mapRange);
          var compareRanges = currentRanges.map(mapRange);
          var dragMinIndex = dropTarget == "header" ? DRAG_INFO.minHeaderIndex : void 0;
          var dragMaxIndex = dropTarget == "header" ? DRAG_INFO.maxHeaderIndex : void 0;
          var dropIndex;
          var _getDropIndex = (0, _getDropIndex2.default)({
            dir,
            rtl,
            dragMinIndex,
            dragMaxIndex,
            dragTarget,
            dropTarget,
            dragRange: _objectSpread(_objectSpread({}, ranges[dragIndex]), {}, {
              left: dragBoxRegion.left,
              right: dragBoxRegion.right,
              index: dragIndex
            }),
            dragIndex,
            ranges: compareRanges,
            validDropPositions: dropTarget === dragTarget ? validDropPositions : void 0
          }), newDropIndex = _getDropIndex.index, locked = _getDropIndex.locked;
          DRAG_INFO.newLocked = locked;
          if (newDropIndex != void 0) {
            dropIndex = newDropIndex;
          }
          var offset = 0;
          var visible;
          if (locked === "start" && newDropIndex === this.props.firstUnlockedIndex) {
            offset = (rtl ? -1 : 1) * -11;
          }
          if (newDropIndex === this.props.firstLockedEndIndex && dragIndex !== this.props.firstLockedEndIndex) {
            if (locked === "end") {
              offset = (rtl ? -1 : 1) * 4;
            } else if (!locked) {
              offset = (rtl ? -1 : 1) * -6;
            }
          }
          if (newDropIndex === this.props.visibleColumns.length) {
            offset = rtl ? 6 : -6;
          }
          if (locked == null && dragComputedLocked === "end" && newDropIndex === this.props.firstLockedEndIndex) {
            visible = true;
          }
          this.dropIndex = dropIndex;
          this.setReorderArrowPosition(void 0, dropTarget);
          this.setReorderArrowAt(dropIndex, compareRanges, dropTarget, offset, visible);
        }
      }, {
        key: "setColumnOrder",
        value: function setColumnOrder(newColumnOrder) {
          var columnOrder = getColumnOrder(this.props);
          if (this.props.setColumnOrder && JSON.stringify(columnOrder) !== JSON.stringify(newColumnOrder)) {
            this.props.setColumnOrder(newColumnOrder);
          }
        }
      }, {
        key: "setGroupBy",
        value: function setGroupBy(groupBy) {
          if (this.props.onGroupByChange && JSON.stringify(groupBy) !== JSON.stringify(this.props.computedGroupBy)) {
            this.props.onGroupByChange(groupBy);
          }
        }
      }, {
        key: "insertGroupBy",
        value: function insertGroupBy(at, column) {
          var props2 = this.props;
          var order = (0, _toConsumableArray2.default)(props2.computedGroupBy);
          order.splice(at, 0, column.id);
          this.setGroupBy(order);
        }
      }]);
      return InovuaDataGridHeaderLayout2;
    }(_reactClass.default);
    exports.default = InovuaDataGridHeaderLayout;
    InovuaDataGridHeaderLayout.propTypes = {
      i18n: _propTypes.default.func.isRequired,
      renderGroupToolbar: _propTypes.default.func,
      renderDragGroupItem: _propTypes.default.func,
      getScrollLeftMax: _propTypes.default.func.isRequired,
      setScrollLeft: _propTypes.default.func.isRequired,
      renderColumnReorderProxy: _propTypes.default.func,
      stickyHeader: _propTypes.default.bool
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/hasSticky/index.js
var require_hasSticky = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/hasSticky/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.sticky = exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var div = globalObject.document && globalObject.document.createElement ? globalObject.document.createElement("div") : null;
    var HAS_STICKY = false;
    var sticky;
    exports.sticky = sticky;
    if (div) {
      div.style.position = "sticky";
      if (div.style.position === "sticky") {
        exports.sticky = sticky = "sticky";
        HAS_STICKY = true;
      }
      if (!HAS_STICKY) {
        div.style.position = "-webkit-sticky";
        if (div.style.position === "-webkit-sticky") {
          HAS_STICKY = true;
          exports.sticky = sticky = "-webkit-sticky";
        }
      }
    }
    var _default = function _default2() {
      return HAS_STICKY;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/isSafari.js
var require_isSafari = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/isSafari.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var IS_SAFARI;
    var _default = function _default2() {
      if (IS_SAFARI !== void 0) {
        return IS_SAFARI;
      }
      var ua = globalObject.navigator ? globalObject.navigator.userAgent : "";
      return IS_SAFARI = ua.indexOf("Safari") !== -1 && ua.indexOf("Chrome") === -1;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/StickyScroller.js
var require_StickyScroller = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/StickyScroller.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get() {
        return _getScrollbarWidth.default;
      }
    });
    Object.defineProperty(exports, "isMobile", {
      enumerable: true,
      get: function get() {
        return _isMobile.default;
      }
    });
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _reactDom = require_react_dom();
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _src = _interopRequireDefault(require_src8());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    var _hasSticky = require_hasSticky();
    var _smoothScrollTo = _interopRequireDefault(require_smoothScrollTo());
    var _isMobile = _interopRequireDefault(require_isMobile());
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _join = _interopRequireDefault(require_join4());
    var _isSafari = _interopRequireDefault(require_isSafari());
    var _src2 = _interopRequireDefault(require_src());
    var _getGlobal = require_getGlobal();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var STICKY_STYLE = {
      position: _hasSticky.sticky,
      top: 0,
      left: 0
    };
    var WRAPPER_STYLE = {
      display: "block",
      position: "absolute",
      flex: "",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    };
    var ua = globalObject.navigator ? globalObject.navigator.userAgent : "";
    var IS_EDGE = ua.indexOf("Edge/") !== -1;
    var StickyVirtualScrollContainer = function(_React$Component) {
      (0, _inherits2.default)(StickyVirtualScrollContainer2, _React$Component);
      var _super = _createSuper(StickyVirtualScrollContainer2);
      function StickyVirtualScrollContainer2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, StickyVirtualScrollContainer2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "initializeScrollLeftForRtl", function() {
          var fixScrollLeft = function fixScrollLeft2() {
            if (_this.scroller && _this.scrollLeftMax) {
              _this.scroller.getScrollerNode().scrollLeft = 1e9;
              return;
            }
            requestAnimationFrame(fixScrollLeft2);
          };
          requestAnimationFrame(fixScrollLeft);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function() {
          if (_this.props.onResize) {
            var _this$props;
            (_this$props = _this.props).onResize.apply(_this$props, arguments);
          }
          _this.sync();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sync", function() {
          _this.scroller.sync();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rafSync", function() {
          if (_this.scroller.rafSync) {
            _this.scroller.rafSync();
          } else {
            _this.scroller.sync();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "smoothScrollTo", function(newValue, config, callback) {
          (0, _smoothScrollTo.default)(_this.scroller, newValue, config, callback);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollbars", function() {
          return {
            horizontal: _this.hasHorizontalScrollbar(),
            vertical: _this.hasVerticalScrollbar()
          };
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasScrollbar", function(orientation) {
          return _this.scroller.hasScrollbar.call((0, _assertThisInitialized2.default)(_this), orientation);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasVerticalScrollbar", function() {
          return _this.hasScrollbar("vertical");
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasHorizontalScrollbar", function() {
          return _this.hasScrollbar("horizontal");
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focus", function() {
          _this.scroller.focus();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function(event2) {
          if (event2.target === _this.domNode) {
            _this.focus();
          }
          if (_this.props.onFocus) {
            _this.props.onFocus(event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getTransformNode", function() {
          return _this.viewNode.children[0].children[0];
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollSize", function() {
          var node = _this.getTransformNode();
          var size;
          if (_this.props.getScrollSize) {
            size = _this.props.getScrollSize(node);
          } else {
            size = {
              width: node.scrollWidth,
              height: node.scrollHeight
            };
          }
          return size;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollPosition", function() {
          return _this.scroller.getScrollPosition();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateScrollStyle", function(scrollPos, prevScrollPos) {
          scrollPos = scrollPos || _this.getScrollPosition();
          var _scrollPos = scrollPos, scrollTop = _scrollPos.scrollTop, scrollLeft = _scrollPos.scrollLeft, scrollLeftMax = _scrollPos.scrollLeftMax;
          _this.scrollLeftMaxValue = scrollLeftMax;
          if (_this.props.onContainerScroll) {
            _this.props.onContainerScroll(scrollPos, prevScrollPos);
          }
          var node = _this.getTransformNode();
          var shouldApplyDefaultTransform = true;
          if (_this.props.applyScrollStyle) {
            shouldApplyDefaultTransform = _this.props.applyScrollStyle({
              scrollLeft,
              scrollTop,
              scrollLeftMax
            }, node) !== false;
          }
          if (shouldApplyDefaultTransform) {
            node.style.willChange = "transform";
            node.style.backfaceVisibility = "hidden";
            if (_this.props.useTransformToScroll) {
              node.style.transform = "translate3d(".concat(-scrollLeft, "px, ").concat(-scrollTop, "px, 0px)");
            } else {
              node.style.top = "".concat(-scrollTop, "px");
              node.style.left = "".concat(-scrollLeft, "px");
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBeforeHeight", function() {
          return _this.props.before ? _this.state.beforeElementSize.height || 0 : 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfterHeight", function() {
          return _this.props.after ? _this.state.afterElementSize.height || 0 : 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBeforeAndAfterHeight", function() {
          return _this.getBeforeHeight() + _this.getAfterHeight();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onViewResize", function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var size = args[0];
          _this.setState({
            size
          }, function() {
            _this.rafSync();
          });
          if (_this.props.onViewResize) {
            var _this$props2;
            (_this$props2 = _this.props).onViewResize.apply(_this$props2, args);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollerSpacer", function() {
          var spacerProps = {
            key: "spacer",
            "data-name": "spacer--sticky-scroller",
            style: _objectSpread({
              pointerEvents: "none",
              position: "absolute",
              top: 0,
              left: 0
            }, _this.state.size)
          };
          var result;
          if (_this.props.renderScrollerSpacer) {
            result = _this.props.renderScrollerSpacer(spacerProps, _this.state.size);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, spacerProps));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScroller", function(scrollerProps) {
          var scrollerOffset = _this.props.nativeScroll ? 0 : -_this.getEmptyScrollOffset();
          var props2 = _objectSpread(_objectSpread({}, scrollerProps), {}, {
            "data-name": "scroller",
            className: "",
            style: {
              display: "block",
              position: "absolute",
              WebkitOverflowScrolling: "touch",
              top: 0,
              left: 0,
              right: scrollerOffset,
              bottom: scrollerOffset,
              overflow: _this.props.nativeScroll ? "auto" : "scroll"
            },
            children: [_this.props.extraChildren, scrollerProps.children, _this.renderScrollerSpacer()]
          });
          var result;
          if (_this.props.renderScroller) {
            result = _this.props.renderScroller(props2);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, props2));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBefore", function() {
          var before = _this.props.before;
          if (!before) {
            return null;
          }
          return _react.default.cloneElement(before, {
            style: _objectSpread({
              position: "absolute",
              top: 0
            }, before.props.style),
            children: _react.default.createElement(_react.default.Fragment, null, before.props.children, _react.default.createElement(_src2.default, {
              notifyOnMount: true,
              onResize: _this.onBeforeElementResize
            }))
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfter", function() {
          var after = _this.props.after;
          if (!after) {
            return null;
          }
          return _react.default.cloneElement(after, {
            style: _objectSpread({
              position: "absolute",
              bottom: 0
            }, after.props.style),
            children: _react.default.createElement(_react.default.Fragment, null, after.props.children, _react.default.createElement(_src2.default, {
              notifyOnMount: true,
              onResize: _this.onAfterElementResize
            }))
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onBeforeElementResize", function(size) {
          _this.setState({
            beforeElementSize: size
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onAfterElementResize", function(size) {
          _this.setState({
            afterElementSize: size
          });
        });
        _this.refView = function(c) {
          _this.viewNode = c ? (0, _reactDom.findDOMNode)(c) : null;
        };
        _this.refScroller = function(s) {
          _this.scroller = s;
          _this.scrollerNode = s ? s.getScrollerNode() : null;
        };
        _this.state = {
          size: {},
          beforeElementSize: {
            height: 0
          },
          afterElementSize: {
            height: 0
          }
        };
        return _this;
      }
      (0, _createClass2.default)(StickyVirtualScrollContainer2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.sync();
          if (this.props.rtl) {
            this.initializeScrollLeftForRtl();
          }
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          return this.scroller.getDOMNode();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this.props.rtl) {
            if (prevProps.rtl !== this.props.rtl || prevProps.nativeScroll !== this.props.nativeScroll) {
              this.initializeScrollLeftForRtl();
            }
          }
        }
      }, {
        key: "scrollTop",
        get: function get() {
          return this.scroller.scrollTop;
        },
        set: function set(value) {
          this.scroller.scrollTop = value;
        }
      }, {
        key: "scrollTopMax",
        get: function get() {
          return this.scroller.scrollTopMax;
        }
      }, {
        key: "scrollLeft",
        get: function get() {
          return this.scroller.scrollLeft;
        },
        set: function set(value) {
          this.scroller.scrollLeft = this.props.rtl && value < 0 ? this.scrollLeftMax + value : value;
        }
      }, {
        key: "scrollLeftMax",
        get: function get() {
          return this.scrollLeftMaxValue != null ? this.scrollLeftMaxValue : this.scroller.scrollLeftMax;
        }
      }, {
        key: "getEmptyScrollOffset",
        value: function getEmptyScrollOffset() {
          return this.props.emptyScrollOffset == null ? (0, _getScrollbarWidth.default)() : this.props.emptyScrollOffset;
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var props2 = this.props;
          var style = props2.style, className = props2.className;
          var rtl = props2.rtl, contain = props2.contain;
          if (contain) {
            style = _objectSpread({}, style);
            if (contain === true) {
              style.contain = "style layout paint";
            } else {
              style.contain = contain;
            }
          }
          if (this.props.rtl) {
            style = _objectSpread(_objectSpread({}, style), {}, {
              direction: "ltr"
            });
          }
          className = (0, _join.default)(className, "inovua-react-virtual-scroll-container", rtl && "inovua-react-virtual-scroll-container--rtl", "inovua-react-virtual-scroll-container--sticky-strategy");
          var stickyStyle = STICKY_STYLE;
          if (this.props.rtl) {
            stickyStyle = _objectSpread(_objectSpread({}, stickyStyle), {}, {
              direction: "rtl"
            });
          }
          var beforeHeight = this.getBeforeHeight();
          var afterHeight = this.getAfterHeight();
          var renderView = function renderView2(viewProps) {
            var viewDOMProps = {
              ref: _this2.refView,
              style: stickyStyle,
              key: "view",
              "data-name": "view",
              children: _react.default.createElement("div", {
                style: {
                  position: "absolute",
                  minWidth: "100%",
                  direction: "ltr"
                }
              }, _react.default.createElement("div", {
                style: {
                  position: "absolute",
                  overflow: "visible",
                  minWidth: "100%",
                  direction: _this2.props.rtl ? "rtl" : "ltr"
                }
              }, viewProps.children[0], viewProps.children[1]))
            };
            var result;
            if (_this2.props.renderView) {
              result = _this2.props.renderView(viewDOMProps);
            }
            if (result === void 0) {
              result = _react.default.createElement("div", _objectSpread({}, viewDOMProps));
            }
            return result;
          };
          var cleanedProps = (0, _reactCleanProps.default)(this.props, this.constructor.propTypes);
          if (this.props.nativeScroll) {
            cleanedProps.scrollbars = false;
          }
          return _react.default.createElement(_src.default, _objectSpread(_objectSpread({
            tabIndex: -1,
            display: this.props.display || "block",
            className,
            wrapperStyle: _objectSpread(_objectSpread({}, WRAPPER_STYLE), {}, {
              top: beforeHeight,
              bottom: afterHeight
            })
          }, cleanedProps), {}, {
            style,
            before: this.getBefore(),
            after: this.getAfter(),
            nativeScroll: this.props.nativeScroll,
            emptyScrollOffset: 0,
            getScrollSize: this.getScrollSize,
            renderScroller: this.renderScroller,
            renderView,
            onViewResize: this.onViewResize,
            onContainerScroll: this.updateScrollStyle,
            ref: this.refScroller
          }));
        }
      }]);
      return StickyVirtualScrollContainer2;
    }(_react.default.Component);
    StickyVirtualScrollContainer.propTypes = {
      contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      before: _propTypes.default.element,
      after: _propTypes.default.element,
      extraChildren: _propTypes.default.node,
      renderScrollerSpacer: _propTypes.default.func,
      applyScrollStyle: _propTypes.default.func,
      useTransformToScroll: _propTypes.default.bool,
      preventRtlInherit: _propTypes.default.bool
    };
    StickyVirtualScrollContainer.defaultProps = {
      useTransformToScroll: !IS_EDGE,
      shouldAllowScrollbars: function shouldAllowScrollbars(props2, scrollbarWidth) {
        if (props2.nativeScroll) {
          return false;
        }
        if (scrollbarWidth) {
          return true;
        }
        if (_isMobile.default || (0, _isSafari.default)()) {
          return false;
        }
        return true;
      }
    };
    var _default = StickyVirtualScrollContainer;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/old/ScrollerFactory.js
var require_ScrollerFactory = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/old/ScrollerFactory.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    var _debounce = _interopRequireDefault(require_debounce());
    var _src = _interopRequireDefault(require_src());
    var _smoothScrollTo = _interopRequireDefault(require_smoothScrollTo());
    var _uglified = _interopRequireDefault(require_uglified());
    var _join = _interopRequireDefault(require_join4());
    var _isSafari = _interopRequireDefault(require_isSafari());
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var raf = globalObject.requestAnimationFrame;
    var HAS_NEGATIVE_SCROLL;
    var ua = globalObject.navigator ? globalObject.navigator.userAgent : "";
    var IS_EDGE = ua.indexOf("Edge/") !== -1;
    var IS_MS_BROWSER = IS_EDGE || ua.indexOf("Trident") !== -1;
    var IS_IE = IS_MS_BROWSER && !IS_EDGE;
    var IS_FF = ua.toLowerCase().indexOf("firefox") > -1;
    var SCROLLER_Z_INDEX = 1e3;
    var SCROLLER_STYLE = {
      overflow: "auto",
      position: "static",
      flex: "1 1 auto",
      WebkitOverflowScrolling: "auto"
    };
    if (IS_EDGE) {
      SCROLLER_STYLE.position = "relative";
    } else {
      SCROLLER_STYLE.zIndex = SCROLLER_Z_INDEX;
    }
    var _default = function _default2(displayName, CONFIG) {
      var VirtualScrollContainer = function(_React$Component) {
        (0, _inherits2.default)(VirtualScrollContainer2, _React$Component);
        var _super = _createSuper(VirtualScrollContainer2);
        function VirtualScrollContainer2(props2) {
          var _this;
          (0, _classCallCheck2.default)(this, VirtualScrollContainer2);
          _this = _super.call(this, props2);
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function() {
            if (_this.props.onResize) {
              var _this$props;
              (_this$props = _this.props).onResize.apply(_this$props, arguments);
            }
            _this.sync();
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sync", function() {
            if (!_this.domNode) {
              return;
            }
            CONFIG.sync.call((0, _assertThisInitialized2.default)(_this));
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "smoothScrollTo", function(newValue, config, callback) {
            (0, _smoothScrollTo.default)(_this.scroller, newValue, config, callback);
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollbars", function() {
            return {
              horizontal: _this.hasHorizontalScrollbar(),
              vertical: _this.hasVerticalScrollbar()
            };
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasScrollbar", function(orientation) {
            return CONFIG.hasScrollbar.call((0, _assertThisInitialized2.default)(_this), orientation);
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasVerticalScrollbar", function() {
            return _this.hasScrollbar("vertical");
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasHorizontalScrollbar", function() {
            return _this.hasScrollbar("horizontal");
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focus", function() {
            _this.scroller.focus();
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function(event2) {
            if (event2.target === _this.domNode) {
              _this.focus();
            }
            if (_this.props.onFocus) {
              _this.props.onFocus(event2);
            }
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onChildResize", function(scrollSize) {
            _this.setState({
              scrollSize
            }, _this.sync);
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollPosition", function() {
            return CONFIG.getScrollPosition.call((0, _assertThisInitialized2.default)(_this));
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateScrollStyle", function(scrollPos) {
            scrollPos = scrollPos || _this.getScrollPosition();
            var _scrollPos = scrollPos, scrollTop = _scrollPos.scrollTop;
            var _scrollPos2 = scrollPos, scrollLeft = _scrollPos2.scrollLeft;
            if (_this.props.rtl && scrollLeft < 0) {
              HAS_NEGATIVE_SCROLL = true;
            }
            var node = _this.childNode.current ? _this.childNode.current.firstChild : null;
            if (_this.props.rtl) {
              if (!HAS_NEGATIVE_SCROLL) {
                if (IS_MS_BROWSER) {
                  scrollLeft = -scrollLeft;
                } else {
                  scrollLeft = -(_this.scrollLeftMax - scrollLeft);
                }
              }
            }
            if (_this.props.applyScrollStyle) {
              _this.props.applyScrollStyle({
                scrollLeft,
                scrollTop
              }, node);
            } else {
              node.style.top = "".concat(-scrollTop, "px");
              node.style.left = "".concat(-scrollLeft, "px");
            }
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNotifyResizeMount", function() {
            _this.notifierMounted = true;
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBefore", function() {
            var before = _this.props.before;
            if (!before) {
              return null;
            }
            return _react.default.cloneElement(before, {
              key: "before",
              style: _objectSpread({
                position: "absolute",
                top: 0,
                zIndex: 2 * SCROLLER_Z_INDEX + 1
              }, before.props.style),
              children: _react.default.createElement(_react.default.Fragment, null, before.props.children, _react.default.createElement(_src.default, {
                notifyOnMount: true,
                onResize: _this.onBeforeElementResize
              }))
            });
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfter", function() {
            var after = _this.props.after;
            if (!after) {
              return null;
            }
            var bottom = _this.props.nativeScroll ? _this.oldScrollbars && _this.oldScrollbars.horizontal ? (0, _getScrollbarWidth.default)() : 0 : 0;
            return _react.default.cloneElement(after, {
              key: "after",
              style: _objectSpread(_objectSpread({
                position: "absolute",
                zIndex: 2 * SCROLLER_Z_INDEX + 1
              }, after.props.style), {}, {
                bottom
              }),
              children: _react.default.createElement(_react.default.Fragment, null, after.props.children, _react.default.createElement(_src.default, {
                notifyOnMount: true,
                onResize: _this.onAfterElementResize
              }))
            });
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBeforeHeight", function() {
            return _this.props.before ? _this.state.beforeElementSize.height || 0 : 0;
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfterHeight", function() {
            return _this.props.after ? _this.state.afterElementSize.height || 0 : 0;
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onBeforeElementResize", function(size) {
            _this.setState({
              beforeElementSize: size
            });
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onAfterElementResize", function(size) {
            _this.setState({
              afterElementSize: size
            });
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollIntoView", function(_ref) {
            var target = _ref.target;
            if (target === _this.childNode.current) {
              if (target.scrollTop !== 0) {
                _this.scrollTop += target.scrollTop;
                target.scrollTop = 0;
              }
              if (target.scrollLeft !== 0) {
                _this.scrollLeft += target.scrollLeft;
                target.scrollLeft = 0;
              }
            }
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollIntent", function() {
            if (!_this.wheelCapturedOnScroller || IS_EDGE) {
              return;
            }
            _this.clear();
            _this.lazyRestorePointerEvents();
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lazyRestorePointerEvents", function() {
            if (_this.childNode.current && _this.wheelCapturedOnScroller) {
              _this.clear();
              _this.rafHandle = raf(function() {
                _this.wheelCapturedOnScroller = false;
                delete _this.rafHandle;
                _this.childNode.current.style.pointerEvents = "auto";
              });
            }
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onWheelEvent", function(event2) {
            if ((0, _isSafari.default)() && globalObject.WheelEvent) {
              _this.scrollerNode.dispatchEvent(new WheelEvent("wheel", event2.nativeEvent));
              event2.stopPropagation();
              event2.preventDefault();
              return;
            }
            _this.childNode.current.style.pointerEvents = "none";
            _this.wheelCapturedOnScroller = true;
            event2.stopPropagation();
            var isProbablyChrome = !IS_MS_BROWSER && !IS_FF && !(0, _isSafari.default)();
            var now = Date.now ? Date.now() : +/* @__PURE__ */ new Date();
            if (isProbablyChrome) {
              if (now - _this.wheelEventTimestamp < 150) {
                event2.preventDefault();
              }
            } else {
              event2.preventDefault();
            }
            _this.wheelEventTimestamp = now;
            _this.onScrollIntent();
          });
          (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "clear", function() {
            if (_this.rafHandle) {
              cancelAnimationFrame(_this.rafHandle);
              _this.rafHandle = null;
            }
          });
          _this.wheelEventTimestamp = 0;
          _this.lazyRestorePointerEvents = (0, _debounce.default)(_this.lazyRestorePointerEvents, props2.pointerEventsRestoreDelay, {
            leading: false,
            trailing: true
          });
          _this.childNode = (0, _react.createRef)();
          _this.refThis = function(c) {
            _this.domNode = c;
          };
          if (CONFIG.init) {
            CONFIG.init.call((0, _assertThisInitialized2.default)(_this), props2);
          }
          _this.state = {
            beforeElementSize: {
              height: 0
            },
            afterElementSize: {
              height: 0
            }
          };
          return _this;
        }
        (0, _createClass2.default)(VirtualScrollContainer2, [{
          key: "ensureNonStaticStyle",
          value: function ensureNonStaticStyle(style, domNode) {
            if (!this.props.forceNonStaticPosition) {
              return style;
            }
            style = style || {};
            var _style = style, position = _style.position;
            var nonStatic = position === "relative" || position === "absolute";
            if (nonStatic) {
              return style;
            }
            if (domNode) {
              position = globalObject.getComputedStyle(domNode).position;
              nonStatic = position === "relative" || position === "absolute";
              if (!nonStatic) {
                return Object.assign({}, style, {
                  position: "relative"
                });
              }
            }
            return Object.assign({}, style, {
              position: "relative"
            });
          }
        }, {
          key: "componentDidMount",
          value: function componentDidMount() {
            if (this.props.showWarnings) {
              if (!this.props.scrollSize) {
                if (!this.notifierMounted) {
                  console.warn("The component inside the ".concat(displayName, " has not rendered its children. Please either render its children, or specify a 'scrollSize' prop to determine the size of the scrolling content."));
                }
              }
              if (!this.props.forceNonStaticPosition && getComputedStyle(this.domNode).position === "static") {
                console.warn("".concat(displayName, ' has position: "static". It should have a non-static position!'));
              }
            }
            var contentNode = this.childNode.current ? this.childNode.current.firstChild : null;
            if (contentNode) {
              contentNode.style.willChange = "transform";
            }
            if (this.props.rtl && !this.scrollLeft) {
              this.updateScrollStyle();
            }
            this.sync();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var prevScrollSize = prevProps.scrollSize;
            var scrollSize = this.props.scrollSize;
            if (prevScrollSize && !scrollSize) {
              this.sync();
            } else if (prevScrollSize && scrollSize) {
              if (prevScrollSize.width !== scrollSize.width || prevScrollSize.height !== scrollSize.height) {
                this.sync();
              }
            }
          }
        }, {
          key: "clientSize",
          get: function get() {
            return CONFIG.getClientSize.call(this);
          }
        }, {
          key: "scrollTopMax",
          get: function get() {
            return CONFIG.getScrollTopMax.call(this);
          }
        }, {
          key: "scrollLeftMax",
          get: function get() {
            return CONFIG.getScrollLeftMax.call(this);
          }
        }, {
          key: "scrollTop",
          get: function get() {
            return this.scroller.scrollTop;
          },
          set: function set(value) {
            this.scroller.scrollTop = value;
          }
        }, {
          key: "scrollLeft",
          get: function get() {
            return this.scroller.scrollLeft;
          },
          set: function set(value) {
            this.scroller.scrollLeft = value;
          }
        }, {
          key: "render",
          value: function render() {
            var props2 = this.props;
            var style = props2.style, className = props2.className;
            var rtl = props2.rtl, inertialScroll = props2.inertialScroll, useWheelCapture = props2.useWheelCapture, contain = props2.contain, renderView = props2.renderView;
            style = Object.assign({}, this.ensureNonStaticStyle(style, this.domNode), {
              overflow: "hidden",
              display: "flex",
              alignItems: "stretch",
              alignContent: "stretch",
              flexFlow: "column",
              flexWrap: "nowrap",
              transform: "translate3d(0px, 0px, 0px)"
            });
            if (contain) {
              if (contain === true) {
                style.contain = "style layout paint";
              } else {
                style.contain = contain;
              }
            }
            className = (0, _join.default)(className, "inovua-react-virtual-scroll-container", rtl && "inovua-react-virtual-scroll-container--rtl");
            if (CONFIG.prepareClassName) {
              className = CONFIG.prepareClassName.call(this, className);
            }
            var content = _react.default.Children.only(props2.children);
            var newContentProps = {};
            if (!this.props.scrollSize) {
              newContentProps.children = [_react.default.createElement(_src.default, {
                key: "notify-resize",
                onResize: this.onChildResize,
                notifyOnMount: true,
                ResizeObserver: this.props.ResizeObserver,
                useRaf: this.props.rafOnResize,
                checkResizeDelay: this.props.checkResizeDelay,
                onMount: this.onNotifyResizeMount
              }), content.props.children];
            }
            newContentProps.style = Object.assign({}, content.props.style, (0, _defineProperty2.default)({
              position: "absolute",
              top: 0
            }, rtl ? "right" : "left", 0));
            var beforeHeight = this.getBeforeHeight();
            var useAbsolutePosition = IS_IE || IS_FF;
            var childStyle = {
              overflow: "hidden",
              position: useAbsolutePosition ? "absolute" : "fixed",
              top: beforeHeight,
              left: 0,
              right: 0,
              bottom: 0
            };
            if (!useAbsolutePosition) {
              childStyle.backfaceVisibility = "hidden";
              if ((0, _isSafari.default)()) {
                childStyle.WebkitBackfaceVisibility = "hidden";
              }
            }
            if (!IS_EDGE) {
              childStyle.zIndex = 2 * SCROLLER_Z_INDEX;
            }
            var domProps = (0, _defineProperty2.default)({
              ref: this.childNode,
              style: childStyle,
              onScroll: this.scrollIntoView
            }, useWheelCapture ? "onWheelCapture" : "onWheel", IS_EDGE ? null : this.onWheelEvent);
            content = _react.default.createElement(_react.default.Fragment, null, this.getBefore(), _react.default.createElement("div", _objectSpread({
              key: "content"
            }, domProps), (0, _react.cloneElement)(content, newContentProps)), this.getAfter());
            var scrollSize = this.props.scrollSize || this.state.scrollSize;
            var afterHeight = this.getAfterHeight();
            var extraHeight = beforeHeight + afterHeight;
            if (extraHeight && scrollSize) {
              scrollSize = Object.assign({}, scrollSize, {
                height: scrollSize.height + extraHeight
              });
            }
            var spacer = _react.default.createElement("div", {
              "data-name": "spacer",
              key: "spacer",
              style: Object.assign({
                pointerEvents: "none"
              }, scrollSize)
            });
            if (this.props.renderSpacer) {
              spacer = this.props.renderSpacer(spacer, {
                scrollSize
              });
            }
            var scrollerStyle = inertialScroll ? Object.assign({}, SCROLLER_STYLE, {
              WebkitOverflowScrolling: "touch"
            }) : SCROLLER_STYLE;
            return _react.default.createElement("div", _objectSpread(_objectSpread({
              tabIndex: -1
            }, (0, _reactCleanProps.default)(this.props, this.constructor.propTypes)), {}, {
              onFocus: this.onFocus,
              style,
              className,
              ref: this.refThis
            }), _react.default.createElement(_src.default, {
              onResize: this.onResize,
              notifyOnMount: true,
              ResizeObserver: this.props.ResizeObserver,
              useRaf: this.props.rafOnResize,
              checkResizeDelay: this.props.checkResizeDelay,
              measureSize: this.props.measureSize
            }), CONFIG.renderScroller.call(this, {
              props: props2,
              content,
              spacer,
              scrollerStyle,
              renderView
            }));
          }
        }]);
        return VirtualScrollContainer2;
      }(_react.default.Component);
      VirtualScrollContainer.propTypes = {
        applyScrollStyle: _propTypes.default.func,
        avoidRepaintOnScroll: _propTypes.default.bool,
        forceNonStaticPosition: _propTypes.default.bool,
        hideNativeScrollbarIfPossible: _propTypes.default.bool,
        inertialScroll: _propTypes.default.bool,
        measureSize: _propTypes.default.func,
        onResize: _propTypes.default.func,
        contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
        onScrollbarsChange: _propTypes.default.func,
        pointerEventsRestoreDelay: _propTypes.default.number,
        checkResizeDelay: _propTypes.default.number,
        rafOnResize: _propTypes.default.bool,
        rtl: _propTypes.default.bool,
        scrollSize: _propTypes.default.shape({
          height: _propTypes.default.number,
          width: _propTypes.default.number
        }),
        scrollerStyle: _propTypes.default.shape({}),
        viewStyle: _propTypes.default.shape({}),
        showWarnings: _propTypes.default.bool,
        useWheelCapture: _propTypes.default.bool
      };
      VirtualScrollContainer.defaultProps = {
        avoidRepaintOnScroll: true,
        inertialScroll: true,
        rtl: false,
        rafOnResize: true,
        useWheelCapture: true,
        forceNonStaticPosition: false,
        pointerEventsRestoreDelay: 250,
        showWarnings: !_uglified.default
      };
      return VirtualScrollContainer;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/old/index.js
var require_old = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/old/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _src = _interopRequireWildcard(require_src8());
    var _ScrollerFactory = _interopRequireDefault(require_ScrollerFactory());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var raf = globalObject.requestAnimationFrame;
    var caf = globalObject.cancelAnimationFrame;
    var VIEW_STYLE = {
      position: "static"
    };
    var FLEX_1_STYLE = {
      flex: 1
    };
    var filterScrollerProps = function filterScrollerProps2(props2) {
      return Object.keys(props2).reduce(function(acc, propName) {
        if (_src.propTypes[propName] !== void 0) {
          acc[propName] = props2[propName];
        }
        return acc;
      }, {});
    };
    var InovuaVirtualScrollContainer = (0, _ScrollerFactory.default)("InovuaVirtualScrollContainer", {
      init: function init() {
        var _this = this;
        this.childScrollLeft = 0;
        this.childScrollTop = 0;
        this.refScroller = function(s) {
          _this.scroller = s;
          _this.scrollerNode = s ? s.getScrollerNode() : null;
        };
        this.onContainerScroll = function(scrollPos) {
          var scrollLeft = scrollPos.scrollLeft, scrollTop = scrollPos.scrollTop;
          _this.childScrollLeft = scrollLeft;
          _this.childScrollTop = scrollTop;
          if (_this.containerScrollRafId) {
            caf(_this.containerScrollRafId);
          }
          _this.containerScrollRafId = raf(function() {
            delete _this.containerScrollRafId;
            _this.updateScrollStyle(scrollPos);
          });
          if (_this.props.onContainerScroll) {
            var _this$props;
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            (_this$props = _this.props).onContainerScroll.apply(_this$props, [scrollPos].concat(args));
          }
          if (_this.onScrollIntent) {
            _this.onScrollIntent();
          }
        };
      },
      sync: function sync() {
        if (!this.scroller) {
          return;
        }
        if (this.scroller.rafSync) {
          this.scroller.rafSync();
        } else if (this.scroller.sync) {
          this.scroller.sync();
        }
      },
      getClientSize: function getClientSize() {
        var scroller = this.scroller;
        return scroller.getClientSize();
      },
      hasScrollbar: function hasScrollbar(orientation) {
        return this.scroller.hasScrollbar(orientation);
      },
      getScrollLeftMax: function getScrollLeftMax() {
        var scroller = this.scroller;
        return scroller.scrollLeftMax;
      },
      getScrollTopMax: function getScrollTopMax() {
        var scroller = this.scroller;
        return scroller.scrollTopMax;
      },
      getScrollPosition: function getScrollPosition() {
        return {
          scrollTop: this.childScrollTop,
          scrollLeft: this.childScrollLeft
        };
      },
      renderScroller: function renderScroller(_ref) {
        var props2 = _ref.props, content = _ref.content, spacer = _ref.spacer, scrollerStyle = _ref.scrollerStyle, renderView = _ref.renderView, viewStyle = _ref.viewStyle;
        var className = "inovua-react-virtual-scroll-container__scroll-container";
        if (props2.avoidRepaintOnScroll) {
          className += " ".concat(className, "--avoid-repaint");
        }
        return _react.default.createElement(_src.default, _objectSpread(_objectSpread({}, filterScrollerProps(props2)), {}, {
          onContainerScroll: this.onContainerScroll,
          ref: this.refScroller,
          style: FLEX_1_STYLE,
          className,
          scrollerStyle,
          renderView,
          viewStyle: viewStyle ? Object.assign({}, VIEW_STYLE, viewStyle) : VIEW_STYLE,
          resizer: false
        }), content, spacer);
      }
    });
    InovuaVirtualScrollContainer.propTypes = Object.assign({
      renderSpacer: _propTypes.default.func,
      renderScrollerSpacer: _propTypes.default.func
    }, _src.propTypes, InovuaVirtualScrollContainer.propTypes);
    var _default = InovuaVirtualScrollContainer;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/old/NativeScrollContainer.js
var require_NativeScrollContainer = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/old/NativeScrollContainer.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _src = require_src8();
    var _debounce = _interopRequireDefault(require_debounce());
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _isSafari = _interopRequireDefault(require_isSafari());
    var _ScrollerFactory = _interopRequireDefault(require_ScrollerFactory());
    var _getGlobal = require_getGlobal();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var raf = globalObject.requestAnimationFrame;
    var emptyObject = {};
    var SCROLLBAR_WIDTH = (0, _getScrollbarWidth.default)();
    var onScrollbarsChange = function onScrollbarsChange2(scrollbars) {
      if (SCROLLBAR_WIDTH) {
        var style = this.childNode.style;
        var rtl = this.props.rtl;
        var right = scrollbars.vertical ? SCROLLBAR_WIDTH : 0;
        var bottom = scrollbars.horizontal ? SCROLLBAR_WIDTH : 0;
        style ? style[rtl && !(0, _isSafari.default)() ? "left" : "right"] = "".concat(right, "px") : null;
        style ? style.bottom = "".concat(bottom, "px") : null;
      }
      if (this.props.onScrollbarsChange) {
        this.props.onScrollbarsChange(scrollbars);
      }
    };
    var onStop = function onStop2(scrollPos, prevScrollPos) {
      this.scrollStarted = false;
      if (this.props.onScrollStop) {
        this.props.onScrollStop(scrollPos, prevScrollPos);
      }
    };
    var onScroll = function onScroll2(_ref) {
      var target = _ref.target;
      var _this$props = this.props, onScrollStart = _this$props.onScrollStart, onScrollStop = _this$props.onScrollStop;
      var startStop = !!(onScrollStart || onScrollStop);
      var scrollTop = target.scrollTop, scrollLeft = target.scrollLeft;
      var scrollPos = {
        scrollTop,
        scrollLeft
      };
      var prevScrollPos = this.currentScrollPosition || emptyObject;
      var prevScrollTop = prevScrollPos.scrollTop, prevScrollLeft = prevScrollPos.scrollLeft;
      if (startStop) {
        if (!this.scrollStarted) {
          if (onScrollStart) {
            onScrollStart(scrollPos, prevScrollPos);
          }
        }
      }
      var scrollVertical = false;
      var scrollHorizontal = false;
      if (this.props.onContainerScroll) {
        this.props.onContainerScroll(scrollPos, prevScrollPos);
      }
      var scrollTopChange = scrollTop !== prevScrollTop;
      if (scrollTopChange) {
        scrollVertical = true;
        if (this.props.onContainerScrollVertical) {
          this.props.onContainerScrollVertical(scrollTop, prevScrollTop);
        }
        if (this.props.onContainerScrollVerticalMin && scrollTop === 0) {
          this.props.onContainerScrollVerticalMin(0);
        }
        if (this.props.onContainerScrollVerticalMax && scrollTop === this.scrollTopMax) {
          this.props.onContainerScrollVerticalMax(scrollTop);
        }
      }
      var scrollLeftChange = scrollLeft !== prevScrollLeft;
      if (scrollLeftChange) {
        scrollHorizontal = true;
        if (this.props.onContainerScrollHorizontal) {
          this.props.onContainerScrollHorizontal(scrollLeft, prevScrollLeft);
        }
        if (this.props.onContainerScrollHorizontalMin && scrollLeft === 0) {
          this.props.onContainerScrollHorizontalMin(0);
        }
        if (this.props.onContainerScrollHorizontalMax && scrollLeft === this.scrollLeftMax) {
          this.props.onContainerScrollHorizontalMax(scrollLeft);
        }
      }
      if (startStop && (scrollTopChange || scrollLeftChange)) {
        if (!this.scrollStarted || this.scrollStarted.vertical !== scrollVertical || this.scrollStarted.horizontal !== scrollHorizontal) {
          this.scrollStarted = {
            horizontal: scrollHorizontal,
            vertical: scrollVertical
          };
        }
        this.onStop(scrollPos, prevScrollPos);
      }
      this.currentScrollPosition = scrollPos;
    };
    var InovuaNativeScrollContainer = (0, _ScrollerFactory.default)("InovuaNativeScrollContainer", {
      init: function init(props2) {
        var _this = this;
        this.refScroller = function(s) {
          _this.scroller = s;
        };
        this.onStop = (0, _debounce.default)(onStop.bind(this), props2.scrollStopDelay, {
          leading: false
        });
        this.onScrollerScroll = function(event2) {
          if (event2.target === _this.scroller) {
            raf(function() {
              _this.updateScrollStyle();
            });
            onScroll.call(_this, event2);
            _this.onScrollIntent();
          }
          if (_this.props.onScroll) {
            _this.props.onScroll(event2);
          }
        };
      },
      prepareClassName: function prepareClassName(className) {
        return "".concat(className, " inovua-react-virtual-scroll-container--native");
      },
      sync: function sync() {
        if (!this.oldScrollbars) {
          this.oldScrollbars = this.getScrollbars();
          return;
        }
        var scrollbars = this.getScrollbars();
        if (scrollbars.vertical !== this.oldScrollbars.vertical || scrollbars.horizontal !== this.oldScrollbars.horizontal) {
          onScrollbarsChange.call(this, scrollbars);
        }
        this.oldScrollbars = scrollbars;
      },
      getClientSize: function getClientSize() {
        var scroller = this.scroller;
        return {
          height: scroller.clientHeight,
          width: scroller.clientWidth
        };
      },
      hasScrollbar: function hasScrollbar(orientation) {
        var scroller = this.scroller;
        return orientation === "horizontal" ? scroller.scrollWidth > scroller.clientWidth : scroller.scrollHeight > scroller.clientHeight;
      },
      getScrollLeftMax: function getScrollLeftMax() {
        var scroller = this.scroller;
        return scroller.scrollWidth - scroller.clientWidth;
      },
      getScrollTopMax: function getScrollTopMax() {
        var scroller = this.scroller;
        return scroller.scrollHeight - scroller.clientHeight;
      },
      getScrollPosition: function getScrollPosition() {
        return {
          scrollTop: this.scrollTop,
          scrollLeft: this.scrollLeft
        };
      },
      renderScroller: function renderScroller(_ref2) {
        var content = _ref2.content, spacer = _ref2.spacer, scrollerStyle = _ref2.scrollerStyle, props2 = _ref2.props;
        var renderScroller2 = props2.renderScroller;
        var className = "inovua-react-virtual-scroll-container__scroll-container";
        if (props2.avoidRepaintOnScroll) {
          className += " ".concat(className, "--avoid-repaint");
        }
        var domProps = {
          key: "scroller",
          tabIndex: -1,
          onScroll: this.onScrollerScroll,
          ref: this.refScroller,
          style: scrollerStyle,
          className,
          children: [content, spacer]
        };
        var result = typeof renderScroller2 === "function" ? renderScroller2(domProps) : _react.default.createElement("div", _objectSpread({}, domProps));
        return result;
      }
    });
    InovuaNativeScrollContainer.propTypes = _objectSpread(_objectSpread({
      renderScrollerSpacer: _propTypes.default.func
    }, _src.propTypes), InovuaNativeScrollContainer.propTypes);
    InovuaNativeScrollContainer.defaultProps.scrollStopDelay = 150;
    var _default = InovuaNativeScrollContainer;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/index.js
var require_src19 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-scroll-container-pro/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.NativeScrollContainer = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get() {
        return _getScrollbarWidth.default;
      }
    });
    Object.defineProperty(exports, "hasSticky", {
      enumerable: true,
      get: function get() {
        return _hasSticky.default;
      }
    });
    Object.defineProperty(exports, "isMobile", {
      enumerable: true,
      get: function get() {
        return _StickyScroller.isMobile;
      }
    });
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _hasSticky = _interopRequireDefault(require_hasSticky());
    var _StickyScroller = _interopRequireWildcard(require_StickyScroller());
    var _old = _interopRequireDefault(require_old());
    var _NativeScrollContainer = _interopRequireDefault(require_NativeScrollContainer());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = (0, _hasSticky.default)() ? _StickyScroller.default : _old.default;
    exports.default = _default;
    var NativeScrollContainer = (0, _hasSticky.default)() ? _StickyScroller.default : _NativeScrollContainer.default;
    exports.NativeScrollContainer = NativeScrollContainer;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/binary-search/index.js
var require_binary_search = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/binary-search/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(haystack, needle, comparator, low, high) {
      var mid, cmp;
      if (low === void 0) low = 0;
      else {
        low = low | 0;
        if (low < 0 || low >= haystack.length) throw new RangeError("invalid lower bound");
      }
      if (high === void 0) high = haystack.length - 1;
      else {
        high = high | 0;
        if (high < low || high >= haystack.length) throw new RangeError("invalid upper bound");
      }
      while (low <= high) {
        mid = low + (high - low >> 1);
        cmp = +comparator(haystack[mid], needle, mid, haystack);
        if (cmp < 0) low = mid + 1;
        else if (cmp > 0) high = mid - 1;
        else return mid;
      }
      return ~low;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/RowHeightManager.js
var require_RowHeightManager = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/RowHeightManager.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _binarySearch = _interopRequireDefault(require_binary_search());
    var _eventemitter = _interopRequireDefault(require_eventemitter3());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var sortAsc = function sortAsc2(a, b) {
      return a - b;
    };
    var RowHeightManager = function(_EventEmitter) {
      (0, _inherits2.default)(RowHeightManager2, _EventEmitter);
      var _super = _createSuper(RowHeightManager2);
      function RowHeightManager2(rowHeight) {
        var _this;
        var rowHeightsMap = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var config = arguments.length > 2 ? arguments[2] : void 0;
        (0, _classCallCheck2.default)(this, RowHeightManager2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowHeight", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowHeightFn", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "map", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "heights", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "indexes", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offsets", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "minHeight", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "maxHeight", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "indexesToOffsets", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offsetsToIndexes", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lazyRowHeightRafId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowToOffsetCache", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cache", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "__id", "");
        _this.rowHeight = (0, _typeof2.default)(rowHeight) === "object" ? typeof rowHeight.rowHeight === "number" ? rowHeight.rowHeight : rowHeight.minRowHeight || 40 : 40;
        _this.map = rowHeightsMap;
        if ((0, _typeof2.default)(rowHeight) === "object" && typeof rowHeight.rowHeight === "function") {
          _this.rowHeightFn = rowHeight.rowHeight;
        }
        if (!config || config.cache !== false) {
          _this.setCache({});
        }
        _this.index(_this.rowHeight, rowHeightsMap);
        return _this;
      }
      (0, _createClass2.default)(RowHeightManager2, [{
        key: "setRowHeight",
        value: function setRowHeight(_ref) {
          var index2 = _ref.index, height = _ref.height, defaultRowHeight = _ref.defaultRowHeight, skipIndex = _ref.skipIndex;
          if (this.map[index2] === height && !defaultRowHeight) {
            console.warn("NOOP");
            return;
          }
          this.map[index2] = height;
          if (defaultRowHeight) {
            this.rowHeight = defaultRowHeight;
          }
          if (this.cache) {
            this.setCache({});
          }
          if (!skipIndex) {
            this.index();
          }
        }
      }, {
        key: "indexRaf",
        value: function indexRaf() {
          var _this2 = this;
          if (this.lazyRowHeightRafId) {
            cancelAnimationFrame(this.lazyRowHeightRafId);
            this.lazyRowHeightRafId = 0;
          }
          this.lazyRowHeightRafId = requestAnimationFrame(function() {
            _this2.lazyRowHeightRafId = 0;
            _this2.index();
          });
        }
      }, {
        key: "setRowHeightLazy",
        value: function setRowHeightLazy(_ref2) {
          var index2 = _ref2.index, height = _ref2.height, defaultRowHeight = _ref2.defaultRowHeight;
          this.setRowHeight({
            index: index2,
            height,
            defaultRowHeight: defaultRowHeight || this.rowHeight,
            skipIndex: true
          });
          this.indexRaf();
        }
      }, {
        key: "setHeights",
        value: function setHeights(map) {
          this.map = map;
          if (this.cache) {
            this.setCache({});
          }
          this.index(this.rowHeight, this.map);
        }
      }, {
        key: "setValues",
        value: function setValues(_ref3) {
          var defaultRowHeight = _ref3.defaultRowHeight, map = _ref3.map;
          if (defaultRowHeight) {
            this.rowHeight = defaultRowHeight;
          }
          if (this.map) {
            this.map = map;
          }
          if (this.cache) {
            this.setCache({});
          }
          this.index(this.rowHeight, this.map);
        }
      }, {
        key: "setDefaultRowHeight",
        value: function setDefaultRowHeight(defaultRowHeight) {
          this.rowHeight = defaultRowHeight;
          if (this.cache) {
            this.setCache({});
          }
          this.index(this.rowHeight, this.map);
        }
      }, {
        key: "index",
        value: function index2() {
          var _this3 = this;
          var defaultRowHeight = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.rowHeight;
          var map = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.map;
          this.rowToOffsetCache = {};
          var indexes = map ? Object.keys(map).map(function(x) {
            return +x;
          }).sort(sortAsc) : [];
          this.minHeight = defaultRowHeight;
          this.maxHeight = defaultRowHeight;
          this.__id = JSON.stringify(this.heights);
          this.heights = indexes.map(function(index3) {
            var height = map[index3];
            if (height > _this3.maxHeight) {
              _this3.maxHeight = height;
            }
            if (height < _this3.minHeight) {
              _this3.minHeight = height;
            }
            return [index3, height];
          });
          var prev = 0;
          this.indexes = indexes;
          this.offsets = indexes.map(function(index3, i) {
            var prevIndex = i === 0 ? -1 : indexes[i - 1];
            var prevIndexRowHeight = map[prevIndex] || 0;
            return prev = prev + (index3 - (prevIndex + 1)) * defaultRowHeight + prevIndexRowHeight;
          });
          this.offsetsToIndexes = {};
          this.indexesToOffsets = this.offsets.reduce(function(acc, offset, i) {
            var index3 = indexes[i];
            acc[index3] = offset;
            _this3.offsetsToIndexes[offset] = index3;
            return acc;
          }, {});
          var __id = JSON.stringify(this.heights);
          if (__id === this.__id) {
            return;
          }
          this.afterIndex();
        }
      }, {
        key: "afterIndex",
        value: function afterIndex() {
          this.emit("index");
        }
      }, {
        key: "setCache",
        value: function setCache(cache) {
          this.cache = cache;
        }
      }, {
        key: "getTotalSize",
        value: function getTotalSize(count) {
          if (count == null) {
            throw new Error("Specify a count when calling getTotalSize!");
          }
          if (count <= 0 || isNaN(count)) {
            return 0;
          }
          var sum = 0;
          for (var i = 0; i < count; i++) {
            var value = this.map[i];
            sum += value === void 0 ? this.rowHeight : value;
          }
          return sum;
        }
      }, {
        key: "getDefaultRowHeight",
        value: function getDefaultRowHeight() {
          return this.rowHeight;
        }
      }, {
        key: "getMinHeight",
        value: function getMinHeight() {
          return this.minHeight || this.rowHeight;
        }
      }, {
        key: "getMaxHeight",
        value: function getMaxHeight() {
          return this.maxHeight || this.rowHeight;
        }
      }, {
        key: "getRowOffset",
        value: function getRowOffset(index2) {
          var offset = this.indexesToOffsets[index2];
          if (offset !== void 0) {
            return offset;
          }
          offset = this.rowToOffsetCache[index2];
          if (offset !== void 0) {
            return offset;
          }
          var insertPos = ~(0, _binarySearch.default)(this.indexes, index2, sortAsc);
          var closestIndex = this.indexes[insertPos - 1];
          if (insertPos === 0) {
            offset = index2 * this.rowHeight;
          } else {
            var closestOffset = this.indexesToOffsets[closestIndex];
            offset = closestOffset + this.map[closestIndex] + (index2 - closestIndex - 1) * this.rowHeight;
          }
          this.rowToOffsetCache[index2] = offset;
          return offset;
        }
      }, {
        key: "getRowHeight",
        value: function getRowHeight(index2, fn) {
          var value = this.map[index2];
          if (value !== void 0) {
            return value;
          }
          if (fn) {
            return fn();
          }
          return this.rowHeight;
        }
      }, {
        key: "getRowAt",
        value: function getRowAt(offset) {
          if (offset < 0) {
            return 0;
          }
          var roundedOffset = Math.floor(offset / this.rowHeight) * this.rowHeight;
          var result = this.cache ? this.cache[roundedOffset] : void 0;
          if (result !== void 0) {
            return result;
          }
          if (!this.map) {
            result = roundedOffset / this.rowHeight;
            if (this.cache) {
              this.cache[roundedOffset] = result;
            }
            return result;
          }
          var index2 = (0, _binarySearch.default)(this.offsets, offset, sortAsc);
          if (index2 < 0) {
            var insertPos = ~index2;
            var beforeKnownIndex = this.indexes[insertPos - 1];
            if (beforeKnownIndex !== void 0) {
              var beforeKnownOffset = this.indexesToOffsets[beforeKnownIndex];
              var nextOffset = beforeKnownOffset + this.map[beforeKnownIndex];
              if (offset < nextOffset) {
                result = beforeKnownIndex;
              } else {
                result = beforeKnownIndex + Math.floor((offset - nextOffset) / this.rowHeight) + 1;
              }
            } else {
              result = Math.floor(offset / this.rowHeight);
            }
          } else {
            result = this.indexes[index2];
          }
          if (this.cache) {
            this.cache[roundedOffset] = result;
          }
          return result;
        }
      }]);
      return RowHeightManager2;
    }(_eventemitter.default);
    var _default = RowHeightManager;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/sealedObjectFactory.js
var require_sealedObjectFactory2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/sealedObjectFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DEFAULTS = {};
    var _default = function _default2() {
      var shape = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULTS;
      var sealed = Object.seal ? Object.seal(shape) : {};
      return sealed;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/Row.js
var require_Row = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/Row.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.propTypes = exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate());
    var _sealedObjectFactory = _interopRequireDefault(require_sealedObjectFactory2());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var sharedRowProps = (0, _sealedObjectFactory.default)({
      index: null,
      count: null,
      rowHeight: null,
      renderIndex: null,
      empty: null,
      sticky: null,
      rowSpan: null
    });
    var STR_HIDDEN = "hidden";
    var STR_ABSOLUTE = "absolute";
    var STR_ZERO_PX = "0px";
    var STR_VISIBLE = "visible";
    var raf = globalObject.requestAnimationFrame;
    var caf = globalObject.cancelAnimationFrame;
    var InovuaVirtualListRow = function(_React$Component) {
      (0, _inherits2.default)(InovuaVirtualListRow2, _React$Component);
      var _super = _createSuper(InovuaVirtualListRow2);
      function InovuaVirtualListRow2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaVirtualListRow2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mounted", true);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_appliedIndex", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refetchNode", true);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visible", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "index", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offset", 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowSpan", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "oldRowSpan", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "ref", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "row", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "node", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "prepareSetIndex", function() {
          var rowHeightManager = _this.props.rowHeightManager;
          if (rowHeightManager != null) {
            var index2 = _this.getIndex();
            delete _this.index;
            _this.setIndex(index2, void 0, false);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowSpan", function() {
          return _this.rowSpan;
        });
        _this.ref = function(r) {
          _this.row = r;
        };
        _this.mounted = true;
        return _this;
      }
      (0, _createClass2.default)(InovuaVirtualListRow2, [{
        key: "getInstance",
        value: function getInstance() {
          return this.row;
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          if (!nextProps.pure) {
            return true;
          }
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
          if (this.props.onMount) {
            this.props.onMount(this);
          }
          var naturalRowHeight = this.props.naturalRowHeight;
          this.fetchNode();
          if (naturalRowHeight && this.node) {
            this.node.style.visibility = STR_HIDDEN;
            return;
          }
          this.updateRowHeight();
          this.updateRowSpan();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.mounted = false;
          if (this.props.onUnmount) {
            this.props.onUnmount(this);
          }
          this.node = null;
          this.info = null;
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this.refetchNode) {
            this.fetchNode();
            this.refetchNode = false;
          }
          this.updateRowSpan();
        }
      }, {
        key: "updateRowSpan",
        value: function updateRowSpan() {
          if (this.rowSpan !== this.oldRowSpan) {
            this.props.notifyRowSpan(this.getIndex(), this.rowSpan);
            var node = this.getDOMNode();
            node.style.zIndex = this.rowSpan > 1 ? 1 : null;
          }
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          if (this.node) {
            return this.node;
          }
          if (!this.row) {
            return null;
          }
          this.node = this.row.domRef ? this.row.domRef.current : this.row;
          return this.node;
        }
      }, {
        key: "fetchNode",
        value: function fetchNode() {
          var node = this.getDOMNode();
          if (!this.props.virtualized) {
            this.prepareSetIndex();
            return;
          }
          if (node && !this.isVisible()) {
            node.style.visibility = STR_HIDDEN;
          }
          var contain = this.props.contain;
          if (node) {
            node.style.position = STR_ABSOLUTE;
            node.style.top = STR_ZERO_PX;
            if (contain) {
              if (contain === true) {
                node.style.contain = "style layout paint";
              } else {
                node.style.contain = contain;
              }
            }
            this.prepareSetIndex();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, renderRow = _this$props.renderRow, count = _this$props.count, renderIndex = _this$props.index, showEmptyRows = _this$props.showEmptyRows, onKeyDown = _this$props.onKeyDown, onFocus = _this$props.onFocus, rowHeightManager = _this$props.rowHeightManager, sticky = _this$props.sticky, contain = _this$props.contain, virtualized = _this$props.virtualized, useTransformPosition = _this$props.useTransformPosition;
          var index2 = this.getIndex();
          sharedRowProps.empty = false;
          if (index2 >= count) {
            if (!showEmptyRows) {
              this.renderResult = false;
              return null;
            }
            sharedRowProps.empty = true;
          }
          var rowHeight = rowHeightManager ? rowHeightManager.getRowHeight(index2) : this.props.rowHeight;
          sharedRowProps.rowHeight = rowHeight;
          sharedRowProps.count = count;
          sharedRowProps.index = index2;
          sharedRowProps.renderIndex = renderIndex;
          sharedRowProps.rowSpan = 1;
          sharedRowProps.sticky = sticky;
          var row = renderRow(sharedRowProps);
          this.oldRowSpan = this.rowSpan || 1;
          this.rowSpan = sharedRowProps.rowSpan;
          if (this.renderResult === false && row) {
            this.refetchNode = true;
          }
          this.renderResult = !!row;
          if (!row) {
            return null;
          }
          var extraStyle = null;
          if (virtualized) {
            extraStyle = {
              top: 0,
              position: STR_ABSOLUTE,
              backfaceVisibility: STR_HIDDEN,
              visibility: this.isVisible() ? STR_VISIBLE : STR_HIDDEN
            };
            extraStyle[useTransformPosition ? "transform" : "top"] = useTransformPosition ? "translate3d(0px, ".concat(this.offset, "px, 0px)") : this.offset;
            if (contain) {
              if (contain === true) {
                extraStyle.contain = "style layout paint";
              } else {
                extraStyle.contain = contain;
              }
            }
            if (row.props && row.props.style) {
              extraStyle = _objectSpread(_objectSpread({}, row.props.style), extraStyle);
            }
          }
          return (0, _react.cloneElement)(row, {
            key: this.props.index,
            ref: this.ref,
            onFocus: onFocus ? onFocus.bind(null, index2) : null,
            onKeyDown: onKeyDown ? onKeyDown.bind(null, index2) : null,
            style: extraStyle
          });
        }
      }, {
        key: "updateRowHeight",
        value: function updateRowHeight(config) {
          var _this2 = this;
          var _this$props2 = this.props, naturalRowHeight = _this$props2.naturalRowHeight, rowHeightManager = _this$props2.rowHeightManager;
          if (naturalRowHeight) {
            var index2 = this.index;
            var getDOMHeight = function getDOMHeight2() {
              var _this2$node;
              return ((_this2$node = _this2.node) === null || _this2$node === void 0 ? void 0 : _this2$node.scrollHeight) || 0;
            };
            var rowHeight = rowHeightManager.getRowHeight(index2);
            var offsetHeight = getDOMHeight();
            var height = offsetHeight;
            if (rowHeight != offsetHeight) {
              var info = {
                index: index2,
                height
              };
              if (!offsetHeight) {
                return;
              }
              var useRaf = config && config.useRaf !== void 0 ? !!config.useRaf : true;
              if (useRaf) {
                rowHeightManager.setRowHeightLazy(info);
              } else {
                rowHeightManager.setRowHeight(info);
              }
            }
          }
        }
      }, {
        key: "update",
        value: function update(callback) {
          var _this3 = this;
          if (this.mounted === false) {
            return;
          }
          if (this.props.rowHeightManager != null) {
            this.forceUpdate(function() {
              _this3.updateRowHeight();
              if (typeof callback === "function") {
                callback();
              }
            });
            return;
          }
          this.forceUpdate(function() {
            if (typeof callback == "function") {
              callback(_this3.getInfo(true));
            }
          });
        }
      }, {
        key: "setVisible",
        value: function setVisible(value, callback) {
          if (this.mounted === false) {
            return;
          }
          this.visible = value;
          if (this.node) {
            this.node.style.visibility = value ? STR_VISIBLE : STR_HIDDEN;
          }
          if (typeof callback == "function") {
            callback(this.getInfo());
          }
        }
      }, {
        key: "setRowOffset",
        value: function setRowOffset() {
          var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.index;
          var _this$props3 = this.props, rowHeightManager = _this$props3.rowHeightManager, useTransformPosition = _this$props3.useTransformPosition;
          if (!this.node) {
            return;
          }
          if (rowHeightManager) {
            var rowOffset = rowHeightManager.getRowOffset(index2);
            this.offset = rowOffset;
            if (useTransformPosition) {
              this.node.style.transform = "translate3d(0px, ".concat(rowOffset, "px, 0px)");
            } else {
              this.node.style.top = "".concat(rowOffset, "px");
            }
          }
        }
      }, {
        key: "setIndex",
        value: function setIndex(index2, callback) {
          var useRaf = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          var force = arguments.length > 3 ? arguments[3] : void 0;
          if (this.mounted === false) {
            return;
          }
          if (this.index === index2 && this.isVisible() && !force) {
            if (callback) {
              callback();
            }
            return;
          }
          this.index = index2;
          this._appliedIndex = void 0;
          this.doSetIndex(index2, callback, useRaf);
        }
      }, {
        key: "doSetIndex",
        value: function doSetIndex(index2, callback, useRaf) {
          var _this4 = this;
          var sameIndex = this._appliedIndex === index2;
          this._appliedIndex = index2;
          if (useRaf !== true) {
            this.setVisible(true);
            this.setRowOffset(index2);
            if (sameIndex) {
              if (callback) {
                callback();
              }
              return;
            }
            this.update(callback);
          } else {
            if (this.setIndexRafId) {
              caf(this.setIndexRafId);
            }
            this.setIndexRafId = raf(function() {
              delete _this4.setIndexRafId;
              _this4.setVisible(true);
              _this4.setRowOffset(index2);
              if (sameIndex) {
                if (callback) {
                  callback();
                }
                return;
              }
              _this4.update(callback);
            });
          }
        }
      }, {
        key: "isVisible",
        value: function isVisible() {
          return this.visible !== false;
        }
      }, {
        key: "setOffset",
        value: function setOffset(offset) {
          this.offset = offset;
          if (this.node) {
            var nodeStyle = this.node.style;
            nodeStyle.position = STR_ABSOLUTE;
            nodeStyle.top = STR_ZERO_PX;
            nodeStyle.backfaceVisibility = STR_HIDDEN;
            if (this.props.useTransformPosition) {
              nodeStyle.transform = "translate3d(0px, ".concat(offset, "px, 0px)");
            } else {
              nodeStyle.top = "".concat(offset, "px");
            }
          }
        }
      }, {
        key: "getIndex",
        value: function getIndex() {
          return this.index === void 0 ? this.props.index : this.index;
        }
      }, {
        key: "getInfo",
        value: function getInfo(updateHeight) {
          if (this.mounted === false) {
            return this.info;
          }
          if (!this.info) {
            this.info = (0, _sealedObjectFactory.default)({
              row: null,
              node: null,
              height: null,
              index: null,
              key: null,
              offset: null
            });
          }
          this.info.row = this;
          this.info.node = this.node;
          this.info.height = updateHeight || this.height === void 0 ? this.node ? this.node.offsetHeight : 0 : this.height;
          this.info.index = this.getIndex();
          this.info.key = this.props.index;
          this.info.offset = this.props.virtualized ? this.offset : this.node ? this.node.offsetTop : 0;
          return this.info;
        }
      }]);
      return InovuaVirtualListRow2;
    }(_react.default.Component);
    exports.default = InovuaVirtualListRow;
    InovuaVirtualListRow.defaultProps = {
      pure: false,
      useTransformPosition: false
    };
    var propTypes = {
      pure: _propTypes.default.bool,
      naturalRowHeight: _propTypes.default.bool,
      rowHeightManager: _propTypes.default.object,
      count: _propTypes.default.number,
      contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      index: _propTypes.default.number.isRequired,
      onRowHeightChange: _propTypes.default.func,
      renderRow: _propTypes.default.func.isRequired,
      useTransformPosition: _propTypes.default.bool,
      virtualized: _propTypes.default.bool
    };
    exports.propTypes = propTypes;
    InovuaVirtualListRow.propTypes = propTypes;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/renderRows.js
var require_renderRows = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/renderRows.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _Row = _interopRequireDefault(require_Row());
    var _default = function _default2(_ref) {
      var count = _ref.count, renderRow = _ref.renderRow, rowHeight = _ref.rowHeight, showEmptyRows = _ref.showEmptyRows, ref = _ref.ref, pure = _ref.pure, sticky = _ref.sticky, notifyRowSpan = _ref.notifyRowSpan, rowHeightManager = _ref.rowHeightManager, onRowHeightChange = _ref.onRowHeightChange, onKeyDown = _ref.onKeyDown, onFocus = _ref.onFocus, onMount = _ref.onMount, onUnmount = _ref.onUnmount, rowContain = _ref.rowContain, naturalRowHeight = _ref.naturalRowHeight, useTransformPosition = _ref.useTransformPosition, _ref$from = _ref.from, from = _ref$from === void 0 ? 0 : _ref$from, _ref$to = _ref.to, to = _ref$to === void 0 ? count : _ref$to, virtualized = _ref.virtualized;
      var rows = [];
      for (var i = from; i < to; i++) {
        rows.push(_react.default.createElement(_Row.default, {
          contain: rowContain,
          pure,
          ref,
          sticky,
          rowHeight,
          useTransformPosition,
          onRowHeightChange,
          notifyRowSpan,
          key: i,
          index: i,
          count,
          renderRow,
          rowHeightManager,
          showEmptyRows,
          onKeyDown,
          onFocus,
          onMount,
          onUnmount,
          virtualized,
          naturalRowHeight
        }));
      }
      return rows;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/getVisibleRange.js
var require_getVisibleRange = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/getVisibleRange.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(_ref) {
      var size = _ref.size, scrollTop = _ref.scrollTop, count = _ref.count, rowHeightManager = _ref.rowHeightManager, naturalRowHeight = _ref.naturalRowHeight, showEmptyRows = _ref.showEmptyRows;
      var start = rowHeightManager.getRowAt(scrollTop);
      var end = naturalRowHeight ? rowHeightManager.getRowAt(scrollTop + size.height) + 1 : start + Math.ceil(size.height / rowHeightManager.getDefaultRowHeight());
      if (!showEmptyRows) {
        end = Math.min(count - 1, end);
      }
      return {
        start,
        end
      };
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/StickyRowsContainer.js
var require_StickyRowsContainer = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/StickyRowsContainer.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.StickyRowsContainerClassName = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = _interopRequireWildcard(require_react());
    var _hasSticky = require_hasSticky();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var StickyRowsContainerClassName = "InovuaReactDataGrid__virtual-list-sticky-rows-container";
    exports.StickyRowsContainerClassName = StickyRowsContainerClassName;
    var StickyRowsContainer = function StickyRowsContainer2(props2) {
      var latestProps = (0, _react.useRef)(props2);
      var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), content = _useState2[0], setContent = _useState2[1];
      var currentHeightRef = (0, _react.useRef)(0);
      var domNodeRef = (0, _react.useRef)(null);
      var nonEmptyRowElementsRefRef = (0, _react.useRef)(null);
      var rowElementsRef = (0, _react.useRef)(null);
      var renderedRowsRef = (0, _react.useRef)([]);
      var scrollTopRef = (0, _react.useRef)(0);
      latestProps.current = props2;
      var setEnteringRow = function setEnteringRow2(_ref) {
        var scrollTop = _ref.scrollTop, enteringRow = _ref.enteringRow;
        if (enteringRow == null) {
          scrollTopRef.current = scrollTop;
          var domNode = domNodeRef.current;
          (0, _toConsumableArray2.default)(domNode.children).forEach(function(rowNode) {
            rowNode.style.transform = "translate3d(0px, 0px, 0px)";
          });
          return;
        }
        scrollTopRef.current = scrollTop;
        var rowsToTranslateIndexes = [];
        var rowsToTranslate = renderedRowsRef.current.filter(function(r, i) {
          var result = r.scale >= enteringRow.scale;
          if (result) {
            rowsToTranslateIndexes.push(i);
          }
          return result;
        });
        rowsToTranslate.forEach(function(_rowToTranslate, i) {
          var rowToTranslateIndex = rowsToTranslateIndexes[i];
          var domNode2 = domNodeRef.current;
          var rowNode = domNode2.children[rowToTranslateIndex];
          if (rowNode) {
            var y = props2.rowHeightManager.getRowOffset(enteringRow.index) - scrollTop - currentHeightRef.current;
            rowNode.style.transform = "translate3d(0px, ".concat(y, "px, 0px)");
          }
        });
      };
      var setStickyRows = function setStickyRows2(content2, rows, config) {
        var domNode = domNodeRef.current;
        var renderedContent = content2;
        if (content2 == null) {
          renderedContent = nonEmptyRowElementsRefRef.current;
          if (domNode && rowElementsRef.current) {
            domNode.style.opacity = "0";
            domNode.style.pointerEvents = "none";
          }
        } else {
          if (domNode && !rowElementsRef.current) {
            domNode.style.opacity = "1";
            domNode.style.pointerEvents = "all";
          }
        }
        setContent(renderedContent);
        if (content2) {
          nonEmptyRowElementsRefRef.current = content2;
        }
        renderedRowsRef.current = rows;
        rowElementsRef.current = content2;
        requestAnimationFrame(function() {
          setEnteringRow(config);
        });
      };
      var getCurrentVisibleStickyRowsCount = function getCurrentVisibleStickyRowsCount2() {
        return rowElementsRef.current ? rowElementsRef.current.length : 0;
      };
      (0, _react.useLayoutEffect)(function() {
        var domNode = domNodeRef.current;
        var totalHeight = 0;
        if (domNode && domNode.children) {
          (0, _toConsumableArray2.default)(domNode.children).forEach(function(c, i) {
            c.style.zIndex = 1e3 - i;
            totalHeight += c.offsetHeight;
          });
          currentHeightRef.current = totalHeight;
        }
      }, [content]);
      (0, _react.useLayoutEffect)(function() {
        if (props2.handle) {
          props2.handle({
            setStickyRows,
            getCurrentVisibleStickyRowsCount,
            setEnteringRow
          });
        }
        return function() {
          var props3 = latestProps.current;
          if (props3 && typeof props3.handle === "function") {
            props3.handle(null);
          }
        };
      }, []);
      return _react.default.createElement("div", {
        className: StickyRowsContainerClassName,
        ref: domNodeRef,
        style: (0, _defineProperty2.default)({
          position: _hasSticky.sticky,
          top: 0,
          left: 0,
          right: 0,
          height: 0,
          zIndex: 1,
          contain: "layout"
        }, props2.rtl ? "transform" : "", props2.rtl ? "translate3d(".concat(props2.stickyOffset, "px, 0px, 0px)") : "")
      }, content);
    };
    var _default = _react.default.memo(StickyRowsContainer);
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/VirtualList.js
var require_VirtualList = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/VirtualList.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "RowHeightManager", {
      enumerable: true,
      get: function get() {
        return _RowHeightManager.default;
      }
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get() {
        return _src.getScrollbarWidth;
      }
    });
    exports.propTypes = void 0;
    Object.defineProperty(exports, "shouldComponentUpdate", {
      enumerable: true,
      get: function get() {
        return _shouldComponentUpdate2.default;
      }
    });
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _contains = _interopRequireDefault(require_contains());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    var _resizeObserverPolyfill = _interopRequireDefault((init_ResizeObserver_es(), __toCommonJS(ResizeObserver_es_exports)));
    var _src = _interopRequireWildcard(require_src19());
    var _uglified = _interopRequireDefault(require_uglified());
    var _join = _interopRequireDefault(require_join4());
    var _binarySearch = _interopRequireDefault(require_binary_search());
    var _RowHeightManager = _interopRequireDefault(require_RowHeightManager());
    var _getFocusableElements = _interopRequireDefault(require_getFocusableElements());
    var _renderRows2 = _interopRequireDefault(require_renderRows());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate());
    var _getVisibleRange = _interopRequireDefault(require_getVisibleRange());
    var _StickyRowsContainer = _interopRequireDefault(require_StickyRowsContainer());
    var _lodash = _interopRequireDefault(require_lodash2());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var sortAsc = function sortAsc2(a, b) {
      return a - b;
    };
    var emptyFn = function emptyFn2() {
    };
    var emptyObject = Object.freeze ? Object.freeze({}) : {};
    var ua = globalObject.navigator ? globalObject.navigator.userAgent : "";
    var IS_EDGE = ua.indexOf("Edge/") !== -1;
    var IS_FF = ua.toLowerCase().indexOf("firefox") > -1;
    var BASE_CLASS_NAME = "inovua-react-virtual-list";
    var ResizeObserver2 = globalObject.ResizeObserver || _resizeObserverPolyfill.default;
    var unique = function unique2(arr) {
      if (Set) {
        return (0, _toConsumableArray2.default)(new Set(arr));
      }
      return Object.keys(arr.reduce(function(acc, item) {
        acc[item] = true;
        return acc;
      }, {}));
    };
    var InovuaVirtualList = function(_Component) {
      (0, _inherits2.default)(InovuaVirtualList2, _Component);
      var _super = _createSuper(InovuaVirtualList2);
      function InovuaVirtualList2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaVirtualList2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "size", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rows", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowSpans", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowCoveredBy", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollTopPos", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getContainerNode", function() {
          return _this.containerNode;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScroller", function(props2) {
          var offset = _this.getEmptyScrollOffset() || 0;
          if (_this.props.nativeScroll) {
            offset = 0;
          }
          var style = _objectSpread(_objectSpread({}, props2.style), {}, {
            overscrollBehavior: _this.props.overscrollBehavior || "none",
            backfaceVisibility: "hidden",
            WebkitOverscrollBehavior: _this.props.overscrollBehavior || "none",
            right: -offset,
            bottom: -offset
          });
          props2.style = style;
          if (_this.props.showEmptyRows && _this.props.count < _this.strictVisibleCount && (0, _src.getScrollbarWidth)() && _this.props.nativeScroll) {
            style.overflowY = "hidden";
          }
          var result;
          if (_this.props.renderScroller) {
            result = _this.props.renderScroller(props2);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, props2));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollerSpacerOnNaturalRowHeight", function(spacerProps) {
          spacerProps.style.height = _this.getScrollHeight();
          if (_this.props.renderScrollerSpacer) {
            _this.props.renderScrollerSpacer(spacerProps);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderView", function(props2) {
          var offset = _this.getEmptyScrollOffset() || 0;
          if (_this.props.nativeScroll) {
            offset = 0;
          }
          var minHeight = offset ? "calc(100% - ".concat(offset, "px)") : "100%";
          var maxWidth = offset ? "calc(100% - ".concat(offset, "px)") : "100%";
          if (_this.props.rtl && !_this.props.nativeScroll) {
            maxWidth = "100%";
          }
          var style = _objectSpread(_objectSpread({}, props2.style), {}, {
            minHeight,
            maxWidth
          });
          if (_this.props.rtl && !(0, _src.getScrollbarWidth)()) {
            style.transform = "translateX(".concat(-offset, "px)");
          }
          var viewProps = _objectSpread(_objectSpread({}, props2), {}, {
            style,
            "data-name": "view"
          });
          var result;
          if (_this.props.renderView) {
            result = _this.props.renderView(viewProps);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, viewProps));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getTotalRowHeight", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          return props2.rowHeightManager ? props2.rowHeightManager.getTotalSize(props2.count) : props2.count * props2.rowHeight;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollHeight", function() {
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          var offset = SCROLLBAR_WIDTH ? 0 : _this.getEmptyScrollOffset() || 0;
          if (_this.props.nativeScroll) {
            offset = 0;
          }
          var height = _this.getTotalRowHeight();
          return height + offset;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollSize", function(node) {
          var res = {
            width: node.scrollWidth,
            height: _this.getScrollHeight()
          };
          return res;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getClientSize", function(n) {
          var node = n.firstChild;
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          var offset = SCROLLBAR_WIDTH ? 0 : _this.getEmptyScrollOffset() || 0;
          if (_this.props.nativeScroll) {
            offset = 0;
          }
          return {
            width: node.clientWidth + offset,
            height: node.clientHeight + offset
          };
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "initSizes", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var minRowHeight = props2.minRowHeight, rowHeightManager = props2.rowHeightManager;
          if (rowHeightManager) {
            return;
          }
          var count = _this.getMaxRenderCount(props2);
          var rowOffsets = [];
          var totalHeight = 0;
          var rowHeights = (0, _toConsumableArray2.default)(Array(count)).map(function() {
            rowOffsets.push(totalHeight);
            totalHeight += minRowHeight;
            return minRowHeight;
          });
          rowOffsets[count] = totalHeight;
          _this.rowOffsets = rowOffsets;
          _this.rowHeights = rowHeights;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setHeightForRows", function(indexes, heights) {
          if (!indexes.length || !heights.length) {
            return 0;
          }
          if (_this.props.showWarnings) {
            if (indexes.length != heights.length) {
              console.warn("setHeightForRows signature mismatch!!!");
              return 0;
            }
            indexes.forEach(function(_, i2) {
              if (i2 > 0) {
                var _diff = indexes[i2] - indexes[i2 - 1];
                if (_diff !== 1) {
                  console.warn("setHeightForRows should be called with successive indexes!", indexes);
                }
              }
            });
          }
          var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this), rowHeights = _assertThisInitialize.rowHeights, rowOffsets = _assertThisInitialize.rowOffsets;
          var count = _this.props.count;
          var diff = 0;
          indexes.forEach(function(index2, i2) {
            var height = heights[i2] || 0;
            var oldHeight = rowHeights[index2] || 0;
            rowHeights[index2] = height;
            rowOffsets[index2] = diff + (rowOffsets[index2] || 0);
            diff += height - oldHeight;
          });
          for (var i = indexes[indexes.length - 1] + 1; i <= count; i++) {
            rowOffsets[i] = diff + (rowOffsets[i] || 0);
          }
          return diff;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSizer", function(scrollHeight) {
          var _this$props = _this.props, renderSizer = _this$props.renderSizer, minRowWidth = _this$props.minRowWidth, emptyScrollOffset = _this$props.emptyScrollOffset, rowHeightManager = _this$props.rowHeightManager, showEmptyRows = _this$props.showEmptyRows, virtualized = _this$props.virtualized;
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          var offset = SCROLLBAR_WIDTH ? 0 : emptyScrollOffset || 0;
          if (!virtualized) {
            scrollHeight = 0;
          }
          var minHeight = scrollHeight + offset;
          if (showEmptyRows) {
            minHeight = Math.max(minHeight, _this.strictVisibleCount * rowHeightManager.getDefaultRowHeight());
          }
          var style = {
            minHeight: isNaN(minHeight) ? "" : minHeight,
            minWidth: minRowWidth ? minRowWidth + offset : 0
          };
          var result;
          if (renderSizer) {
            result = renderSizer({
              style
            }, scrollHeight);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", {
              key: "sizer",
              "data-name": "sizer",
              style
            });
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRowContainer", function() {
          var props2 = {
            key: "rowContainer",
            className: "".concat(BASE_CLASS_NAME, "__row-container"),
            ref: _this.refContainerNode,
            children: _this.renderRows()
          };
          var result;
          if (_this.props.renderRowContainer) {
            result = _this.props.renderRowContainer(props2);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, props2));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onViewResize", function() {
          requestAnimationFrame(function() {
            _this.rafSync();
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollbarsChange", function(_ref) {
          var vertical = _ref.vertical, horizontal = _ref.horizontal;
          if (!vertical && _this.scrollTopPos || !horizontal && _this.scrollLeftPos) {
            _this.applyScrollStyle({
              scrollTop: !vertical ? 0 : _this.scrollTopPos,
              scrollLeft: !horizontal ? 0 : _this.scrollLeftPos
            });
          }
          if (_this.props.onScrollbarsChange) {
            _this.props.onScrollbarsChange({
              vertical,
              horizontal
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowUnmount", function(row) {
          if (!_this.rows) {
            return;
          }
          var currentRowIndex = row.getIndex();
          var isFound = _this.mapping[currentRowIndex];
          if (!isFound) {
            return;
          }
          delete _this.mapping[currentRowIndex];
          var index2 = _this.rows.indexOf(row);
          if (index2 != -1) {
            _this.rows.splice(index2, 1);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowMount", function(r) {
          if (!r) {
            return;
          }
          _this.mapping[r.props.index] = r;
          _this.rows[r.props.index] = r;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollStart", function() {
          _this.scrolling = true;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (_this.props.scrollOneDirectionOnly) {
            var scrollPos = args[0], prevScrollPos = args[1];
            var absTop = Math.abs(scrollPos.scrollTop - prevScrollPos.scrollTop);
            var absLeft = Math.abs(scrollPos.scrollLeft - prevScrollPos.scrollLeft);
            var scrollerNode = _this.getScrollerNode();
            if (absTop != absLeft) {
              _this.disableScrollPropName = absTop > absLeft ? "overflowX" : "overflowY";
              _this.disableScrollOtherPropName = absTop > absLeft ? "overflowY" : "overflowX";
              _this.disableScrollPropValue = scrollerNode.style[_this.disableScrollPropName];
              scrollerNode.style[_this.disableScrollOtherPropName] = "scroll";
              scrollerNode.style[_this.disableScrollPropName] = "hidden";
            }
          }
          if (_this.props.onScrollStart) {
            var _this$props2;
            (_this$props2 = _this.props).onScrollStart.apply(_this$props2, args);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollerNode", function() {
          return _this.scrollContainer.scrollerNode;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollStop", function() {
          _this.scrolling = false;
          if (_this.props.scrollOneDirectionOnly) {
            var scrollerNode = _this.getScrollerNode();
            scrollerNode.style[_this.disableScrollPropName] = _this.disableScrollPropValue;
            scrollerNode.style.overflow = "scroll";
          }
          if (_this.props.onScrollStop) {
            var _this$props3;
            (_this$props3 = _this.props).onScrollStop.apply(_this$props3, arguments);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRows", function() {
          var rows = [];
          _this.forEachRow(function(row) {
            if (row) {
              rows.push(row);
            }
          });
          return rows;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "forEachRow", function(fn) {
          var onlyVisible = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var rows = _this.rows;
          var visibleCount = _this.getVisibleCount();
          var i = -1;
          for (var initialIndex in rows) {
            if (rows.hasOwnProperty(initialIndex) && (!onlyVisible || onlyVisible && initialIndex < visibleCount)) {
              i++;
              fn(rows[initialIndex], i);
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sortRows", function(rows) {
          return rows.slice().sort(function(row1, row2) {
            return row1.getIndex() - row2.getIndex();
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowAt", function(index2) {
          var row = _this.mapping[index2];
          if (row && row.getIndex() != index2) {
            row = null;
          }
          return row;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVisibleCount", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var virtualized = props2.virtualized, enableRowSpan = props2.enableRowSpan, extraRowsProps = props2.extraRows;
          var extraRows = enableRowSpan ? 2 : extraRowsProps || 0;
          if (_this.visibleCount === void 0) {
            return 0;
          }
          if (!virtualized) {
            return (props2.showEmptyRows ? Math.max(_this.visibleCount || 0, props2.count || 0) : props2.count) + extraRows;
          }
          return (props2.showEmptyRows ? _this.visibleCount || props2.count : Math.min(_this.visibleCount || props2.count, props2.count)) + extraRows;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRowIndex", function(row, index2, callback) {
          var existingRow = _this.mapping[index2];
          if (existingRow) {
            existingRow.setIndex(index2, callback);
            if (existingRow !== row) {
              row.setVisible(false);
            }
            return;
          }
          var oldIndex = row.getIndex();
          row.setIndex(index2, callback);
          delete _this.mapping[oldIndex];
          _this.mapping[index2] = row;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSortedRows", function() {
          var rows = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.getRows();
          return _this.sortRows(rows);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowsUpdated", function(newIndexes, range, updateScroll) {
          newIndexes.sort(function(i1, i2) {
            return i1 - i2;
          });
          var start = newIndexes[0];
          var end = _this.props.showEmptyRows ? newIndexes[newIndexes.length - 1] : Math.min(newIndexes[newIndexes.length - 1], _this.props.count - 1);
          var minRowHeight = _this.props.minRowHeight;
          var rowIndexes = [];
          var rowHeights = [];
          var rows = [];
          for (var row, rowHeight, i = start; i <= end; i++) {
            row = _this.mapping[i];
            rowHeight = row ? row.getInfo().height : minRowHeight;
            if (row) {
              rows.push(row);
            }
            rowIndexes.push(i);
            rowHeights.push(rowHeight);
          }
          var newToTopHeight = 0;
          var oldTop;
          if (_this.oldRowIndexes) {
            oldTop = _this.oldRowIndexes[0];
            rowIndexes.forEach(function(rowIndex, i2) {
              var diff;
              if (rowIndex < oldTop) {
                diff = rowHeights[i2] - _this.rowHeights[rowIndex];
                newToTopHeight += diff;
              }
            });
          }
          if (rowIndexes.length) {
            _this.setHeightForRows(rowIndexes, rowHeights);
          }
          rows.forEach(function(row2) {
            var index2 = row2.getIndex();
            var offset = _this.rowOffsets[index2];
            row2.setOffset(offset);
          });
          _this.oldRowIndexes = rowIndexes;
          var newScrollTop;
          if (newToTopHeight) {
            newScrollTop = _this.scrollTopPos + newToTopHeight;
            updateScroll(newScrollTop);
            _this.forceScrollTop = newScrollTop;
            _this.scrollTop = newScrollTop;
          } else {
            updateScroll();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVisibleRange", function(args) {
          return (0, _getVisibleRange.default)(args);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "applyScrollStyle", function(_ref2, domNode) {
          var scrollTop = _ref2.scrollTop, scrollLeft = _ref2.scrollLeft, force = _ref2.force, reorder = _ref2.reorder;
          if (scrollTop < 0) {
            scrollTop = 0;
          }
          if (!_this.props.rtl) {
            if (scrollLeft < 0) {
              scrollLeft = 0;
            }
          } else {
            if (scrollLeft > 0) {
              scrollLeft = 0;
            }
          }
          if (_this.forceScrollTop !== void 0) {
            scrollTop = _this.forceScrollTop;
            _this.forceScrollTop = void 0;
            return;
          }
          if (_this.props.applyScrollLeft && scrollLeft !== void 0) {
            scrollLeft = 0;
            _this.props.applyScrollLeft(scrollLeft, domNode);
          }
          if (scrollTop === void 0) {
            scrollTop = _this.prevScrollTopPos;
          }
          if (scrollLeft === void 0) {
            scrollLeft = _this.prevScrollLeftPos;
          }
          _this.scrollTopPos = scrollTop;
          _this.scrollLeftPos = scrollLeft;
          var _this$props4 = _this.props, count = _this$props4.count, useTransformPosition = _this$props4.useTransformPosition, rowHeightManager = _this$props4.rowHeightManager, naturalRowHeight = _this$props4.naturalRowHeight, virtualized = _this$props4.virtualized, showEmptyRows = _this$props4.showEmptyRows;
          var range = _this.getVisibleRange({
            scrollTop,
            size: _this.size,
            count,
            naturalRowHeight,
            rowHeightManager,
            showEmptyRows
          });
          var startRowIndex = range.start;
          var prevStartRowIndex = _this.prevStartRowIndex;
          _this.prevScrollTopPos = scrollTop;
          _this.prevScrollLeftPos = scrollLeft;
          _this.prevStartRowIndex = startRowIndex;
          _this.updateStickyRows(scrollTop, void 0, {
            force: false
          });
          var updateScroll = function updateScroll2() {
            var top = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : scrollTop;
            var parentNodeStyle = _this.containerNode.parentNode.style;
            _this.containerNode.parentNode.classList.add("".concat(BASE_CLASS_NAME, "__view-container"));
            var scrollLeftTranslateValue = -scrollLeft;
            if (useTransformPosition) {
              parentNodeStyle.transform = "translate3d(".concat(scrollLeftTranslateValue, "px, ").concat(-top, "px, 0px)");
            } else {
              parentNodeStyle.left = "".concat(scrollLeftTranslateValue, "px");
              parentNodeStyle.top = "".concat(-top, "px");
            }
          };
          if (rowHeightManager == null) {
            force = true;
          }
          if (startRowIndex == prevStartRowIndex && !force || !virtualized) {
            updateScroll();
            return;
          }
          updateScroll();
          _this.updateRows(range, reorder, emptyFn);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollingElement", function() {
          return _this.scrollContainer;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "smoothScrollTo", function() {
          var _this$scrollContainer;
          (_this$scrollContainer = _this.scrollContainer).smoothScrollTo.apply(_this$scrollContainer, arguments);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidMount", function() {
          _this.mounted = true;
          _this.unmounted = false;
          _this.setupRowHeightManager(_this.props.rowHeightManager);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "fixEdgeScrollPosition", function() {
          if (!(IS_EDGE || IS_FF)) {
            return;
          }
          var maxTop = _this.getTotalRowHeight() - (_this.scrollContainer.viewNode ? _this.scrollContainer.viewNode.offsetHeight : 0);
          if (_this.scrollTop > maxTop) {
            globalObject.requestAnimationFrame(function() {
              if (_this.unmounted) {
                return;
              }
              _this.scrollTop = maxTop;
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupRowHeightManager", function(rowHeightManager) {
          if (rowHeightManager) {
            rowHeightManager.on("index", _this.onIndex);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onIndex", function() {
          _this.updateVisibleCount(_this.size.height);
          _this.forceUpdate(function() {
            if (_this.unmounted) {
              return;
            }
            _this.refreshLayout({
              reorder: false,
              force: true
            });
            _this.cleanupRows();
            _this.fixEdgeScrollPosition();
            _this.rows.forEach(function(row) {
              row.setIndex(row.getIndex(), void 0, void 0, true);
            });
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refreshLayout", function(config) {
          var defaults = {
            force: true,
            reorder: true
          };
          _this.adjustHeights();
          var options = config ? _objectSpread(_objectSpread({}, defaults), config) : defaults;
          _this.applyScrollStyle(options);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getOverlappingHeight", function() {
          if (_this.scrollContainer && _this.scrollContainer.getBeforeAndAfterHeight) {
            return _this.scrollContainer.getBeforeAndAfterHeight();
          }
          return 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateVisibleCount", function(height, props2) {
          props2 = props2 || _this.props;
          var _props2 = props2, rowHeightManager = _props2.rowHeightManager, minRowHeight = _props2.minRowHeight, showEmptyRows = _props2.showEmptyRows;
          var strictVisibleCount = rowHeightManager ? Math.ceil(height / rowHeightManager.getMinHeight()) : Math.ceil(height / (minRowHeight || 1));
          _this.strictVisibleCount = strictVisibleCount;
          _this.visibleCount = rowHeightManager ? strictVisibleCount + 1 : strictVisibleCount + 2;
          var maxCount = props2.count;
          if (_this.visibleCount > maxCount && !showEmptyRows) {
            _this.visibleCount = maxCount;
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGapsFor", function(startRowIndex, endRowIndex, sortedRows) {
          var visibleRowPositions = {};
          var enableRowSpan = _this.props.enableRowSpan;
          var rows = sortedRows || _this.getSortedRows();
          rows.forEach(function(row) {
            if (row.isVisible()) {
              visibleRowPositions[row.getIndex()] = true;
            }
          });
          var gaps = [];
          if (enableRowSpan && _this.rowCoveredBy[startRowIndex] != null) {
            startRowIndex = _this.rowCoveredBy[startRowIndex];
          }
          var alreadyVisible;
          var coveredBy;
          for (; startRowIndex <= endRowIndex; startRowIndex++) {
            alreadyVisible = visibleRowPositions[startRowIndex];
            if (enableRowSpan && !alreadyVisible) {
              coveredBy = _this.rowCoveredBy[startRowIndex];
              if (coveredBy != null) {
                alreadyVisible = _this.props.recycleCoveredRows;
              }
            }
            if (!alreadyVisible) {
              gaps.push(startRowIndex);
            }
          }
          return gaps;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCleanupRows", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var indexes = [];
          var length = _this.rows && _this.rows.length;
          var visibleCount = _this.getVisibleCount(props2);
          for (var i = visibleCount; i < length; i++) {
            indexes.push(i);
          }
          return indexes;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cleanupRows", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          _this.getCleanupRows(props2).forEach(function(i) {
            var row = _this.rows[i];
            if (row) {
              delete _this.mapping[row.getIndex()];
              delete _this.rows[i];
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function() {
          var node = _this.getDOMNode();
          if (!node) {
            return;
          }
          var size = _this.props.measureSize ? _this.props.measureSize(node) : {
            width: node.clientWidth,
            height: node.clientHeight
          };
          size.height -= _this.getOverlappingHeight();
          _this.size = size;
          if (_this.props.scrollProps && typeof _this.props.scrollProps.onResize == "function") {
            _this.props.scrollProps.onResize(size);
          }
          _this.updateVisibleCount(size.height);
          if (_this.props.virtualized) {
            if (_this.props.showEmptyRows) {
              _this.initSizes();
            }
            _this.forceUpdate(function() {
              if (_this.unmounted) {
                return;
              }
              _this.refreshLayout({
                reorder: false,
                force: true
              });
              _this.cleanupRows();
            });
          }
          if (_this.props.onResize) {
            _this.props.onResize(size);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRowRowSpan", function(rowIndex, rowSpan) {
          if (rowSpan === 1) {
            return;
          }
          _this.rowSpans[rowIndex] = rowSpan;
          var current = rowIndex + 1;
          var last = rowIndex + rowSpan - 1;
          for (; current <= last; current++) {
            _this.rowCoveredBy[current] = rowIndex;
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowKeyDown", function(index2, event2) {
          if (event2.key !== "Tab") {
            return;
          }
          if (_this.props.handleRowKeyDown) {
            _this.props.handleRowKeyDown(index2, event2);
            return;
          }
          var activeElement = globalObject.document.activeElement;
          var theRow = _this.getRowAt(index2);
          var rowNode = theRow.getDOMNode ? theRow.getDOMNode() : theRow.node;
          if (!activeElement || !(0, _contains.default)(rowNode, activeElement)) {
            return;
          }
          var dir = event2.shiftKey ? -1 : 1;
          var nextIndex = index2 + dir;
          var maxCount = _this.getMaxRenderCount();
          if (nextIndex < 0 || nextIndex >= maxCount) {
            return;
          }
          var thisElements = _this.props.getRowFocusableElements ? _this.props.getRowFocusableElements(index2, rowNode) : (0, _getFocusableElements.default)(rowNode);
          if (thisElements && thisElements.length) {
            var limit = dir === -1 ? 0 : thisElements.length - 1;
            if (thisElements[limit] !== activeElement) {
              return;
            }
          }
          if (typeof _this.props.shouldPreventDefaultTabKeyOnRow !== "function" || _this.props.shouldPreventDefaultTabKeyOnRow(index2, event2) !== false) {
            event2.preventDefault();
          }
          _this.focusRow(nextIndex, dir);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getMaxRenderCount", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var visibleCount = _this.getVisibleCount(props2);
          var maxCount = props2.showEmptyRows ? Math.max(visibleCount || 0, props2.count) : Math.max(props2.count || 0, 0);
          return maxCount;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focusRow", function(index2, dir, callback) {
          if (index2 >= _this.getMaxRenderCount() || index2 < 0) {
            return;
          }
          _this.scrollToIndex(index2, {
            direction: dir == 1 ? "bottom" : "top",
            duration: 50
          }, function() {
            var nextRow = _this.getRowAt(index2);
            var nextRowNode = nextRow.getDOMNode ? nextRow.getDOMNode() : nextRow.node;
            var elements = _this.props.getRowFocusableElements ? _this.props.getRowFocusableElements(index2, nextRowNode) : (0, _getFocusableElements.default)(nextRowNode);
            if (elements.length) {
              var focusIndex = dir === -1 ? elements.length - 1 : 0;
              elements[focusIndex].focus();
            }
            if (typeof callback == "function") {
              callback();
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowRendered", function(index2) {
          return !!_this.getRowAt(index2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getStickyRowsArray", function() {
          var stickyRows = _this.props.stickyRows;
          var scaleMap = {};
          var rows = Object.keys(stickyRows).map(function(key, i) {
            var scale = +(stickyRows[key] || 1);
            var row = {
              index: +key,
              scale,
              indexInAllRows: i
            };
            scaleMap[scale] = scaleMap[scale] || [];
            scaleMap[scale].push(row);
            return row;
          }).sort(function(a, b) {
            return sortAsc(a.index, b.index);
          });
          var scales = unique(rows.map(function(r) {
            return r.scale;
          })).sort(sortAsc);
          var result = {
            rows,
            scales,
            rowsPerScales: scales.map(function(scale) {
              return scaleMap[scale];
            })
          };
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "currentStickyRows", []);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateStickyRows", function() {
          var scrollTop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.scrollTop;
          var firstVisibleRowIndex = arguments.length > 1 ? arguments[1] : void 0;
          var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
            force: true
          }, force = _ref3.force;
          if (!_this.props.stickyRows) {
            return;
          }
          var _this$getStickyRowsAr = _this.getStickyRowsArray(), rowsPerScales = _this$getStickyRowsAr.rowsPerScales, allRows = _this$getStickyRowsAr.rows;
          if (firstVisibleRowIndex === void 0) {
            firstVisibleRowIndex = _this.getFirstVisibleRowIndexForSticky(scrollTop);
          }
          firstVisibleRowIndex = firstVisibleRowIndex || 0;
          var enteringRows = [];
          var comparator = function comparator2(_ref4, b) {
            var index2 = _ref4.index;
            return sortAsc(index2, b);
          };
          var initialIndex = -1;
          var currentStickyRows = [];
          var currentStickyRowsMap = [];
          var maxStickyRowIndex = -1;
          var firstFreeVisibleRowIndex = firstVisibleRowIndex;
          rowsPerScales.forEach(function(rows) {
            if (!rows.length) {
              return;
            }
            var foundIndex = (0, _binarySearch.default)(rows, firstFreeVisibleRowIndex, comparator);
            var computedFoundIndex = foundIndex;
            var stickyRow;
            var stickyRowIndex;
            if (foundIndex < 0) {
              computedFoundIndex = ~foundIndex - 1;
            }
            stickyRow = rows[computedFoundIndex];
            if (stickyRow) {
              stickyRowIndex = stickyRow.index;
              if (stickyRowIndex > initialIndex) {
                firstFreeVisibleRowIndex++;
                currentStickyRows.push(stickyRow);
                currentStickyRowsMap[stickyRowIndex] = true;
                initialIndex = stickyRowIndex;
                maxStickyRowIndex = Math.max(maxStickyRowIndex, stickyRowIndex);
              }
              var nextRow = allRows[stickyRow.indexInAllRows + 1];
              if (nextRow && nextRow.index <= firstFreeVisibleRowIndex) {
                enteringRows.push(nextRow);
              }
            }
          });
          enteringRows = enteringRows.filter(function(row) {
            return !currentStickyRowsMap[row.index] && row.index > maxStickyRowIndex;
          });
          var enteringRow = enteringRows[0];
          if (JSON.stringify(_this.currentStickyRows) === JSON.stringify(currentStickyRows) && !force) {
            _this.stickyRowsContainer.setEnteringRow({
              enteringRow,
              scrollTop
            });
            return;
          }
          _this.setStickyRows(currentStickyRows, scrollTop, enteringRow);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setStickyRows", function() {
          var currentStickyRows = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.currentStickyRows;
          var scrollTop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _this.scrollTop;
          var enteringRow = arguments.length > 2 ? arguments[2] : void 0;
          _this.currentStickyRows = currentStickyRows;
          var rowElements = currentStickyRows.map(function(row) {
            return _this.renderStickyRow(row.index);
          });
          _this.stickyRowsContainer.setStickyRows(rowElements.length ? rowElements : null, currentStickyRows, {
            enteringRow,
            scrollTop
          });
          _this.currentStickyRows = currentStickyRows;
          if (_this.props.onStickyRowUpdate) {
            _this.props.onStickyRowUpdate();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderStickyRow", function(index2) {
          var _this$props5 = _this.props, rowHeight = _this$props5.rowHeight, renderRow = _this$props5.renderRow, count = _this$props5.count, pureRows = _this$props5.pureRows, rowHeightManager = _this$props5.rowHeightManager, showEmptyRows = _this$props5.showEmptyRows, virtualized = _this$props5.virtualized, rowContain = _this$props5.rowContain, naturalRowHeight = _this$props5.naturalRowHeight, useTransformRowPosition = _this$props5.useTransformRowPosition;
          return (0, _renderRows2.default)({
            pure: pureRows,
            renderRow,
            rowHeightManager,
            rowHeight,
            rowContain,
            count,
            from: index2,
            to: index2 + 1,
            naturalRowHeight,
            sticky: true,
            useTransformPosition: useTransformRowPosition,
            virtualized: false
          })[0];
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowVisible", function(index2) {
          if (!_this.isRowRendered(index2)) {
            return false;
          }
          var rowHeightManager = _this.props.rowHeightManager;
          var top = _this.scrollTop;
          var bottom = top + _this.size.height;
          var rowTop;
          var rowBottom;
          if (rowHeightManager) {
            rowTop = rowHeightManager.getRowOffset(index2);
            rowBottom = rowTop + rowHeightManager.getRowHeight(index2);
          } else {
            var row = _this.getRowAt(index2);
            var info = row.getInfo();
            rowTop = info.offset;
            rowBottom = rowTop + info.height;
          }
          return top <= rowTop && rowBottom <= bottom;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowVisibilityInfo", function(index2, offset) {
          var rendered = _this.isRowRendered(index2);
          var _this$props6 = _this.props, rowHeightManager = _this$props6.rowHeightManager, rowHeight = _this$props6.rowHeight, minRowHeight = _this$props6.minRowHeight;
          var scrollTop = _this.scrollTop;
          var top = scrollTop + offset;
          var bottom = scrollTop + _this.size.height - offset;
          var rowTop;
          var rowBottom;
          if (rowHeightManager) {
            rowTop = rowHeightManager.getRowOffset(index2);
            rowBottom = rowTop + rowHeightManager.getRowHeight(index2);
          } else {
            var row = _this.getRowAt(index2);
            if (row) {
              var info = row.getInfo();
              rowTop = info.offset;
              rowBottom = rowTop + info.height;
            } else {
              var indexes = _this.getRenderedIndexes();
              var firstRenderedIndex = indexes[0];
              var lastRenderedIndex = indexes[indexes.length - 1];
              if (index2 < firstRenderedIndex) {
                rowTop = _this.rowOffsets[firstRenderedIndex] - (firstRenderedIndex - index2) * minRowHeight;
              } else if (index2 > lastRenderedIndex) {
                rowTop = _this.rowOffsets[lastRenderedIndex] + _this.rowHeights[lastRenderedIndex] + (index2 - lastRenderedIndex) * minRowHeight;
              } else {
                rowTop = _this.rowOffsets[index2];
              }
              rowBottom = rowTop + _this.rowHeights[index2];
            }
          }
          var visible = top <= rowTop && rowBottom <= bottom;
          return {
            rendered,
            visible,
            top: rowTop,
            bottom: rowBottom,
            topDiff: rowTop - top,
            bottomDiff: bottom - rowBottom
          };
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRenderedIndexes", function() {
          return Object.keys(_this.mapping).map(function(k) {
            return k * 1;
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowFocus", function(index2, event2) {
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rafSync", function() {
          if (_this.scrollContainer) {
            _this.scrollContainer.rafSync();
          }
          _this.adjustHeights();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "adjustHeights", function() {
          if (Array.isArray(_this.rows)) {
            _this.rows.forEach(function(r) {
              return r.updateRowHeight();
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "checkHeights", function() {
          var rows = _this.getSortedRows();
          var result = true;
          rows.forEach(function(row) {
            if (result !== true) {
              return;
            }
            var index2 = row.getIndex();
            if (row.node.offsetHeight != _this.rowHeights[index2]) {
              console.warn("row height mismatch at ".concat(index2, "!"));
              result = index2;
            }
          });
          if (result === true) {
            _this.rowHeights.reduce(function(acc, height, index2) {
              if (_this.rowOffsets[index2] !== acc && result === true && index2 < _this.props.count) {
                console.warn("row offset mismatch at ".concat(index2, "!"));
                result = index2;
              }
              return acc + height;
            }, 0);
          }
          return result;
        });
        _this.initSizes(_props);
        _this.visibleCount = void 0;
        _this.size = {
          height: 0,
          width: 0
        };
        _this.scrollTopPos = 0;
        _this.scrollLeftPos = 0;
        _this.prevScrollLeftPos = 0;
        _this.prevScrollTopPos = 0;
        _this.mapping = {};
        _this.rowSpans = {};
        _this.rowCoveredBy = {};
        _this.rows = [];
        _this.rowRef = function(r) {
          _this.row = r;
        };
        _this.refScrollContainer = function(c) {
          _this.scrollContainer = c;
        };
        _this.refStickyContainer = function(c) {
          _this.stickyRowsContainer = c;
        };
        _this.refContainerNode = function(domNode) {
          _this.containerNode = domNode;
        };
        _this.updateRows = (0, _lodash.default)(_this.updateRows, 16);
        return _this;
      }
      (0, _createClass2.default)(InovuaVirtualList2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "renderStickyRowsContainer",
        value: function renderStickyRowsContainer() {
          return this.props.stickyRows ? _react.default.createElement(_StickyRowsContainer.default, {
            rtl: this.props.rtl,
            key: "stickyrowscontainer",
            stickyOffset: this.props.stickyOffset,
            handle: this.refStickyContainer,
            rowHeightManager: this.props.rowHeightManager
          }) : null;
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var naturalRowHeight = props2.naturalRowHeight, scrollProps = props2.scrollProps, theme = props2.theme, minRowHeight = props2.minRowHeight, rowHeightManager = props2.rowHeightManager, count = props2.count;
          if (this.oldProps) {
            this.transitionProps(props2, this.oldProps);
          }
          this.oldProps = props2;
          var style = _objectSpread({
            position: "relative"
          }, this.props.style);
          var className = (0, _join.default)(props2.className, BASE_CLASS_NAME, theme && "".concat(BASE_CLASS_NAME, "--theme-").concat(theme), "".concat(BASE_CLASS_NAME, "--virtual-scroll"));
          var scrollHeight = rowHeightManager ? rowHeightManager.getTotalSize(count) : this.scrollHeight || minRowHeight * count;
          var rowContainer = this.renderRowContainer();
          var sizer = this.renderSizer(scrollHeight);
          var stickyRowsContainer = this.renderStickyRowsContainer();
          var children;
          if ((0, _src.hasSticky)()) {
            children = _react.default.Fragment ? _react.default.createElement(_react.default.Fragment, null, rowContainer, sizer) : [rowContainer, sizer];
          } else {
            children = _react.default.createElement("div", null, rowContainer, sizer);
          }
          var Factory = this.props.nativeScroll ? _src.NativeScrollContainer : _src.default;
          var renderScrollerSpacer = this.props.renderScrollerSpacer;
          if (naturalRowHeight) {
            renderScrollerSpacer = this.renderScrollerSpacerOnNaturalRowHeight;
          }
          return _react.default.createElement(Factory, _objectSpread(_objectSpread(_objectSpread({
            contain: this.props.contain,
            ResizeObserver: this.props.ResizeObserver !== void 0 ? this.props.ResizeObserver : ResizeObserver2,
            extraChildren: stickyRowsContainer,
            useTransformToScroll: this.props.useTransformPosition
          }, (0, _reactCleanProps.default)(props2, InovuaVirtualList2.propTypes)), scrollProps), {}, {
            rtl: this.props.rtl,
            nativeScroll: this.props.nativeScroll,
            ref: this.refScrollContainer,
            onScrollbarsChange: this.onScrollbarsChange,
            style,
            theme,
            className,
            onScrollStart: this.onScrollStart,
            onScrollStop: this.onScrollStop,
            applyScrollStyle: this.applyScrollStyle,
            onResize: this.onResize,
            onViewResize: this.onViewResize,
            renderScroller: this.renderScroller,
            renderScrollerSpacer,
            renderView: this.renderView,
            getClientSize: this.getClientSize,
            getScrollSize: this.getScrollSize,
            children
          }));
        }
      }, {
        key: "updateRows",
        value: function updateRows(range, reorder, updateScroll) {
          var _this2 = this;
          var rowHeightManager = this.props.rowHeightManager;
          var startRowIndex = range.start;
          var endRowIndex = range.end;
          if (this.props.onRenderRangeChange) {
            this.props.onRenderRangeChange(startRowIndex, endRowIndex);
          }
          var rows = this.getSortedRows();
          var gaps = this.getGapsFor(startRowIndex, endRowIndex, rows);
          var newIndexes = [];
          var _this$props7 = this.props, recycleCoveredRows = _this$props7.recycleCoveredRows, enableRowSpan = _this$props7.enableRowSpan;
          var visited = {};
          rows.forEach(function(row, i) {
            var rowIndex = row.getIndex();
            if (reorder) {
              var newRowIndex = startRowIndex + i;
              _this2.setRowIndex(row, newRowIndex);
              if (rowHeightManager == null) {
                newIndexes.push(newRowIndex);
              }
              return;
            }
            var extraRows = enableRowSpan ? row.getRowSpan() - 1 : 0;
            var outOfView = rowIndex + extraRows < startRowIndex || rowIndex > endRowIndex || visited[rowIndex] || enableRowSpan && recycleCoveredRows && _this2.rowCoveredBy[rowIndex] !== void 0;
            visited[rowIndex] = true;
            if (rowHeightManager == null) {
              if (outOfView) {
                if (gaps.length) {
                  var newIndex = gaps.pop();
                  newIndexes.push(newIndex);
                  _this2.setRowIndex(row, newIndex);
                } else {
                  row.setVisible(false);
                }
              } else {
                row.setVisible(true);
                newIndexes.push(row.getIndex());
              }
              return;
            }
            if (outOfView && gaps.length) {
              var _newIndex = gaps.pop();
              _this2.setRowIndex(row, _newIndex);
            }
          });
          if (newIndexes.length && rowHeightManager == null) {
            if (this.updateRafHandle) {
              globalObject.cancelAnimationFrame(this.updateRafHandle);
            }
            this.updateRafHandle = globalObject.requestAnimationFrame(function() {
              _this2.updateRafHandle = null;
              _this2.onRowsUpdated(newIndexes, {
                start: startRowIndex,
                end: endRowIndex
              }, function() {
              });
            });
          }
        }
      }, {
        key: "scrollTopMax",
        get: function get() {
          return this.mounted ? this.scrollContainer.scrollTopMax : 0;
        }
      }, {
        key: "scrollLeftMax",
        get: function get() {
          return this.mounted ? this.scrollContainer.scrollLeftMax : 0;
        }
      }, {
        key: "scrollTop",
        get: function get() {
          return this.mounted ? this.getScrollingElement().scrollTop : 0;
        },
        set: function set(value) {
          var element = this.getScrollingElement();
          if (element) {
            element.scrollTop = value;
          }
        }
      }, {
        key: "scrollLeft",
        get: function get() {
          return this.mounted ? this.getScrollingElement().scrollLeft : 0;
        },
        set: function set(value) {
          var element = this.getScrollingElement();
          if (element) {
            element.scrollLeft = value;
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.props.rowHeightManager) {
            this.props.rowHeightManager.removeListener("index", this.onIndex);
          }
          this.mounted = false;
          this.unmounted = true;
          this.rows.length = 0;
          this.rowHeights = null;
          this.rowOffsets = null;
        }
      }, {
        key: "transitionProps",
        value: function transitionProps(nextProps, thisProps) {
          var nextCount = Math.max(nextProps.count, 0);
          var rowHeightChange = thisProps.rowHeight && nextProps.rowHeight != thisProps.rowHeight;
          if (thisProps.renderRow !== nextProps.renderRow) {
            this.rowCoveredBy = {};
            this.rowSpans = {};
          }
          if (nextCount != thisProps.count || nextProps.showEmptyRows != thisProps.showEmptyRows || rowHeightChange) {
            var oldVisibleCount = this.getVisibleCount();
            this.updateVisibleCount(this.size.height, nextProps);
            this.cleanupRows(nextProps);
            this.reorder = rowHeightChange || this.getVisibleCount(nextProps) < oldVisibleCount;
            this.initSizes(nextProps);
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this3 = this;
          var prevScrollTopPos;
          var prevScrollLeftPos;
          if (this.props.nativeScroll !== prevProps.nativeScroll) {
            prevScrollTopPos = this.scrollTopPos;
            prevScrollLeftPos = this.scrollLeftPos;
            globalObject.requestAnimationFrame(function() {
              if (_this3.unmounted) {
                return;
              }
              _this3.scrollTop = prevScrollTopPos;
              _this3.scrollLeft = prevScrollLeftPos;
            });
          }
          if (this.props.rowHeightManager !== prevProps.rowHeightManager) {
            if (prevProps.rowHeightManager) {
              prevProps.rowHeightManager.removeListener("index", this.onIndex);
            }
            this.setupRowHeightManager(this.props.rowHeightManager);
          }
          if (this.props.count != prevProps.count || this.props.renderRow != prevProps.renderRow || this.props.rowHeightManager != prevProps.rowHeightManager || this.props.rowHeightManager == null || this.props.showEmptyRows != prevProps.showEmptyRows) {
            var refreshConfig = {
              reorder: this.reorder
            };
            if (prevScrollTopPos !== void 0) {
              refreshConfig.scrollTop = prevScrollTopPos;
              refreshConfig.scrollLeft = prevScrollLeftPos;
            }
            if (this.props.count <= this.visibleCount) {
              refreshConfig.scrollTop = 0;
            }
            if ((IS_EDGE || IS_FF) && this.props.count < prevProps.count) {
              this.fixEdgeScrollPosition();
            }
            this.reorder = false;
            this.refreshLayout(refreshConfig);
          }
          if (prevProps.stickyRows !== this.props.stickyRows) {
            this.updateStickyRows(void 0, void 0, {
              force: true
            });
          }
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          return this.scrollContainer ? this.scrollContainer.domNode || this.scrollContainer.getDOMNode() : null;
        }
      }, {
        key: "renderRows",
        value: function renderRows() {
          var props2 = this.props;
          var rowHeight = props2.rowHeight, renderRow = props2.renderRow, count = props2.count, pureRows = props2.pureRows, rowHeightManager = props2.rowHeightManager, showEmptyRows = props2.showEmptyRows, virtualized = props2.virtualized, rowContain = props2.rowContain, naturalRowHeight = props2.naturalRowHeight, useTransformRowPosition = props2.useTransformRowPosition;
          var to = this.getVisibleCount();
          return (0, _renderRows2.default)({
            ref: this.rowRef,
            onMount: this.onRowMount,
            onUnmount: this.onRowUnmount,
            notifyRowSpan: this.setRowRowSpan,
            pure: pureRows,
            renderRow,
            rowHeightManager,
            rowHeight,
            rowContain,
            count,
            from: 0,
            to,
            naturalRowHeight,
            onKeyDown: this.onRowKeyDown,
            onFocus: this.onRowFocus,
            useTransformPosition: useTransformRowPosition,
            showEmptyRows,
            virtualized
          });
        }
      }, {
        key: "getFirstVisibleRowIndexForSticky",
        value: function getFirstVisibleRowIndexForSticky() {
          var scrollTop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.scrollTopPos;
          var rowHeightManager = this.props.rowHeightManager;
          var stickyHeight = this.currentStickyRows ? this.currentStickyRows.reduce(function(_, row) {
            return rowHeightManager.getRowHeight(row.index);
          }, 0) : 0;
          var rowIndex = Math.max(0, rowHeightManager.getRowAt(scrollTop + stickyHeight) - 1);
          return rowIndex;
        }
      }, {
        key: "scrollToIndex",
        value: function scrollToIndex(index2) {
          var _this4 = this;
          var _ref5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, direction = _ref5.direction, force = _ref5.force, _ref5$duration = _ref5.duration, duration = _ref5$duration === void 0 ? 0 : _ref5$duration, _ref5$offset = _ref5.offset, offset = _ref5$offset === void 0 ? 0 : _ref5$offset;
          var callback = arguments.length > 2 ? arguments[2] : void 0;
          if (direction) {
            if (direction != "top" && direction != "bottom") {
              direction = null;
            }
          }
          if (force && !direction) {
            force = false;
          }
          if (index2 < 0 || index2 >= this.getMaxRenderCount()) {
            return;
          }
          if (typeof callback != "function") {
            callback = emptyFn;
          }
          var info = this.getRowVisibilityInfo(index2, offset);
          if (!info.rendered) {
            var rowHeight = this.props.rowHeight;
            if (!direction) {
              var existingIndex = this.rows[0].getIndex();
              direction = index2 > existingIndex ? "bottom" : "top";
            }
            var newScrollTop = direction === "top" ? info.top - offset : this.scrollTop - info.bottomDiff + offset;
            var afterScroll = function afterScroll2() {
              if (!rowHeight) {
                setTimeout(function() {
                  globalObject.requestAnimationFrame(function() {
                    _this4.scrollToIndex(index2, {
                      direction,
                      force,
                      duration: duration ? 100 : 0
                    }, callback);
                  });
                });
              } else {
                callback();
              }
            };
            if (duration) {
              this.smoothScrollTo(newScrollTop, {
                duration
              }, afterScroll);
            } else {
              this.scrollTop = newScrollTop;
              afterScroll();
            }
            return;
          }
          var visible = info.visible;
          if (!visible) {
            if (!direction) {
              direction = info.topDiff < 0 ? "top" : "bottom";
              force = true;
            }
          }
          if (!visible || direction && force) {
            var _newScrollTop;
            if (direction == "top" || info.topDiff < 0) {
              _newScrollTop = this.scrollTop + info.topDiff - offset;
            } else if (direction == "bottom" || info.bottomDiff < 0) {
              _newScrollTop = this.scrollTop - info.bottomDiff + offset;
            }
            if (_newScrollTop != null) {
              if (duration) {
                this.smoothScrollTo(_newScrollTop, {
                  duration
                }, callback);
                return;
              }
              this.scrollTop = _newScrollTop;
            }
          }
          callback();
        }
      }, {
        key: "getEmptyScrollOffset",
        value: function getEmptyScrollOffset() {
          if (this.props.emptyScrollOffset != null) {
            return this.props.emptyScrollOffset;
          }
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          return this.props.emptyScrollOffset || SCROLLBAR_WIDTH || 17;
        }
      }]);
      return InovuaVirtualList2;
    }(_react.Component);
    exports.default = InovuaVirtualList;
    InovuaVirtualList.defaultProps = {
      minRowHeight: 20,
      nativeScroll: false,
      shouldAllowScrollbars: function shouldAllowScrollbars() {
        return true;
      },
      rafOnResize: false,
      theme: "default-light",
      showEmptyRows: false,
      showWarnings: !_uglified.default,
      virtualized: true,
      scrollOneDirectionOnly: false,
      useTransformPosition: !IS_EDGE && (0, _src.hasSticky)(),
      useTransformRowPosition: false,
      recycleCoveredRows: true,
      scrollProps: {}
    };
    var propTypes = {
      applyScrollLeft: _propTypes.default.func,
      naturalRowHeight: _propTypes.default.bool,
      count: function count(props2) {
        var count2 = props2.count;
        if (count2 == null) {
          throw new Error('"count" is required!');
        }
        if (typeof count2 != "number") {
          throw new Error('"count" should be a number!');
        }
        if (count2 < 0) {
          throw new Error('"count" should be >= 0!');
        }
      },
      getRowFocusableElements: _propTypes.default.func,
      contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      rowContain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      handleRowKeyDown: _propTypes.default.func,
      rafOnResize: _propTypes.default.bool,
      checkResizeDelay: _propTypes.default.number,
      extraRows: _propTypes.default.number,
      measureSize: _propTypes.default.func,
      minRowHeight: _propTypes.default.number,
      minRowWidth: _propTypes.default.number,
      nativeScroll: _propTypes.default.bool,
      onRenderRangeChange: _propTypes.default.func,
      shouldFocusNextRow: _propTypes.default.func,
      onResize: _propTypes.default.func,
      onScrollStart: _propTypes.default.func,
      onScrollbarsChange: _propTypes.default.func,
      onScrollStop: _propTypes.default.func,
      pureRows: _propTypes.default.bool,
      rowHeight: _propTypes.default.number,
      renderRow: _propTypes.default.func.isRequired,
      renderRowContainer: _propTypes.default.func,
      renderSizer: _propTypes.default.func,
      showEmptyRows: _propTypes.default.bool,
      useTransformPosition: _propTypes.default.bool,
      useTransformRowPosition: _propTypes.default.bool,
      scrollProps: _propTypes.default.object,
      showWarnings: _propTypes.default.bool,
      renderView: _propTypes.default.func,
      renderScroller: _propTypes.default.func,
      renderScrollerSpacer: _propTypes.default.func,
      shouldComponentUpdate: _propTypes.default.func,
      shouldPreventDefaultTabKeyOnRow: _propTypes.default.func,
      theme: _propTypes.default.string,
      overscrollBehavior: _propTypes.default.string,
      virtualized: _propTypes.default.bool,
      scrollOneDirectionOnly: _propTypes.default.bool,
      onStickyRowUpdate: _propTypes.default.func,
      stickyRows: _propTypes.default.object,
      recycleCoveredRows: _propTypes.default.bool,
      stickyOffset: _propTypes.default.number,
      enableRowSpan: _propTypes.default.bool,
      rowHeightManager: function rowHeightManager(props2, propName) {
        var value = props2[propName];
        if (!value) {
          return new Error('\n You have to provide a "rowHeightManager" property, which should be an instance of RowHeightManager.\n ');
        }
        if (!(value instanceof _RowHeightManager.default)) {
          return new Error('The "rowHeightManager" property should be an instance of RowHeightManager!');
        }
      }
    };
    exports.propTypes = propTypes;
    InovuaVirtualList.propTypes = propTypes;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/index.js
var require_src20 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/react-virtual-list-pro/src/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "RowHeightManager", {
      enumerable: true,
      get: function get() {
        return _VirtualList.RowHeightManager;
      }
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get() {
        return _VirtualList.getScrollbarWidth;
      }
    });
    Object.defineProperty(exports, "propTypes", {
      enumerable: true,
      get: function get() {
        return _VirtualList.propTypes;
      }
    });
    Object.defineProperty(exports, "shouldComponentUpdate", {
      enumerable: true,
      get: function get() {
        return _VirtualList.shouldComponentUpdate;
      }
    });
    var _VirtualList = _interopRequireWildcard(require_VirtualList());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = _VirtualList.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/renderGroupTitle.js
var require_renderGroupTitle = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/renderGroupTitle.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _react = require_react();
    var _uglified = _interopRequireDefault(require_uglified());
    var emptyObject = {};
    var isValid = function isValid2(value) {
      if (value == null) {
        return true;
      }
      if (Array.isArray(value)) {
        return true;
      }
      var type = (0, _typeof2.default)(value);
      if (type == "string" || type == "number") {
        return true;
      }
      return (0, _react.isValidElement)(value);
    };
    var _default = function _default2(_ref) {
      var cellProps = _ref.cellProps, rowProps = _ref.rowProps;
      var computedLocked = cellProps.computedLocked;
      var data = rowProps.data, _rowProps$groupProps = rowProps.groupProps, groupProps = _rowProps$groupProps === void 0 ? emptyObject : _rowProps$groupProps, hasLockedStart = rowProps.hasLockedStart;
      var renderGroupTitle = computedLocked === "start" || !hasLockedStart && !computedLocked ? groupProps.renderGroupTitle : computedLocked === "end" ? groupProps.renderLockedEndGroupTitle : groupProps.renderUnlockedGroupTitle;
      var groupColId;
      if (rowProps.data.fieldPath && rowProps.data.fieldPath.length) {
        groupColId = rowProps.data.fieldPath[rowProps.data.fieldPath.length - 1];
      }
      groupColId = groupColId || rowProps.data.name || rowProps.data.id;
      var col = rowProps.columnsMap[groupColId];
      if (col && col.renderGroupTitle) {
        return col.renderGroupTitle(rowProps.data.value, rowProps);
      }
      if (renderGroupTitle) {
        return renderGroupTitle(rowProps.data.value, rowProps);
      }
      if (col && col.groupToString) {
        return col.groupToString(rowProps.data.value, {
          data: rowProps.data,
          fieldName: col.name,
          renderGroupTitle: true
        });
      }
      if (computedLocked === "start") {
        if (!_uglified.default && !isValid(data.value)) {
          return 'Invalid group title for column "'.concat(groupColId, '". Use "renderGroupTitle" column prop.');
        }
        return data.value;
      }
      if (!hasLockedStart && !computedLocked) {
        if (!_uglified.default && !isValid(data.value)) {
          return 'Invalid group title for column "'.concat(groupColId, '". Use "renderGroupTitle" column prop.');
        }
        return data.value;
      }
      return null;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/adjustCellProps.js
var require_adjustCellProps = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/adjustCellProps.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _renderGroupTitle = _interopRequireDefault(require_renderGroupTitle());
    var _default = function _default2(cellProps, rowProps) {
      var groupProps = rowProps.groupProps, totalLockedStartWidth = rowProps.totalLockedStartWidth, totalLockedEndWidth = rowProps.totalLockedEndWidth, totalUnlockedWidth = rowProps.totalUnlockedWidth, totalComputedWidth = rowProps.totalComputedWidth, totalColumnCount = rowProps.totalColumnCount, firstLockedEndIndex = rowProps.firstLockedEndIndex, firstUnlockedIndex = rowProps.firstUnlockedIndex, groupColumn = rowProps.groupColumn, hasLockedEnd = rowProps.hasLockedEnd, hasLockedStart = rowProps.hasLockedStart;
      var computedVisibleIndex = cellProps.computedVisibleIndex, computedLocked = cellProps.computedLocked, expandColumnIndex = cellProps.expandColumnIndex;
      var expandColumn = computedVisibleIndex === expandColumnIndex;
      var expandGroupTitle = rowProps.expandGroupTitle;
      if (!hasLockedStart && !hasLockedEnd) {
        expandGroupTitle = true;
      }
      var data = rowProps.data;
      var lockedStart = computedLocked === "start";
      var lockedEnd = computedLocked === "end";
      if (groupProps && computedVisibleIndex < groupProps.depth || expandColumnIndex != null && computedVisibleIndex < expandColumnIndex) {
        cellProps.value = null;
        cellProps.noBackground = true;
        return cellProps;
      }
      if (computedVisibleIndex === (groupProps === null || groupProps === void 0 ? void 0 : groupProps.depth)) {
        cellProps.value = null;
        cellProps.collapsed = groupProps.collapsed;
        cellProps.textAlign = "center";
        cellProps.noBackground = false;
        cellProps.firstInSection = true;
        return cellProps;
      }
      if (computedVisibleIndex === (groupProps === null || groupProps === void 0 ? void 0 : groupProps.depth) + 1 || expandColumn) {
        var remainingWidth = lockedStart ? totalLockedStartWidth : totalComputedWidth - totalLockedEndWidth;
        if (expandGroupTitle || expandColumn) {
          remainingWidth = totalComputedWidth;
          cellProps.last = true;
          cellProps.computedColspan = Math.max(totalColumnCount - computedVisibleIndex, 1);
        } else {
          cellProps.computedColspan = Math.max(lockedStart ? firstUnlockedIndex - computedVisibleIndex : lockedEnd ? totalColumnCount - computedVisibleIndex : firstLockedEndIndex - computedVisibleIndex, 1);
        }
        cellProps.lastInSection = true;
        cellProps.noBackground = false;
        cellProps.computedWidth = remainingWidth - cellProps.computedOffset;
        if (!expandColumn) {
          cellProps.value = (0, _renderGroupTitle.default)({
            cellProps,
            rowProps,
            groupProps
          });
        }
        cellProps.zIndex = 1;
        cellProps.textAlign = "start";
        if (cellProps.render) {
          if (!expandColumn) {
            cellProps.render = function() {
              return cellProps.value;
            };
          }
        }
        return cellProps;
      }
      if (lockedStart) {
        cellProps.hidden = true;
      } else {
        var fakeHidden = lockedEnd ? computedVisibleIndex !== firstLockedEndIndex : computedVisibleIndex !== firstUnlockedIndex;
        if (!cellProps.hidden) {
          cellProps.textAlign = "start";
          cellProps.value = fakeHidden ? null : (0, _renderGroupTitle.default)({
            cellProps,
            rowProps,
            groupProps
          });
          if (cellProps.render) {
            cellProps.render = function() {
              return cellProps.value;
            };
          }
          cellProps.computedWidth = lockedEnd ? totalLockedEndWidth : totalUnlockedWidth;
          if (!lockedEnd && computedVisibleIndex >= firstUnlockedIndex + 1) {
            cellProps.hidden = true;
          }
          cellProps.firstInSection = true;
          cellProps.last = hasLockedEnd ? lockedEnd : true;
          cellProps.lastInSection = true;
          cellProps.computedColspan = Math.max(lockedEnd ? totalColumnCount - computedVisibleIndex : firstLockedEndIndex - computedVisibleIndex, 1);
        }
      }
      return cellProps;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/usePrevious.js
var require_usePrevious = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/usePrevious.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = require_react();
    var usePrevious = function usePrevious2(value, initialValue) {
      var ref = (0, _react.useRef)(initialValue);
      (0, _react.useEffect)(function() {
        ref.current = value;
      });
      return ref.current;
    };
    var _default = usePrevious;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/Row.js
var require_Row2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/Row.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    var _shallowequal = _interopRequireWildcard(require_shallowequal2());
    var _join = _interopRequireDefault(require_join4());
    var _clamp = _interopRequireDefault(require_clamp());
    var _Cell = _interopRequireDefault(require_Cell());
    var _renderCellsMaybeLocked = _interopRequireDefault(require_renderCellsMaybeLocked());
    var _adjustCellProps = _interopRequireDefault(require_adjustCellProps());
    var _usePrevious = _interopRequireDefault(require_usePrevious());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var CLASS_NAME = "InovuaReactDataGrid__row";
    var skipSelect = function skipSelect2(event2) {
      event2.nativeEvent.skipSelect = true;
    };
    var getValueForPivotColumn = function getValueForPivotColumn2(item, path) {
      return path.reduce(function(acc, field, index2) {
        if (!acc || acc[field] == null) {
          return null;
        }
        if (index2 === path.length - 1) {
          return acc[field];
        }
        return acc[field].pivotSummary || acc[field].values;
      }, item);
    };
    var getValueForPivotColumnSummary = function getValueForPivotColumnSummary2(item, _ref) {
      var path = _ref.pivotSummaryPath;
      var i = 0;
      var root = item;
      var current;
      while ((current = path[i]) && root) {
        if (!root.pivotSummary) {
          return null;
        }
        root = root.pivotSummary[current.value];
        i++;
      }
      if (root && root.pivotColumnSummary) {
        return root.pivotColumnSummary[path[path.length - 1].field];
      }
      return null;
    };
    var DataGridRow = _react.default.forwardRef(function(props2, ref) {
      var cells = (0, _react.useRef)([]);
      var cellRef = (0, _react.useCallback)(function(c) {
        if (!c) {
          return;
        }
        cells.current.push(c);
      }, []);
      var domRef = (0, _react.useRef)(null);
      var columnRenderStartIndex = (0, _react.useRef)(0);
      var hasBorderTop = (0, _react.useRef)(false);
      var hasBorderBottom = (0, _react.useRef)(false);
      var maxRowspan = (0, _react.useRef)(1);
      var scrollingInProgress = (0, _react.useRef)(false);
      var scrollingDirection = (0, _react.useRef)("vertical");
      var cleanupCells = (0, _react.useCallback)(function() {
        cells.current = cells.current.filter(Boolean);
        return cells.current;
      }, []);
      var getCells = (0, _react.useCallback)(function() {
        return cells.current;
      }, []);
      var prevColumnRenderCount = (0, _usePrevious.default)(props2.columnRenderCount, props2.columnRenderCount);
      if (props2.columnRenderCount < prevColumnRenderCount) {
        cleanupCells();
      }
      var getDOMNode = (0, _react.useCallback)(function() {
        return domRef.current;
      }, []);
      var setActiveRowRef = function setActiveRowRef2() {
        props2.activeRowRef.current = {
          instance: {
            hasBorderBottom: hasBorderBottom.current,
            hasBorderTop: hasBorderTop.current,
            props: props2
          },
          node: getDOMNode()
        };
      };
      if (props2.active) {
        setActiveRowRef();
      }
      (0, _react.useEffect)(function() {
        if (props2.columnRenderStartIndex) {
          setColumnRenderStartIndex(props2.columnRenderStartIndex);
        }
        return function() {
          cells.current = [];
        };
      }, []);
      var prevRowIndex = (0, _usePrevious.default)(props2.rowIndex, props2.rowIndex);
      var prevEditing = (0, _usePrevious.default)(props2.editing, props2.editing);
      var prevActive = (0, _usePrevious.default)(props2.active, props2.active);
      (0, _react.useEffect)(function() {
        if (props2.groupProps && props2.rowIndex !== prevRowIndex) {
          fixForColspan();
        }
        if (props2.editing !== prevEditing) {
          updateEditCell();
        }
        if (!prevActive && props2.active) {
          setActiveRowRef();
        }
      });
      var onCellUnmount = (0, _react.useCallback)(function(_cellProps, cell) {
        if (cells.current) {
          cells.current = cells.current.filter(function(c) {
            return c !== cell;
          });
        }
      }, []);
      var orderCells = (0, _react.useCallback)(function() {
        var cells2 = cleanupCells();
        var sortedProps = cells2.map(function(c) {
          return c.getProps();
        }).sort(function(p1, p2) {
          return p1.index - p2.index;
        });
        cells2.sort(function(cell1, cell2) {
          return cell1.props.renderIndex - cell2.props.renderIndex;
        });
        cells2.forEach(function(c, i) {
          c.setStateProps(sortedProps[i]);
        });
      }, [cleanupCells]);
      var updateEditCell = (0, _react.useCallback)(function() {
        var cells2 = getCells();
        var editColumnIndex = props2.editColumnIndex;
        for (var i = 0, len = cells2.length, cell; i < len; i++) {
          cell = cells2[i];
          if (getCellIndex(cell) === editColumnIndex) {
            setCellIndex(cell, editColumnIndex);
          }
          if (cell.getProps().inEdit) {
            setCellIndex(cell, getCellIndex(cell));
          }
        }
      }, [props2.editColumnIndex]);
      var fixForColspan = (0, _react.useCallback)(function() {
        if (props2.computedHasColSpan) {
          setColumnRenderStartIndex(columnRenderStartIndex.current);
        }
      }, [props2.computedHasColSpan]);
      var setScrolling = (0, _react.useCallback)(function(scrolling) {
        var node = getDOMNode() || domRef.current;
        var scrollingDir = scrollingDirection.current;
        if (scrolling !== false) {
          scrollingDirection.current = scrolling;
        }
        var oldScrollingInProgress = scrollingInProgress.current;
        scrollingDirection.current = scrollingDir;
        scrollingInProgress.current = scrolling ? true : false;
        if (!node) {
          return;
        }
        if (oldScrollingInProgress !== scrollingInProgress.current) {
          var _className = "".concat(CLASS_NAME, "--scrolling");
          if (scrollingInProgress.current) {
            node.classList.add(_className);
          } else {
            node.classList.remove(_className);
          }
        }
        return;
      }, []);
      var renderRowDetails = (0, _react.useCallback)(function(rowDetailsInfo2) {
        if (props2.computedRenderRowDetails) {
          return props2.computedRenderRowDetails(rowDetailsInfo2);
        }
        return "Please specify `renderRowDetails`";
      }, []);
      var onContextMenu = (0, _react.useCallback)(function(event2) {
        var passedProps2 = props2.passedProps, onRowContextMenu = props2.onRowContextMenu;
        if (onRowContextMenu) {
          onRowContextMenu(props2, event2);
        }
        if (passedProps2 && passedProps2.onContextMenu) {
          passedProps2.onContextMenu(event2, props2);
        }
      }, [props2.passedProps, props2.passedProps.onContextMenu, props2.onRowContextMenu]);
      var setCellIndex = (0, _react.useCallback)(function(cell, index2, cellProps) {
        cellProps = cellProps || (props2.computedHasColSpan ? getPropsForCells().slice(index2, index2 + 1)[0] : getPropsForCells(index2, index2)[0]);
        cell.setStateProps(cellProps);
      }, [props2.computedHasColSpan]);
      var getCellIndex = (0, _react.useCallback)(function(cell) {
        return cell.getProps().computedVisibleIndex;
      }, []);
      var sortCells = (0, _react.useCallback)(function(cells2) {
        return cells2.sort(function(cell1, cell2) {
          return getCellIndex(cell1) - getCellIndex(cell2);
        });
      }, []);
      var getCellAt = (0, _react.useCallback)(function(index2) {
        return getCells().filter(function(c) {
          return c.getProps().computedVisibleIndex === index2;
        })[0];
      }, []);
      var getCellById = (0, _react.useCallback)(function(id2) {
        return getCells().filter(function(c) {
          return c.getProps().id === id2;
        })[0];
      }, []);
      var getSortedCells = (0, _react.useCallback)(function() {
        return sortCells(getCells().slice());
      }, []);
      var getGaps = (0, _react.useCallback)(function(startIndex, endIndex) {
        var visibleCellPositions = {};
        var sortedCells = getSortedCells();
        sortedCells.forEach(function(cell) {
          var cellProps = cell.getProps();
          if (cellProps.computedLocked) {
            return;
          }
          var computedVisibleIndex = cellProps.computedVisibleIndex, computedColspan = cellProps.computedColspan, groupProps2 = cellProps.groupProps;
          if (groupProps2 && computedVisibleIndex <= groupProps2.depth + 1) {
            return;
          }
          visibleCellPositions[computedVisibleIndex] = true;
          if (computedColspan) {
            for (var i = 0; i < computedColspan; i++) {
              visibleCellPositions[computedVisibleIndex + i] = true;
            }
          }
        });
        var gaps = [];
        for (; startIndex <= endIndex; startIndex++) {
          if (!visibleCellPositions[startIndex]) {
            gaps.push(startIndex);
          }
        }
        return gaps;
      }, []);
      var getVirtualizeColumns = (0, _react.useCallback)(function() {
        return props2.virtualizeColumns;
        return scrollingDirection.current !== "horizontal" ? props2.virtualizeColumns : false;
      }, [props2.virtualizeColumns]);
      var toggleRowExpand = (0, _react.useCallback)(function(rowIndex) {
        if (typeof rowIndex !== "number") {
          rowIndex = props2.realIndex;
        }
        props2.toggleRowExpand(rowIndex);
      }, [props2.realIndex, props2.toggleRowExpand]);
      var toggleNodeExpand = (0, _react.useCallback)(function(rowIndex) {
        if (typeof rowIndex !== "number") {
          rowIndex = props2.realIndex;
        }
        props2.toggleNodeExpand(rowIndex);
      }, [props2.realIndex, props2.toggleNodeExpand]);
      var loadNodeAsync = (0, _react.useCallback)(function() {
        var _props$loadNodeAsync;
        (_props$loadNodeAsync = props2.loadNodeAsync) === null || _props$loadNodeAsync === void 0 ? void 0 : _props$loadNodeAsync.call(props2, props2.data);
      }, [props2.loadNodeAsync, props2.data]);
      var isRowExpandable = (0, _react.useCallback)(function(rowIndex) {
        if (typeof rowIndex !== "number") {
          rowIndex = props2.realIndex;
        }
        return props2.isRowExpandableAt(rowIndex);
      }, [props2.realIndex, props2.isRowExpandableAt]);
      var setRowExpanded = (0, _react.useCallback)(function(expanded2, _) {
        var rowIndex = props2.realIndex;
        var _expanded = expanded2;
        if (typeof expanded2 === "number") {
          rowIndex = expanded2;
          _expanded = _;
        }
        props2.setRowExpanded(rowIndex, _expanded);
      }, [props2.realIndex, props2.setRowExpanded]);
      var getCurrentGaps = function getCurrentGaps2() {
      };
      var setColumnRenderStartIndex = (0, _react.useCallback)(function(columnStartIndex) {
        if (columnRenderStartIndex.current === columnStartIndex) {
          return;
        }
        columnRenderStartIndex.current = columnStartIndex;
        if (getVirtualizeColumns() === false) {
          return;
        }
        var newCellProps;
        var renderRange;
        var cellPropsAt;
        if (props2.computedHasColSpan) {
          newCellProps = getPropsForCells();
          renderRange = getColumnRenderRange(newCellProps);
          cellPropsAt = function cellPropsAt2(index2) {
            return newCellProps[index2];
          };
        } else {
          var _renderRange, _renderRange2;
          renderRange = getColumnRenderRange();
          newCellProps = getPropsForCells((_renderRange = renderRange) === null || _renderRange === void 0 ? void 0 : _renderRange.start, (((_renderRange2 = renderRange) === null || _renderRange2 === void 0 ? void 0 : _renderRange2.end) || 0) + 1);
          cellPropsAt = function cellPropsAt2(index2) {
            return newCellProps.filter(function(cellProps) {
              return cellProps.computedVisibleIndex === index2;
            })[0];
          };
        }
        if (!renderRange) {
          return;
        }
        var _renderRange3 = renderRange, start = _renderRange3.start, end = _renderRange3.end;
        var gaps = getGaps(start, end);
        if (!gaps.length) {
          return;
        }
        var gapsMap = gaps.reduce(function(acc, gapIndex) {
          acc[gapIndex] = true;
          return acc;
        }, {});
        var tempCellMap = {};
        var calls = [];
        getCells().forEach(function(cell) {
          var cellProps = cell.getProps();
          var groupProps2 = cellProps.groupProps, cellIndex = cellProps.computedVisibleIndex, computedColspan = cellProps.computedColspan, computedLocked = cellProps.computedLocked;
          if (computedLocked) {
            return;
          }
          if (!props2.groupColumn && groupProps2 && cellIndex <= groupProps2.depth + 1) {
            return;
          }
          var outside = cellIndex < start || cellIndex > end || cellIndex === void 0;
          if (outside && computedColspan) {
            var endCellIndex = cellIndex + (computedColspan - 1);
            outside = cellIndex < start && endCellIndex < start || cellIndex > end;
          }
          var outOfView = outside || tempCellMap[cellIndex] || gapsMap[cellIndex];
          tempCellMap[cellIndex] = true;
          var newIndex;
          if (outOfView && gaps.length) {
            newIndex = gaps[gaps.length - 1];
            calls.push([cell, newIndex]);
            gaps.length -= 1;
          }
        });
        calls.forEach(function(call) {
          var cell = call[0];
          var newIndex = call[1];
          setCellIndex(cell, newIndex, cellPropsAt(newIndex));
        });
      }, [props2.columnRenderStartIndex, props2.computedHasColSpan, props2.columnRenderCount, props2.virtualizeColumns]);
      var propsRef = (0, _react.useRef)(props2);
      propsRef.current = props2;
      var lastDataSource = (0, _usePrevious.default)(propsRef.current.dataSourceArray, propsRef.current.dataSourceArray);
      var lastColumns = (0, _usePrevious.default)(propsRef.current.columns, propsRef.current.columns);
      var getPropsForCells = function getPropsForCells2(startIndex, endIndex) {
        var _columns$filter$;
        var props3 = propsRef.current;
        var initialColumns = props3.columns;
        var columns2 = initialColumns;
        var hasLockedStart2 = props3.hasLockedStart, data2 = props3.data, onGroupToggle = props3.onGroupToggle, computedPivot2 = props3.computedPivot, rowHeight2 = props3.rowHeight, remoteRowIndex2 = props3.remoteRowIndex, initialRowHeight2 = props3.initialRowHeight, lastLockedStartIndex = props3.lastLockedStartIndex, lastLockedEndIndex = props3.lastLockedEndIndex, lastUnlockedIndex = props3.lastUnlockedIndex, minRowHeight = props3.minRowHeight, realIndex2 = props3.realIndex, showHorizontalCellBorders2 = props3.showHorizontalCellBorders, showVerticalCellBorders = props3.showVerticalCellBorders, empty2 = props3.empty, treeColumn = props3.treeColumn, groupColumn2 = props3.groupColumn, totalDataCount = props3.totalDataCount, depth = props3.depth, dataSourceArray2 = props3.dataSourceArray, computedGroupBy = props3.computedGroupBy, groupProps2 = props3.groupProps, summaryProps2 = props3.summaryProps, indexInGroup2 = props3.indexInGroup, firstUnlockedIndex = props3.firstUnlockedIndex, firstLockedEndIndex = props3.firstLockedEndIndex, selectAll = props3.selectAll, deselectAll = props3.deselectAll, columnUserSelect = props3.columnUserSelect, multiSelect = props3.multiSelect, selection = props3.selection, setRowSelected = props3.setRowSelected, computedRowExpandEnabled2 = props3.computedRowExpandEnabled, rtl2 = props3.rtl, lastRow = props3.last, computedCellSelection = props3.computedCellSelection, lastNonEmpty = props3.lastNonEmpty, maxVisibleRows = props3.maxVisibleRows, onCellClick = props3.onCellClick, editStartEvent = props3.editStartEvent, naturalRowHeight2 = props3.naturalRowHeight, renderNodeTool = props3.renderNodeTool, computedTreeEnabled = props3.computedTreeEnabled, rowExpanded = props3.expanded, expandGroupTitle = props3.expandGroupTitle, expandColumnFn = props3.expandColumn, onCellSelectionDraggerMouseDown = props3.onCellSelectionDraggerMouseDown, onCellMouseDown = props3.onCellMouseDown, onCellEnter = props3.onCellEnter, computedCellMultiSelectionEnabled = props3.computedCellMultiSelectionEnabled, getCellSelectionKey = props3.getCellSelectionKey, lastCellInRange = props3.lastCellInRange, computedRowspans = props3.computedRowspans, renderIndex = props3.renderIndex, nativeScroll2 = props3.nativeScroll, onDragRowMouseDown = props3.onDragRowMouseDown, theme = props3.theme, onContextMenu2 = props3.onContextMenu, setActiveIndex = props3.setActiveIndex, renderTreeCollapseTool = props3.renderTreeCollapseTool, renderTreeExpandTool = props3.renderTreeExpandTool, renderGroupCollapseTool = props3.renderGroupCollapseTool, renderGroupExpandTool = props3.renderGroupExpandTool, renderTreeLoadingTool = props3.renderTreeLoadingTool, onColumnMouseEnter = props3.onColumnMouseEnter, onColumnMouseLeave = props3.onColumnMouseLeave, columnIndexHovered = props3.columnIndexHovered, computedEnableColumnHover = props3.computedEnableColumnHover, columnHoverClassName = props3.columnHoverClassName, enableColumnAutosize = props3.enableColumnAutosize, renderRowDetailsExpandIcon = props3.renderRowDetailsExpandIcon, renderRowDetailsCollapsedIcon = props3.renderRowDetailsCollapsedIcon, disabledRow2 = props3.disabledRow, onCellDoubleClick = props3.onCellDoubleClick, onCellBulkUpdateMouseDown = props3.onCellBulkUpdateMouseDown, onCellBulkUpdateMouseUp = props3.onCellBulkUpdateMouseUp, bulkUpdateMouseDown = props3.bulkUpdateMouseDown;
        var dataSourceChange = !(0, _shallowequal.default)(lastDataSource, props3.dataSourceArray);
        var columnsChange = !(0, _shallowequal.default)(lastColumns, props3.columns);
        var expandColumnId = expandColumnFn ? expandColumnFn({
          data: data2
        }) : void 0;
        var virtualizeColumns2 = getVirtualizeColumns();
        var visibleColumnCount = columns2.length;
        var expandColumnIndex = expandColumnId ? (_columns$filter$ = columns2.filter(function(c) {
          return c.id === expandColumnId;
        })[0]) === null || _columns$filter$ === void 0 ? void 0 : _columns$filter$.computedVisibleIndex : void 0;
        if (startIndex !== void 0) {
          columns2 = columns2.slice(startIndex, endIndex ? endIndex + 1 : startIndex + 1);
        }
        startIndex = startIndex || 0;
        var hasBorderTopVar = false;
        var hasBorderBottomVar = false;
        var hiddenCells = {};
        var belongsToColspan = {};
        var columnsTillColspanStart = {};
        var lastInGroup2 = indexInGroup2 == props3.groupCount - 1;
        var activeCell = props3.computedActiveCell && getCellSelectionKey ? getCellSelectionKey.apply(void 0, (0, _toConsumableArray2.default)(props3.computedActiveCell)) : null;
        var lastInRange = lastCellInRange || activeCell || null;
        var maxRowspanVar = 1;
        var cellPropsArray = columns2.map(function(column, idx) {
          var theColumnIndex = idx + startIndex;
          var columnProps = column;
          var name = columnProps.name, computedVisibleIndex = columnProps.computedVisibleIndex;
          var value = data2 ? data2[name] : null;
          var rowIndex = realIndex2;
          if (groupProps2 && data2 && data2.groupColumnSummary) {
            value = data2.groupColumnSummary[name];
          }
          if (groupProps2 && data2 && column.groupColumn) {
            value = data2.value;
          }
          if (columnProps.pivotColumnPath) {
            value = data2.pivotSummary ? getValueForPivotColumn(data2.pivotSummary, columnProps.pivotColumnPath) : value;
          }
          if (columnProps.pivotGrandSummaryColumn) {
          } else {
            if (columnProps.pivotSummaryPath) {
              value = data2.pivotSummary ? getValueForPivotColumnSummary(data2, {
                pivotSummaryPath: columnProps.pivotSummaryPath,
                pivotGrandSummaryColumn: columnProps.pivotGrandSummaryColumn
              }) : value;
            }
          }
          var defaults = {};
          if (columnUserSelect !== void 0) {
            defaults.userSelect = columnUserSelect;
          }
          var groupTitleCell = !groupColumn2 && groupProps2 && groupProps2.depth + 1 == computedVisibleIndex;
          var groupExpandCell = !groupColumn2 && groupProps2 && groupProps2.depth == computedVisibleIndex;
          var hidden = groupProps2 ? expandGroupTitle && !groupColumn2 ? computedVisibleIndex > groupProps2.depth + 1 : false : false;
          if (expandColumnIndex != null && computedVisibleIndex > expandColumnIndex) {
            hidden = true;
          }
          var cellProps = _objectSpread(_objectSpread(_objectSpread({}, defaults), columnProps), {}, {
            remoteRowIndex: remoteRowIndex2,
            indexInColumns: theColumnIndex,
            depth,
            expandColumnIndex,
            expandColumn: expandColumnIndex === computedVisibleIndex,
            editStartEvent,
            onCellClick,
            computedRowspan: computedRowspans ? computedRowspans[column.id] : 1,
            groupNestingSize: props3.groupNestingSize,
            treeNestingSize: props3.treeNestingSize,
            data: data2,
            naturalRowHeight: naturalRowHeight2,
            totalDataCount,
            onCellSelectionDraggerMouseDown,
            onCellMouseDown,
            onCellEnter,
            rtl: rtl2,
            computedPivot: computedPivot2,
            selectAll,
            deselectAll,
            selection,
            renderNodeTool,
            onDragRowMouseDown,
            multiSelect,
            treeColumn: treeColumn !== void 0 ? treeColumn === columnProps.id : false,
            setRowSelected,
            setRowExpanded: computedRowExpandEnabled2 ? setRowExpanded : null,
            toggleRowExpand: computedRowExpandEnabled2 ? toggleRowExpand : null,
            toggleNodeExpand: computedTreeEnabled ? toggleNodeExpand : null,
            loadNodeAsync: computedTreeEnabled ? loadNodeAsync : null,
            rowActive: props3.active,
            rowSelected: props3.selected,
            rowExpanded,
            rowIndex,
            rowHeight: rowHeight2,
            groupColumnVisible: !!groupColumn2,
            minRowHeight,
            groupProps: groupProps2,
            summaryProps: summaryProps2,
            empty: empty2,
            computedGroupBy,
            nativeScroll: nativeScroll2,
            computedCellMultiSelectionEnabled,
            lastRowInGroup: lastInGroup2,
            columnIndex: computedVisibleIndex,
            first: computedVisibleIndex == 0,
            last: computedVisibleIndex == visibleColumnCount - 1,
            value,
            virtualizeColumns: virtualizeColumns2,
            hasLockedStart: hasLockedStart2,
            rowIndexInGroup: indexInGroup2,
            rowRenderIndex: renderIndex,
            hidden,
            groupTitleCell,
            groupExpandCell,
            isRowExpandable: computedRowExpandEnabled2 ? isRowExpandable : null,
            tryRowCellEdit,
            tryNextRowEdit,
            onGroupToggle,
            initialRowHeight: rowExpanded ? initialRowHeight2 : rowHeight2,
            theme,
            onContextMenu: onContextMenu2,
            setActiveIndex,
            renderTreeCollapseTool,
            renderTreeExpandTool,
            renderGroupCollapseTool,
            renderGroupExpandTool,
            renderTreeLoadingTool,
            onColumnMouseEnter,
            onColumnMouseLeave,
            columnIndexHovered,
            computedEnableColumnHover,
            columnHoverClassName,
            renderRowDetailsExpandIcon,
            renderRowDetailsCollapsedIcon,
            disabledRow: disabledRow2,
            dataSourceChange,
            columnsChange,
            onDoubleClick: onCellDoubleClick,
            onCellBulkUpdateMouseDown,
            onCellBulkUpdateMouseUp,
            bulkUpdateMouseDown
          });
          if (computedCellSelection && getCellSelectionKey) {
            cellProps.cellSelected = computedCellSelection[getCellSelectionKey(rowIndex, computedVisibleIndex)];
            if (cellProps.cellSelected) {
              cellProps.hasRightSelectedSibling = cellProps.last ? false : computedCellSelection[getCellSelectionKey(rowIndex, computedVisibleIndex + 1)];
              cellProps.hasLeftSelectedSibling = cellProps.first ? false : computedCellSelection[getCellSelectionKey(rowIndex, computedVisibleIndex - 1)];
              cellProps.hasTopSelectedSibling = computedCellSelection[getCellSelectionKey(rowIndex - 1, computedVisibleIndex)];
              cellProps.hasBottomSelectedSibling = computedCellSelection[getCellSelectionKey(rowIndex + 1, computedVisibleIndex)];
            }
          }
          if (getCellSelectionKey && (activeCell || lastInRange)) {
            var cellKey = getCellSelectionKey(rowIndex, computedVisibleIndex);
            if (activeCell && activeCell === cellKey) {
              cellProps.cellActive = true;
            }
            if (lastInRange && lastInRange === cellKey) {
              cellProps.lastInRange = true;
            }
          }
          if (cellProps.visibilityTransitionDuration || cellProps.showTransitionDuration || cellProps.hideTransitionDuration) {
            cellProps.onTransitionEnd = onTransitionEnd(cellProps, columnProps);
          }
          if (props3.editing && props3.editColumnIndex === cellProps.columnIndex) {
            cellProps.inEdit = true;
            cellProps.editValue = props3.editValue;
          }
          if (virtualizeColumns2 && !cellProps.computedLocked || enableColumnAutosize || props3.editable || cellProps.computedEditable) {
            cellProps.cellRef = cellRef;
            cellProps.onUnmount = onCellUnmount;
          }
          var computedLocked = cellProps.computedLocked, colspan = cellProps.colspan;
          var lockedStart = computedLocked === "start";
          var lockedEnd = computedLocked === "end";
          var unlocked = !computedLocked;
          var computedColspan = 1;
          if (typeof colspan === "function") {
            computedColspan = cellProps.computedColspan = Math.max(1, colspan({
              remoteRowIndex: remoteRowIndex2,
              dataSourceArray: dataSourceArray2,
              data: cellProps.data,
              value: cellProps.value,
              rowIndex: cellProps.rowIndex,
              column,
              columns: columns2,
              empty: empty2
            }));
            if (lockedStart) {
              computedColspan = (0, _clamp.default)(computedColspan, 1, Math.max(lastLockedStartIndex - computedVisibleIndex + 1, 1));
            }
            if (lockedEnd) {
              computedColspan = (0, _clamp.default)(computedColspan, 1, Math.max(lastLockedEndIndex - computedVisibleIndex + 1, 1));
            }
            if (unlocked) {
              computedColspan = (0, _clamp.default)(computedColspan, 1, Math.max(lastUnlockedIndex - computedVisibleIndex + 1, 1));
            }
            if (computedColspan > 1) {
              cellProps.computedWidth = columns2.slice(theColumnIndex, theColumnIndex + computedColspan).reduce(function(sum, col) {
                if (col.id !== column.id) {
                  hiddenCells[col.id] = true;
                  if (column.computedLocked === col.computedLocked) {
                    belongsToColspan[col.id] = column.id;
                    columnsTillColspanStart[col.id] = col.computedVisibleIndex - column.computedVisibleIndex;
                  }
                }
                return sum + col.computedWidth;
              }, 0);
            }
          }
          cellProps.lastInSection = lockedStart ? computedVisibleIndex + computedColspan - 1 === firstUnlockedIndex - 1 : lockedEnd ? computedVisibleIndex + computedColspan - 1 === visibleColumnCount - 1 : computedVisibleIndex + computedColspan - 1 === firstLockedEndIndex - 1;
          cellProps.firstInSection = lockedStart ? computedVisibleIndex === 0 : lockedEnd ? computedVisibleIndex === firstLockedEndIndex : computedVisibleIndex === firstUnlockedIndex;
          if (computedGroupBy && !groupColumn2 && !!cellProps.depth) {
            cellProps.noBackground = computedVisibleIndex < cellProps.depth;
          }
          if (hiddenCells[column.id]) {
            cellProps.hidden = true;
          }
          if (belongsToColspan[column.id]) {
            cellProps.computedColspanedBy = belongsToColspan[column.id];
            cellProps.computedColspanToStart = columnsTillColspanStart[column.id];
          }
          if (groupProps2 && !groupColumn2 || expandColumnIndex != null) {
            (0, _adjustCellProps.default)(cellProps, props3);
          }
          if (cellProps.hidden) {
            cellProps.last = false;
            cellProps.lastInSection = false;
          } else {
            cellProps.showBorderLeft = showVerticalCellBorders && computedVisibleIndex > 0;
            cellProps.showBorderBottom = showHorizontalCellBorders2;
            if (!showVerticalCellBorders && computedGroupBy) {
              cellProps.showBorderLeft = computedVisibleIndex > 0 && computedVisibleIndex <= computedGroupBy.length;
            }
            if (computedGroupBy) {
              if (!cellProps.groupProps) {
                cellProps.showBorderBottom = groupColumn2 ? showHorizontalCellBorders2 : computedVisibleIndex >= computedGroupBy.length && showHorizontalCellBorders2;
                var summaryBefore = indexInGroup2 === 0 && !groupColumn2 ? dataSourceArray2[rowIndex - indexInGroup2] : null;
                if (summaryBefore && summaryBefore.__summary && computedVisibleIndex >= computedGroupBy.length) {
                  cellProps.showBorderBottom = false;
                }
              }
              if (!empty2) {
                if (!groupColumn2 && (computedVisibleIndex < computedGroupBy.length || lastInGroup2)) {
                  cellProps.showBorderBottom = rowExpanded;
                }
                if (cellProps.groupProps) {
                  cellProps.showBorderBottom = cellProps.groupProps.collapsed ? !!groupColumn2 : groupColumn2 ? true : computedVisibleIndex > cellProps.groupProps.depth && cellProps.groupProps.depth >= computedGroupBy.length;
                  cellProps.showBorderTop = groupTitleCell || groupExpandCell || !expandGroupTitle && !groupColumn2;
                } else if (indexInGroup2 === 0 && !groupColumn2) {
                  cellProps.showBorderTop = computedVisibleIndex >= computedGroupBy.length;
                }
                if (lastNonEmpty && !lastRow && showHorizontalCellBorders2) {
                  cellProps.showBorderBottom = computedVisibleIndex >= (cellProps.groupProps ? cellProps.groupProps.depth : computedGroupBy.length);
                }
              } else if (rowIndex > 0 && showHorizontalCellBorders2) {
                if (rowIndex === totalDataCount) {
                  cellProps.showBorderBottom = computedVisibleIndex >= computedGroupBy.length;
                } else {
                  cellProps.showBorderBottom = computedGroupBy ? computedVisibleIndex >= computedGroupBy.length : true;
                }
              }
            }
            if (lastRow) {
              cellProps.showBorderBottom = rowIndex < maxVisibleRows - 1 || rowExpanded;
            }
            if (lockedStart && cellProps.lastInSection) {
              cellProps.showBorderRight = true;
            }
            if (lockedEnd && computedVisibleIndex === firstLockedEndIndex) {
              cellProps.showBorderLeft = true;
            }
            if (cellProps.groupProps && computedVisibleIndex >= cellProps.groupProps.depth + 1 && !groupColumn2 && props3.expandGroupTitle) {
              cellProps.showBorderLeft = false;
            }
            if (cellProps.summaryProps) {
              cellProps.showBorderBottom = lastRow;
              cellProps.showBorderTop = computedVisibleIndex > cellProps.summaryProps.depth;
              if (cellProps.summaryProps.position == "start") {
                cellProps.showBorderTop = computedVisibleIndex >= cellProps.summaryProps.depth;
                cellProps.showBorderBottom = false;
              }
              cellProps.showBorderLeft = showVerticalCellBorders ? true : computedVisibleIndex <= cellProps.summaryProps.depth;
              if (computedVisibleIndex > cellProps.summaryProps.depth && computedVisibleIndex <= computedGroupBy.length && !groupColumn2) {
                cellProps.showBorderLeft = false;
              }
              if (computedVisibleIndex === 0) {
                cellProps.showBorderLeft = false;
              }
              cellProps.noBackground = !groupColumn2;
            }
            if (firstUnlockedIndex === computedVisibleIndex && hasLockedStart2) {
              cellProps.showBorderLeft = false;
            }
            if (cellProps.groupSpacerColumn && rowExpanded) {
              cellProps.showBorderBottom = false;
            }
            if (cellProps.last) {
              cellProps.showBorderRight = true;
            }
            var prevColumn = columns2[theColumnIndex - 1];
            var nextColumn = columns2[theColumnIndex + 1];
            if (nextColumn && nextColumn.prevBorderRight !== void 0 && !(lockedStart && cellProps.lastInSection)) {
              cellProps.showBorderRight = nextColumn.prevBorderRight;
            }
            if (prevColumn && prevColumn.nextBorderLeft !== void 0) {
              cellProps.showBorderLeft = prevColumn.nextBorderLeft;
            }
            if (columnProps.showBorderRight !== void 0) {
              cellProps.showBorderRight = columnProps.showBorderRight;
            }
            if (columnProps.showBorderLeft !== void 0) {
              cellProps.showBorderLeft = columnProps.showBorderLeft;
            }
          }
          if (cellProps.computedEditable) {
            cellProps.onEditStopForRow = onCellStopEdit;
            cellProps.onEditStartForRow = onCellStartEdit;
            cellProps.onEditCancelForRow = onCellEditCancel;
            cellProps.onEditValueChangeForRow = onCellEditValueChange;
            cellProps.onEditCompleteForRow = onCellEditComplete;
          }
          hasBorderBottomVar = hasBorderBottomVar || cellProps.showBorderBottom;
          hasBorderTopVar = hasBorderTopVar || cellProps.showBorderTop;
          return cellProps;
        });
        maxRowspan.current = maxRowspanVar;
        if (props3.computedEnableRowspan) {
          props3.setRowSpan && props3.setRowSpan(maxRowspan.current);
        }
        hasBorderTop.current = hasBorderTopVar;
        hasBorderBottom.current = hasBorderBottomVar;
        return cellPropsArray;
      };
      var onCellStopEdit = (0, _react.useCallback)(function(value, cellProps) {
        if (props2.onEditStop) {
          props2.onEditStop({
            value,
            data: cellProps.data,
            rowId: props2.getItemId(cellProps.data),
            columnId: cellProps.id,
            columnIndex: cellProps.computedVisibleIndex,
            rowIndex: cellProps.rowIndex,
            cellProps
          });
        }
      }, [props2.onEditStop]);
      var onCellStartEdit = (0, _react.useCallback)(function(value, cellProps) {
        if (props2.onEditStart) {
          props2.onEditStart({
            data: cellProps.data,
            value,
            rowId: props2.getItemId(cellProps.data),
            columnId: cellProps.id,
            columnIndex: cellProps.computedVisibleIndex,
            rowIndex: cellProps.rowIndex,
            cellProps
          });
        }
      }, [props2.onEditStart]);
      var onCellEditCancel = (0, _react.useCallback)(function(cellProps) {
        if (props2.onEditCancel) {
          props2.onEditCancel({
            data: cellProps.data,
            rowId: props2.getItemId(cellProps.data),
            columnIndex: cellProps.computedVisibleIndex,
            columnId: cellProps.id,
            rowIndex: cellProps.rowIndex,
            cellProps
          });
        }
      }, [props2.onEditCancel]);
      var onCellEditValueChange = (0, _react.useCallback)(function(value, cellProps) {
        if (props2.onEditValueChange) {
          props2.onEditValueChange({
            value,
            data: cellProps.data,
            rowId: props2.getItemId(cellProps.data),
            columnId: cellProps.id,
            columnIndex: cellProps.computedVisibleIndex,
            rowIndex: cellProps.rowIndex,
            cellProps
          });
        }
      }, [props2.onEditValueChange]);
      var onCellEditComplete = (0, _react.useCallback)(function(value, cellProps) {
        if (props2.onEditComplete) {
          props2.onEditComplete({
            value,
            data: cellProps.data,
            rowId: props2.getItemId(cellProps.data),
            columnId: cellProps.id,
            columnIndex: cellProps.computedVisibleIndex,
            rowIndex: cellProps.rowIndex,
            cellProps
          });
        }
      }, [props2.onEditComplete]);
      var tryRowCellEdit = (0, _react.useCallback)(function(editIndex) {
        var dir = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        var isEnterNavigation = arguments.length > 2 ? arguments[2] : void 0;
        var cols = props2.columns;
        var col;
        var colIndex;
        if (!dir) {
          dir = 1;
        }
        dir = dir == 1 ? 1 : -1;
        var currentIndex = dir == 1 ? 0 : cols.length - 1;
        var foundCols = [];
        while (cols[currentIndex]) {
          col = cols[currentIndex];
          if (col.editable || props2.editable && col.editable !== false) {
            colIndex = col.computedVisibleIndex;
            if (colIndex == editIndex) {
              foundCols.push(col);
            } else {
              if (dir < 0) {
                if (colIndex < editIndex) {
                  foundCols.push(col);
                }
              } else if (dir > 0) {
                if (colIndex > editIndex) {
                  foundCols.push(col);
                }
              }
            }
          }
          currentIndex += dir;
        }
        if (!foundCols.length) {
          tryNextRowEdit(dir, isEnterNavigation ? editIndex : dir > 0 ? 0 : props2.columns.length - 1);
          return Promise.reject(null);
        }
        foundCols.sort(function(a, b) {
          return dir > 0 ? a - b : b - a;
        });
        return new Promise(function(resolve, reject) {
          var startEdit = function startEdit2(cols2) {
            var index2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
            props2.currentEditCompletePromise.current.then(function() {
              var errBack = function errBack2() {
                isEnterNavigation ? tryNextRowEdit(dir, editIndex, true) : startEdit2(cols2, index2 + 1);
              };
              var col2 = cols2[index2];
              if (!col2) {
                tryNextRowEdit(dir, isEnterNavigation ? editIndex : dir > 0 ? 0 : props2.columns.length - 1);
                return reject("column not found");
              }
              var cell = getCellById(col2.id);
              if (!cell) {
                if (props2.scrollToColumn) {
                  props2.scrollToColumn(col2.id, void 0, function() {
                    setTimeout(function() {
                      startEdit2(cols2, index2);
                    }, 20);
                  });
                }
                return;
              }
              setTimeout(function() {
                return cell.startEdit && cell.startEdit(void 0, errBack).then(resolve).catch(errBack);
              }, 0);
            }).catch(function(error) {
              return reject(error);
            });
            return;
          };
          startEdit(foundCols, 0);
        });
      }, [props2.columns, props2.editable, props2.currentEditCompletePromise, props2.rowIndex, props2.scrollToColumn]);
      var tryNextRowEdit = (0, _react.useCallback)(function(dir, columnIndex, isEnterNavigation) {
        if (props2.scrollToIndexIfNeeded) {
          props2.scrollToIndexIfNeeded(props2.rowIndex + 2 * dir, {
            direction: dir == -1 ? "top" : "bottom"
          }, function() {
            if (props2.tryNextRowEdit) {
              props2.tryNextRowEdit(props2.rowIndex + dir, dir, columnIndex, isEnterNavigation);
            }
          });
        }
      }, [props2.rowIndex, props2.scrollToIndexIfNeeded, props2.tryNextRowEdit]);
      var onTransitionEnd = (0, _react.useCallback)(function(cellProps, columnProps, e) {
        e.stopPropagation();
        if (columnProps.onTransitionEnd) {
          columnProps.onTransitionEnd(e);
        }
        if (props2.onTransitionEnd) {
          props2.onTransitionEnd(e, cellProps);
        }
      }, [props2.onTransitionEnd]);
      var getColumnRenderRange = (0, _react.useCallback)(function(cellProps) {
        var virtualizeColumns2 = getVirtualizeColumns();
        if (!virtualizeColumns2) {
          return null;
        }
        var minStartIndex = props2.lockedStartColumns.length ? props2.lockedStartColumns.length : props2.groupProps && !props2.groupColumn ? props2.groupProps.depth + 2 : 0;
        var maxEndIndex = props2.columns.length - props2.lockedEndColumns.length - 1;
        var columnStartIndex = columnRenderStartIndex.current == null ? props2.columnRenderStartIndex || 0 : columnRenderStartIndex.current;
        columnStartIndex = Math.max(columnStartIndex, minStartIndex);
        var fixStartIndexForColspan = function fixStartIndexForColspan2() {
          if (cellProps) {
            while (cellProps[columnStartIndex].computedColspanedBy) {
              columnStartIndex--;
            }
          }
        };
        if (props2.columnRenderCount != null) {
          var columnRenderEndIndex = columnStartIndex + props2.columnRenderCount;
          columnRenderEndIndex = Math.min(columnRenderEndIndex, maxEndIndex);
          if (columnRenderEndIndex - props2.columnRenderCount != columnStartIndex) {
            columnStartIndex = Math.max(columnRenderEndIndex - props2.columnRenderCount, minStartIndex);
          }
          if (columnRenderEndIndex < 0) {
            return {
              start: 0,
              end: 0
            };
          }
          fixStartIndexForColspan();
          return {
            start: columnStartIndex,
            end: columnRenderEndIndex
          };
        }
        return null;
      }, [props2.virtualizeColumns, props2.columnRenderCount, props2.lockedStartColumns, props2.lockedEndColumns, props2.groupColumn, props2.groupProps, props2.columnRenderStartIndex, props2.columns]);
      var expandRangeWithColspan = (0, _react.useCallback)(function(range, cellProps) {
        var extraNeededColumns = cellProps.reduce(function(total, cellProps2) {
          return total + (cellProps2.computedColspan > 1 ? cellProps2.computedColspan - 1 : 0);
        }, 0);
        if (!extraNeededColumns) {
          return range;
        }
        if (range.start < props2.firstUnlockedIndex) {
          range.start = props2.firstUnlockedIndex;
        }
        if (range.start > extraNeededColumns) {
          range.start -= extraNeededColumns;
          return range;
        }
        extraNeededColumns -= range.start;
        range.start = 0;
        if (extraNeededColumns) {
          range.end += extraNeededColumns;
        }
        return range;
      }, []);
      var renderRowInstance = function renderRowInstance2(_, __, style2) {
        var scrollLeft2 = props2.scrollLeft, hasLockedStart2 = props2.hasLockedStart, hasLockedEnd2 = props2.hasLockedEnd, lockedStartColumns = props2.lockedStartColumns, lockedEndColumns = props2.lockedEndColumns, computedHasColSpan = props2.computedHasColSpan, groupProps2 = props2.groupProps, columns2 = props2.columns;
        var virtualizeColumns2 = getVirtualizeColumns();
        var cellProps;
        if (!virtualizeColumns2) {
          cellProps = getPropsForCells();
        } else {
          var lockedStartCellProps = [];
          var lockedEndCellProps = [];
          var groupCellProps = [];
          var renderRange;
          if (computedHasColSpan) {
            cellProps = getPropsForCells();
            if (hasLockedStart2) {
              lockedStartCellProps = cellProps.slice(0, lockedStartColumns.length);
            } else if (groupProps2) {
              groupCellProps = cellProps.slice(0, groupProps2.depth + 2);
            }
            if (hasLockedEnd2) {
              lockedEndCellProps = cellProps.slice(columns2.length - lockedEndColumns.length, columns2.length);
            }
            renderRange = getColumnRenderRange(cellProps);
            if (renderRange) {
              renderRange = expandRangeWithColspan(renderRange, cellProps);
              cellProps = cellProps.slice(renderRange.start, renderRange.end + 1);
            }
          } else {
            var _renderRange4, _renderRange5;
            renderRange = getColumnRenderRange();
            cellProps = getPropsForCells((_renderRange4 = renderRange) === null || _renderRange4 === void 0 ? void 0 : _renderRange4.start, ((_renderRange5 = renderRange) === null || _renderRange5 === void 0 ? void 0 : _renderRange5.end) || 0);
            if (hasLockedStart2) {
              lockedStartCellProps = getPropsForCells(0, lockedStartColumns.length - 1);
            } else if (groupProps2) {
              groupCellProps = getPropsForCells(0, groupProps2.depth + 2 - 1);
            }
            if (hasLockedEnd2) {
              lockedEndCellProps = getPropsForCells(lockedEndColumns[0].computedVisibleIndex, columns2.length - 1);
            }
          }
          if (hasLockedStart2) {
            cellProps = [].concat((0, _toConsumableArray2.default)(lockedStartCellProps), (0, _toConsumableArray2.default)(cellProps));
          } else if (groupProps2) {
            cellProps = [].concat((0, _toConsumableArray2.default)(groupCellProps), (0, _toConsumableArray2.default)(cellProps));
          }
          if (hasLockedEnd2) {
            var _cellProps2;
            (_cellProps2 = cellProps).push.apply(_cellProps2, (0, _toConsumableArray2.default)(lockedEndCellProps));
          }
        }
        var result = cellProps.map(function(cProps, index2) {
          var cell;
          var key = index2;
          if (!virtualizeColumns2) {
            key = cProps.id || index2;
          }
          if (props2.cellFactory) {
            cell = props2.cellFactory(cProps);
          }
          if (cell === void 0) {
            cell = _react.default.createElement(_Cell.default, _objectSpread(_objectSpread({}, cProps), {}, {
              timestamp: Date.now(),
              cellRef: cProps.cellRef ? cProps.cellRef : null,
              key
            }));
          }
          return cell;
        });
        return (0, _renderCellsMaybeLocked.default)(result, props2, scrollLeft2, void 0, style2);
      };
      var onClick = (0, _react.useCallback)(function(event2) {
        if (props2.computedTreeEnabled && props2.expandOnMouseDown) {
          toggleNodeExpand(props2.rowIndex);
        }
        if (props2.onClick) {
          props2.onClick(event2, props2);
        }
        if (props2.passedProps && props2.passedProps.onClick) {
          props2.passedProps.onClick(event2, props2);
        }
      }, [props2.passedProps, props2.computedTreeEnabled, props2.rowIndex, props2.expandOnMouseDown, props2.onClick]);
      var onDoubleClick = (0, _react.useCallback)(function(event2) {
        if (props2.onRowDoubleClick) {
          props2.onRowDoubleClick(event2, props2);
        }
      }, [props2.onRowDoubleClick]);
      var onMouseDown = (0, _react.useCallback)(function(event2) {
        if (props2.onMouseDown) {
          props2.onMouseDown(event2, props2);
        }
      }, [props2.onMouseDown]);
      var onMouseUp = (0, _react.useCallback)(function(event2) {
        if (props2.onMouseUp) {
          props2.onMouseUp(event2);
        }
      }, []);
      (0, _react.useImperativeHandle)(ref, function() {
        return {
          onCellUnmount,
          cleanupCells,
          getDOMNode,
          orderCells,
          updateEditCell,
          fixForColspan,
          setScrolling,
          renderRowDetails,
          onContextMenu,
          setCellIndex,
          getCellIndex,
          sortCells,
          getCellAt,
          getCellById,
          getCells,
          getSortedCells,
          getGaps,
          getVirtualizeColumns,
          toggleRowExpand,
          toggleNodeExpand,
          loadNodeAsync,
          isRowExpandable,
          setRowExpanded,
          setColumnRenderStartIndex,
          getPropsForCells,
          onCellStopEdit,
          onCellStartEdit,
          onCellEditCancel,
          onCellEditValueChange,
          onCellEditComplete,
          tryRowCellEdit,
          tryNextRowEdit,
          onTransitionEnd,
          getColumnRenderRange,
          expandRangeWithColspan,
          renderRow,
          onClick,
          onMouseDown,
          getCurrentGaps,
          totalDataCount: props2.totalDataCount,
          rowProps,
          domRef,
          props: props2
        };
      });
      var rowHeight = props2.rowHeight, initialRowHeight = props2.initialRowHeight, maxRowHeight = props2.maxRowHeight, groupNestingSize = props2.groupNestingSize, summaryProps = props2.summaryProps, data = props2.data, id = props2.id, columns = props2.columns, minWidth = props2.minWidth, maxWidth = props2.maxWidth, rowStyle = props2.rowStyle, scrollbars = props2.scrollbars, renderRow = props2.renderRow, computedRowExpandEnabled = props2.computedRowExpandEnabled, even = props2.even, odd = props2.odd, active = props2.active, selected = props2.selected, expanded = props2.expanded, passedProps = props2.passedProps, realIndex = props2.realIndex, remoteRowIndex = props2.remoteRowIndex, nativeScroll = props2.nativeScroll, indexInGroup = props2.indexInGroup, naturalRowHeight = props2.naturalRowHeight, rowDetailsStyle = props2.rowDetailsStyle, renderDetailsGrid = props2.renderDetailsGrid, last = props2.last, empty = props2.empty, computedPivot = props2.computedPivot, computedShowZebraRows = props2.computedShowZebraRows, rowDetailsWidth = props2.rowDetailsWidth, availableWidth = props2.availableWidth, groupProps = props2.groupProps, groupColumn = props2.groupColumn, dataSourceArray = props2.dataSourceArray, onRenderRow = props2.onRenderRow, shouldRenderCollapsedRowDetails = props2.shouldRenderCollapsedRowDetails, editing = props2.editing, rtl = props2.rtl, sticky = props2.sticky, hasLockedEnd = props2.hasLockedEnd, hasLockedStart = props2.hasLockedStart, showHorizontalCellBorders = props2.showHorizontalCellBorders, disabledRow = props2.disabledRow, rowspanZIndex = props2.rowspanZIndex, focusedRow = props2.focusedRow, rowFocusClassName = props2.rowFocusClassName;
      var rowClassName = props2.rowClassName;
      var virtualizeColumns = getVirtualizeColumns();
      var lastInGroup = indexInGroup == props2.groupCount - 1;
      var hasRowSpan = props2.computedRowspans && Object.keys(props2.computedRowspans).map(function(name) {
        var rowspan = props2.computedRowspans[name];
        return rowspan > 1;
      }).find(function(rowSpan) {
        return rowSpan === true;
      });
      var className = (0, _join.default)(props2.className, CLASS_NAME, scrollingInProgress.current && "".concat(CLASS_NAME, "--scrolling"), empty && "".concat(CLASS_NAME, "--empty"), editing && "".concat(CLASS_NAME, "--editing"), "".concat(CLASS_NAME, "--direction-").concat(rtl ? "rtl" : "ltr"), computedShowZebraRows && even && (!groupProps || computedPivot) && "".concat(CLASS_NAME, "--even"), computedShowZebraRows && odd && (!groupProps || computedPivot) && "".concat(CLASS_NAME, "--odd"), !computedShowZebraRows && !groupProps && "".concat(CLASS_NAME, "--no-zebra"), groupProps && "".concat(CLASS_NAME, "--group-row"), summaryProps && "".concat(CLASS_NAME, "--summary-row"), summaryProps && "".concat(CLASS_NAME, "--summary-position-").concat(summaryProps.position), groupProps && groupProps.collapsed && "".concat(CLASS_NAME, "--collapsed"), selected && "".concat(CLASS_NAME, "--selected"), expanded && "".concat(CLASS_NAME, "--expanded"), hasLockedStart ? "".concat(CLASS_NAME, "--has-locked-start") : "".concat(CLASS_NAME, "--no-locked-start"), hasLockedEnd ? "".concat(CLASS_NAME, "--has-locked-end") : "".concat(CLASS_NAME, "--no-locked-end"), showHorizontalCellBorders && "".concat(CLASS_NAME, "--show-horizontal-borders"), active && "".concat(CLASS_NAME, "--active"), virtualizeColumns && "".concat(CLASS_NAME, "--virtualize-columns"), rowHeight && "".concat(CLASS_NAME, "--rowheight"), naturalRowHeight && "".concat(CLASS_NAME, "--natural-rowheight"), realIndex == 0 && "".concat(CLASS_NAME, "--first"), last && "".concat(CLASS_NAME, "--last"), indexInGroup == 0 && "".concat(CLASS_NAME, "--first-in-group"), lastInGroup && "".concat(CLASS_NAME, "--last-in-group"), disabledRow ? "".concat(CLASS_NAME, "--disabled") : "", focusedRow ? (0, _join.default)("".concat(CLASS_NAME, "--focused"), rowFocusClassName ? rowFocusClassName : "") : "");
      if (passedProps) {
        className = (0, _join.default)(className, selected && passedProps.selectedClassName);
      }
      var style = _objectSpread(_objectSpread({}, props2.style), {}, {
        height: naturalRowHeight ? null : rowHeight,
        width: props2.width,
        minWidth,
        direction: "ltr"
      });
      if (hasRowSpan) {
        style.zIndex = rowspanZIndex;
      }
      if (maxWidth != null) {
        style.maxWidth = maxWidth;
      }
      if (maxRowHeight != null) {
        style.maxHeight = maxRowHeight;
      }
      if (rowStyle) {
        if (typeof rowStyle === "function") {
          var rowStyleResult = rowStyle({
            data,
            props: props2,
            style
          });
          if (rowStyleResult !== void 0) {
            style = _objectSpread(_objectSpread({}, style), rowStyleResult);
          }
        } else {
          style = _objectSpread(_objectSpread({}, style), rowStyle);
        }
      }
      if (rowClassName) {
        if (typeof rowClassName === "function") {
          rowClassName = rowClassName({
            data,
            props: props2,
            className
          });
        }
        if (rowClassName && typeof rowClassName == "string") {
          className = (0, _join.default)(className, rowClassName);
        }
      }
      var rowProps = _objectSpread(_objectSpread(_objectSpread({}, props2), {}, {
        className,
        style,
        ref: domRef
      }, passedProps), {}, {
        onClick: !disabledRow ? onClick : null,
        onDoubleClick: !disabledRow ? onDoubleClick : null,
        onContextMenu: !disabledRow ? onContextMenu : null,
        onMouseUp: !disabledRow ? onMouseUp : null
      });
      rowProps.children = [_react.default.createElement("div", {
        key: "cellWrap",
        className: "InovuaReactDataGrid__row-cell-wrap InovuaReactDataGrid__row-hover-target",
        style: {
          width: props2.width,
          height: naturalRowHeight ? null : rowHeight,
          position: "absolute",
          top: 0,
          left: rtl ? -(props2.emptyScrollOffset || 0) : 0
        }
      }, renderRowInstance(data, columns, style))];
      var groupDepth = groupColumn ? 0 : data && data.__group ? data.depth - 1 : data && data.__summary ? rowProps.summaryProps.depth : props2.depth || 0;
      var activeBordersDiv = sticky ? _react.default.createElement("div", {
        key: "active-row-borders",
        className: (0, _join.default)("".concat(CLASS_NAME, "-active-borders"), hasBorderTop.current && "".concat(CLASS_NAME, "-active-borders--has-border-top"), hasBorderBottom.current && "".concat(CLASS_NAME, "-actived-borders--has-border-bottom"))
      }) : null;
      var shouldRender = expanded || shouldRenderCollapsedRowDetails;
      if (computedRowExpandEnabled && shouldRender && !data.__group) {
        var rowDetailsInfo = {
          data,
          rtl,
          isRowExpandable,
          rowIndex: realIndex,
          remoteRowIndex,
          rowId: props2.getItemId(data),
          rowExpanded: expanded,
          id,
          rowSelected: selected,
          rowActive: active,
          toggleRowExpand,
          setRowExpanded,
          dataSource: dataSourceArray
        };
        var detailsStyle = {
          position: "absolute",
          height: rowHeight - initialRowHeight,
          overflow: renderDetailsGrid ? "visible" : "auto",
          top: initialRowHeight
        };
        if (rtl) {
          detailsStyle.direction = "rtl";
        }
        if (rowDetailsWidth == "max-viewport-width") {
          detailsStyle.width = Math.min(availableWidth, props2.width || maxWidth);
        }
        if (rowDetailsWidth === "min-viewport-width") {
          detailsStyle.width = Math.max(availableWidth, props2.width || maxWidth);
        }
        if (rowDetailsWidth === "viewport-width") {
          detailsStyle.width = availableWidth;
        }
        if (groupDepth) {
          detailsStyle[rtl ? "paddingRight" : "paddingLeft"] = (groupNestingSize || 0) * groupDepth;
        }
        detailsStyle[rtl ? "right" : "left"] = 0;
        if (isNaN(detailsStyle.width)) {
          delete detailsStyle.width;
        }
        if (!expanded) {
          detailsStyle.display = "none";
        }
        if (rowProps.memorizedScrollLeft && rowDetailsWidth !== "min-viewport-width") {
          var scrollLeftMax = rowProps.getScrollLeftMax && rowProps.getScrollLeftMax();
          var scrollLeft = !rtl ? rowProps.memorizedScrollLeft : -(scrollLeftMax - rowProps.memorizedScrollLeft);
          detailsStyle.transform = "translate3d(".concat(scrollLeft, "px, 0px, 0px)");
        }
        if (rowDetailsStyle) {
          if (typeof rowDetailsStyle === "function") {
            var styleResult = rowDetailsStyle(detailsStyle, rowDetailsInfo);
            if (styleResult !== void 0) {
              detailsStyle = styleResult;
            }
          } else {
            detailsStyle = _objectSpread(_objectSpread({}, detailsStyle), rowDetailsStyle);
          }
        }
        var showBorderBottom = !lastInGroup || last;
        if (nativeScroll && last && expanded) {
          showBorderBottom = false;
        }
        rowProps.children.push(_react.default.createElement("div", {
          key: "rowDetails",
          style: detailsStyle,
          onClick: skipSelect,
          className: (0, _join.default)("".concat(CLASS_NAME, "-details"), "".concat(CLASS_NAME, "-details--").concat(rowDetailsWidth), renderDetailsGrid ? "".concat(CLASS_NAME, "-details--details-grid") : null, !nativeScroll || nativeScroll && scrollbars && !scrollbars.vertical || availableWidth > minWidth ? "".concat(CLASS_NAME, "-details--show-border-right") : null, showBorderBottom ? "".concat(CLASS_NAME, "-details--show-border-bottom") : "")
        }, renderRowDetails(rowDetailsInfo)), _react.default.createElement("div", {
          className: "".concat(CLASS_NAME, "-details-special-bottom-border"),
          key: "row-details-special-bottom-border",
          style: (0, _defineProperty2.default)({}, rtl ? "right" : "left", (groupDepth || 0) * groupNestingSize)
        }), groupDepth ? (0, _toConsumableArray2.default)(new Array(groupDepth)).map(function(_, index2) {
          var _style2;
          return _react.default.createElement("div", {
            key: index2,
            className: "".concat(CLASS_NAME, "-details-border"),
            style: (_style2 = {
              height: "100%",
              position: "absolute"
            }, (0, _defineProperty2.default)(_style2, rtl ? "right" : "left", (index2 + 1) * groupNestingSize), (0, _defineProperty2.default)(_style2, "top", 0), _style2)
          });
        }) : null, rowDetailsWidth != "max-viewport-width" ? _react.default.createElement("div", {
          key: "rowDetailsBorder",
          style: (0, _defineProperty2.default)({
            top: initialRowHeight - 1,
            width: availableWidth
          }, rtl ? "right" : "left", (groupDepth || 0) * groupNestingSize),
          className: "".concat(CLASS_NAME, "-details-special-top-border")
        }) : null);
      }
      if (sticky) {
        if (activeBordersDiv) {
          var _style4;
          rowProps.children.push(_react.default.createElement("div", {
            key: "active-row-borders",
            className: "InovuaReactDataGrid__row-active-borders-wrapper",
            style: (_style4 = {
              height: "100%",
              position: "absolute",
              top: 0
            }, (0, _defineProperty2.default)(_style4, rtl ? "right" : "left", (groupNestingSize || 0) * groupDepth), (0, _defineProperty2.default)(_style4, "width", availableWidth - (groupNestingSize || 0) * groupDepth), (0, _defineProperty2.default)(_style4, "pointerEvents", "none"), _style4)
          }, activeBordersDiv));
        }
      }
      var row;
      if (renderRow) {
        row = renderRow(rowProps);
      }
      if (onRenderRow) {
        onRenderRow(rowProps);
      }
      if (row === void 0) {
        row = _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _reactCleanProps.default)(rowProps, DataGridRow.propTypes)), {}, {
          id: null,
          data: null,
          value: null
        }));
      }
      return row;
    });
    var emptyFn = function emptyFn2() {
    };
    DataGridRow.defaultProps = {
      onClick: emptyFn,
      onMouseEnter: emptyFn,
      onMouseLeave: emptyFn,
      onMouseDown: emptyFn,
      columnRenderStartIndex: 0,
      showAllGroupCells: false
    };
    DataGridRow.propTypes = {
      rowActive: _propTypes.default.bool,
      rowSelected: _propTypes.default.bool,
      availableWidth: _propTypes.default.number,
      computedGroupBy: _propTypes.default.array,
      expandGroupTitle: _propTypes.default.bool,
      expandColumn: _propTypes.default.any,
      getCellSelectionKey: _propTypes.default.func,
      depth: _propTypes.default.number,
      columns: _propTypes.default.array,
      columnsMap: _propTypes.default.shape({}),
      active: _propTypes.default.bool,
      computedActiveCell: _propTypes.default.any,
      cellFactory: _propTypes.default.func,
      computedCellMultiSelectionEnabled: _propTypes.default.bool,
      computedCellSelection: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
      columnRenderCount: _propTypes.default.number,
      columnRenderStartIndex: _propTypes.default.number,
      columnUserSelect: _propTypes.default.bool,
      deselectAll: _propTypes.default.func,
      empty: _propTypes.default.bool,
      even: _propTypes.default.bool,
      firstLockedEndIndex: _propTypes.default.number,
      firstLockedStartIndex: _propTypes.default.number,
      firstUnlockedIndex: _propTypes.default.number,
      flex: _propTypes.default.number,
      groupCount: _propTypes.default.number,
      groupNestingSize: _propTypes.default.number,
      treeNestingSize: _propTypes.default.number,
      groupProps: _propTypes.default.object,
      summaryProps: _propTypes.default.object,
      hasLockedEnd: _propTypes.default.bool,
      hasLockedStart: _propTypes.default.bool,
      indexInGroup: _propTypes.default.number,
      last: _propTypes.default.bool,
      lastCellInRange: _propTypes.default.any,
      lastNonEmpty: _propTypes.default.bool,
      lastRowInGroup: _propTypes.default.bool,
      lockedEndColumns: _propTypes.default.array,
      lockedStartColumns: _propTypes.default.array,
      maxRowHeight: _propTypes.default.number,
      minRowHeight: _propTypes.default.number,
      maxVisibleRows: _propTypes.default.number,
      minWidth: _propTypes.default.number,
      multiSelect: _propTypes.default.bool,
      odd: _propTypes.default.bool,
      onArrowDown: _propTypes.default.func,
      onArrowUp: _propTypes.default.func,
      onCellClick: _propTypes.default.func,
      onCellDoubleClick: _propTypes.default.func,
      onRowDoubleClick: _propTypes.default.func,
      onCellEnter: _propTypes.default.func,
      onCellMouseDown: _propTypes.default.func,
      onCellSelectionDraggerMouseDown: _propTypes.default.func,
      onRowContextMenu: _propTypes.default.func,
      passedProps: _propTypes.default.object,
      realIndex: _propTypes.default.number,
      renderIndex: _propTypes.default.number,
      renderRow: _propTypes.default.func,
      onRenderRow: _propTypes.default.func,
      rowHeight: _propTypes.default.number,
      rowExpandHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.func]),
      initialRowHeight: _propTypes.default.number,
      defaultRowHeight: _propTypes.default.number,
      emptyScrollOffset: _propTypes.default.number,
      rowIndex: _propTypes.default.number,
      remoteRowIndex: _propTypes.default.number,
      rowIndexInGroup: _propTypes.default.bool,
      rowStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
      rowClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
      scrollLeft: _propTypes.default.number,
      selectAll: _propTypes.default.func,
      selected: _propTypes.default.bool,
      expanded: _propTypes.default.bool,
      selection: _propTypes.default.any,
      computedRowExpandEnabled: _propTypes.default.bool,
      computedTreeEnabled: _propTypes.default.bool,
      computedRenderRowDetails: _propTypes.default.func,
      isRowExpandableAt: _propTypes.default.func,
      setRowSelected: _propTypes.default.func,
      setRowExpanded: _propTypes.default.func,
      toggleRowExpand: _propTypes.default.func,
      toggleNodeExpand: _propTypes.default.func,
      expandOnMouseDown: _propTypes.default.bool,
      loadNodeAsync: _propTypes.default.func,
      showAllGroupCells: _propTypes.default.bool,
      computedShowCellBorders: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
      showHorizontalCellBorders: _propTypes.default.bool,
      showVerticalCellBorders: _propTypes.default.bool,
      totalColumnCount: _propTypes.default.number,
      totalComputedWidth: _propTypes.default.number,
      totalDataCount: _propTypes.default.number,
      totalLockedEndWidth: _propTypes.default.number,
      totalLockedStartWidth: _propTypes.default.number,
      totalUnlockedWidth: _propTypes.default.number,
      unlockedColumns: _propTypes.default.array,
      virtualizeColumns: _propTypes.default.bool,
      nativeScroll: _propTypes.default.bool,
      shouldRenderCollapsedRowDetails: _propTypes.default.bool,
      rowDetailsStyle: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
      dataSourceArray: _propTypes.default.array,
      getItemId: _propTypes.default.func.isRequired,
      editable: _propTypes.default.bool,
      editing: _propTypes.default.bool,
      editValue: _propTypes.default.any,
      editRowIndex: _propTypes.default.number,
      editColumnIndex: _propTypes.default.number,
      editColumnId: _propTypes.default.any,
      naturalRowHeight: _propTypes.default.bool,
      renderDetailsGrid: _propTypes.default.func,
      scrollToColumn: _propTypes.default.func,
      scrollToIndexIfNeeded: _propTypes.default.func,
      renderNodeTool: _propTypes.default.func,
      computedEnableRowspan: _propTypes.default.bool,
      setRowSpan: _propTypes.default.func,
      treeColumn: _propTypes.default.string,
      scrollbars: _propTypes.default.shape({
        horizontal: _propTypes.default.bool,
        vertical: _propTypes.default.bool
      }),
      rtl: _propTypes.default.bool,
      computedPivot: _propTypes.default.array,
      groupColumnSummaries: _propTypes.default.any,
      groupSummary: _propTypes.default.any,
      groupColumn: _propTypes.default.any,
      lastUnlockedIndex: _propTypes.default.number,
      lastLockedEndIndex: _propTypes.default.number,
      lastLockedStartIndex: _propTypes.default.number,
      computedShowZebraRows: _propTypes.default.bool,
      computedRowspans: _propTypes.default.any,
      editStartEvent: _propTypes.default.string,
      onGroupToggle: _propTypes.default.func,
      onEditStop: _propTypes.default.func,
      onEditStart: _propTypes.default.func,
      onEditCancel: _propTypes.default.func,
      onEditValueChange: _propTypes.default.func,
      onEditComplete: _propTypes.default.func,
      onFilterValueChange: _propTypes.default.func,
      tryNextRowEdit: _propTypes.default.func,
      getScrollLeftMax: _propTypes.default.func,
      activeRowRef: _propTypes.default.any,
      sticky: _propTypes.default.bool,
      edition: _propTypes.default.string,
      computedLicenseValid: _propTypes.default.bool,
      parentGroupDataArray: _propTypes.default.any,
      rowDetailsWidth: _propTypes.default.oneOf(["max-viewport-width", "min-viewport-width", "viewport-width"]),
      memorizedScrollLeft: _propTypes.default.number,
      computedHasColSpan: _propTypes.default.bool,
      onRowReorder: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.bool]),
      onDragRowMouseDown: _propTypes.default.func,
      renderLockedStartCells: _propTypes.default.func,
      renderLockedEndCells: _propTypes.default.func,
      setActiveIndex: _propTypes.default.func,
      renderTreeCollapseTool: _propTypes.default.func,
      renderTreeExpandTool: _propTypes.default.func,
      renderTreeLoadingTool: _propTypes.default.func,
      currentEditCompletePromise: _propTypes.default.any,
      enableColumnAutosize: _propTypes.default.bool,
      columnHoverClassName: _propTypes.default.string,
      computedEnableColumnHover: _propTypes.default.bool,
      onColumnMouseEnter: _propTypes.default.func,
      onColumnMouseLeave: _propTypes.default.func,
      columnIndexHovered: _propTypes.default.number,
      renderRowDetailsExpandIcon: _propTypes.default.func,
      renderRowDetailsCollapsedIcon: _propTypes.default.func,
      renderGroupCollapseTool: _propTypes.default.func,
      renderGroupExpandTool: _propTypes.default.func,
      disabledRow: _propTypes.default.bool,
      rowspanZIndex: _propTypes.default.number,
      onRowFocus: _propTypes.default.func,
      onRowBlur: _propTypes.default.func,
      onRowKeyDown: _propTypes.default.func,
      focusedRow: _propTypes.default.bool,
      rowFocusClassName: _propTypes.default.string,
      onCellBulkUpdateMouseDown: _propTypes.default.func,
      onCellBulkUpdateMouseUp: _propTypes.default.func,
      bulkUpdateMouseDown: _propTypes.default.bool
    };
    var _default = _react.default.memo(DataGridRow, function(prevProps, nextProps) {
      var areEqual = (0, _shallowequal.equalReturnKey)(prevProps, nextProps, {
        computedActiveCell: 1,
        computedActiveIndex: 1,
        columnRenderStartIndex: 1,
        activeRowRef: 1,
        active: 1,
        onKeyDown: 1,
        onFocus: 1,
        setRowSpan: 1,
        passedProps: 1,
        computedRowspans: 1,
        lockedStartColumns: 1,
        selection: 1,
        lockedEndColumns: 1,
        unlockedColumns: 1,
        maxVisibleRows: 1,
        onClick: 1,
        style: 1,
        loadNodeAsync: 1,
        scrollToIndexIfNeeded: 1,
        onColumnMouseEnter: 1,
        onColumnMouseLeave: 1,
        getCellSelectionKey: 1
      });
      if (areEqual.result) {
        if (prevProps.computedActiveCell != nextProps.computedActiveCell) {
          var _ref2 = prevProps.computedActiveCell || [], _ref3 = (0, _slicedToArray2.default)(_ref2, 1), oldRowIndex = _ref3[0];
          var _ref4 = nextProps.computedActiveCell || [], _ref5 = (0, _slicedToArray2.default)(_ref4, 1), newRowIndex = _ref5[0];
          if (oldRowIndex === nextProps.rowIndex || newRowIndex === nextProps.rowIndex) {
            return false;
          }
        }
      }
      if (!areEqual.result) {
        return false;
      }
      if (prevProps.active !== nextProps.active) {
        return false;
      }
      if (JSON.stringify(prevProps.style) !== JSON.stringify(nextProps.style)) {
        return false;
      }
      var prevActiveCellRow, prevActiveColumn;
      var activeCellRow, activeColumn;
      if (prevProps.computedActiveCell) {
        var _prevProps$computedAc = (0, _slicedToArray2.default)(prevProps.computedActiveCell, 2);
        prevActiveCellRow = _prevProps$computedAc[0];
        prevActiveColumn = _prevProps$computedAc[1];
      }
      if (nextProps.computedActiveCell) {
        var _nextProps$computedAc = (0, _slicedToArray2.default)(nextProps.computedActiveCell, 2);
        activeCellRow = _nextProps$computedAc[0];
        activeColumn = _nextProps$computedAc[1];
      }
      if (activeCellRow !== prevActiveCellRow) {
        if (nextProps.rowIndex === activeCellRow || nextProps.rowIndex === prevActiveCellRow) {
          return false;
        }
      } else {
        if (nextProps.rowIndex === activeCellRow && activeColumn !== prevActiveColumn) {
          return false;
        }
      }
      return true;
    });
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/getRowSpans.js
var require_getRowSpans = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/getRowSpans.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(rowProps) {
      var rowSpans = {};
      var data = rowProps.data, rowIndex = rowProps.realIndex, remoteRowIndex = rowProps.remoteRowIndex, columns = rowProps.columns, empty = rowProps.empty, dataSourceArray = rowProps.dataSourceArray;
      columns === null || columns === void 0 ? void 0 : columns.forEach(function(column) {
        var name = column.name;
        var rowspan = column.rowspan;
        var value = data && name ? data[name] : null;
        var computedRowspan = 1;
        if (typeof rowspan === "function") {
          computedRowspan = rowspan({
            dataSourceArray,
            data,
            value,
            remoteRowIndex,
            rowIndex,
            column,
            columns,
            empty
          });
          rowSpans[column.id] = computedRowspan;
        }
      });
      return rowSpans;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/renderRows.js
var require_renderRows2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/renderRows.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _react = _interopRequireDefault(require_react());
    var _Row = _interopRequireDefault(require_Row2());
    var _getRowSpans = _interopRequireDefault(require_getRowSpans());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var emptyObject = Object.freeze ? Object.freeze({}) : {};
    var renderRows = function renderRows2(_ref, _ref2) {
      var from = _ref.from, to = _ref.to, empty = _ref.empty, renderIndex = _ref.renderIndex, editRowIndex = _ref.editRowIndex, editValue = _ref.editValue, editColumnIndex = _ref.editColumnIndex, editColumnId = _ref.editColumnId, setRowSpan = _ref.setRowSpan, sticky = _ref.sticky, rowHeight = _ref.rowHeight, tryNextRowEdit = _ref.tryNextRowEdit, onEditStop = _ref.onEditStop, onEditStart = _ref.onEditStart, onEditValueChange = _ref.onEditValueChange, scrollLeft = _ref.scrollLeft, columnRenderCount = _ref.columnRenderCount, columnRenderStartIndex = _ref.columnRenderStartIndex, memorizedScrollLeft = _ref.memorizedScrollLeft;
      var availableWidth = _ref2.availableWidth, data = _ref2.data, onTransitionEnd = _ref2.onTransitionEnd, columns = _ref2.columns, computedPivot = _ref2.computedPivot, groupColumn = _ref2.groupColumn, activeRowRef = _ref2.activeRowRef, columnsMap = _ref2.columnsMap, renderLockedStartCells = _ref2.renderLockedStartCells, renderLockedEndCells = _ref2.renderLockedEndCells, computedOnCellMouseDown = _ref2.computedOnCellMouseDown, computedEnableRowspan = _ref2.computedEnableRowspan, lockedStartColumns = _ref2.lockedStartColumns, lockedEndColumns = _ref2.lockedEndColumns, renderDetailsGrid = _ref2.renderDetailsGrid, editable = _ref2.editable, rowDetailsWidth = _ref2.rowDetailsWidth, scrollbars = _ref2.scrollbars, scrollToColumn = _ref2.scrollToColumn, scrollToIndexIfNeeded = _ref2.scrollToIndexIfNeeded, hasLockedStart = _ref2.hasLockedStart, hasLockedEnd = _ref2.hasLockedEnd, computedShowEmptyRows = _ref2.computedShowEmptyRows, setRowSelected = _ref2.setRowSelected, setRowExpanded = _ref2.setRowExpanded, toggleRowExpand = _ref2.toggleRowExpand, toggleNodeExpand = _ref2.toggleNodeExpand, expandOnMouseDown = _ref2.expandOnMouseDown, loadNodeAsync = _ref2.loadNodeAsync, computedTreeEnabled = _ref2.computedTreeEnabled, computedActiveCell = _ref2.computedActiveCell, rtl = _ref2.rtl, naturalRowHeight = _ref2.naturalRowHeight, lastCellInRange = _ref2.lastCellInRange, getCellSelectionKey = _ref2.getCellSelectionKey, onRowContextMenu = _ref2.onRowContextMenu, columnUserSelect = _ref2.columnUserSelect, selectAll = _ref2.selectAll, deselectAll = _ref2.deselectAll, expandGroupTitle = _ref2.expandGroupTitle, expandColumn = _ref2.expandColumn, computedCellSelection = _ref2.computedCellSelection, lastLockedStartIndex = _ref2.lastLockedStartIndex, lastLockedEndIndex = _ref2.lastLockedEndIndex, lastUnlockedIndex = _ref2.lastUnlockedIndex, computedGroupBy = _ref2.computedGroupBy, computedIndexesInGroups = _ref2.computedIndexesInGroups, edition = _ref2.edition, computedLicenseValid = _ref2.computedLicenseValid, computedGroupCounts = _ref2.computedGroupCounts, rowHeightManager = _ref2.rowHeightManager, maxRowHeight = _ref2.maxRowHeight, minRowHeight = _ref2.minRowHeight, editStartEvent = _ref2.editStartEvent, getItemId = _ref2.getItemId, firstUnlockedIndex = _ref2.firstUnlockedIndex, firstLockedStartIndex = _ref2.firstLockedStartIndex, firstLockedEndIndex = _ref2.firstLockedEndIndex, maxVisibleRows = _ref2.maxVisibleRows, onRowMouseEnter = _ref2.onRowMouseEnter, onRowMouseLeave = _ref2.onRowMouseLeave, computedOnRowClick = _ref2.computedOnRowClick, computedRowDoubleClick = _ref2.computedRowDoubleClick, onCellClick = _ref2.onCellClick, computedCellDoubleClick = _ref2.computedCellDoubleClick, onCellSelectionDraggerMouseDown = _ref2.onCellSelectionDraggerMouseDown, onCellEnter = _ref2.onCellEnter, onColumnMouseEnter = _ref2.onColumnMouseEnter, onColumnMouseLeave = _ref2.onColumnMouseLeave, columnIndexHovered = _ref2.columnIndexHovered, onEditCancel = _ref2.onEditCancel, onEditComplete = _ref2.onEditComplete, computedCellMultiSelectionEnabled = _ref2.computedCellMultiSelectionEnabled, nativeScroll = _ref2.nativeScroll, renderRow = _ref2.renderRow, onRenderRow = _ref2.onRenderRow, rowClassName = _ref2.rowClassName, rowStyle = _ref2.rowStyle, rowFactory = _ref2.rowFactory, _ref2$rowProps = _ref2.rowProps, passedProps = _ref2$rowProps === void 0 ? emptyObject : _ref2$rowProps, rowKey = _ref2.rowKey, cellFactory = _ref2.cellFactory, computedSelected = _ref2.computedSelected, computedUnselected = _ref2.computedUnselected, treeColumn = _ref2.treeColumn, renderNodeTool = _ref2.renderNodeTool, renderTreeCollapseTool = _ref2.renderTreeCollapseTool, renderTreeExpandTool = _ref2.renderTreeExpandTool, renderGroupCollapseTool = _ref2.renderGroupCollapseTool, renderGroupExpandTool = _ref2.renderGroupExpandTool, renderTreeLoadingTool = _ref2.renderTreeLoadingTool, rowExpandHeight = _ref2.rowExpandHeight, isRowExpandedById = _ref2.isRowExpandedById, computedRenderRowDetails = _ref2.computedRenderRowDetails, isRowExpandableAt = _ref2.isRowExpandableAt, computedRowExpandEnabled = _ref2.computedRowExpandEnabled, computedRowMultiSelectionEnabled = _ref2.computedRowMultiSelectionEnabled, computedRowSelectionEnabled = _ref2.computedRowSelectionEnabled, computedActiveIndex = _ref2.computedActiveIndex, computedSkip = _ref2.computedSkip, computedShowZebraRows = _ref2.computedShowZebraRows, computedHasColSpan = _ref2.computedHasColSpan, initialRowHeight = _ref2.rowHeight, totalColumnCount = _ref2.totalColumnCount, totalComputedWidth = _ref2.totalComputedWidth, totalLockedStartWidth = _ref2.totalLockedStartWidth, totalLockedEndWidth = _ref2.totalLockedEndWidth, totalUnlockedWidth = _ref2.totalUnlockedWidth, currentDataSourceCount = _ref2.currentDataSourceCount, computedShowCellBorders = _ref2.computedShowCellBorders, emptyScrollOffset = _ref2.emptyScrollOffset, showHorizontalCellBorders = _ref2.showHorizontalCellBorders, showVerticalCellBorders = _ref2.showVerticalCellBorders, getScrollLeftMax = _ref2.getScrollLeftMax, shouldRenderCollapsedRowDetails = _ref2.shouldRenderCollapsedRowDetails, rowDetailsStyle = _ref2.rowDetailsStyle, minRowWidth = _ref2.minRowWidth, maxWidth = _ref2.maxWidth, _ref2$startIndex = _ref2.startIndex, startIndex = _ref2$startIndex === void 0 ? 0 : _ref2$startIndex, groupNestingSize = _ref2.groupNestingSize, treeNestingSize = _ref2.treeNestingSize, onGroupToggle = _ref2.onGroupToggle, computedCollapsedGroups = _ref2.computedCollapsedGroups, computedExpandedGroups = _ref2.computedExpandedGroups, groupPathSeparator = _ref2.groupPathSeparator, renderGroupTitle = _ref2.renderGroupTitle, renderGroupTool = _ref2.renderGroupTool, renderLockedEndGroupTitle = _ref2.renderLockedEndGroupTitle, renderUnlockedGroupTitle = _ref2.renderUnlockedGroupTitle, virtualizeColumns = _ref2.virtualizeColumns, computedLivePagination = _ref2.computedLivePagination, onRowReorder = _ref2.onRowReorder, onDragRowMouseDown = _ref2.onDragRowMouseDown, theme = _ref2.theme, onContextMenu = _ref2.onContextMenu, setActiveIndex = _ref2.setActiveIndex, currentEditCompletePromise = _ref2.currentEditCompletePromise, enableColumnAutosize = _ref2.enableColumnAutosize, columnHoverClassName = _ref2.columnHoverClassName, computedEnableColumnHover = _ref2.computedEnableColumnHover, renderRowDetailsExpandIcon = _ref2.renderRowDetailsExpandIcon, renderRowDetailsCollapsedIcon = _ref2.renderRowDetailsCollapsedIcon, computedOnRowMouseDown = _ref2.computedOnRowMouseDown, disabledRows = _ref2.disabledRows, rowFocusClassName = _ref2.rowFocusClassName, computedCellBulkUpdateMouseDown = _ref2.computedCellBulkUpdateMouseDown, computedCellBulkUpdateMouseUp = _ref2.computedCellBulkUpdateMouseUp, bulkUpdateMouseDown = _ref2.bulkUpdateMouseDown;
      var remoteOffset = computedLivePagination ? 0 : computedSkip || 0;
      var totalCount = data.length;
      var dataArray = data.slice(from, to);
      var isGrouped = computedGroupBy && computedGroupBy.length;
      var defaultRowHeight = rowHeightManager.getDefaultRowHeight();
      if (computedShowEmptyRows && !dataArray.length) {
        dataArray = [null];
      }
      var depth = null;
      if (isGrouped) {
        depth = computedGroupBy.length;
      }
      return dataArray.map(function(rowData, i) {
        var index2 = i + startIndex;
        var id = rowData ? getItemId(rowData) : i;
        var realIndex = index2 + from;
        var active = computedActiveIndex === realIndex;
        var focusedRow = computedActiveIndex === realIndex;
        var indexInGroup = isGrouped ? computedIndexesInGroups[realIndex] : null;
        if (empty) {
          indexInGroup = realIndex + (totalCount % 2 - 1);
        }
        var keyIndex = rowKey === "realIndex" ? realIndex : index2;
        var key = "row-".concat(keyIndex);
        var isSelected = !empty && computedRowSelectionEnabled && (computedRowMultiSelectionEnabled ? computedSelected === true ? computedUnselected ? computedUnselected[id] === void 0 : true : computedSelected.hasOwnProperty(id) : computedSelected == id);
        var rowExpanded = isRowExpandedById(id);
        var rowProps = {
          rowspanZIndex: totalCount - realIndex,
          availableWidth,
          computedGroupBy,
          expandGroupTitle,
          expandColumn,
          getCellSelectionKey,
          id,
          depth,
          columns,
          columnsMap,
          computedHasColSpan,
          lockedStartColumns,
          lockedEndColumns,
          hasLockedStart,
          rowDetailsWidth,
          hasLockedEnd,
          columnUserSelect,
          minWidth: minRowWidth,
          width: totalComputedWidth,
          active,
          activeRowRef,
          emptyScrollOffset,
          empty,
          editable,
          key,
          scrollLeft,
          getScrollLeftMax,
          groupColumn,
          renderRow,
          onRenderRow,
          cellFactory,
          computedActiveCell,
          computedShowZebraRows,
          lastCellInRange,
          groupNestingSize,
          treeNestingSize,
          columnRenderCount,
          rowStyle,
          rowClassName,
          onTransitionEnd,
          onRowContextMenu,
          renderNodeTool,
          indexInGroup: isGrouped ? indexInGroup : null,
          groupCount: isGrouped && computedGroupCounts ? computedGroupCounts[realIndex] : 0,
          editStartEvent,
          virtualizeColumns,
          firstUnlockedIndex,
          firstLockedStartIndex,
          columnRenderStartIndex,
          firstLockedEndIndex,
          tryNextRowEdit,
          totalComputedWidth,
          totalLockedStartWidth,
          totalLockedEndWidth,
          totalUnlockedWidth,
          sticky,
          computedCellSelection,
          computedCellMultiSelectionEnabled,
          shouldRenderCollapsedRowDetails,
          rowDetailsStyle,
          renderDetailsGrid,
          renderIndex,
          realIndex,
          rowIndex: realIndex,
          remoteRowIndex: remoteOffset + realIndex,
          maxVisibleRows,
          last: !computedShowEmptyRows ? realIndex == totalCount - 1 : !!(maxVisibleRows && realIndex >= maxVisibleRows - 1 && realIndex == totalCount - 1),
          lastNonEmpty: realIndex === totalCount - 1,
          totalDataCount: totalCount,
          rowHeight,
          defaultRowHeight,
          rowExpandHeight,
          initialRowHeight,
          setRowSpan,
          maxRowHeight,
          minRowHeight,
          getItemId,
          computedShowCellBorders,
          showHorizontalCellBorders,
          showVerticalCellBorders,
          passedProps,
          setRowSelected,
          setRowExpanded,
          renderLockedStartCells,
          renderLockedEndCells,
          computedRowExpandEnabled,
          computedRenderRowDetails,
          isRowExpandableAt,
          treeColumn,
          rtl,
          toggleRowExpand,
          toggleNodeExpand,
          expandOnMouseDown,
          loadNodeAsync,
          edition,
          computedLicenseValid,
          computedEnableRowspan,
          computedTreeEnabled,
          naturalRowHeight,
          selectAll,
          deselectAll,
          totalColumnCount,
          computedPivot,
          multiSelect: computedRowMultiSelectionEnabled,
          selection: computedSelected,
          selected: isSelected,
          expanded: rowExpanded,
          lastLockedStartIndex,
          lastLockedEndIndex,
          lastUnlockedIndex,
          data: rowData,
          dataSourceArray: data,
          onMouseEnter: !empty ? onRowMouseEnter : null,
          onMouseLeave: !empty ? onRowMouseLeave : null,
          onClick: !empty ? computedOnRowClick : null,
          onMouseDown: !empty ? computedOnRowMouseDown : null,
          onRowDoubleClick: !empty ? computedRowDoubleClick : null,
          scrollToColumn,
          scrollToIndexIfNeeded,
          onCellClick,
          onCellDoubleClick: computedCellDoubleClick,
          onCellSelectionDraggerMouseDown,
          onCellMouseDown: computedOnCellMouseDown,
          onColumnMouseEnter,
          onColumnMouseLeave,
          columnIndexHovered,
          onCellEnter,
          onEditStop,
          onEditStart,
          onEditCancel,
          onEditValueChange,
          onEditComplete,
          scrollbars,
          even: false,
          odd: false,
          nativeScroll,
          onRowReorder,
          onDragRowMouseDown,
          theme,
          onContextMenu,
          setActiveIndex,
          renderTreeCollapseTool,
          renderTreeExpandTool,
          renderGroupCollapseTool,
          renderGroupExpandTool,
          renderTreeLoadingTool,
          currentEditCompletePromise,
          enableColumnAutosize,
          columnHoverClassName,
          computedEnableColumnHover,
          renderRowDetailsExpandIcon,
          renderRowDetailsCollapsedIcon,
          memorizedScrollLeft,
          disabledRow: disabledRows ? disabledRows[realIndex] : null,
          focusedRow,
          rowFocusClassName,
          onCellBulkUpdateMouseDown: computedCellBulkUpdateMouseDown,
          onMouseUp: computedCellBulkUpdateMouseUp,
          bulkUpdateMouseDown
        };
        if (rowProps.rowIndex === editRowIndex) {
          rowProps.editing = true;
          rowProps.editValue = editValue;
          rowProps.editColumnIndex = editColumnIndex;
          rowProps.editColumnId = editColumnId;
        }
        if (rowData && rowData.__group) {
          rowProps.indexInGroup = null;
          var rowGroupKey = "".concat(rowData.keyPath.join(groupPathSeparator));
          var collapsed;
          if (computedCollapsedGroups === true) {
            collapsed = true;
            if (computedExpandedGroups[rowGroupKey]) {
              collapsed = false;
            }
          } else if (computedExpandedGroups === true) {
            collapsed = false;
            if (computedCollapsedGroups[rowGroupKey]) {
              collapsed = true;
            }
          } else {
            collapsed = computedCollapsedGroups[rowGroupKey];
          }
          rowProps.groupProps = {
            renderGroupTitle,
            renderGroupTool,
            renderLockedEndGroupTitle,
            renderUnlockedGroupTitle,
            onGroupToggle,
            collapsed,
            groupNestingSize,
            depth: rowData.depth - 1
          };
          rowProps.onGroupToggle = onGroupToggle;
          rowProps.groupSummary = rowData.groupSummary;
          rowProps.groupColumnSummaries = rowData.groupColumnSummaries;
        }
        if (isGrouped) {
          rowProps.parentGroupDataArray = [];
        }
        var even = !!((isGrouped && !computedPivot ? indexInGroup : realIndex) % 2);
        if (empty && isGrouped) {
          var tmpIndex = (computedIndexesInGroups[currentDataSourceCount - 1] || 0) + (realIndex - currentDataSourceCount - 1);
          even = !!(tmpIndex % 2);
        }
        if (rowData && rowData.__summary) {
          rowProps.summaryProps = {
            position: rowData.__summary,
            groupProps: rowData.__parentGroup,
            value: rowData.__parentGroup.groupColumnSummaries,
            depth: rowData.__parentGroup.depth - 1
          };
          even = true;
        }
        if (maxWidth != null) {
          rowProps.maxWidth = maxWidth;
        }
        rowProps.even = even;
        rowProps.odd = !even;
        var row;
        if (rowFactory) {
          row = rowFactory(rowProps);
        }
        if (computedEnableRowspan) {
          rowProps.computedRowspans = (0, _getRowSpans.default)(rowProps);
          setRowSpan(Math.max.apply(Math, (0, _toConsumableArray2.default)(Object.keys(rowProps.computedRowspans).map(function(key2) {
            return rowProps.computedRowspans[key2];
          }))));
        }
        if (row === void 0) {
          row = _react.default.createElement(_Row.default, _objectSpread({}, rowProps));
        }
        return row;
      });
    };
    var _default = renderRows;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/searchClosestSmallerValue.js
var require_searchClosestSmallerValue = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/searchClosestSmallerValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(array, value) {
      var low = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var high = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : array.length - 1;
      var mid;
      var midValue;
      var midNextIndex;
      var midNextValue;
      while (low <= high) {
        mid = low + (high - low >> 1);
        midValue = array[mid];
        midNextIndex = mid + 1;
        midNextValue = array[midNextIndex];
        if (midValue <= value) {
          if (midNextValue === void 0 || midNextValue > value) {
            return mid;
          }
          low = mid + 1;
        } else {
          high = mid - 1;
        }
      }
      return -1;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/renderEmptyContent.js
var require_renderEmptyContent = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/renderEmptyContent.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var STYLE = {
      display: "inline-block"
    };
    var _default = function _default2(content) {
      var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "empty";
      var style = arguments.length > 2 ? arguments[2] : void 0;
      if (typeof content === "function") {
        content = content();
      }
      if (content == null || content == false || content == "") {
        return null;
      }
      if (typeof content === "string") {
        content = _react.default.createElement("div", {
          className: "InovuaReactDataGrid__".concat(name, "-text"),
          style: STYLE
        }, content);
      }
      return _react.default.createElement("div", {
        key: "emptyContentWrapper",
        className: "InovuaReactDataGrid__".concat(name, "-wrapper"),
        style
      }, content);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/detect-ua.js
var require_detect_ua = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/detect-ua.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.IS_MS_BROWSER = exports.IS_IE = exports.IS_EDGE = void 0;
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var ua = globalObject.navigator ? globalObject.navigator.userAgent || "" : "";
    var IS_EDGE = ua.indexOf("Edge/") !== -1;
    exports.IS_EDGE = IS_EDGE;
    var IS_MS_BROWSER = IS_EDGE || ua.indexOf("Trident") !== -1;
    exports.IS_MS_BROWSER = IS_MS_BROWSER;
    var IS_IE = IS_MS_BROWSER && !IS_EDGE;
    exports.IS_IE = IS_IE;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/List.js
var require_List3 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/List.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _assignDefined = _interopRequireDefault(require_assign_defined());
    var _src = _interopRequireWildcard(require_src20());
    var _shallowequal = _interopRequireDefault(require_shallowequal2());
    var _renderRows = _interopRequireDefault(require_renderRows2());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate());
    var _searchClosestSmallerValue = _interopRequireDefault(require_searchClosestSmallerValue());
    var _renderEmptyContent = _interopRequireDefault(require_renderEmptyContent());
    var _detectUa = require_detect_ua();
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var EMPTY_OBJECT = {};
    var returnTrue = function returnTrue2() {
      return true;
    };
    var CHUNKS_SIZE = 1;
    var raf = globalObject.requestAnimationFrame;
    var DEFAULT_SCROLL_POS = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var initialSkip = 0;
    var timeout = false;
    var VirtualListClassName = "InovuaReactDataGrid__virtual-list";
    var InovuaDataGridList = function(_Component) {
      (0, _inherits2.default)(InovuaDataGridList2, _Component);
      var _super = _createSuper(InovuaDataGridList2);
      function InovuaDataGridList2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaDataGridList2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollingDirection", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastScrollTimestamp", 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollLeft", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "virtualListRef", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowFullyVisible", function(index2) {
          return _this.getVirtualList().isRowVisible(index2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setValue", function() {
          var _this$props = _this.props, hasValueSetter = _this$props.hasValueSetter, data = _this$props.data, columns = _this$props.columns, idProperty = _this$props.idProperty, setItemsAt = _this$props.setItemsAt;
          if (!hasValueSetter) {
            return;
          }
          var newDataMap = data.reduce(function(acc, current) {
            var _iterator = _createForOfIteratorHelper(columns), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var column = _step.value;
                if (column.setValue) {
                  var columnName = column.name || column.id;
                  var value = current[columnName];
                  if (value) {
                    var result = column.setValue(_objectSpread({
                      value,
                      data: current
                    }, column));
                    if (value !== result) {
                      var id = current[idProperty];
                      acc[id] = _objectSpread(_objectSpread({}, acc[id]), {}, (0, _defineProperty2.default)({}, columnName, result));
                    }
                  }
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            return acc;
          }, {});
          var newData = Object.keys(newDataMap).map(function(key) {
            var id = isNaN(Number(key)) ? key : Number(key);
            return _objectSpread({
              id
            }, newDataMap[key]);
          });
          setItemsAt(newData, {
            replace: false
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "computeRows", function(props2) {
          var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : EMPTY_OBJECT, from = _ref.from, to = _ref.to, rowHeight = _ref.rowHeight, renderIndex = _ref.renderIndex, empty = _ref.empty, setRowSpan = _ref.setRowSpan, sticky = _ref.sticky;
          var columnRenderCount = props2.columnRenderCount;
          return (0, _renderRows.default)({
            empty,
            renderIndex,
            setRowSpan,
            sticky,
            from: from || _this.startIndex || 0,
            to: to || _this.endIndex || CHUNKS_SIZE,
            rowHeight,
            columnRenderStartIndex: _this.columnRenderStartIndex,
            columnRenderCount,
            onEditStop: _this.onEditStop,
            onEditStart: _this.onEditStart,
            onEditValueChange: _this.onEditValueChange,
            getScrollLeftMax: _this.props.getScrollLeftMax,
            tryNextRowEdit: _this.tryRowEdit,
            editValue: _this.editValue,
            editRowIndex: _this.editRowIndex,
            editColumnIndex: _this.editColumnIndex,
            editColumnId: _this.editColumnId,
            memorizedScrollLeft: _this.scrollLeft.current
          }, props2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVirtualList", function() {
          var vl = _this.virtualListRef.current;
          return vl;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "tryRowEdit", function(nextEditRowIndex, dir, columnIndex, isEnterNavigation) {
          var columnEditIndex = columnIndex;
          var row = _this.getRowAt(nextEditRowIndex);
          if (!row) {
            return;
          }
          var setActiveIndex = function setActiveIndex2() {
            return _this.props.setActiveIndex(nextEditRowIndex);
          };
          if (_this.props.livePagination) {
            var skip = _this.props.computedSkip;
            if (skip !== initialSkip) {
              initialSkip = skip;
              timeout = true;
            }
            timeout ? setTimeout(function() {
              return setActiveIndex();
            }, 50) : setActiveIndex();
          } else {
            setActiveIndex();
          }
          row.tryRowCellEdit(columnEditIndex, dir, isEnterNavigation);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isEditing", function() {
          return !!_this.editColumnId;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEditStop", function(args) {
          if (_this.editColumnIndex !== args.columnIndex || _this.editRowIndex !== args.rowIndex) {
            return;
          }
          if (_this.props.onEditStop) {
            _this.props.onEditStop(args);
          }
          _this.updateEditing({
            value: void 0,
            rowIndex: void 0,
            columnIndex: void 0
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEditValueChange", function(args) {
          if (_this.props.onEditValueChange) {
            _this.props.onEditValueChange(args);
          }
          _this.updateEditing(args);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEditStart", function(args) {
          if (_this.props.onEditStart) {
            _this.props.onEditStart(args);
          }
          _this.updateEditing(args);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateEditing", function(_ref2) {
          var value = _ref2.value, rowIndex = _ref2.rowIndex, columnId = _ref2.columnId, columnIndex = _ref2.columnIndex;
          var oldEditRowIndex = _this.editRowIndex;
          var oldEditValue = _this.editValue;
          var oldEditColumnIndex = _this.editColumnIndex;
          _this.editValue = value;
          _this.editRowIndex = rowIndex;
          _this.editColumnIndex = columnIndex;
          _this.editColumnId = columnId;
          if (_this.editTimeoutId) {
            clearTimeout(_this.editTimeoutId);
          }
          _this.lazyEditColumnId = _this.editColumnId || _this.lazyEditColumnId;
          _this.editTimeoutId = setTimeout(function() {
            delete _this.editTimeoutId;
            _this.lazyEditColumnId = _this.editColumnId;
          }, 50);
          if (oldEditRowIndex === rowIndex && oldEditColumnIndex === columnIndex && oldEditValue !== value) {
            _this.getVirtualList().getRows().forEach(function(r) {
              var row = r.getInstance();
              if (row && row.props.rowIndex === rowIndex) {
                r.update();
              }
            });
            return;
          }
          _this.forceUpdate();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollHorizontal", function(scrollLeft, _, __, scrollLeftMax) {
          _this.scrollLeft.current = scrollLeft;
          _this.onContainerScrollHorizontal(scrollLeft, void 0, scrollLeftMax);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRowContainer", function(props2) {
          return _react.default.createElement("div", _objectSpread({}, props2), props2.children, _this.props.renderActiveRowIndicator && _this.props.renderActiveRowIndicator(_this.setupActiveRowIndicatorHandle));
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupActiveRowIndicatorHandle", function(activeRowHandle) {
          _this.activeRowIndicatorHandle = activeRowHandle;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onStickyRowUpdate", function() {
          _this.updateOnScrollLeft(void 0, true);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderEmptyContent", function() {
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          var _this$props2 = _this.props, i18n = _this$props2.i18n, data = _this$props2.data, loading = _this$props2.computedLoading, nativeScroll = _this$props2.nativeScroll;
          var emptyText = _this.props.emptyText;
          var length = data.length;
          emptyText = i18n(emptyText, emptyText);
          if (!length && !loading) {
            return (0, _renderEmptyContent.default)(emptyText, "empty", {
              right: nativeScroll ? 0 : -SCROLLBAR_WIDTH,
              bottom: nativeScroll ? 0 : -SCROLLBAR_WIDTH
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderView", function(viewProps) {
          var _this$props3 = _this.props, data = _this$props3.data, loading = _this$props3.loading;
          var scrollbarOffset = _this.getEmptyScrollOffset();
          var length = data.length;
          if (!length && !loading) {
            viewProps.children = _react.default.Children.toArray(viewProps.children);
            viewProps.children.push(_this.renderEmptyContent());
            if (_detectUa.IS_EDGE) {
              viewProps.style.minHeight = "99%";
            }
          }
          var hasScrollbars = _this.scrollbars && _this.scrollbars.vertical && _this.scrollbars.horizontal;
          if (!!_this.props.renderRowDetails || !!_this.props.renderDetailsGrid) {
            if (_this.props.rtl && !(0, _src.getScrollbarWidth)() && !_this.props.nativeScroll) {
              viewProps.style.transform = "translateX(".concat(-(hasScrollbars ? 2 : 1) * scrollbarOffset, "px)");
            }
          } else {
            if (_this.props.rtl && !(0, _src.getScrollbarWidth)() && !_this.props.nativeScroll) {
              viewProps.style.transform = "translateX(".concat(-scrollbarOffset, "px)");
            }
          }
          var result;
          if (_this.props.renderView) {
            result = _this.props.renderView(viewProps);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, viewProps));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSizer", function(props2, scrollHeight) {
          if (!_this.props.nativeScroll) {
            return;
          }
          if (!_this.props.virtualized) {
            return null;
          }
          var minWidth = Math.max(_this.props.availableWidth || 0, _this.props.minRowWidth || 0) || 0;
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          var sizerStyle = _objectSpread(_objectSpread({}, props2.style), {}, {
            minWidth,
            minHeight: props2.style ? (props2.style.minHeight || 0) - (!SCROLLBAR_WIDTH ? _this.getEmptyScrollOffset() : 0) : 0
          });
          if (_this.props.naturalRowHeight) {
            sizerStyle.height = scrollHeight;
          }
          return _react.default.createElement("div", _objectSpread(_objectSpread({
            key: "grid-sizer",
            "data-name": "sizer"
          }, props2), {}, {
            style: sizerStyle
          }));
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollerSpacer", function(spacerProps) {
          if (!_this.props.totalFlexColumnCount) {
            spacerProps.style.width = _this.props.minRowWidth || 0;
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScroller", function(scrollerProps) {
          var _style;
          var _this$props4 = _this.props, data = _this$props4.data, loading = _this$props4.loading, virtualized = _this$props4.virtualized, maxVisibleRows = _this$props4.maxVisibleRows, nativeScroll = _this$props4.nativeScroll, availableWidth = _this$props4.availableWidth, minRowWidth = _this$props4.minRowWidth;
          var length = data.length;
          scrollerProps.children.push(_react.default.createElement("div", {
            key: "empty-spacer",
            "data-name": "empty-spacer",
            style: (_style = {
              position: _detectUa.IS_IE && nativeScroll ? "static" : "absolute",
              contain: "strict"
            }, (0, _defineProperty2.default)(_style, _this.props.rtl ? "right" : "left", 0), (0, _defineProperty2.default)(_style, "height", 1), (0, _defineProperty2.default)(_style, "top", 0), (0, _defineProperty2.default)(_style, "pointerEvents", "none"), (0, _defineProperty2.default)(_style, "minWidth", Math.max(availableWidth, minRowWidth) || 0), _style)
          }, _detectUa.IS_IE && nativeScroll ? _this.renderEmptyContent() : null));
          if (!virtualized && length < maxVisibleRows) {
            scrollerProps.style = scrollerProps.style || {};
            scrollerProps.style.overflow = "hidden";
          }
          var hasHorizontalScrollbar = _this.scrollbars && _this.scrollbars.horizontal;
          if (!_this.props.renderRowDetails || !_this.props.renderDetailsGrid) {
            if (!(0, _src.getScrollbarWidth)() && !nativeScroll && hasHorizontalScrollbar) {
              scrollerProps.style.right = 0;
            }
          }
          var result;
          if (_this.props.renderScroller) {
            result = _this.props.renderScroller(scrollerProps);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread({}, scrollerProps));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowAt", function(index2) {
          return _this.getRows().filter(function(r) {
            var _r$props;
            return (r === null || r === void 0 ? void 0 : (_r$props = r.props) === null || _r$props === void 0 ? void 0 : _r$props.rowIndex) === index2;
          })[0];
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startEdit", function(_ref3) {
          var rowIndex = _ref3.rowIndex, columnIndex = _ref3.columnIndex, value = _ref3.value;
          var row = _this.getRowAt(rowIndex);
          if (row) {
            var cell = row.getCellAt(columnIndex);
            if (cell) {
              return cell.startEdit(value);
            }
          }
          return Promise.reject(null);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "completeEdit", function(_ref4) {
          var rowIndex = _ref4.rowIndex, columnIndex = _ref4.columnIndex, value = _ref4.value;
          var row = _this.getRowAt(rowIndex);
          if (row) {
            var cell = row.getCellAt(columnIndex);
            if (cell) {
              cell.completeEdit(value);
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cancelEdit", function(_ref5) {
          var rowIndex = _ref5.rowIndex, columnIndex = _ref5.columnIndex;
          var row = _this.getRowAt(rowIndex);
          if (row) {
            var cell = row.getCellAt(columnIndex);
            if (cell) {
              cell.cancelEdit();
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScroll", function(scrollPos) {
          var prevScrollPos = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_SCROLL_POS;
          if (_this.props.onContainerScroll) {
            _this.props.onContainerScroll(scrollPos, prevScrollPos);
          }
          var oldScrollingDirection = _this.scrollingDirection;
          if (scrollPos.scrollTop === prevScrollPos.scrollTop && scrollPos.scrollLeft === prevScrollPos.scrollLeft) {
            return;
          }
          _this.scrollingDirection = scrollPos.scrollLeft === prevScrollPos.scrollLeft ? "vertical" : "horizontal";
          if (_this.scrollingDirection === oldScrollingDirection) {
            return;
          }
          if (_this.props.virtualized) {
            var _this$getDOMNode, _this$getDOMNode$clas;
            (_this$getDOMNode = _this.getDOMNode()) === null || _this$getDOMNode === void 0 ? void 0 : (_this$getDOMNode$clas = _this$getDOMNode.classList) === null || _this$getDOMNode$clas === void 0 ? void 0 : _this$getDOMNode$clas.add("".concat(VirtualListClassName, "--scrolling"));
            requestAnimationFrame(function() {
              _this.getRows().forEach(function(r) {
                return r ? r.setScrolling(_this.scrollingDirection) : null;
              });
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollStop", function() {
          _this.scrollingDirection = "none";
          if (_this.props.virtualized) {
            var _this$getDOMNode2, _this$getDOMNode2$cla;
            (_this$getDOMNode2 = _this.getDOMNode()) === null || _this$getDOMNode2 === void 0 ? void 0 : (_this$getDOMNode2$cla = _this$getDOMNode2.classList) === null || _this$getDOMNode2$cla === void 0 ? void 0 : _this$getDOMNode2$cla.remove("".concat(VirtualListClassName, "--scrolling"));
            _this.getRows().forEach(function(r) {
              if (!r) {
                return;
              }
              r.setScrolling(false);
            });
          }
          if (_this.props.onScrollStop) {
            _this.props.onScrollStop();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setColumnRenderStartIndex", function(columnRenderStartIndex, force) {
          if (_this.__willUnmount) {
            return;
          }
          if (_this.resizing && !force) {
            return;
          }
          if (columnRenderStartIndex === _this.columnRenderStartIndex && !force) {
            return;
          }
          if (!_this.getVirtualList()) {
            return;
          }
          if (_this.props.onColumnRenderStartIndexChange) {
            _this.props.onColumnRenderStartIndexChange(columnRenderStartIndex);
          }
          _this.columnRenderStartIndex = columnRenderStartIndex;
          var rows = _this.getVirtualList().getRows();
          rows.forEach(function(row) {
            var rowInstance = row.getInstance();
            if (rowInstance) {
              requestAnimationFrame(function() {
                rowInstance.setColumnRenderStartIndex(columnRenderStartIndex);
              });
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRows", function() {
          var virtualList = _this.getVirtualList();
          if (!virtualList) {
            return [];
          }
          return virtualList.getRows().map(function(row) {
            return row.getInstance();
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollbarsChange", function(scrollbars) {
          _this.scrollbars = scrollbars;
          if (!scrollbars.horizontal) {
            raf(function() {
              _this.onContainerScrollHorizontal(0);
            });
          }
          if (_this.props.onScrollbarsChange) {
            raf(function() {
              _this.props.onScrollbarsChange(scrollbars);
            });
          }
          if (_this.props.scrollProps && _this.props.scrollProps.onScrollbarsChange) {
            _this.props.scrollProps.onScrollbarsChange(scrollbars);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function() {
          if (_this.props.onResize) {
            var _this$props5;
            (_this$props5 = _this.props).onResize.apply(_this$props5, arguments);
          }
          _this.visibleCount = _this.getVisibleCount();
          _this.resizing = true;
          raf(function() {
            _this.resizing = false;
            var force;
            _this.updateOnScrollLeft(void 0, force = true);
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScrollHorizontal", function(scrollLeft, force, scrollLeftMax) {
          if (scrollLeft < 0) {
            scrollLeft = 0;
          }
          scrollLeft = Math.round(scrollLeft);
          _this._scrollLeft = scrollLeft;
          if (_this.__willUnmount) {
            return;
          }
          if (_this.props.onContainerScrollHorizontal) {
            _this.props.onContainerScrollHorizontal(scrollLeft, scrollLeftMax);
          }
          if (_this.props.scrollProps && _this.props.scrollProps.onContainerScrollHorizontal) {
            _this.props.scrollProps.onContainerScrollHorizontal(scrollLeft);
          }
          scrollLeft = _this._scrollLeft;
          _this.updateOnScrollLeft(scrollLeft);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateOnScrollLeft", function() {
          var scrollLeft = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this._scrollLeft;
          var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var props2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _this.props;
          if (_this.__willUnmount) {
            return;
          }
          var columnRenderStartIndex;
          if (props2.virtualizeColumns) {
            var lockedStartColumns = props2.lockedStartColumns, columnWidthPrefixSums = props2.columnWidthPrefixSums;
            if (!columnRenderStartIndex) {
              var lockedOffset = lockedStartColumns.length && columnWidthPrefixSums[lockedStartColumns.length] ? columnWidthPrefixSums[lockedStartColumns.length] : 0;
              columnRenderStartIndex = (0, _searchClosestSmallerValue.default)(props2.columnWidthPrefixSums, scrollLeft + lockedOffset);
            }
            _this.setColumnRenderStartIndex(columnRenderStartIndex, force);
          }
          if (_this.activeRowIndicatorHandle) {
            _this.activeRowIndicatorHandle.setScrollLeft(scrollLeft);
          }
          if (_this.props.updateLockedWrapperPositions) {
            _this.props.updateLockedWrapperPositions.call((0, _assertThisInitialized2.default)(_this), _this.props, scrollLeft);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMNode", function() {
          return _this.node || (_this.node = _this.getVirtualList().getDOMNode());
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRow", function(args) {
          var rowHeight = args.rowHeight, index2 = args.index, renderIndex = args.renderIndex, empty = args.empty, sticky = args.sticky;
          var setRowSpan = function setRowSpan2(rowSpan) {
            args.rowSpan = rowSpan;
          };
          var result = _this.computeRows(_this.props, {
            empty,
            from: index2,
            sticky,
            to: index2 + 1,
            renderIndex,
            rowHeight,
            setRowSpan
          })[0];
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVisibleCount", function() {
          return _this.getVirtualList() ? _this.getVirtualList().getVisibleCount() : -1;
        });
        _this.virtualListRef = (0, _react.createRef)();
        _this._scrollLeft = 0;
        _this._scrollTop = 0;
        _this.startIndex = 0;
        _this.endIndex = CHUNKS_SIZE;
        _this.state = {
          columnRenderCount: 0
        };
        _this.rows = [];
        _this.scrollbars = {};
        _this.scrollLeft = (0, _react.createRef)();
        return _this;
      }
      (0, _createClass2.default)(InovuaDataGridList2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          if (nextProps.shouldComponentUpdate) {
            return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
          }
          var equalProps = (0, _shallowequal.default)(this.props, nextProps);
          if (!equalProps) {
            return true;
          }
          return !(0, _shallowequal.default)(nextState, this.state);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          if (this.props.hasValueSetter) {
            setTimeout(function() {
              _this2.setValue();
            }, 100);
          }
          this.__willUnmount = false;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.__willUnmount = true;
        }
      }, {
        key: "isLazyEditing",
        value: function isLazyEditing() {
          return !!this.lazyEditColumnId;
        }
      }, {
        key: "render",
        value: function render() {
          var thisProps = this.props;
          var maybeProps = (0, _assignDefined.default)({}, {
            minRowHeight: thisProps.minRowHeight,
            rowHeight: thisProps.rowHeight
          });
          var pureRows = !!this.fromState;
          var shouldUpdate = returnTrue;
          var scrollProps = thisProps.scrollProps;
          if (scrollProps && scrollProps.onContainerScrollHorizontal) {
            scrollProps = _objectSpread({}, scrollProps);
            scrollProps.onContainerScrollHorizontal = this.onScrollHorizontal;
          }
          var minRowWidth = Math.max(this.props.availableWidth, this.props.minRowWidth) || 0;
          var naturalRowHeight = thisProps.naturalRowHeight;
          var renderRow = this.renderRow;
          if (naturalRowHeight) {
            if (this.__data !== thisProps.data || !this.__minRowWidth) {
              renderRow = renderRow.bind(this);
            }
            this.__minRowWidth = minRowWidth;
            this.__data = thisProps.data;
          }
          return _react.default.createElement(_src.default, _objectSpread(_objectSpread({
            rowHeight: null,
            extraRows: naturalRowHeight ? 1 : 0,
            style: thisProps.style,
            theme: this.props.theme,
            checkResizeDelay: thisProps.checkResizeDelay,
            rowContain: thisProps.rowContain,
            contain: thisProps.contain,
            rtl: thisProps.rtl,
            stickyOffset: thisProps.rtlOffset,
            stickyRows: thisProps.computedStickyRows,
            onStickyRowUpdate: this.onStickyRowUpdate,
            enableRowSpan: thisProps.computedEnableRowspan,
            recycleCoveredRows: false,
            className: VirtualListClassName,
            renderRowContainer: this.renderRowContainer
          }, maybeProps), {}, {
            overscrollBehavior: "auto",
            rowHeightManager: thisProps.rowHeightManager,
            before: thisProps.before,
            after: thisProps.after,
            showEmptyRows: thisProps.computedShowEmptyRows,
            scrollProps,
            emptyScrollOffset: this.getEmptyScrollOffset(),
            nativeScroll: thisProps.nativeScroll,
            onResize: this.onResize,
            virtualized: thisProps.virtualized,
            minRowWidth,
            naturalRowHeight,
            renderScroller: this.renderScroller,
            renderScrollerSpacer: this.renderScrollerSpacer,
            renderSizer: this.renderSizer,
            renderView: this.renderView,
            useTransformRowPosition: this.props.useTransformRowPosition,
            useTransformPosition: this.props.useTransformPosition,
            shouldComponentUpdate: shouldUpdate,
            ref: this.virtualListRef,
            count: thisProps.data.length || 0,
            pureRows,
            renderRow,
            onContainerScrollHorizontal: this.onScrollHorizontal,
            onContainerScroll: this.onContainerScroll,
            onScrollbarsChange: this.onScrollbarsChange,
            onContainerScrollVertical: this.props.onContainerScrollVertical,
            onScrollStop: this.onScrollStop,
            shouldFocusNextRow: this.shouldFocusNextRow
          }));
        }
      }, {
        key: "shouldFocusNextRow",
        value: function shouldFocusNextRow(_ref6) {
          var index2 = _ref6.index, nextIndex = _ref6.nextIndex, dir = _ref6.dir;
          var shouldFocus = !this.isLazyEditing();
          return shouldFocus;
        }
      }, {
        key: "getEmptyScrollOffset",
        value: function getEmptyScrollOffset() {
          return this.props.emptyScrollOffset || (0, _src.getScrollbarWidth)() || 17;
        }
      }, {
        key: "tryStartEdit",
        value: function tryStartEdit(_ref7) {
          var rowIndex = _ref7.rowIndex, columnIndex = _ref7.columnIndex, dir = _ref7.dir;
          var row = this.getRowAt(rowIndex);
          if (row) {
            return row.tryRowCellEdit(columnIndex, dir);
          }
          return Promise.reject(null);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this3 = this;
          if (prevProps.columnRenderCount != this.props.columnRenderCount) {
            raf(function() {
              _this3.updateOnScrollLeft(void 0, true, _this3.props);
            });
          }
          var _this$props6 = this.props, lockedStartColumns = _this$props6.lockedStartColumns, lockedEndColumns = _this$props6.lockedEndColumns;
          var hasLocked = lockedStartColumns && lockedStartColumns.length || lockedEndColumns && lockedEndColumns.length;
          if (hasLocked) {
            this.onContainerScrollHorizontal(this._scrollLeft);
          }
        }
      }, {
        key: "getScrollLeftMax",
        value: function getScrollLeftMax() {
          return this.getVirtualList() ? this.getVirtualList().scrollLeftMax : 0;
        }
      }]);
      return InovuaDataGridList2;
    }(_react.Component);
    exports.default = InovuaDataGridList;
    var propTypes = Object.assign({}, _src.propTypes, {
      count: _propTypes.default.number,
      columns: _propTypes.default.arrayOf(_propTypes.default.shape({
        name: _propTypes.default.string,
        computedWidth: _propTypes.default.number,
        id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        render: _propTypes.default.func
      })),
      data: _propTypes.default.any,
      from: _propTypes.default.number,
      updateLockedWrapperPositions: _propTypes.default.any,
      idProperty: _propTypes.default.string,
      maxWidth: _propTypes.default.number,
      minRowHeight: _propTypes.default.number,
      minWidth: _propTypes.default.number,
      onColumnRenderStartIndexChange: _propTypes.default.func,
      rowHeight: _propTypes.default.number,
      renderScroller: _propTypes.default.func,
      renderScrollerSpacer: _propTypes.default.func,
      renderActiveRowIndicator: _propTypes.default.func,
      showWarnings: _propTypes.default.bool,
      to: _propTypes.default.number,
      virtualizeColumns: _propTypes.default.bool,
      hasValueSetter: _propTypes.default.bool
    });
    delete propTypes.renderRow;
    InovuaDataGridList.propTypes = propTypes;
    InovuaDataGridList.defaultProps = {
      showWarnings: false
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/index.js
var require_Content = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/Content/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _List = _interopRequireDefault(require_List3());
    var _default = _List.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/context.js
var require_context = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/context.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.Provider = exports.Consumer = void 0;
    var _react = _interopRequireDefault(require_react());
    var DataGridContext = _react.default.createContext(null);
    var Provider = DataGridContext.Provider;
    exports.Provider = Provider;
    var Consumer = DataGridContext.Consumer;
    exports.Consumer = Consumer;
    var _default = DataGridContext;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/index.js
var require_ColumnLayout = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/ColumnLayout/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _region = _interopRequireDefault(require_region());
    var _ResizeOverlay = _interopRequireDefault(require_ResizeOverlay());
    var _setupColumnResize = _interopRequireDefault(require_setupColumnResize());
    var _join = _interopRequireDefault(require_join4());
    var _FakeFlex = _interopRequireDefault(require_FakeFlex());
    var _HeaderLayout = _interopRequireDefault(require_HeaderLayout());
    var _Content = _interopRequireDefault(require_Content());
    var _context = require_context();
    var _isMobile = _interopRequireDefault(require_isMobile());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var height100 = {
      height: "100%"
    };
    var InovuaDataGridColumnLayout = function(_React$Component) {
      (0, _inherits2.default)(InovuaDataGridColumnLayout2, _React$Component);
      var _super = _createSuper(InovuaDataGridColumnLayout2);
      function InovuaDataGridColumnLayout2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaDataGridColumnLayout2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollTop", 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastComputedProps", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "headerLayout", null);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMNode", function() {
          return _this.columnLayoutRef.current;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollingTopRegion", function() {
          return null;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollingBottomRegion", function() {
          return null;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getContentRows", function() {
          return _this.content.getRows();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollTop", function() {
          return _this.scrollTop || 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderHeaderLayout", function(computedProps) {
          return _react.default.createElement(_HeaderLayout.default, _objectSpread(_objectSpread({}, computedProps), {}, {
            onResizeMouseDown: _this.onResizeMouseDown.bind((0, _assertThisInitialized2.default)(_this), computedProps),
            onResizeTouchStart: _this.onResizeTouchStart.bind((0, _assertThisInitialized2.default)(_this), computedProps),
            onFilterValueChange: computedProps.computedOnColumnFilterValueChange,
            ref: _this.refHeaderLayout,
            getScrollLeftMax: _this.getScrollLeftMax,
            setScrollLeft: _this.setScrollLeft
          }));
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderContent", function(computedProps) {
          var groupBy = computedProps.groupBy;
          var groupByValue = groupBy && groupBy.length ? groupBy : null;
          return _react.default.createElement(_Content.default, _objectSpread(_objectSpread({
            key: "content"
          }, computedProps), {}, {
            getScrollLeftMax: _this.getScrollLeftMax,
            groupBy: groupByValue,
            before: _this.renderLockedStartRows(computedProps),
            after: _this.renderLockedEndRows(computedProps),
            ref: _this.refContent,
            columns: computedProps.visibleColumns,
            minWidth: computedProps.minWidth,
            maxWidth: computedProps.maxWidth,
            onDragRowMouseDown: _this.onDragRowMouseDownHandle,
            onContainerScrollHorizontal: _this.onContainerScrollHorizontal.bind((0, _assertThisInitialized2.default)(_this), computedProps),
            onContainerScrollVertical: _this.onContainerScrollVertical.bind((0, _assertThisInitialized2.default)(_this), computedProps),
            onColumnRenderStartIndexChange: _this.onColumnRenderStartIndexChange
          }));
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDragRowMouseDownHandle", function(ev, index2, cellNode) {
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLockedEndRows", function(computedProps) {
          return null;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLockedStartRows", function(computedProps) {
          return null;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLockedRows", function(rows, position, computedProps) {
          return null;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderResizeOverlay", function(computedProps) {
          return _react.default.createElement(_ResizeOverlay.default, {
            resizeProxyStyle: computedProps.resizeProxyStyle,
            columnResizeProxyWidth: computedProps.columnResizeProxyWidth,
            columnResizeHandleWidth: computedProps.columnResizeHandleWidth,
            rtl: computedProps.rtl,
            ref: _this.refResizeOverlay
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onColumnRenderStartIndexChange", function(columnRenderStartIndex) {
          if (_this.headerLayout) {
            _this.headerLayout.setColumnRenderStartIndex(columnRenderStartIndex);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScrollVertical", function(computedProps, scrollTop) {
          _this.scrollTop = scrollTop;
          var computedLockedRows = computedProps.computedLockedRows, rowHeight = computedProps.rowHeight, stickyHeaders = computedProps.stickyHeaders, groupBy = computedProps.groupBy;
          if (rowHeight && stickyHeaders && groupBy && groupBy.length) {
            _this.updateStickyHeader(scrollTop);
          }
          if (computedLockedRows && computedLockedRows.length) {
            _this.updateLockedRows(scrollTop);
          }
          if (computedProps.onScroll) {
            computedProps.onScroll();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScrollHorizontal", function(computedProps, scrollLeft, scrollLeftMax) {
          _this.scrollLeft = scrollLeft;
          if (_this.headerLayout) {
            _this.headerLayout.onContainerScrollHorizontal(scrollLeft, scrollLeftMax);
          }
          if (computedProps.onScroll) {
            computedProps.onScroll();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollLeft", function() {
          return _this.scrollLeft || 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollLeftMax", function() {
          var vl = _this.getVirtualList();
          if (!vl) {
            return 0;
          }
          return vl.scrollContainer.scrollLeftMax;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollTopMax", function() {
          var vl = _this.getVirtualList();
          if (!vl) {
            return;
          }
          return vl.scrollContainer.scrollTopMax;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollLeft", function(scrollLeft) {
          var vl = _this.getVirtualList();
          if (!vl) {
            return;
          }
          vl.scrollLeft = scrollLeft;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollTop", function(scrollTop) {
          var vl = _this.getVirtualList();
          if (!vl) {
            return;
          }
          vl.scrollTop = scrollTop;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVirtualList", function() {
          return _this.content ? _this.content.getVirtualList() : null;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startEdit", function(args) {
          return _this.content.startEdit(args);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cancelEdit", function(args) {
          return _this.content.cancelEdit(args);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "completeEdit", function(args) {
          return _this.content.completeEdit(args);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRenderRange", function() {
          return _this.content.getRenderRange();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getHeaderLayout", function() {
          return _this.headerLayout;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getHeaderCells", function() {
          return _this.getHeaderLayout().getHeaderCells();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getHeader", function() {
          return _this.headerLayout.getHeader();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGroupToolbar", function() {
          return _this.headerLayout.getGroupToolbar();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMColumnHeaderAt", function(index2) {
          return _this.headerLayout.getCellDOMNodeAt(index2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeMouseDown", function() {
          var _this2;
          if (_isMobile.default) {
            return;
          }
          (_this2 = _this).onResizeDownAction.apply(_this2, arguments);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeDownAction", function(computedProps, config, _ref) {
          var colHeaderNode = _ref.colHeaderNode, event2 = _ref.event, groupColumns = _ref.groupColumns;
          var visibleIndex = config.computedVisibleIndex;
          _this.setupColumnResize(computedProps, {
            groupColumns,
            visibleIndex: visibleIndex !== void 0 ? visibleIndex : config.visibleIndex,
            colHeaderNode,
            headerNode: _this.getHeader().getDOMNode(),
            event: event2
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeTouchStart", function() {
          var _this3;
          (_this3 = _this).onResizeDownAction.apply(_this3, arguments);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupColumnResize", function(computedProps, _ref2) {
          var visibleIndex = _ref2.visibleIndex, groupColumns = _ref2.groupColumns, colHeaderNode = _ref2.colHeaderNode, event2 = _ref2.event;
          event2.stopPropagation();
          if (event2.ctrlKey) {
            return;
          }
          var rtl = computedProps.rtl;
          var region = _region.default.from(event2.currentTarget.firstChild || event2.currentTarget);
          var columns = computedProps.visibleColumns;
          var firstFlexIndex = columns.reduce(function(index3, col, i) {
            if (col.flex != null && index3 == -1) {
              return i;
            }
            return index3;
          }, -1);
          var index2 = visibleIndex;
          var headerRegion = _region.default.from(_this.getHeaderLayout().headerDomNode.current);
          var constrainTo = _region.default.from(headerRegion.get());
          constrainTo.set((0, _defineProperty2.default)({}, _this.props.rtl ? "left" : "right", (_this.props.rtl ? -1 : 1) * (globalObject.screen ? globalObject.screen.width * 3 : _region.default.from(document.documentElement).getRight() * 2)));
          var column = columns[index2];
          var columnRegion = _region.default.from(colHeaderNode);
          var extraOffset = column.lastInGroup ? region.width : region.width / 2;
          var maxPos;
          if (groupColumns) {
            var columnsMap = computedProps.columnsMap;
            var groupCols = groupColumns.map(function(colId) {
              return columnsMap[colId];
            });
            var firstColumnRegion = _region.default.from(_this.getDOMColumnHeaderAt(groupCols[0].computedVisibleIndex));
            var minWidth = groupCols.reduce(function(acc, col) {
              return acc + col.computedMinWidth;
            }, 0);
            var maxWidth = groupCols.reduce(function(acc, col) {
              return acc + (col.computedMaxWidth || Infinity);
            }, 0);
            var pos = rtl ? firstColumnRegion.right - minWidth - extraOffset : minWidth + firstColumnRegion.left - extraOffset;
            constrainTo.set((0, _defineProperty2.default)({}, rtl ? "right" : "left", pos));
            if (maxWidth !== Infinity) {
              maxPos = rtl ? firstColumnRegion.right - maxWidth : firstColumnRegion.left + maxWidth + extraOffset;
            }
          } else {
            var _minWidth = column.computedMinWidth;
            if (_this.props.rtl) {
              var right = columnRegion.right - _minWidth - extraOffset;
              constrainTo.set({
                right
              });
              if (column.computedMaxWidth) {
                maxPos = columnRegion.right - column.computedMaxWidth;
              }
            } else {
              var left = _minWidth + columnRegion.left - extraOffset;
              constrainTo.set({
                left
              });
              if (column.computedMaxWidth) {
                maxPos = columnRegion.left + column.computedMaxWidth;
              }
            }
          }
          var shareSpace = computedProps.shareSpaceOnResize;
          var nextCol = columns[index2 + 1];
          var nextColHeaderNode = _this.getDOMColumnHeaderAt(index2 + 1);
          var nextColumnRegion = nextCol ? _region.default.from(nextColHeaderNode) : null;
          if (column && column.computedResizable === false || nextCol && nextCol.computedResizable === false) {
            shareSpace = false;
          }
          if (shareSpace && nextColHeaderNode) {
            if (_this.props.rtl) {
              var nextColLeft = nextColumnRegion.left + nextCol.computedMinWidth;
              if (!maxPos || nextColLeft > maxPos) {
                maxPos = nextColLeft;
              }
            } else {
              var nextColRight = nextColumnRegion.right - nextCol.computedMinWidth;
              if (!maxPos || nextColRight < maxPos) {
                maxPos = nextColRight;
              }
            }
          }
          if (maxPos != null) {
            constrainTo.set((0, _defineProperty2.default)({}, _this.props.rtl ? "left" : "right", maxPos));
          }
          if (_this.props.rtl) {
            if (nextCol) {
              constrainTo.set({
                left: constrainTo.left - computedProps.columnResizeHandleWidth / 2
              });
            }
            constrainTo.set({
              right: constrainTo.right + computedProps.columnResizeHandleWidth
            });
          }
          _this.props.coverHandleRef.current.setCursor("col-resize");
          (0, _setupColumnResize.default)({
            headerRegion,
            constrainTo,
            region,
            columns,
            index: index2,
            rtl: _this.props.rtl,
            extraOffset: 0,
            firstFlexIndex,
            groupColumns,
            shareSpaceOnResize: computedProps.shareSpaceOnResize,
            shareSpace,
            nextColumnSize: nextColumnRegion ? nextColumnRegion.width : null,
            initialSize: columnRegion.width
          }, {
            onResizeDragInit: _this.onResizeDragInit.bind((0, _assertThisInitialized2.default)(_this), computedProps),
            onResizeDrag: _this.onResizeDrag.bind((0, _assertThisInitialized2.default)(_this), computedProps),
            onResizeDrop: _this.onResizeDrop.bind((0, _assertThisInitialized2.default)(_this), computedProps)
          }, event2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeDragInit", function(computedProps, _ref3) {
          var offset = _ref3.offset, constrained = _ref3.constrained;
          var offsetTop = _this.getHeaderLayout().getHeader().domRef.current.offsetTop;
          _this.props.coverHandleRef.current.setActive(true);
          _this.resizeOverlay.setOffset(offset).setActive(true, {
            offsetTop
          }).setConstrained(constrained);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeDrop", function(computedProps, _ref4) {
          var index2 = _ref4.index, offset = _ref4.offset, diff = _ref4.diff, groupColumns = _ref4.groupColumns, constrained = _ref4.constrained, size = _ref4.size, nextColumnSize = _ref4.nextColumnSize, firstFlexIndex = _ref4.firstFlexIndex, shareSpace = _ref4.shareSpace;
          _this.props.coverHandleRef.current.setActive(false);
          if (_this.resizeOverlay) {
            _this.resizeOverlay.setOffset(offset).setConstrained(constrained).setActive(false);
          }
          if (computedProps.virtualizeColumns) {
            setTimeout(function() {
              _this.headerLayout.header.updateColumns();
            }, 10);
          }
          computedProps.computedOnColumnResize({
            groupColumns,
            diff,
            index: index2,
            size,
            nextColumnSize,
            firstFlexIndex,
            shareSpace
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeDrag", function(computedProps, _ref5) {
          var offset = _ref5.offset, constrained = _ref5.constrained;
          if (_this.resizeOverlay) {
            _this.resizeOverlay.setOffset(offset).setConstrained(constrained);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowFullyVisible", function(index2) {
          return _this.content.isRowFullyVisible(index2);
        });
        _this.refResizeOverlay = function(r) {
          _this.resizeOverlay = r;
        };
        _this.refHeaderLayout = function(layout) {
          _this.headerLayout = layout;
        };
        _this.columnLayoutRef = (0, _react.createRef)();
        _this.refContent = function(c) {
          _this.content = c;
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaDataGridColumnLayout2, [{
        key: "tryStartEdit",
        value: function tryStartEdit(args) {
          return this.content.tryStartEdit(args);
        }
      }, {
        key: "render",
        value: function render() {
          var _this4 = this;
          var className = (0, _join.default)("InovuaReactDataGrid__column-layout");
          return _react.default.createElement(_context.Consumer, null, function(computedProps) {
            var flexIndex = 1;
            var useNativeFlex = computedProps.useNativeFlex;
            _this4.lastComputedProps = computedProps;
            return _react.default.createElement("div", {
              ref: _this4.columnLayoutRef,
              className,
              style: _objectSpread(_objectSpread({}, height100), _this4.props.style)
            }, _react.default.createElement(_FakeFlex.default, {
              useNativeFlex,
              flexIndex,
              getNode: _this4.getDOMNode
            }, _this4.renderHeaderLayout(computedProps), _this4.renderContent(computedProps)), computedProps && computedProps.rowReorderAutoScroll && _this4.renderScrollingTopRegion(), _this4.renderReorderRowProxy(computedProps), _this4.renderResizeOverlay(computedProps), _this4.renderDragRowArrow(computedProps), computedProps && computedProps.rowReorderAutoScroll && _this4.renderScrollingBottomRegion());
          });
        }
      }, {
        key: "renderReorderRowProxy",
        value: function renderReorderRowProxy() {
          return null;
        }
      }, {
        key: "renderDragRowArrow",
        value: function renderDragRowArrow() {
          return null;
        }
      }, {
        key: "updateLockedRows",
        value: function updateLockedRows(scrollTop) {
          return;
        }
      }, {
        key: "updateStickyHeader",
        value: function updateStickyHeader() {
        }
      }]);
      return InovuaDataGridColumnLayout2;
    }(_react.default.Component);
    exports.default = InovuaDataGridColumnLayout;
    InovuaDataGridColumnLayout.defaultProps = {
      reorderProxySize: 3
    };
    InovuaDataGridColumnLayout.propTypes = {
      minRowWidth: _propTypes.default.number,
      onMount: _propTypes.default.func,
      onUnmount: _propTypes.default.func,
      onRowMouseEnter: _propTypes.default.func,
      onRowMouseLeave: _propTypes.default.func,
      reorderProxySize: _propTypes.default.number.isRequired
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/Layout/index.js
var require_Layout = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Layout/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _reactDom = require_react_dom();
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _PaginationToolbar = _interopRequireDefault(require_PaginationToolbar2());
    var _shouldComponentUpdate2 = _interopRequireDefault(require_shouldComponentUpdate());
    var _ColumnLayout = _interopRequireDefault(require_ColumnLayout());
    var _FakeFlex = _interopRequireDefault(require_FakeFlex());
    var _join = _interopRequireDefault(require_join4());
    var _context = require_context();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var stopPropagation = function stopPropagation2(e) {
      return e.stopPropagation();
    };
    var InovuaDataGridLayout = function(_Component) {
      (0, _inherits2.default)(InovuaDataGridLayout2, _Component);
      var _super = _createSuper(InovuaDataGridLayout2);
      function InovuaDataGridLayout2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaDataGridLayout2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "ref", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domNode", null);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refColumnLayout", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "columnLayout", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dragHeader", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMNode", function() {
          return _this.domNode;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderPageList", function(list) {
          if (!_reactDom.createPortal) {
            return list;
          }
          return _this.props.renderInPortal(list);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowMouseEnter", function(event2, rowProps) {
          _this.props.onRowMouseEnter && _this.props.onRowMouseEnter(event2, rowProps);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowMouseLeave", function(event2, rowProps) {
          _this.props.onRowMouseLeave && _this.props.onRowMouseLeave(event2, rowProps);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVirtualList", function() {
          return _this.columnLayout && _this.columnLayout.getVirtualList();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRenderRange", function() {
          return _this.columnLayout.getRenderRange();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowFullyVisible", function(index2) {
          return _this.columnLayout.isRowFullyVisible(index2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollLeft", function() {
          return _this.columnLayout ? _this.columnLayout.scrollLeft || 0 : 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getColumnLayout", function() {
          return _this.columnLayout;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollLeft", function(scrollLeft) {
          if (_this.columnLayout) {
            _this.columnLayout.setScrollLeft(scrollLeft);
            if (_this.dragHeader) {
              _this.dragHeader.setScrollLeft(scrollLeft);
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollTop", function() {
          return _this.columnLayout ? _this.columnLayout.scrollTop || 0 : 0;
        });
        _this.ref = function(domNode) {
          _this.domNode = domNode;
        };
        _this.refColumnLayout = function(layout) {
          _this.columnLayout = layout;
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaDataGridLayout2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var Footer = this.props.Footer;
          return _react.default.createElement(_context.Consumer, null, function(computedProps) {
            var ColumnLayoutCmp = computedProps && computedProps.ColumnLayout || _ColumnLayout.default;
            return _react.default.createElement("div", {
              className: "InovuaReactDataGrid__body",
              ref: _this2.ref
            }, _react.default.createElement(_FakeFlex.default, {
              flexIndex: 0,
              getNode: _this2.getDOMNode,
              useNativeFlex: computedProps.useNativeFlex
            }, _react.default.createElement(ColumnLayoutCmp, {
              key: "collayout",
              ref: _this2.refColumnLayout,
              rtl: computedProps.rtl,
              coverHandleRef: computedProps.coverHandleRef
            }), _this2.renderPaginationToolbar(computedProps), computedProps.computedFooterRows && Footer ? _react.default.createElement(Footer, {
              key: "footer",
              rows: computedProps.computedFooterRows
            }) : null));
          });
        }
      }, {
        key: "renderPaginationToolbar",
        value: function renderPaginationToolbar(computedProps) {
          var pagination = computedProps.pagination, paginationProps = computedProps.paginationProps, i18n = computedProps.i18n, theme = computedProps.theme, pageSizes = computedProps.pageSizes;
          if (!pagination) {
            return null;
          }
          if (!paginationProps || paginationProps.livePagination) {
            return null;
          }
          var result;
          if (computedProps.renderPaginationToolbar) {
            result = computedProps.renderPaginationToolbar(paginationProps);
          }
          var paginationToolbarProps = _objectSpread(_objectSpread({
            perPageText: i18n("perPageText"),
            pageText: i18n("pageText"),
            ofText: i18n("ofText"),
            showingText: i18n("showingText"),
            rtl: computedProps.rtl
          }, paginationProps), {}, {
            pageSizes,
            onClick: stopPropagation,
            theme,
            className: (0, _join.default)(paginationProps.className, this.props.useNativeFlex ? "InovuaReactDataGrid-modifier--relative" : "")
          });
          paginationToolbarProps.bordered = false;
          delete paginationToolbarProps.livePagination;
          if (result === void 0) {
            result = _react.default.createElement(_PaginationToolbar.default, _objectSpread(_objectSpread({
              key: "paginationtoolbar"
            }, paginationToolbarProps), {}, {
              constrainTo: this.props.constrainTo,
              renderPageList: this.renderPageList
            }));
          }
          return result;
        }
      }]);
      return InovuaDataGridLayout2;
    }(_react.Component);
    (0, _defineProperty2.default)(InovuaDataGridLayout, "defaultProps", void 0);
    (0, _defineProperty2.default)(InovuaDataGridLayout, "propTypes", void 0);
    InovuaDataGridLayout.defaultProps = {
      defaultScrollTop: 0,
      onRowMouseEnter: function onRowMouseEnter() {
      },
      onRowMouseLeave: function onRowMouseLeave() {
      },
      rowPlaceholderDelay: 300
    };
    InovuaDataGridLayout.propTypes = {
      i18n: _propTypes.default.func,
      shouldComponentUpdate: _propTypes.default.func,
      constrainTo: _propTypes.default.any,
      Footer: _propTypes.default.any,
      loading: _propTypes.default.bool,
      onScroll: _propTypes.default.func,
      onRowMouseEnter: _propTypes.default.func,
      onRowMouseLeave: _propTypes.default.func
    };
    var _default = InovuaDataGridLayout;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/LoadMask/src/SvgLoader.js
var require_SvgLoader = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/LoadMask/src/SvgLoader.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _join = _interopRequireDefault(require_join());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var DEFAULT_CLASS_NAME = "inovua-react-toolkit-load-mask__loader";
    var InovuaSvgLoader = function(_React$Component) {
      (0, _inherits2.default)(InovuaSvgLoader2, _React$Component);
      var _super = _createSuper(InovuaSvgLoader2);
      function InovuaSvgLoader2() {
        (0, _classCallCheck2.default)(this, InovuaSvgLoader2);
        return _super.apply(this, arguments);
      }
      (0, _createClass2.default)(InovuaSvgLoader2, [{
        key: "render",
        value: function render() {
          var props2 = this.props;
          var style = _objectSpread(_objectSpread({}, props2.style), {}, {
            width: props2.size,
            height: props2.size
          });
          if (props2.animationDuration) {
            style.animationDuration = props2.animationDuration;
          }
          var className = (0, _join.default)(props2.className, DEFAULT_CLASS_NAME, "".concat(DEFAULT_CLASS_NAME, "--svg"), props2.theme && "".concat(DEFAULT_CLASS_NAME, "--theme-").concat(props2.theme));
          return _react.default.createElement("div", {
            style,
            className
          }, _react.default.createElement("svg", {
            className: "".concat(DEFAULT_CLASS_NAME, "-spinner"),
            width: props2.size,
            height: props2.size,
            viewBox: "0 0 32 32"
          }, _react.default.createElement("path", {
            fillRule: "evenodd",
            d: "M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16zm0-4c6.627 0 12-5.373 12-12S22.627 4 16 4 4 9.373 4 16s5.373 12 12 12z"
          })));
        }
      }]);
      return InovuaSvgLoader2;
    }(_react.default.Component);
    exports.default = InovuaSvgLoader;
    InovuaSvgLoader.propTypes = {
      size: _propTypes.default.number,
      theme: _propTypes.default.string,
      animationDuration: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    };
    InovuaSvgLoader.defaultProps = {
      size: 40
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/LoadMask/src/SpinLoader.js
var require_SpinLoader = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/LoadMask/src/SpinLoader.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _join = _interopRequireDefault(require_join());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var DEFAULT_CLASS_NAME = "inovua-react-toolkit-load-mask__loader";
    var LOADBAR_CLASSNAME = "".concat(DEFAULT_CLASS_NAME, "-loadbar");
    var getMeasureName = function getMeasureName2(duration) {
      if (typeof duration == "number" || duration * 1 == duration) {
        return "s";
      }
      var measure;
      duration.match(/[a-zA-Z]*$/, function(match) {
        measure = match;
      });
      return measure || "s";
    };
    var InovuaSpinLoader = function(_React$Component) {
      (0, _inherits2.default)(InovuaSpinLoader2, _React$Component);
      var _super = _createSuper(InovuaSpinLoader2);
      function InovuaSpinLoader2() {
        (0, _classCallCheck2.default)(this, InovuaSpinLoader2);
        return _super.apply(this, arguments);
      }
      (0, _createClass2.default)(InovuaSpinLoader2, [{
        key: "render",
        value: function render() {
          var props2 = this.props;
          var style = _objectSpread(_objectSpread({}, props2.style), {}, {
            width: props2.size,
            height: props2.size
          });
          var className = (0, _join.default)(props2.className, DEFAULT_CLASS_NAME, "".concat(DEFAULT_CLASS_NAME, "--spin"), props2.theme && "".concat(DEFAULT_CLASS_NAME, "--theme-").concat(props2.theme));
          var animationDuration = props2.animationDuration;
          var measureName = animationDuration ? getMeasureName(animationDuration) : "";
          var bars = (0, _toConsumableArray2.default)(Array(12)).map(function(_, i) {
            var index2 = i + 1;
            return _react.default.createElement("div", {
              key: index2,
              className: "".concat(LOADBAR_CLASSNAME, " ").concat(LOADBAR_CLASSNAME, "--").concat(index2)
            });
          });
          return _react.default.createElement("div", {
            style,
            className
          }, bars);
        }
      }]);
      return InovuaSpinLoader2;
    }(_react.default.Component);
    InovuaSpinLoader.propTypes = {
      size: _propTypes.default.number,
      theme: _propTypes.default.string,
      animationDuration: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    };
    InovuaSpinLoader.defaultProps = {
      size: 40
    };
    var _default = InovuaSpinLoader;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/LoadMask/src/index.js
var require_src21 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/LoadMask/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _cleanProps = _interopRequireDefault(require_cleanProps());
    var _join = _interopRequireDefault(require_join());
    var _SvgLoader = _interopRequireDefault(require_SvgLoader());
    var _SpinLoader = _interopRequireDefault(require_SpinLoader());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var DEFAULT_CLASS_NAME = "inovua-react-toolkit-load-mask";
    var InovuaLoadMask = (0, _react.forwardRef)(function(props2, ref) {
      var visibleClassName = props2.visible ? "".concat(props2.rootClassName, "--visible") : "";
      var className = (0, _join.default)(props2.className, props2.rootClassName, visibleClassName, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme));
      var layerClassName = (0, _join.default)(props2.backgroundLayerClassName, "".concat(props2.rootClassName, "__background-layer"));
      var style = _objectSpread({}, props2.style);
      var layerStyle = _objectSpread({}, props2.backgroundLayerStyle);
      if (props2.zIndex != null) {
        style.zIndex = props2.zIndex;
      }
      if (props2.background !== true) {
        layerStyle.background = props2.background === false ? "transparent" : props2.background;
      }
      if (props2.backgroundOpacity != null) {
        layerStyle.opacity = props2.backgroundOpacity;
      }
      var pointerEvents = props2.pointerEvents;
      if (pointerEvents !== true) {
        style.pointerEvents = pointerEvents === false ? "none" : pointerEvents;
      }
      var Loader = props2.svgLoader ? _SvgLoader.default : _SpinLoader.default;
      return _react.default.createElement("div", _objectSpread(_objectSpread({
        ref
      }, (0, _cleanProps.default)(props2, InovuaLoadMask.propTypes)), {}, {
        className,
        style
      }), _react.default.createElement("div", {
        style: layerStyle,
        className: layerClassName
      }), _react.default.createElement("div", {
        className: "".concat(props2.rootClassName, "__loader-container")
      }, _react.default.createElement(Loader, {
        size: props2.size,
        theme: props2.theme,
        animationDuration: props2.animationDuration
      }), props2.children));
    });
    InovuaLoadMask.defaultProps = {
      visible: true,
      svgLoader: true,
      theme: "default-light",
      zIndex: 100,
      pointerEvents: true,
      backgroundOpacity: 0.6,
      background: true,
      backgroundLayerStyle: {},
      rootClassName: DEFAULT_CLASS_NAME
    };
    InovuaLoadMask.propTypes = {
      animationDuration: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      svgLoader: _propTypes.default.bool,
      zIndex: _propTypes.default.number,
      visible: _propTypes.default.bool,
      pointerEvents: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
      backgroundOpacity: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      background: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
      theme: _propTypes.default.string,
      backgroundLayerClassName: _propTypes.default.string,
      backgroundLayerStyle: _propTypes.default.object,
      rootClassName: _propTypes.default.string
    };
    var _default = InovuaLoadMask;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/LoadMask/index.js
var require_LoadMask = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/LoadMask/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src21());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/LoadMask.js
var require_LoadMask2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/LoadMask.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _react = _interopRequireWildcard(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _LoadMask = _interopRequireDefault(require_LoadMask());
    var _reactCleanProps = _interopRequireDefault(require_react_clean_props());
    var _join = _interopRequireDefault(require_join4());
    var _renderEmptyContent = _interopRequireDefault(require_renderEmptyContent());
    var _getGlobal = require_getGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var stop = function stop2(e) {
      if (e.cancelable === false) {
        return;
      }
      e.preventDefault();
    };
    var DEFAULT_CLASSNAME = "InovuaReactDataGrid__load-mask";
    var DataGridLoadMask = function(_React$Component) {
      (0, _inherits2.default)(DataGridLoadMask2, _React$Component);
      var _super = _createSuper(DataGridLoadMask2);
      function DataGridLoadMask2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, DataGridLoadMask2);
        _this = _super.call(this, props2);
        _this.visible = props2.visible;
        _this.maskRef = (0, _react.createRef)();
        return _this;
      }
      (0, _createClass2.default)(DataGridLoadMask2, [{
        key: "setVisible",
        value: function setVisible(visible) {
          var _this2 = this;
          if (this.props.livePagination) {
            this.visible = visible;
            var fn = function fn2() {
              var node = _this2.maskRef.current;
              if (!node || !_this2.scroller) {
                return;
              }
              node.style.visibility = visible ? "visible" : "hidden";
              if (visible === false) {
                _this2.scroller.scrollTop = 0;
              }
            };
            if (!visible) {
              globalObject.requestAnimationFrame(fn);
            } else {
              fn();
            }
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.setVisible(this.props.visible);
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var livePagination = props2.livePagination, loadingText = props2.loadingText, visible = props2.visible;
          var style = props2.style;
          var cleanProps = (0, _reactCleanProps.default)(props2, DataGridLoadMask2.propTypes);
          var className = (0, _join.default)(DEFAULT_CLASSNAME, props2.className, livePagination && "".concat(DEFAULT_CLASSNAME, "--live-pagination"));
          return _react.default.createElement(_LoadMask.default, _objectSpread(_objectSpread({}, cleanProps), {}, {
            ref: this.maskRef,
            style,
            visible,
            className,
            onWheel: livePagination ? stop : null
          }), (0, _renderEmptyContent.default)(loadingText, "loading"));
        }
      }]);
      return DataGridLoadMask2;
    }(_react.default.Component);
    exports.default = DataGridLoadMask;
    DataGridLoadMask.defaultProps = {
      livePagination: false,
      visible: false
    };
    DataGridLoadMask.propTypes = {
      visible: _propTypes.default.bool,
      loadingText: _propTypes.default.node,
      livePagination: _propTypes.default.bool
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/filterTypes.js
var require_filterTypes = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/filterTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.stringTypes = exports.string = exports.selectTypes = exports.select = exports.numberTypes = exports.number = exports.default = exports.dateTypes = exports.date = exports.booleanTypes = exports.boolean = exports.boolTypes = exports.bool = void 0;
    var emptyObject = {};
    var stringTypes = {
      type: "string",
      emptyValue: "",
      operators: [{
        name: "contains",
        fn: function fn(_ref) {
          var value = _ref.value, filterValue = _ref.filterValue;
          value = value || "";
          return !filterValue ? true : value.toLowerCase().indexOf(filterValue.toLowerCase()) != -1;
        }
      }, {
        name: "notContains",
        fn: function fn(_ref2) {
          var value = _ref2.value, filterValue = _ref2.filterValue;
          return !filterValue ? true : (value || "").toLowerCase().indexOf(filterValue.toLowerCase()) === -1;
        }
      }, {
        name: "eq",
        fn: function fn(_ref3) {
          var value = _ref3.value, filterValue = _ref3.filterValue;
          return !filterValue ? true : (value || "").toLowerCase() === filterValue.toLowerCase();
        }
      }, {
        name: "neq",
        fn: function fn(_ref4) {
          var value = _ref4.value, filterValue = _ref4.filterValue;
          return !filterValue ? true : (value || "").toLowerCase() !== filterValue.toLowerCase();
        }
      }, {
        name: "empty",
        fn: function fn(_ref5) {
          var value = _ref5.value;
          return value === "";
        },
        filterOnEmptyValue: true,
        valueOnOperatorSelect: "",
        disableFilterEditor: true
      }, {
        name: "notEmpty",
        fn: function fn(_ref6) {
          var value = _ref6.value;
          return value !== "";
        },
        filterOnEmptyValue: true,
        valueOnOperatorSelect: "",
        disableFilterEditor: true
      }, {
        name: "startsWith",
        fn: function fn(_ref7) {
          var value = _ref7.value, filterValue = _ref7.filterValue;
          return !filterValue ? true : (value || "").toLowerCase().startsWith(filterValue.toLowerCase());
        }
      }, {
        name: "endsWith",
        fn: function fn(_ref8) {
          var value = _ref8.value, filterValue = _ref8.filterValue;
          return !filterValue ? true : (value || "").toLowerCase().endsWith(filterValue.toLowerCase());
        }
      }]
    };
    exports.string = exports.stringTypes = stringTypes;
    var boolTypes = {
      type: "bool",
      emptyValue: null,
      operators: [{
        name: "eq",
        fn: function fn(_ref9) {
          var value = _ref9.value, filterValue = _ref9.filterValue;
          return filterValue != null ? filterValue === value : true;
        }
      }, {
        name: "neq",
        fn: function fn(_ref10) {
          var value = _ref10.value, filterValue = _ref10.filterValue;
          return filterValue != null ? filterValue !== value : true;
        }
      }]
    };
    exports.boolean = exports.bool = exports.boolTypes = boolTypes;
    var selectTypes = {
      type: "select",
      emptyValue: null,
      operators: [{
        name: "inlist",
        fn: function fn(_ref11) {
          var value = _ref11.value, filterValue = _ref11.filterValue;
          return !filterValue || !filterValue.length ? true : filterValue.indexOf(value) !== -1;
        }
      }, {
        name: "notinlist",
        fn: function fn(_ref12) {
          var value = _ref12.value, filterValue = _ref12.filterValue;
          return !filterValue || !filterValue.length ? true : filterValue.indexOf(value) === -1;
        }
      }, {
        name: "eq",
        fn: function fn(_ref13) {
          var value = _ref13.value, filterValue = _ref13.filterValue, emptyValue = _ref13.emptyValue;
          return filterValue !== emptyValue ? filterValue === value : true;
        }
      }, {
        name: "neq",
        fn: function fn(_ref14) {
          var value = _ref14.value, filterValue = _ref14.filterValue, emptyValue = _ref14.emptyValue;
          return filterValue !== emptyValue ? filterValue !== value : true;
        }
      }]
    };
    exports.select = exports.selectTypes = selectTypes;
    var booleanTypes = {
      type: "boolean",
      emptyValue: null,
      operators: boolTypes.operators
    };
    exports.booleanTypes = booleanTypes;
    var numberTypes = {
      type: "number",
      emptyValue: null,
      operators: [{
        name: "gt",
        fn: function fn(_ref15) {
          var value = _ref15.value, filterValue = _ref15.filterValue;
          return filterValue != null ? value > filterValue : true;
        }
      }, {
        name: "gte",
        fn: function fn(_ref16) {
          var value = _ref16.value, filterValue = _ref16.filterValue;
          return filterValue != null ? value >= filterValue : true;
        }
      }, {
        name: "lt",
        fn: function fn(_ref17) {
          var value = _ref17.value, filterValue = _ref17.filterValue;
          return filterValue != null ? value < filterValue : true;
        }
      }, {
        name: "lte",
        fn: function fn(_ref18) {
          var value = _ref18.value, filterValue = _ref18.filterValue;
          return filterValue != null ? value <= filterValue : true;
        }
      }, {
        name: "eq",
        fn: function fn(_ref19) {
          var value = _ref19.value, filterValue = _ref19.filterValue;
          return filterValue != null ? value === filterValue : true;
        }
      }, {
        name: "neq",
        fn: function fn(_ref20) {
          var value = _ref20.value, filterValue = _ref20.filterValue;
          return filterValue != null ? value !== filterValue : true;
        }
      }, {
        name: "inrange",
        fn: function fn(_ref21) {
          var value = _ref21.value, filterValue = _ref21.filterValue;
          var _ref22 = filterValue || emptyObject, start = _ref22.start, end = _ref22.end;
          if (start != null && end != null) {
            return value >= start && value <= end;
          }
          if (start != null) {
            return value >= start;
          }
          if (end != null) {
            return value <= end;
          }
          return true;
        }
      }, {
        name: "notinrange",
        fn: function fn(_ref23) {
          var value = _ref23.value, filterValue = _ref23.filterValue;
          var _ref24 = filterValue || emptyObject, start = _ref24.start, end = _ref24.end;
          if (start != null && end != null) {
            return value < start || value > end;
          }
          if (start != null) {
            return value < start;
          }
          if (end != null) {
            return value > end;
          }
          return true;
        }
      }]
    };
    exports.number = exports.numberTypes = numberTypes;
    var dateTypes = {
      type: "date",
      emptyValue: "",
      operators: [{
        name: "after",
        fn: function fn(_ref25) {
          var value = _ref25.value, filterValue = _ref25.filterValue, dateFormat = _ref25.column.dateFormat;
          return filterValue ? window.moment(window.moment(value).format(dateFormat), dateFormat).isAfter(window.moment(filterValue, dateFormat)) : true;
        }
      }, {
        name: "afterOrOn",
        fn: function fn(_ref26) {
          var value = _ref26.value, filterValue = _ref26.filterValue, dateFormat = _ref26.column.dateFormat;
          return filterValue != null ? window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrAfter(window.moment(filterValue, dateFormat)) : true;
        }
      }, {
        name: "before",
        fn: function fn(_ref27) {
          var value = _ref27.value, filterValue = _ref27.filterValue, dateFormat = _ref27.column.dateFormat;
          return filterValue != null ? window.moment(window.moment(value).format(dateFormat), dateFormat).isBefore(window.moment(filterValue, dateFormat)) : true;
        }
      }, {
        name: "beforeOrOn",
        fn: function fn(_ref28) {
          var value = _ref28.value, filterValue = _ref28.filterValue, dateFormat = _ref28.column.dateFormat;
          return filterValue != null ? window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrBefore(window.moment(filterValue, dateFormat)) : true;
        }
      }, {
        name: "eq",
        fn: function fn(_ref29) {
          var value = _ref29.value, filterValue = _ref29.filterValue, dateFormat = _ref29.column.dateFormat;
          return filterValue ? window.moment(window.moment(value).format(dateFormat), dateFormat).isSame(window.moment(filterValue, dateFormat)) : true;
        }
      }, {
        name: "neq",
        fn: function fn(_ref30) {
          var value = _ref30.value, filterValue = _ref30.filterValue, dateFormat = _ref30.column.dateFormat;
          return filterValue ? !window.moment(window.moment(value).format(dateFormat), dateFormat).isSame(window.moment(filterValue, dateFormat)) : true;
        }
      }, {
        name: "inrange",
        fn: function fn(_ref31) {
          var value = _ref31.value, filterValue = _ref31.filterValue, dateFormat = _ref31.column.dateFormat;
          var _ref32 = filterValue || emptyObject, start = _ref32.start, end = _ref32.end;
          if (start && end) {
            return window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrAfter(window.moment(start, dateFormat)) && window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrBefore(window.moment(end, dateFormat));
          }
          if (start) {
            return window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrAfter(window.moment(start, dateFormat));
          }
          if (end) {
            return window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrBefore(window.moment(end, dateFormat));
          }
          return true;
        }
      }, {
        name: "notinrange",
        fn: function fn(_ref33) {
          var value = _ref33.value, filterValue = _ref33.filterValue, dateFormat = _ref33.column.dateFormat;
          var _ref34 = filterValue || emptyObject, start = _ref34.start, end = _ref34.end;
          if (start && end) {
            return window.moment(window.moment(value).format(dateFormat), dateFormat).isBefore(window.moment(start, dateFormat)) || window.moment(window.moment(value).format(dateFormat), dateFormat).isAfter(window.moment(end, dateFormat));
          }
          if (start) {
            return window.moment(window.moment(value).format(dateFormat), dateFormat).isBefore(window.moment(start, dateFormat));
          }
          if (end) {
            return window.moment(window.moment(value).format(dateFormat), dateFormat).isAfter(window.moment(end, dateFormat));
          }
          return true;
        }
      }]
    };
    exports.date = exports.dateTypes = dateTypes;
    var defaultFilterTypes = {
      select: selectTypes,
      string: stringTypes,
      number: numberTypes,
      bool: boolTypes,
      boolean: booleanTypes,
      date: dateTypes
    };
    var _default = defaultFilterTypes;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/columnResize/index.js
var require_columnResize = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/columnResize/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _clamp = _interopRequireDefault(require_clamp());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var normalize = function normalize2(result) {
      var newColumnFlexes = result.newColumnFlexes, newColumnSizes = result.newColumnSizes, maxAvailableWidthForColumns = result.maxAvailableWidthForColumns;
      if (newColumnFlexes && !Object.keys(newColumnFlexes).length) {
        newColumnFlexes = void 0;
      }
      if (newColumnSizes && !Object.keys(newColumnSizes).length) {
        newColumnSizes = void 0;
      }
      return _objectSpread(_objectSpread({}, result), {}, {
        newColumnFlexes,
        newColumnSizes,
        maxAvailableWidthForColumns
      });
    };
    var assignFlexes = function assignFlexes2(columns) {
      return columns.reduce(function(flexes, col) {
        if (col.computedFlex) {
          flexes[col.id] = col.computedWidth;
        }
        return flexes;
      }, {});
    };
    var clampColSize = function clampColSize2(size, col) {
      return (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);
    };
    var resizeGroupColumns = function resizeGroupColumns2(arg, config) {
      var totalDiff = arg.diff, maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns, shareSpaceOnResize = arg.shareSpaceOnResize, index2 = arg.index, groupColumns = arg.groupColumns, columns = arg.columns;
      columns = columns.map(function(c) {
        return _objectSpread({}, c);
      });
      var newColumnSizes = config.newColumnSizes || {};
      var columnsMap = columns.reduce(function(map, col) {
        map[col.id] = col;
        return map;
      }, {});
      var newColumnFlexes = _objectSpread(_objectSpread({}, assignFlexes(groupColumns.map(function(colId) {
        return columnsMap[colId];
      }))), config.newColumnFlexes);
      while (Math.abs(totalDiff) > 0) {
        groupColumns.forEach(function(colId, idx) {
          var col = columnsMap[colId];
          if (col.computedResizable === false) {
            return;
          }
          var totalGroupResizableWidth = groupColumns.slice(idx).reduce(function(total, colId2) {
            var col2 = columnsMap[colId2];
            if (col2.computedResizable === false) {
              return total;
            }
            if (totalDiff > 0 && col2.computedMaxWidth && col2.computedWidth >= col2.computedMaxWidth) {
              return total;
            }
            if (totalDiff < 0 && col2.computedMinWidth && col2.computedWidth <= col2.computedMinWidth) {
              return total;
            }
            return total + col2.computedWidth;
          }, 0);
          var diff = totalGroupResizableWidth ? Math.round(col.computedWidth / totalGroupResizableWidth * totalDiff) : 0;
          var adjustment = 0;
          if (!col.computedFlex) {
            newColumnSizes[col.id] = col.computedWidth = col.computedWidth + diff;
          } else {
            delete newColumnSizes[col.id];
            newColumnFlexes[col.id] = col.computedWidth = col.computedWidth + diff;
          }
          if (newColumnSizes[col.id] !== void 0) {
            var size = newColumnSizes[col.id];
            var clampedSize = (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);
            if (clampedSize !== size) {
              adjustment = size - clampedSize;
              newColumnSizes[col.id] = clampedSize;
            }
          } else if (newColumnFlexes[col.id] !== void 0) {
            var _size = newColumnFlexes[col.id];
            var _clampedSize = (0, _clamp.default)(_size, col.computedMinWidth, col.computedMaxWidth);
            if (_clampedSize !== _size) {
              adjustment = _size - _clampedSize;
              newColumnFlexes[col.id] = col.computedWidth = _clampedSize;
            }
          }
          if (diff === 0) {
            totalDiff = 0;
          } else {
            totalDiff = totalDiff - diff + adjustment;
          }
        });
      }
      return normalize(_objectSpread(_objectSpread({}, config), {}, {
        newColumnSizes,
        newColumnFlexes
      }));
    };
    var _default = function _default2(arg) {
      var shareSpaceOnResize = arg.shareSpaceOnResize, groupColumns = arg.groupColumns;
      var result = shareSpaceOnResize ? resizeShareSpace(arg) : resizeNoShareSpace(arg);
      if (groupColumns) {
        return resizeGroupColumns(arg, result);
      }
      return result;
    };
    exports.default = _default;
    var resizeShareSpace = function resizeShareSpace2(arg) {
      var columns = arg.columns, index2 = arg.index, diff = arg.diff;
      var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;
      var colLeft = columns[index2];
      var colsToRight = columns.slice(index2 + 1);
      var colRight = colsToRight[0];
      if (!colRight || colRight.computedResizable === false) {
        return resizeNoShareSpace(arg);
      }
      if (!colLeft.computedFlex && !colRight.computedFlex) {
        var _newColumnSizes;
        var newColLeftSize = colLeft.computedWidth + diff;
        var newColRightSize = clampColSize(colRight.computedWidth - diff, colRight);
        var remainingDiff = newColRightSize - (colRight.computedWidth - diff);
        var newColumnSizes = (_newColumnSizes = {}, (0, _defineProperty2.default)(_newColumnSizes, colLeft.id, newColLeftSize + remainingDiff), (0, _defineProperty2.default)(_newColumnSizes, colRight.id, newColRightSize), _newColumnSizes);
        return normalize({
          newColumnSizes,
          maxAvailableWidthForColumns
        });
      }
      if (colLeft.computedFlex && colRight.computedFlex) {
        var newColumnFlexes = assignFlexes(columns);
        newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;
        newColumnFlexes[colRight.id] = colRight.computedWidth - diff;
        return normalize({
          newColumnFlexes,
          maxAvailableWidthForColumns
        });
      }
      if (!colLeft.computedFlex) {
        var _newColumnFlexes = assignFlexes(columns);
        var _newColumnSizes2 = (0, _defineProperty2.default)({}, colLeft.id, colLeft.computedWidth + diff);
        _newColumnFlexes[colRight.id] = colRight.computedWidth - diff;
        return normalize({
          newColumnFlexes: _newColumnFlexes,
          newColumnSizes: _newColumnSizes2,
          maxAvailableWidthForColumns
        });
      }
      if (!colRight.computedFlex) {
        var flexCount = columns.reduce(function(count, col) {
          return count + (col.computedFlex ? 1 : 0);
        }, 0);
        var _newColumnFlexes2 = assignFlexes(columns);
        var _newColumnSizes4 = (0, _defineProperty2.default)({}, colRight.id, colRight.computedWidth - diff);
        _newColumnFlexes2[colLeft.id] = colLeft.computedWidth + diff;
        if (flexCount === 1 && colLeft.computedFlex) {
          _newColumnFlexes2 = {};
        }
        return normalize({
          newColumnFlexes: _newColumnFlexes2,
          newColumnSizes: _newColumnSizes4,
          maxAvailableWidthForColumns
        });
      }
    };
    var resizeNoShareSpace = function resizeNoShareSpace2(arg) {
      var columns = arg.columns, index2 = arg.index, diff = arg.diff, totalComputedWidth = arg.totalComputedWidth;
      var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;
      var colLeft = columns[index2];
      var colsToRight = columns.slice(index2 + 1);
      var colRight = colsToRight[0];
      var newColumnSizes;
      var newColumnFlexes;
      var flexCount = columns.reduce(function(count, col) {
        return count + (col.computedFlex ? 1 : 0);
      }, 0);
      if (!colLeft.computedFlex) {
        if (!flexCount) {
          newColumnSizes = {};
          if (colLeft.computedResizable !== false) {
            newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);
          }
          return normalize({
            newColumnSizes,
            newColumnFlexes: void 0,
            maxAvailableWidthForColumns
          });
        }
        newColumnSizes = {};
        newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);
        return normalize({
          newColumnSizes,
          newColumnFlexes: assignFlexes(columns),
          maxAvailableWidthForColumns: totalComputedWidth + diff
        });
      }
      newColumnFlexes = assignFlexes(columns);
      newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;
      if (flexCount === 1) {
        if (!colLeft.keepFlex) {
          delete newColumnFlexes[colLeft.id];
          newColumnSizes = {};
          newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);
        } else {
          newColumnFlexes = {};
          maxAvailableWidthForColumns = totalComputedWidth + diff;
        }
      } else {
        if (!colLeft.keepFlex) {
          delete newColumnFlexes[colLeft.id];
          newColumnSizes = {};
          newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);
          maxAvailableWidthForColumns = totalComputedWidth + diff;
        } else {
          newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;
          maxAvailableWidthForColumns = totalComputedWidth + diff;
        }
      }
      return normalize({
        newColumnFlexes,
        newColumnSizes,
        maxAvailableWidthForColumns
      });
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/setColumnId.js
var require_setColumnId = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/setColumnId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var random = function random2() {
      return Date.now ? "".concat(Date.now()).concat(Math.random()) : "".concat((/* @__PURE__ */ new Date()).getTime()) + Math.random();
    };
    var _default = function _default2(col) {
      col.id = col.id == null ? col.name || random() : col.id;
      return col;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/flex/computeFlexWidths.js
var require_computeFlexWidths = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/flex/computeFlexWidths.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var sum = function sum2(a, b) {
      return (a || 0) + (b || 0);
    };
    var EMPTY_ARRAY = [];
    var _default = function _default2(_ref) {
      var flexes = _ref.flexes, availableSize = _ref.availableSize, _ref$maxWidths = _ref.maxWidths, maxWidths = _ref$maxWidths === void 0 ? EMPTY_ARRAY : _ref$maxWidths, _ref$minWidths = _ref.minWidths, minWidths = _ref$minWidths === void 0 ? EMPTY_ARRAY : _ref$minWidths;
      flexes = (0, _toConsumableArray2.default)(flexes);
      var sumOfAllFlexes = flexes.reduce(sum, 0);
      if (minWidths.length && minWidths.length != flexes.length) {
        throw "minWidths.length needs to be === flexes.length";
      }
      if (maxWidths.length && maxWidths.length != flexes.length) {
        throw "maxWidths.length needs to be === flexes.length";
      }
      var oneFlex = sumOfAllFlexes ? availableSize / sumOfAllFlexes : 0;
      var result = flexes.map(function(_) {
        return null;
      });
      flexes.forEach(function(flex, index2) {
        var minWidth = minWidths[index2];
        flex = flex || 0;
        if (flex === 0) {
          return;
        }
        var size;
        var flexSize = Math.round(flex * oneFlex);
        var maxWidth = maxWidths[index2];
        if (minWidth != null && flexSize < minWidth) {
          availableSize -= minWidth;
          flexes[index2] = 0;
          size = minWidth;
          sumOfAllFlexes -= flex;
          oneFlex = sumOfAllFlexes ? availableSize / sumOfAllFlexes : 0;
        } else if (maxWidth != null && flexSize > maxWidth) {
          availableSize -= maxWidth;
          flexes[index2] = 0;
          size = maxWidth;
          sumOfAllFlexes -= flex;
          oneFlex = sumOfAllFlexes ? availableSize / sumOfAllFlexes : 0;
        }
        if (size) {
          result[index2] = size;
        }
      });
      var lastValidFlexIndex = flexes.reduce(function(acc, flex, index2) {
        return flex ? index2 : acc;
      }, -1);
      flexes.forEach(function(flex, index2) {
        if (!flex) {
          return;
        }
        var flexSize = Math.round(flex * oneFlex);
        if (index2 === lastValidFlexIndex) {
          flexSize = availableSize;
        }
        if (minWidths[index2] != null) {
          flexSize = Math.max(flexSize, minWidths[index2] || 0);
        }
        if (maxWidths[index2] != null) {
          flexSize = Math.min(flexSize, maxWidths[index2] || Infinity);
        }
        availableSize -= Math.max(flexSize, 0);
        result[index2] = flexSize;
      });
      return result;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/mapColumns.js
var require_mapColumns = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/mapColumns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var emptyObject = {};
    var _default = function _default2(columns) {
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, showWarnings = _ref.showWarnings;
      return columns.reduce(function(acc, col) {
        if (col.id) {
          if (showWarnings && acc[col.id]) {
            console.error('Duplicate column with id "'.concat(col.id, '" found!'));
          }
          acc[col.id] = col;
        }
        if (col.name && col.name != col.id) {
          if (showWarnings && !col.id && acc[col.name]) {
            console.error('Duplicate column with name "'.concat(col.name, '" found!'));
          }
          if (!col.id) {
            acc[col.name] = col;
          }
        }
        if (typeof col.groupBy == "string" || col.groupByName) {
          var key = col.groupBy || col.groupByName;
          acc[key] = col;
        }
        return acc;
      }, {});
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultCheckColumnId.js
var require_defaultCheckColumnId = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultCheckColumnId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.id = void 0;
    var id = "__checkbox-column";
    exports.id = id;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultRowExpandColumnId.js
var require_defaultRowExpandColumnId = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultRowExpandColumnId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.id = void 0;
    var id = "__row-expand-column";
    exports.id = id;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultRowIndexColumnId.js
var require_defaultRowIndexColumnId = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultRowIndexColumnId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.id = void 0;
    var id = "__row-index-column";
    exports.id = id;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultGroupColumnId.js
var require_defaultGroupColumnId = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultGroupColumnId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.id = void 0;
    var id = "__group-column";
    exports.id = id;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/setComputedColumnWidths.js
var require_setComputedColumnWidths = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/setComputedColumnWidths.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var emptyObject = Object.freeze ? Object.freeze({}) : {};
    var DEFAULT_WIDTH = 150;
    var computeColumnWidths = function computeColumnWidths2(col, _ref) {
      var columnMinWidth = _ref.columnMinWidth, columnWidth = _ref.columnWidth, columnMaxWidth = _ref.columnMaxWidth, _ref$columnDefaultWid = _ref.columnDefaultWidth, columnDefaultWidth = _ref$columnDefaultWid === void 0 ? DEFAULT_WIDTH : _ref$columnDefaultWid, _ref$columnSizes = _ref.columnSizes, columnSizes = _ref$columnSizes === void 0 ? emptyObject : _ref$columnSizes, _ref$columnFlexes = _ref.columnFlexes, columnFlexes = _ref$columnFlexes === void 0 ? emptyObject : _ref$columnFlexes;
      if (columnMinWidth && columnMaxWidth && columnMinWidth > columnMaxWidth) {
        var _ref2 = [columnMaxWidth, columnMinWidth];
        columnMinWidth = _ref2[0];
        columnMaxWidth = _ref2[1];
      }
      var computedDefaultWidth = col.defaultWidth;
      var computedWidth = col.width;
      var computedFlex = col.defaultFlex;
      var computedMinWidth = col.minWidth;
      var computedMaxWidth = col.maxWidth;
      if (col.defaultWidth == null && columnDefaultWidth != null) {
        computedDefaultWidth = columnDefaultWidth;
      }
      if (columnFlexes[col.id]) {
        computedFlex = columnFlexes[col.id];
      }
      if (col.flex) {
        computedFlex = col.flex;
      }
      if (!computedFlex && computedWidth === void 0 && columnSizes[col.id] !== void 0) {
        computedFlex = null;
        computedWidth = columnSizes[col.id];
      }
      if (!computedFlex) {
        computedFlex = null;
      }
      if (computedFlex != null && computedWidth == null && columnWidth != null) {
        computedWidth = columnWidth;
      }
      if (computedMinWidth == null && columnMinWidth != null) {
        computedMinWidth = columnMinWidth;
      }
      if (computedMaxWidth == null && columnMaxWidth != null) {
        computedMaxWidth = columnMaxWidth;
      }
      if (computedDefaultWidth != null && computedMinWidth != null && computedDefaultWidth < computedMinWidth) {
        computedDefaultWidth = computedMinWidth;
      }
      if (computedDefaultWidth != null && computedMaxWidth != null && computedDefaultWidth > computedMaxWidth) {
        computedDefaultWidth = computedMaxWidth;
      }
      if (computedWidth != null && computedMinWidth != null && computedWidth < computedMinWidth) {
        computedWidth = computedMinWidth;
      }
      if (computedWidth != null && computedMaxWidth != null && computedWidth > computedMaxWidth) {
        computedWidth = computedMaxWidth;
      }
      if (computedFlex == null) {
        computedWidth = computedWidth || computedDefaultWidth || computedMinWidth;
      }
      col.computedMinWidth = computedMinWidth;
      col.computedMaxWidth = computedMaxWidth;
      col.computedWidth = computedWidth;
      col.computedFlex = computedFlex;
      return col;
    };
    var _default = computeColumnWidths;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/index.js
var require_normalizeColumns = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _setColumnId = _interopRequireDefault(require_setColumnId());
    var _computeFlexWidths = _interopRequireDefault(require_computeFlexWidths());
    var _mapColumns = _interopRequireDefault(require_mapColumns());
    var _defaultCheckColumnId = require_defaultCheckColumnId();
    var _defaultRowExpandColumnId = require_defaultRowExpandColumnId();
    var _defaultRowIndexColumnId = require_defaultRowIndexColumnId();
    var _defaultGroupColumnId = require_defaultGroupColumnId();
    var _defaultRowReorderColumnId = require_defaultRowReorderColumnId();
    var _setComputedColumnWidths = _interopRequireDefault(require_setComputedColumnWidths());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var DEFAULT_COLUMN_PROPS = {
      isColumn: true,
      keepFlex: true
    };
    var defaultPivotGrandSummaryColumn = {
      sortable: false,
      draggable: false,
      filterable: false
    };
    var defaultPivotSummaryColumn = defaultPivotGrandSummaryColumn;
    var emptyArray = [];
    var emptyObject = Object.freeze ? Object.freeze({}) : {};
    var _default = function _default2(_ref) {
      var _ref$generatedColumns = _ref.generatedColumnsLength, generatedColumnsLength = _ref$generatedColumns === void 0 ? 0 : _ref$generatedColumns, columns = _ref.columns, columnMinWidth = _ref.columnMinWidth, columnMaxWidth = _ref.columnMaxWidth, columnDefaultWidth = _ref.columnDefaultWidth, columnWidth = _ref.columnWidth, _ref$columnSizes = _ref.columnSizes, columnSizes = _ref$columnSizes === void 0 ? emptyObject : _ref$columnSizes, _ref$columnVisibility = _ref.columnVisibilityMap, columnVisibilityMap = _ref$columnVisibility === void 0 ? emptyObject : _ref$columnVisibility, _ref$columnFlexes = _ref.columnFlexes, columnFlexes = _ref$columnFlexes === void 0 ? emptyObject : _ref$columnFlexes, _ref$lockedColumnsSta = _ref.lockedColumnsState, lockedColumnsState = _ref$lockedColumnsSta === void 0 ? emptyObject : _ref$lockedColumnsSta, columnOrder = _ref.columnOrder, computedPivotUniqueValuesPerColumn = _ref.computedPivotUniqueValuesPerColumn, editable = _ref.editable, pivot = _ref.pivot, sortable = _ref.sortable, filterable = _ref.filterable, resizable = _ref.resizable, pivotGrandSummaryColumn = _ref.pivotGrandSummaryColumn, lockable = _ref.lockable, checkboxColumn = _ref.checkboxColumn, rowIndexColumn = _ref.rowIndexColumn, filter = _ref.filter, rtl = _ref.rtl, filterValueMap = _ref.filterValueMap, sortInfo = _ref.sortInfo, showPivotSummaryColumns = _ref.showPivotSummaryColumns, _ref$availableWidth = _ref.availableWidth, availableWidth = _ref$availableWidth === void 0 ? 0 : _ref$availableWidth, onRowReorder = _ref.onRowReorder, rowReorderColumn = _ref.rowReorderColumn, computedGroupColumn = _ref.groupColumn;
      if (columnVisibilityMap) {
        columnVisibilityMap = _objectSpread({}, columnVisibilityMap);
      }
      var groupColumnSummaryReducers = {};
      var pivotColumnSummaryReducers = {};
      var addSortInfo = function addSortInfo2(col) {
        col.computedSortable = (typeof col.sortable === "boolean" ? col.sortable : sortable) || false;
        col.computedSortInfo = null;
        if (col.computedSortable && sortInfo) {
          col.computedSortInfo = Array.isArray(sortInfo) ? sortInfo.filter(function(info) {
            return info.name === col.id || info.id === col.id || info.name === col.sortName;
          })[0] : sortInfo.name === col.id || sortInfo.id === col.id || sortInfo.name === col.sortName ? sortInfo : null;
        }
      };
      var addFilterValue = function addFilterValue2(col) {
        col.computedFilterable = (typeof col.filterable === "boolean" ? col.filterable : filterable) || void 0;
        col.computedFilterValue = null;
        if (col.computedFilterable && filterValueMap) {
          col.computedFilterValue = filterValueMap[col.id];
        }
        if (col.computedFilterable === void 0 && col.computedFilterValue) {
          col.computedFilterable = true;
        }
        col.computedFilterable = !!col.computedFilterable;
      };
      var hasLockedStart = false;
      var hasLockedEnd = false;
      var hasValueSetter = false;
      var rowExpandColumn;
      var setComputedColumnWidthsParam = {
        columnFlexes,
        columnSizes,
        columnDefaultWidth,
        columnWidth,
        columnMinWidth,
        columnMaxWidth
      };
      var hasDedicatedGroupColumn = false;
      var normalizedColumns = columns.map(function(column) {
        return _objectSpread(_objectSpread({}, DEFAULT_COLUMN_PROPS), column);
      }).map(_setColumnId.default).map(function(col, i) {
        col.computedInitialIndex = i - generatedColumnsLength;
        (0, _setComputedColumnWidths.default)(col, setComputedColumnWidthsParam);
        col.computedVisible = col.visible !== void 0 ? !!col.visible : columnVisibilityMap[col.id] === false ? false : true;
        if (col.computedVisible && pivot && !col.groupSummaryReducer && col.id !== _defaultGroupColumnId.id) {
          col.computedVisible = false;
        }
        if (col.computedVisible === false) {
          columnVisibilityMap[col.id] = false;
        } else {
          delete columnVisibilityMap[col.id];
          if (col.id === _defaultGroupColumnId.id) {
            hasDedicatedGroupColumn = true;
          }
        }
        col.computedHeader = col.header === void 0 ? col.name || "" : col.header;
        col.computedLocked = col.locked;
        if (col.computedLocked === void 0 && lockedColumnsState[col.id] !== void 0) {
          col.computedLocked = lockedColumnsState[col.id];
        }
        if (col.computedLocked === void 0 && col.defaultLocked !== void 0) {
          col.computedLocked = col.defaultLocked;
        }
        if (!filter || filter(col)) {
          if (col.computedLocked === true || col.computedLocked === "start") {
            col.computedLocked = "start";
            hasLockedStart = true;
          }
          if (col.computedLocked === "end") {
            hasLockedEnd = true;
          }
        }
        col.computedLocked = col.computedLocked || false;
        if (col.id === _defaultRowExpandColumnId.id) {
          rowExpandColumn = col;
        }
        if (col.enableColumnHover != null) {
          col.computedEnableColumnHover = col.enableColumnHover;
          delete col.enableColumnHover;
        }
        if (col.setValue) {
          hasValueSetter = true;
        }
        return col;
      });
      if (hasLockedStart) {
        if (rowExpandColumn != null) {
          rowExpandColumn.computedLocked = "start";
        }
        if (checkboxColumn) {
          var normalizedCheckboxColumn = normalizedColumns.filter(function(c) {
            return c.checkboxColumn && c.id == _defaultCheckColumnId.id;
          })[0];
          if (normalizedCheckboxColumn) {
            normalizedCheckboxColumn.computedLocked = "start";
          }
        }
        if (hasDedicatedGroupColumn) {
          var normalizedGroupColumn = normalizedColumns.filter(function(c) {
            return c.groupColumn && c.id == _defaultGroupColumnId.id;
          })[0];
          if (normalizedGroupColumn) {
            normalizedGroupColumn.computedLocked = "start";
          }
        }
        var autoLockColumns = normalizedColumns.filter(function(c) {
          return !!c.autoLock;
        });
        if (autoLockColumns.length) {
          autoLockColumns.forEach(function(c) {
            c.computedLocked = "start";
          });
        }
        if (rowReorderColumn || onRowReorder && (typeof onRowReorder === "function" || typeof onRowReorder === "boolean")) {
          var normalizedRowReorderColumn = normalizedColumns.filter(function(c) {
            return c.id === _defaultRowReorderColumnId.id;
          })[0];
          if (normalizedRowReorderColumn) {
            normalizedRowReorderColumn.computedLocked = "start";
          }
        }
      }
      var computedEnableRowspan = false;
      normalizedColumns.forEach(function(col, index2) {
        col.computedAbsoluteIndex = index2;
        addSortInfo(col);
        addFilterValue(col);
        if (typeof col.rowspan === "function") {
          computedEnableRowspan = true;
        }
        col.computedResizable = (typeof col.resizable !== "boolean" ? resizable : col.resizable) || false;
        col.computedLockable = (typeof col.lockable !== "boolean" ? lockable : col.lockable) || false;
      });
      var columnsMap = (0, _mapColumns.default)(normalizedColumns, {
        showWarnings: true
      });
      var visibleColumns = normalizedColumns.filter(function(c) {
        return c.computedVisible !== false;
      });
      if (columnOrder) {
        if (checkboxColumn) {
          var checkboxColumnIndex = columnOrder.indexOf(_defaultCheckColumnId.id);
          if (checkboxColumnIndex == -1) {
            columnOrder = [_defaultCheckColumnId.id].concat((0, _toConsumableArray2.default)(columnOrder));
          }
        }
      }
      if (rowExpandColumn) {
        if (!columnOrder) {
          columnOrder = visibleColumns.map(function(c) {
            return c.id;
          });
        }
        var rowExpandColumnIndex = columnOrder.indexOf(_defaultRowExpandColumnId.id);
        if (rowExpandColumnIndex !== 0) {
          columnOrder = [_defaultRowExpandColumnId.id].concat((0, _toConsumableArray2.default)(columnOrder.filter(function(id) {
            return id != _defaultRowExpandColumnId.id;
          })));
        }
      }
      if (rowReorderColumn || onRowReorder && (typeof onRowReorder === "function" || typeof onRowReorder === "boolean")) {
        if (!columnOrder) {
          columnOrder = visibleColumns.map(function(c) {
            return c.id;
          });
        }
        var rowReorderColumnIndex = columnOrder.indexOf(_defaultRowReorderColumnId.id);
        if (rowReorderColumnIndex !== 0) {
          columnOrder = [_defaultRowReorderColumnId.id].concat((0, _toConsumableArray2.default)(columnOrder.filter(function(id) {
            return id !== _defaultRowReorderColumnId.id;
          })));
        }
      }
      if (rowIndexColumn) {
        if (!columnOrder) {
          columnOrder = visibleColumns.map(function(c) {
            return c.id;
          });
        }
        var rowIndexColumnIndex = columnOrder.indexOf(_defaultRowIndexColumnId.id);
        if (rowIndexColumnIndex != 0) {
          columnOrder = [].concat((0, _toConsumableArray2.default)(columnOrder.filter(function(id) {
            var col = columnsMap[id];
            return col && col.groupSpacerColumn;
          })), [_defaultRowIndexColumnId.id], (0, _toConsumableArray2.default)(columnOrder.filter(function(id) {
            var col = columnsMap[id];
            if (!col) {
              return false;
            }
            return id != _defaultRowIndexColumnId.id && !col.groupSpacerColumn;
          })));
        }
      }
      if (generatedColumnsLength) {
        if (!columnOrder) {
          columnOrder = visibleColumns.map(function(c) {
            return c.id;
          });
        }
        var generatedColumns = visibleColumns.filter(function(c) {
          return c.groupSpacerColumn;
        });
        var generatedColumnIds = generatedColumns.reduce(function(acc, col) {
          acc[col.id] = true;
          return acc;
        }, {});
        columnOrder = [].concat((0, _toConsumableArray2.default)(generatedColumns.map(function(c) {
          return c.id;
        })), (0, _toConsumableArray2.default)(columnOrder.filter(function(id) {
          return !generatedColumnIds[id];
        })));
      }
      if (columnOrder) {
        var groupSpacerColumns = visibleColumns.filter(function(col) {
          return col.groupSpacerColumn;
        });
        var _checkboxColumn = visibleColumns.filter(function(col) {
          return col.checkboxColumn;
        });
        var groupColumns = visibleColumns.filter(function(col) {
          return col.groupColumn && !col.groupSpacerColumn;
        });
        var ungroupColumns = visibleColumns.filter(function(col) {
          if (computedGroupColumn) {
            return !col.groupColumn && !col.groupSpacerColumn && !col.checkboxColumn;
          } else {
            return !col.groupColumn && !col.groupSpacerColumn;
          }
        });
        visibleColumns = columnOrder.map(function(colId) {
          return ungroupColumns.find(function(col) {
            return col.id == colId;
          });
        }).filter(function(x) {
          return !!x;
        });
        if (computedGroupColumn) {
          visibleColumns = [].concat((0, _toConsumableArray2.default)(_checkboxColumn), (0, _toConsumableArray2.default)(groupSpacerColumns), (0, _toConsumableArray2.default)(groupColumns), (0, _toConsumableArray2.default)(visibleColumns));
        } else {
          visibleColumns = [].concat((0, _toConsumableArray2.default)(groupSpacerColumns), (0, _toConsumableArray2.default)(groupColumns), (0, _toConsumableArray2.default)(visibleColumns));
        }
      }
      if (typeof filter == "function") {
        visibleColumns = visibleColumns.filter(filter);
      }
      normalizedColumns.forEach(function(col) {
        if (col.groupSummaryReducer) {
          groupColumnSummaryReducers[col.id] = col.groupSummaryReducer;
          if (!col.groupSummaryReducer.reducer && col.groupSummaryReducer.reduce) {
            groupColumnSummaryReducers[col.id].reducer = col.groupSummaryReducer.reduce;
          }
        }
      });
      var groupColumn = visibleColumns.filter(function(col) {
        return !!col.groupColumn;
      })[0];
      if (pivot && computedPivotUniqueValuesPerColumn && groupColumn) {
        var aggregateColumns = visibleColumns.filter(function(col) {
          return !!col.groupSummaryReducer;
        });
        var newColumns = [groupColumn].concat((0, _toConsumableArray2.default)(getPivotColumns(aggregateColumns, computedPivotUniqueValuesPerColumn, columnSizes, pivot, pivotGrandSummaryColumn, showPivotSummaryColumns))).map(function(col) {
          (0, _setComputedColumnWidths.default)(col, setComputedColumnWidthsParam);
          col.computedResizable = (typeof col.resizable !== "boolean" ? resizable : col.resizable) || false;
          return col;
        });
        visibleColumns = newColumns;
        columnsMap = _objectSpread(_objectSpread({}, columnsMap), (0, _mapColumns.default)(newColumns, {
          showWarnings: true
        }));
      }
      var flexes = [];
      var maxWidths = [];
      var minWidths = [];
      var minColumnsSize = 0;
      var availableWidthForFlex = availableWidth;
      visibleColumns.forEach(function(col) {
        if (col.computedFlex == null) {
          availableWidthForFlex -= col.computedWidth || col.computedDefaultWidth || col.computedMinWidth || 0;
        }
        flexes.push(col.computedFlex || 0);
        maxWidths.push(col.computedMaxWidth || null);
        minWidths.push(col.computedMinWidth || null);
      });
      availableWidthForFlex = Math.max(availableWidthForFlex, 0);
      var flexWidths = (0, _computeFlexWidths.default)({
        flexes,
        availableSize: availableWidthForFlex,
        maxWidths,
        minWidths
      });
      var totalFlexColumnCount = 0;
      visibleColumns.forEach(function(col, index2) {
        if (col.computedFlex != null) {
          col.computedWidth = flexWidths[index2] || 0;
          totalFlexColumnCount++;
          minColumnsSize += col.minWidth || 0;
        } else {
          minColumnsSize += col.computedWidth || 0;
        }
      });
      var unlockedColumns = visibleColumns;
      var lockedStartColumns = [];
      var lockedEndColumns = [];
      if (hasLockedStart || hasLockedEnd) {
        unlockedColumns = groupColumn && hasLockedStart ? visibleColumns.filter(function(col) {
          return !col.computedLocked && !col.groupColumn;
        }) : visibleColumns.filter(function(col) {
          return !col.computedLocked;
        });
        lockedStartColumns = hasLockedStart ? visibleColumns.filter(function(col) {
          return col.computedLocked === "start" || col.groupColumn;
        }) : emptyArray;
        lockedEndColumns = hasLockedEnd ? groupColumn && hasLockedStart ? visibleColumns.filter(function(col) {
          return col.computedLocked === "end" && !col.groupColumn;
        }) : visibleColumns.filter(function(col) {
          return col.computedLocked === "end";
        }) : emptyArray;
        visibleColumns = [].concat((0, _toConsumableArray2.default)(lockedStartColumns), (0, _toConsumableArray2.default)(unlockedColumns), (0, _toConsumableArray2.default)(lockedEndColumns));
      }
      var visibleColumnsMap = (0, _mapColumns.default)(visibleColumns, {
        showWarnings: true
      });
      var sumPrefixWidth = 0;
      var totalLockedStartWidth = 0;
      var totalLockedEndWidth = 0;
      var totalUnlockedWidth = 0;
      var columnWidthPrefixSums = [];
      var computedHasColSpan = false;
      visibleColumns.forEach(function(col, index2, arr) {
        col.computedVisibleIndex = index2;
        col.computedVisibleCount = arr.length;
        if (col.colspan) {
          computedHasColSpan = true;
        }
        col.computedOffset = sumPrefixWidth;
        var computedLocked = col.computedLocked, computedWidth = col.computedWidth;
        if (computedLocked === "start") {
          totalLockedStartWidth += computedWidth || 0;
        } else if (computedLocked === "end") {
          totalLockedEndWidth += computedWidth || 0;
        } else {
          totalUnlockedWidth += computedWidth || 0;
        }
        addSortInfo(col);
        if (editable && col.editable === void 0) {
          col.computedEditable = true;
        }
        if (col.editable !== void 0) {
          col.computedEditable = col.editable;
        }
        columnWidthPrefixSums.push(col.computedOffset || 0);
        sumPrefixWidth += computedWidth || 0;
      });
      if (pivot) {
        pivot.forEach(function(pivotCol) {
          if (typeof pivotCol !== "string" && pivotCol.summaryReducer) {
            pivotColumnSummaryReducers[pivotCol.name] = pivotCol.summaryReducer;
          }
        });
      }
      return {
        pivotColumnSummaryReducers,
        minColumnsSize,
        totalFlexColumnCount,
        groupColumnSummaryReducers: Object.keys(groupColumnSummaryReducers).length ? groupColumnSummaryReducers : void 0,
        totalComputedWidth: sumPrefixWidth,
        totalLockedStartWidth,
        totalLockedEndWidth,
        totalUnlockedWidth,
        lockedStartColumns,
        lockedEndColumns,
        unlockedColumns,
        columnWidthPrefixSums,
        columnVisibilityMap,
        computedEnableRowspan,
        computedHasColSpan,
        visibleColumns,
        allColumns: normalizedColumns,
        columnsMap,
        visibleColumnsMap,
        hasValueSetter
      };
    };
    exports.default = _default;
    var getPivotGroupColumnForPath = function getPivotGroupColumnForPath2(columnConfig, _ref2) {
      var pivot = _ref2.pivot, pivotGrandSummaryColumn = _ref2.pivotGrandSummaryColumn;
      var pivotMap = pivot.reduce(function(acc, p) {
        if (!p.summaryReducer) {
          return acc;
        }
        var col2 = p ? p.summaryColumn || {} : {};
        acc[p.name || p] = col2;
        return acc;
      }, {});
      if (pivotGrandSummaryColumn === true) {
        pivotGrandSummaryColumn = {};
      }
      if (pivotGrandSummaryColumn) {
        pivotGrandSummaryColumn.pivotGrandSummaryColumn = true;
        pivotGrandSummaryColumn = _objectSpread(_objectSpread({}, defaultPivotGrandSummaryColumn), pivotGrandSummaryColumn);
      }
      columnConfig = _objectSpread(_objectSpread({}, defaultPivotSummaryColumn), columnConfig);
      var _columnConfig = columnConfig, pivotSummaryPath = _columnConfig.pivotSummaryPath;
      var lastItem = pivotSummaryPath[pivotSummaryPath.length - 1];
      var name = lastItem ? lastItem.field : null;
      var col = !lastItem ? pivotGrandSummaryColumn : pivotMap[name] || {};
      var result = columnConfig;
      if (lastItem) {
        columnConfig.header = "Summary for ".concat(lastItem.field, " ").concat(lastItem.value);
      }
      if (!pivotGrandSummaryColumn && !pivotMap[name]) {
        return null;
      }
      if (col) {
        if (typeof col === "function") {
          result = _objectSpread(_objectSpread({}, columnConfig), col(columnConfig));
        } else {
          result = _objectSpread(_objectSpread({}, columnConfig), col);
        }
      }
      return result;
    };
    var getPivotColumns = function getPivotColumns2(aggregateColumns, uniqueValuesRoot, columnSizes, pivot, pivotGrandSummaryColumn, showPivotSummaryColumns) {
      var parentGroups = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : [];
      var pivotColumnPath = arguments.length > 7 ? arguments[7] : void 0;
      var newColumns = [];
      var field = uniqueValuesRoot.field, values = uniqueValuesRoot.values;
      var parentGroup = parentGroups[parentGroups.length - 1];
      if (field && values) {
        Object.keys(values).forEach(function(value) {
          var groupId = "".concat(parentGroup ? parentGroup.name + "_" : "").concat(field, ":").concat(value);
          var group = {
            name: groupId,
            header: "".concat(field, "-").concat(value),
            pivotPath: [{
              value,
              field
            }]
          };
          if (parentGroup) {
            group.group = parentGroup.name;
            group.pivotPath = [].concat((0, _toConsumableArray2.default)(parentGroup.pivotPath || []), (0, _toConsumableArray2.default)(group.pivotPath));
          }
          var nextRoot = values[value];
          pivotColumnPath = pivotColumnPath || [];
          newColumns.push.apply(newColumns, (0, _toConsumableArray2.default)(getPivotColumns2(aggregateColumns, nextRoot, columnSizes, pivot, pivotGrandSummaryColumn, showPivotSummaryColumns, [].concat((0, _toConsumableArray2.default)(parentGroups), [{
            name: groupId,
            pivotPath: group.pivotPath,
            depth: parentGroup ? parentGroup.depth + 1 : 0
          }]), [].concat((0, _toConsumableArray2.default)(pivotColumnPath), [value]))));
          if (!parentGroup && showPivotSummaryColumns) {
            var summaryCol2 = getPivotGroupColumnForPath({
              header: "Summary for ".concat(group.header),
              id: "__summary_".concat(group.name),
              pivotSummaryColumn: true,
              pivotSummaryPath: group.pivotPath
            }, {
              pivot
            });
            if (summaryCol2) {
              newColumns.push(summaryCol2);
            }
          }
        });
      } else {
        newColumns.push.apply(newColumns, (0, _toConsumableArray2.default)(aggregateColumns.map(function(col) {
          var result = _objectSpread(_objectSpread({}, col), {}, {
            sortable: false,
            showInContextMenu: false,
            draggable: false,
            pivotColumn: true,
            pivotColumnPath: [].concat((0, _toConsumableArray2.default)(pivotColumnPath || []), [col.pivotName || col.name || col.id]),
            id: "".concat(parentGroup.name, "-").concat(col.id),
            group: parentGroup.name
          });
          if (columnSizes[result.id]) {
            result.computedWidth = columnSizes[result.id];
          }
          return result;
        })));
        var prevParentGroup = parentGroups[parentGroups.length - 2];
        if (showPivotSummaryColumns && prevParentGroup) {
          var summaryCol = getPivotGroupColumnForPath({
            group: prevParentGroup ? prevParentGroup.name : void 0,
            header: "Summary for ".concat(parentGroup.name, " - ").concat(prevParentGroup ? prevParentGroup.name : ""),
            id: "__summary__".concat(parentGroup.name),
            pivotSummaryPath: parentGroup.pivotPath,
            pivotSummaryColumn: true
          }, {
            pivot
          });
          if (summaryCol) {
            newColumns.push(summaryCol);
          }
        }
      }
      if (!parentGroup && pivotGrandSummaryColumn && showPivotSummaryColumns) {
        newColumns.push(getPivotGroupColumnForPath({
          header: "Grand summary",
          id: "__summary__grand",
          pivotSummaryColumn: true,
          pivotSummaryPath: []
        }, {
          pivot,
          pivotGrandSummaryColumn
        }));
      }
      return newColumns;
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/renderCheckbox.js
var require_renderCheckbox = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/renderCheckbox.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _react = _interopRequireDefault(require_react());
    var _CheckBox = _interopRequireDefault(require_CheckBox2());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var stopPropagation = function stopPropagation2(e) {
      e.stopPropagation();
    };
    var emptyObject = {};
    var _default = function _default2(cellProps) {
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, headerProps = _ref.headerProps;
      var selectAll = cellProps.selectAll, deselectAll = cellProps.deselectAll, selectedCount = cellProps.selectedCount, unselectedCount = cellProps.unselectedCount, totalCount = cellProps.totalCount, headerCell = cellProps.headerCell, empty = cellProps.empty, rowIndex = cellProps.rowIndex, rowSelected = cellProps.rowSelected, setRowSelected = cellProps.setRowSelected, renderCheckbox = cellProps.renderCheckbox, hideIntermediateState = cellProps.hideIntermediateState;
      if (empty && !renderCheckbox) {
        return null;
      }
      var checkboxProps = {
        disabled: empty,
        tabIndex: cellProps.checkboxTabIndex,
        onClick: stopPropagation,
        supportIndeterminate: false,
        theme: cellProps.theme,
        className: "InovuaReactDataGrid__checkbox"
      };
      if (headerCell) {
        var selected = headerProps.selected, unselected = headerProps.unselected;
        checkboxProps.supportIndeterminate = !hideIntermediateState;
        var checked;
        if (selected === true) {
          checked = unselected && (0, _typeof2.default)(unselected) == "object" && Object.keys(unselected).length != 0 ? checkboxProps.supportIndeterminate ? null : false : true;
        } else {
          checked = selectedCount == 0 || !totalCount ? false : totalCount <= selectedCount && unselectedCount === 0 ? true : checkboxProps.supportIndeterminate ? null : false;
        }
        checkboxProps.checked = checked;
        checkboxProps.onChange = checked === false ? selectAll : deselectAll;
      } else {
        checkboxProps.onChange = setRowSelected ? setRowSelected.bind(null, rowIndex) : null;
        checkboxProps.checked = rowSelected;
      }
      if (renderCheckbox) {
        if (checkboxProps.checked === null && checkboxProps.supportIndeterminate) {
          checkboxProps.isIndeterminate = true;
        }
        var result = renderCheckbox(checkboxProps, cellProps);
        if (result !== void 0) {
          return result;
        }
      }
      delete checkboxProps.isIndeterminate;
      return _react.default.createElement(_CheckBox.default, _objectSpread({}, checkboxProps));
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultCheckColumn.js
var require_defaultCheckColumn = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/defaultCheckColumn.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "checkboxColumnId", {
      enumerable: true,
      get: function get() {
        return _defaultCheckColumnId.id;
      }
    });
    exports.default = void 0;
    var _renderCheckbox = _interopRequireDefault(require_renderCheckbox());
    var _defaultCheckColumnId = require_defaultCheckColumnId();
    var _default = {
      id: _defaultCheckColumnId.id,
      checkboxColumn: true,
      autoLock: true,
      cellSelectable: false,
      headerAlign: "center",
      textAlign: "center",
      render: function render(_ref) {
        var cellProps = _ref.cellProps;
        return (0, _renderCheckbox.default)(cellProps);
      },
      header: _renderCheckbox.default,
      showColumnMenuSortOptions: false,
      showColumnMenuGroupOptions: false,
      showColumnMenuTool: false,
      showInContextMenu: false,
      sortable: false,
      editable: false,
      draggable: false,
      groupBy: false,
      checkboxTabIndex: null,
      defaultWidth: 40,
      minWidth: 40,
      isCheckboxColumn: true
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/maybeAddCheckboxColumn.js
var require_maybeAddCheckboxColumn = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/maybeAddCheckboxColumn.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _defaultCheckColumn = _interopRequireDefault(require_defaultCheckColumn());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _default(columns, props2) {
      var checkboxColumn = props2.checkboxColumn;
      if (checkboxColumn) {
        var checkCol = _objectSpread(_objectSpread(_objectSpread({}, _defaultCheckColumn.default), checkboxColumn === true ? null : checkboxColumn), {}, {
          name: null,
          id: _defaultCheckColumn.default.id
        });
        if (checkCol.visible === false) {
          checkCol.visible = true;
        }
        if (columns[0] && columns[0].group && props2.groups && props2.groups.length) {
          delete checkCol.nextBorderLeft;
        }
        columns = [checkCol].concat(columns);
      }
      return columns;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/useBuildColumns.js
var require_useBuildColumns = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/useBuildColumns.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _maybeAddCheckboxColumn = _interopRequireDefault(require_maybeAddCheckboxColumn());
    function _default(columns, props2) {
      if (props2.maybeAddColumns) {
        columns = props2.maybeAddColumns(columns, props2);
      }
      columns = (0, _maybeAddCheckboxColumn.default)(columns, props2);
      return columns;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useMemoWithObject/index.js
var require_useMemoWithObject = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useMemoWithObject/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = require_react();
    var _default = function _default2(fn, deps, equalityCheck) {
      var refId = (0, _react.useRef)(Number.MIN_SAFE_INTEGER);
      var depsRef = (0, _react.useRef)(deps);
      var prevDeps = depsRef.current;
      if (!equalityCheck(deps, prevDeps)) {
        refId.current++;
      }
      depsRef.current = deps;
      return (0, _react.useMemo)(fn, [refId.current]);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/normalizeColumns/useColumnInfo.js
var require_useColumnInfo = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/normalizeColumns/useColumnInfo.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _2 = _interopRequireDefault(require_normalizeColumns());
    var _shallowequal = require_shallowequal2();
    var _useBuildColumns = _interopRequireDefault(require_useBuildColumns());
    var _useMemoWithObject = _interopRequireDefault(require_useMemoWithObject());
    var includeAll = function includeAll2() {
      return true;
    };
    var useGroupByColumns = function useGroupByColumns2(args) {
      var generatedColumnsLength = 0;
      var columns = args.columns;
      var groupBy = args.groupBy, groupColumn = args.groupColumn, filter = args.filter, groupForGroupColumns = args.groupForGroupColumns, checkboxColumn = args.checkboxColumn, lockedColumnsState = args.lockedColumnsState, groupNestingSize = args.groupNestingSize, inTransition = args.inTransition;
      if (groupBy && groupBy.length && !groupColumn) {
        var lockedStartCount = 0;
        var groupColumnCount = 0;
        columns.filter(filter || includeAll).forEach(function(col) {
          if (col.groupSpacerColumn) {
            groupColumnCount++;
          }
          var locked = col.locked === void 0 ? col.defaultLocked : col.locked;
          var colInLocked = lockedColumnsState[col.id] || lockedColumnsState[col.name];
          if (colInLocked !== void 0) {
            locked = colInLocked;
          }
          if (locked === "start" || locked === true) {
            lockedStartCount++;
          }
        });
        if (lockedStartCount && checkboxColumn) {
          lockedStartCount++;
        }
        var generatedColumns = (0, _toConsumableArray2.default)(Array(groupBy.length - groupColumnCount)).map(function(_, i) {
          return {
            name: "__col_generated-groupBy-".concat(groupColumnCount + i),
            header: null,
            inTransition,
            visibilityTransitionDuration: !!inTransition,
            groupSpacerColumn: true,
            group: groupForGroupColumns,
            locked: !!lockedStartCount,
            defaultWidth: groupNestingSize,
            width: groupNestingSize,
            minWidth: groupNestingSize,
            maxWidth: groupNestingSize,
            showInContextMenu: false,
            cellSelectable: false,
            draggable: false,
            resizable: false,
            sortable: false
          };
        });
        generatedColumnsLength = generatedColumns.length;
        columns = generatedColumnsLength ? [].concat((0, _toConsumableArray2.default)(generatedColumns), (0, _toConsumableArray2.default)(columns)) : columns;
      }
      return {
        columns,
        generatedColumnsLength
      };
    };
    var useColumnInfo = function useColumnInfo2(params) {
      return (0, _useMemoWithObject.default)(function() {
        var columns = params.columns, columnMinWidth = params.columnMinWidth, columnMaxWidth = params.columnMaxWidth, columnDefaultWidth = params.columnDefaultWidth, columnWidth = params.columnWidth, groupNestingSize = params.groupNestingSize, columnOrder = params.columnOrder, onRowReorder = params.onRowReorder, columnVisibilityMap = params.columnVisibilityMap, columnSizes = params.columnSizes, columnFlexes = params.columnFlexes, _params$lockedColumns = params.lockedColumnsState, lockedColumnsState = _params$lockedColumns === void 0 ? {} : _params$lockedColumns, groupBy = params.groupBy, maybeAddColumns = params.maybeAddColumns, editable = params.editable, computedPivotUniqueValuesPerColumn = params.computedPivotUniqueValuesPerColumn, checkboxColumn = params.checkboxColumn, rowIndexColumn = params.rowIndexColumn, groupColumn = params.groupColumn, pivot = params.pivot, groupForGroupColumns = params.groupForGroupColumns, inTransition = params.inTransition, rtl = params.rtl, hideGroupByColumns = params.hideGroupByColumns, availableWidth = params.availableWidth, sortInfo = params.sortInfo, filterValueMap = params.filterValueMap, sortable = params.sortable, filterable = params.filterable, resizable = params.resizable, pivotGrandSummaryColumn = params.pivotGrandSummaryColumn, lockable = params.lockable, groups = params.groups, enableRowExpand = params.enableRowExpand, showPivotSummaryColumns = params.showPivotSummaryColumns, expandedRows = params.expandedRows, defaultExpandedRows = params.defaultExpandedRows, renderRowDetails = params.renderRowDetails, renderDetailsGrid = params.renderDetailsGrid, rowExpandColumn = params.rowExpandColumn, rowReorderColumn = params.rowReorderColumn, renderRowDetailsExpandIcon = params.renderRowDetailsExpandIcon, renderRowDetailsCollapsedIcon = params.renderRowDetailsCollapsedIcon;
        if (pivot) {
          groupColumn = groupColumn || true;
        }
        columns = (0, _useBuildColumns.default)(columns, {
          groups,
          checkboxColumn,
          groupBy,
          groupColumn,
          rowIndexColumn,
          enableRowExpand,
          expandedRows,
          maybeAddColumns,
          defaultExpandedRows,
          renderRowDetails,
          renderDetailsGrid,
          rowExpandColumn,
          onRowReorder,
          rowReorderColumn,
          renderRowDetailsExpandIcon,
          renderRowDetailsCollapsedIcon
        });
        var filter = !hideGroupByColumns || !groupBy || !groupBy.length ? null : function(col) {
          return groupBy.indexOf(col.id || col.name) == -1;
        };
        var generatedColumnsLength;
        var res = useGroupByColumns({
          groupBy,
          groupColumn,
          columns,
          filter,
          groupForGroupColumns,
          checkboxColumn,
          lockedColumnsState,
          groupNestingSize,
          inTransition
        });
        columns = res.columns;
        generatedColumnsLength = res.generatedColumnsLength;
        return (0, _2.default)({
          pivotGrandSummaryColumn,
          generatedColumnsLength,
          columns,
          columnMinWidth,
          columnMaxWidth,
          columnDefaultWidth,
          columnWidth,
          columnSizes,
          columnFlexes,
          columnOrder,
          showPivotSummaryColumns,
          computedPivotUniqueValuesPerColumn,
          rtl,
          filterValueMap,
          pivot,
          checkboxColumn,
          rowIndexColumn,
          columnVisibilityMap,
          lockedColumnsState,
          sortable,
          filterable,
          resizable,
          lockable,
          filter,
          sortInfo,
          editable,
          availableWidth,
          onRowReorder,
          rowReorderColumn,
          groupColumn
        });
      }, params, function(a, b) {
        var _equalReturnKey = (0, _shallowequal.equalReturnKey)(a, b), result = _equalReturnKey.result, key = _equalReturnKey.key;
        return result;
      });
    };
    var _default = useColumnInfo;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/getColumnRenderCount.js
var require_getColumnRenderCount = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/getColumnRenderCount.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _default = function _default2(_ref) {
      var visibleColumns = _ref.visibleColumns, availableWidth = _ref.availableWidth, lockedStartColumns = _ref.lockedStartColumns, lockedEndColumns = _ref.lockedEndColumns, virtualizeColumns = _ref.virtualizeColumns;
      if (virtualizeColumns === false) {
        return visibleColumns.length;
      }
      var columns = (0, _toConsumableArray2.default)(visibleColumns).sort(function(a, b) {
        return a.computedWidth - b.computedWidth;
      });
      var columnWidthPrefixSums = [];
      var widthSum = 0;
      var accumulateWidth = 0;
      var columnRenderCount = 0;
      columns.forEach(function(col) {
        columnWidthPrefixSums.push(widthSum);
        widthSum += col.computedWidth;
        if (accumulateWidth <= availableWidth) {
          columnRenderCount++;
          accumulateWidth += col.computedWidth;
        }
      });
      columnRenderCount += 1;
      if (lockedStartColumns && lockedStartColumns.length) {
        columnRenderCount -= lockedStartColumns.length;
      }
      if (lockedEndColumns && lockedEndColumns.length) {
        columnRenderCount -= lockedEndColumns.length;
      }
      return columnRenderCount;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/batchUpdate.js
var require_batchUpdate = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/batchUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _reactDom = require_react_dom();
    var _default = function _default2() {
      var commited = false;
      var fns = [];
      var queue = function queue2(fn) {
        fns.push(fn);
      };
      queue.commit = function(extraFn) {
        if (commited) {
          return Promise.resolve(true);
        }
        commited = true;
        return new Promise(function(resolve) {
          (0, _reactDom.unstable_batchedUpdates)(function() {
            if (extraFn) {
              fns.push(extraFn);
            }
            fns.forEach(function(fn) {
              return fn();
            });
            fns = void 0;
            resolve(true);
          });
        });
      };
      return queue;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useNamedState.js
var require_useNamedState = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useNamedState.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = require_react();
    var _default = function _default2(defaultValue, theContext, name) {
      var context = (0, _react.useContext)(theContext);
      if (context.state[name] !== void 0) {
        defaultValue = context.state[name];
      }
      var _useState = (0, _react.useState)(defaultValue), _useState2 = (0, _slicedToArray2.default)(_useState, 2), value = _useState2[0], setValue = _useState2[1];
      return [value, function(newValue) {
        if (typeof newValue === "function") {
          newValue = newValue(value);
        }
        context.state[name] = newValue;
        setValue(newValue);
      }];
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useColumns.js
var require_useColumns = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useColumns.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _columnResize = _interopRequireDefault(require_columnResize());
    var _useColumnInfo2 = _interopRequireDefault(require_useColumnInfo());
    var _getColumnRenderCount = _interopRequireDefault(require_getColumnRenderCount());
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var _useProperty3 = _interopRequireDefault(require_useProperty());
    var _useNamedState3 = _interopRequireDefault(require_useNamedState());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var setColumnSizes = function setColumnSizes2(newColumnSizes, columnFlexes, reservedViewportWidth, _ref) {
      var columnSizes = _ref.columnSizes, getColumnBy2 = _ref.getColumnBy, setColumnFlexes = _ref.setColumnFlexes, setColumnSizes3 = _ref.setColumnSizes, onBatchColumnResize = _ref.onBatchColumnResize, onColumnResize = _ref.onColumnResize;
      var reservedViewportWidthWrapper = {
        reservedViewportWidth
      };
      var batchColumns = onBatchColumnResize ? [] : null;
      Object.keys(newColumnSizes).forEach(function(colId) {
        var size = newColumnSizes[colId];
        var column = getColumnBy2(colId, {
          initial: true
        });
        if (column != null) {
          if (batchColumns) {
            batchColumns.push({
              column,
              width: size,
              flex: void 0
            });
          }
          if (onColumnResize) {
            onColumnResize({
              column,
              width: size,
              flex: void 0
            }, reservedViewportWidthWrapper);
          }
        }
      });
      Object.keys(columnFlexes || {}).forEach(function(colId) {
        var size = columnFlexes[colId];
        var column = getColumnBy2(colId, {
          initial: true
        });
        if (column) {
          if (batchColumns) {
            batchColumns.push({
              column,
              size,
              width: void 0,
              flex: size
            });
          }
          if (onColumnResize) {
            onColumnResize({
              column,
              size,
              width: void 0,
              flex: size
            }, reservedViewportWidthWrapper);
          }
        }
      });
      if (onBatchColumnResize) {
        onBatchColumnResize(batchColumns, reservedViewportWidthWrapper);
      }
      setColumnSizes3(Object.assign({}, columnSizes, newColumnSizes));
      setColumnFlexes(columnFlexes);
    };
    var getColumnBy = function getColumnBy2(propColumns, visibleColumns, columnsMap) {
      return function(idNameOrIndex, config) {
        var column;
        if ((0, _typeof2.default)(idNameOrIndex) === "object") {
          idNameOrIndex = idNameOrIndex.id == null ? idNameOrIndex.name : idNameOrIndex.id;
        }
        if (typeof idNameOrIndex === "number") {
          column = visibleColumns[idNameOrIndex];
        } else {
          column = columnsMap[idNameOrIndex];
        }
        if (!config || !config.initial || column && column.pivotColumn) {
          return column;
        }
        return propColumns.filter(function(c) {
          return c.id === column.id || c.name === column.id;
        })[0];
      };
    };
    var _default = function _default2(props2, _ref2, computedPropsRef) {
      var maxAvailableWidthForColumns = _ref2.maxAvailableWidthForColumns, lockedColumnsState = _ref2.lockedColumnsState, computedPivotUniqueValuesPerColumn = _ref2.computedPivotUniqueValuesPerColumn, computedGroups = _ref2.computedGroups, computedSortInfo = _ref2.computedSortInfo, computedFilterValueMap = _ref2.computedFilterValueMap, computedGroupBy = _ref2.computedGroupBy, computedFilterable = _ref2.computedFilterable, columnFlexes = _ref2.columnFlexes, columnSizes = _ref2.columnSizes, maybeAddColumns = _ref2.maybeAddColumns;
      var _useProperty = (0, _useProperty3.default)(props2, "columnOrder"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), columnOrder = _useProperty2[0], setColumnOrder = _useProperty2[1];
      var _useNamedState = (0, _useNamedState3.default)(props2.columns.reduce(function(acc, col) {
        if (col.defaultVisible === false || col.visible === false) {
          acc[col.id || col.name] = false;
        }
        return acc;
      }, {}), props2.context, "stateColumnVisibilityMap"), _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2), stateColumnVisibilityMap = _useNamedState2[0], setStateColumnVisibilityMap = _useNamedState2[1];
      var _useColumnInfo = (0, _useColumnInfo2.default)({
        showPivotSummaryColumns: props2.showPivotSummaryColumns,
        lockedColumnsState,
        columnOrder,
        columnFlexes,
        columnSizes,
        pivotGrandSummaryColumn: props2.pivotGrandSummaryColumn,
        columnVisibilityMap: stateColumnVisibilityMap,
        columnMinWidth: props2.columnMinWidth,
        columnMaxWidth: props2.columnMaxWidth,
        resizable: props2.resizable,
        pivot: props2.pivot,
        computedGroups,
        filterable: computedFilterable,
        filterValueMap: computedFilterValueMap,
        groupBy: computedGroupBy,
        groupColumn: props2.groupColumn,
        rowIndexColumn: props2.rowIndexColumn,
        checkboxColumn: props2.checkboxColumn,
        computedPivotUniqueValuesPerColumn,
        editable: props2.editable,
        sortable: props2.sortable,
        columns: props2.columns,
        rtl: props2.rtl,
        sortInfo: computedSortInfo,
        availableWidth: maxAvailableWidthForColumns,
        columnDefaultWidth: props2.columnDefaultWidth,
        inTransition: false,
        hideGroupByColumns: props2.hideGroupByColumns,
        groupNestingSize: props2.groupNestingSize,
        groupForGroupColumns: props2.groupForGroupColumns || "__",
        enableRowExpand: props2.enableRowExpand,
        expandedRows: props2.expandedRows,
        defaultExpandedRows: props2.defaultExpandedRows,
        renderRowDetails: props2.renderRowDetails,
        renderDetailsGrid: props2.renderDetailsGrid,
        maybeAddColumns,
        rowExpandColumn: props2.rowExpandColumn,
        onRowReorder: props2.onRowReorder,
        rowReorderColumn: props2.rowReorderColumn,
        renderRowDetailsExpandIcon: props2.renderRowDetailsExpandIcon,
        renderRowDetailsCollapsedIcon: props2.renderRowDetailsCollapsedIcon
      }), groupColumnSummaryReducers = _useColumnInfo.groupColumnSummaryReducers, pivotColumnSummaryReducers = _useColumnInfo.pivotColumnSummaryReducers, visibleColumns = _useColumnInfo.visibleColumns, lockedStartColumns = _useColumnInfo.lockedStartColumns, lockedEndColumns = _useColumnInfo.lockedEndColumns, unlockedColumns = _useColumnInfo.unlockedColumns, columnWidthPrefixSums = _useColumnInfo.columnWidthPrefixSums, columnsMap = _useColumnInfo.columnsMap, columnVisibilityMap = _useColumnInfo.columnVisibilityMap, allColumns = _useColumnInfo.allColumns, computedEnableRowspan = _useColumnInfo.computedEnableRowspan, totalComputedWidth = _useColumnInfo.totalComputedWidth, totalLockedStartWidth = _useColumnInfo.totalLockedStartWidth, totalFlexColumnCount = _useColumnInfo.totalFlexColumnCount, totalLockedEndWidth = _useColumnInfo.totalLockedEndWidth, totalUnlockedWidth = _useColumnInfo.totalUnlockedWidth, minColumnsSize = _useColumnInfo.minColumnsSize, computedHasColSpan = _useColumnInfo.computedHasColSpan, hasValueSetter = _useColumnInfo.hasValueSetter;
      var virtualizeColumns = props2.virtualizeColumns !== void 0 ? props2.virtualizeColumns : visibleColumns.length >= props2.virtualizeColumnsThreshold;
      if (typeof props2.rowHeight !== "number") {
        virtualizeColumns = false;
      }
      var columnRenderCount = (0, _getColumnRenderCount.default)({
        availableWidth: maxAvailableWidthForColumns,
        visibleColumns,
        lockedStartColumns,
        lockedEndColumns,
        virtualizeColumns
      });
      var hasLockedStart = !!lockedStartColumns.length;
      var hasLockedEnd = !!lockedEndColumns.length;
      var hasUnlocked = !!unlockedColumns.length;
      var firstUnlockedIndex = hasUnlocked ? unlockedColumns[0].computedVisibleIndex : -1;
      var firstLockedStartIndex = hasLockedStart ? lockedStartColumns[0].computedVisibleIndex : -1;
      var firstLockedEndIndex = hasLockedEnd ? lockedEndColumns[0].computedVisibleIndex : -1;
      var lastLockedEndIndex = hasLockedEnd ? lockedEndColumns[lockedEndColumns.length - 1].computedVisibleIndex : -1;
      var lastLockedStartIndex = hasLockedStart ? lockedStartColumns[lockedStartColumns.length - 1].computedVisibleIndex : -1;
      var lastUnlockedIndex = hasUnlocked ? unlockedColumns[unlockedColumns.length - 1].computedVisibleIndex : -1;
      var computedOnColumnResize = function computedOnColumnResize2(_ref3) {
        var index2 = _ref3.index, groupColumns = _ref3.groupColumns, diff = _ref3.diff;
        var computedProps = computedPropsRef.current;
        if (computedProps == null) {
          return;
        }
        var maxAvailableWidthForColumns2 = computedProps.maxAvailableWidthForColumns, shareSpaceOnResize = computedProps.shareSpaceOnResize, totalComputedWidth2 = computedProps.totalComputedWidth;
        var result = (0, _columnResize.default)({
          columns: computedProps.visibleColumns,
          groupColumns,
          maxAvailableWidthForColumns: maxAvailableWidthForColumns2,
          shareSpaceOnResize,
          totalComputedWidth: totalComputedWidth2,
          index: index2,
          diff
        });
        if (computedProps.rtl && diff) {
          var _totalComputedWidth = computedProps.totalComputedWidth;
          var oldScrollLeft = computedProps.getScrollLeft();
          computedProps.onNextRender(function() {
            var computedProps2 = computedPropsRef.current;
            if (computedProps2 == null) {
              return;
            }
            if (computedProps2.totalComputedWidth === _totalComputedWidth + diff) {
              var newScrollLeft = oldScrollLeft + diff;
              computedProps2.setScrollLeft(newScrollLeft);
            }
          });
        }
        (0, _batchUpdate.default)().commit(function() {
          var newReservedViewportWidth = computedProps.reservedViewportWidth;
          if (typeof result.maxAvailableWidthForColumns == "number" && result.maxAvailableWidthForColumns !== maxAvailableWidthForColumns2) {
            var widthDiff = result.maxAvailableWidthForColumns - maxAvailableWidthForColumns2;
            newReservedViewportWidth = computedProps.reservedViewportWidth - widthDiff;
            computedProps.setReservedViewportWidth(newReservedViewportWidth);
          }
          setColumnSizes(result.newColumnSizes || {}, result.newColumnFlexes, newReservedViewportWidth, {
            getColumnBy: computedProps.getColumnBy,
            onColumnResize: computedProps.initialProps.onColumnResize,
            onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,
            columnSizes: computedProps.columnSizes,
            setColumnSizes: computedProps.setColumnSizes,
            setColumnFlexes: computedProps.setColumnFlexes
          });
        });
      };
      var getColumn = getColumnBy(props2.columns, visibleColumns, columnsMap);
      var setColumnVisible = function setColumnVisible2(indexOrColumn, visible) {
        var column = getColumn(indexOrColumn);
        if (!column) {
          return;
        }
        if (isColumnVisible(column) === visible) {
          return;
        }
        var col = getColumn(column, {
          initial: true
        });
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        if (typeof computedProps.initialProps.onColumnVisibleChange === "function") {
          computedProps.initialProps.onColumnVisibleChange({
            column: col,
            visible
          });
        }
        if (col.visible === void 0) {
          setStateColumnVisibilityMap(_objectSpread(_objectSpread({}, stateColumnVisibilityMap), {}, (0, _defineProperty2.default)({}, column.id, !!visible)));
        } else if (computedProps.showWarnings && !computedProps.initialProps.onColumnVisibleChange) {
          console.warn('Column "'.concat(column.id, '" has controlled visible prop set to "').concat(column.visible, '" but you have no "onColumnVisibleChange" callback prop to update column.visible prop. Use uncontrolled "defaultVisible" instead.'));
        }
      };
      var isColumnVisible = function isColumnVisible2(nameOrId) {
        var column = getColumn(nameOrId);
        if (!column) {
          return false;
        }
        return column.computedVisible === true;
      };
      var setColumnLocked = function setColumnLocked2(indexOrColumn, locked) {
        var column = getColumn(indexOrColumn);
        if (locked === null) {
          locked = false;
        }
        locked = locked === true ? "start" : locked;
        if (column.lockable === false) {
          if (props2.showWarnings) {
            console.error('You are trying to lock the "'.concat(column.id, '" column, but it is lockable===false, so it cannot be locked.'));
          }
          return;
        }
        var initialColumn = getColumn(column, {
          initial: true
        });
        if (props2.onColumnLockedChange) {
          props2.onColumnLockedChange({
            column: initialColumn,
            locked
          });
        }
        if (initialColumn.locked !== void 0) {
          return;
        }
        var computedProps = computedPropsRef.current;
        if (computedProps == null) {
          return;
        }
        var setLockedColumnsState = computedProps.setLockedColumnsState;
        setLockedColumnsState(function(lockedColumnsState2) {
          return _objectSpread(_objectSpread({}, lockedColumnsState2), {}, (0, _defineProperty2.default)({}, column.id, locked));
        });
      };
      var getColumnsInOrder = function getColumnsInOrder2() {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return [];
        }
        var computedColumnOrder = computedProps.computedColumnOrder;
        if (!computedColumnOrder || !computedColumnOrder.length) {
          return computedProps.initialProps.columns.map(function(cId) {
            return computedProps.getColumnBy(cId);
          });
        }
        return computedColumnOrder.map(function(cId) {
          return computedProps.getColumnBy(cId);
        });
      };
      return {
        getColumnsInOrder,
        groupColumnSummaryReducers,
        pivotColumnSummaryReducers,
        groupColumn: props2.pivot ? props2.groupColumn || true : props2.groupColumn,
        firstLockedStartIndex,
        firstLockedEndIndex,
        firstUnlockedIndex,
        lastLockedStartIndex,
        lastUnlockedIndex,
        lastLockedEndIndex,
        visibleColumns,
        columnWidthPrefixSums,
        lockedStartColumns,
        lockedEndColumns,
        unlockedColumns,
        columnVisibilityMap,
        computedHasColSpan,
        setColumnLocked,
        computedColumnOrder: columnOrder,
        setColumnOrder,
        setColumnVisible,
        computeColumnSizes: setColumnSizes,
        computedPivot: props2.pivot,
        totalFlexColumnCount,
        showColumnMenuTool: props2.pivot ? false : props2.showColumnMenuTool,
        columnsMap,
        allColumns,
        totalComputedWidth,
        totalLockedStartWidth,
        totalLockedEndWidth,
        totalUnlockedWidth,
        minColumnsSize,
        hasLockedStart,
        hasLockedEnd,
        hasUnlocked,
        computedEnableRowspan,
        columnRenderCount,
        virtualizeColumns,
        computedOnColumnResize,
        getColumnBy: getColumn,
        isColumnVisible,
        hasValueSetter
      };
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useSize.js
var require_useSize = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useSize.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = require_react();
    var _default = function _default2(defaultSize) {
      var size;
      var setSize;
      var _useState = (0, _react.useState)(defaultSize);
      var _useState2 = (0, _slicedToArray2.default)(_useState, 2);
      size = _useState2[0];
      setSize = _useState2[1];
      return [size, function(newSize) {
        setSize({
          width: Math.round(newSize.width || size.width || 0),
          height: Math.round(newSize.height || size.height || 0)
        });
      }];
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useHeader.js
var require_useHeader = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useHeader.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _useProperty3 = _interopRequireDefault(require_useProperty());
    var _default = function _default2(props2, computedProps) {
      var _useProperty = (0, _useProperty3.default)(props2, "showHeader"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), computedShowHeader = _useProperty2[0], setShowHeader = _useProperty2[1];
      var result = {
        computedShowHeader,
        setShowHeader
      };
      if (computedShowHeader) {
        result.onHeaderSortClick = function(colProps) {
          if (computedProps.toggleColumnSort) {
            computedProps.toggleColumnSort(colProps.id, colProps.defaultSortingDirection);
          }
        };
      }
      return result;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useEditable/index.js
var require_useEditable = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useEditable/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = require_react();
    var useEditable = function useEditable2(props2, computedProps, computedPropsRef) {
      var editInfoRef = (0, _react.useRef)(null);
      var isInEdit = (0, _react.useRef)(false);
      var currentEditCompletePromise = (0, _react.useRef)(Promise.resolve(true));
      var onEditStop = (0, _react.useCallback)(function(editProps) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.initialProps.onEditStop) {
          computedProps2.initialProps.onEditStop(editProps);
        }
        setTimeout(function() {
          editInfoRef.current = null;
        }, 0);
      }, []);
      var onEditCancel = (0, _react.useCallback)(function(editProps) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.initialProps.onEditCancel) {
          computedProps2.initialProps.onEditCancel(editProps);
        }
        setTimeout(function() {
          computedProps2.isInEdit.current = false;
        }, 50);
      }, []);
      var onEditComplete = (0, _react.useCallback)(function(editProps) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.autoFocusOnEditComplete) {
          computedProps2.focus();
        }
        if (computedProps2.initialProps.onEditComplete) {
          currentEditCompletePromise.current = Promise.resolve(computedProps2.initialProps.onEditComplete(editProps));
        }
        computedProps2.isInEdit.current = false;
      }, []);
      var onEditValueChange = (0, _react.useCallback)(function(editProps) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.initialProps.onEditValueChange) {
          computedProps2.initialProps.onEditValueChange(editProps);
        }
      }, []);
      var onEditStart = (0, _react.useCallback)(function(editProps) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var columnId = editProps.columnId;
        editInfoRef.current = {
          columnId,
          columnIndex: editProps.columnIndex,
          rowId: editProps.rowId,
          rowIndex: editProps.rowIndex
        };
        if (computedProps2.initialProps.onEditStart) {
          computedProps2.initialProps.onEditStart(editProps);
        }
        requestAnimationFrame(function() {
          var computedProps3 = computedPropsRef.current;
          if (!computedProps3) {
            return;
          }
          var col = computedProps3.getColumnBy(columnId);
          if (!col) {
            return;
          }
          computedProps3.scrollToColumn(col.computedVisibleIndex, {
            duration: 50
          });
        });
        computedProps2.isInEdit.current = true;
      }, []);
      var tryStartEdit = (0, _react.useCallback)(function() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          rowIndex: void 0,
          rowId: void 0,
          columnId: "",
          dir: 1
        }, rowIndex = _ref.rowIndex, rowId = _ref.rowId, columnId = _ref.columnId, dir = _ref.dir;
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return Promise.reject(new Error("Grid was probably unmounted"));
        }
        var col = computedProps2.getColumnBy(columnId);
        if (!col) {
          return Promise.reject(new Error("No column found for columnId: ".concat(columnId)));
        }
        if (rowIndex === void 0) {
          rowIndex = computedProps2.getRowIndexById(rowId);
        }
        return new Promise(function(resolve, reject) {
          computedProps2.scrollToIndex(rowIndex, void 0, function() {
            setTimeout(function() {
              computedProps2.getColumnLayout().tryStartEdit({
                rowIndex,
                rowId,
                columnIndex: col.computedVisibleIndex,
                columnId,
                dir
              }).then(resolve, reject);
            }, 50);
          });
        });
      }, []);
      var startEdit = (0, _react.useCallback)(function() {
        var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          columnId: "",
          rowIndex: -1,
          value: "",
          rowId: void 0
        }, columnId = _ref2.columnId, rowIndex = _ref2.rowIndex, value = _ref2.value, rowId = _ref2.rowId;
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return Promise.reject(new Error("Grid was probably unmounted"));
        }
        var col = computedProps2.getColumnBy(columnId);
        if (!col) {
          return Promise.reject(new Error("No column found for columnId: ".concat(columnId)));
        }
        if (rowIndex === void 0) {
          rowIndex = computedProps2.getRowIndexById(rowId);
        }
        return new Promise(function(resolve, reject) {
          computedProps2.scrollToIndex(rowIndex, void 0, function() {
            setTimeout(function() {
              computedProps2.getColumnLayout().startEdit({
                rowIndex,
                rowId,
                columnIndex: col.computedVisibleIndex,
                columnId,
                value
              }).then(resolve, reject);
            }, 50);
          });
        });
      }, []);
      var completeEdit = (0, _react.useCallback)(function() {
        var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          rowIndex: void 0,
          rowId: void 0,
          columnId: "",
          dir: 1,
          value: ""
        }, rowId = _ref3.rowId, rowIndex = _ref3.rowIndex, columnId = _ref3.columnId, value = _ref3.value;
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return Promise.reject(new Error("Grid was probably unmounted"));
        }
        var col = computedProps2.getColumnBy(columnId);
        var editInfo = getCurrentEditInfo();
        if (!editInfo) {
          return;
        }
        if (!col && editInfo) {
          col = computedProps2.getColumnBy(editInfo.columnId);
          rowIndex = editInfo.rowIndex;
        }
        if (!col) {
          return;
        }
        if (rowIndex === void 0) {
          rowIndex = computedProps2.getRowIndexById(rowId);
        }
        computedProps2.scrollToIndex(rowIndex, void 0, function() {
          setTimeout(function() {
            computedProps2.getColumnLayout().completeEdit({
              rowIndex,
              columnIndex: col.computedVisibleIndex,
              value
            });
          }, 50);
        });
      }, []);
      var cancelEdit = (0, _react.useCallback)(function() {
        var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          rowIndex: void 0,
          columnId: void 0
        }, rowIndex = _ref4.rowIndex, columnId = _ref4.columnId;
        var editInfo = editInfoRef.current;
        if (!editInfo) {
          return;
        }
        var col = columnId ? computedProps.getColumnBy(columnId) : null;
        if (!col && editInfo) {
          col = computedProps.getColumnBy(editInfo.columnId);
          rowIndex = editInfo.rowIndex;
        }
        if (!col) {
          return;
        }
        computedProps.getColumnLayout().cancelEdit({
          rowIndex,
          columnIndex: col.computedVisibleIndex
        });
      }, []);
      var getCurrentEditInfo = (0, _react.useCallback)(function() {
        return editInfoRef.current;
      }, []);
      return {
        getCurrentEditInfo,
        startEdit,
        onEditStart,
        onEditStop,
        onEditCancel,
        onEditComplete,
        onEditValueChange,
        completeEdit,
        cancelEdit,
        tryStartEdit,
        isInEdit,
        currentEditCompletePromise
      };
    };
    var _default = useEditable;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/getIndexBy.js
var require_getIndexBy = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/getIndexBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var getIndexBy = function getIndexBy2(data, by, id, getItemId, compoundIdProperty) {
      var index2 = -1;
      for (var i = 0, len = data.length; i < len; i++) {
        var item = data[i];
        var itemId = compoundIdProperty ? getItemId(item) : item[by];
        var parsedId = typeof itemId === "number" ? Number(id) : id;
        if (itemId === parsedId) {
          index2 = i;
          break;
        }
      }
      return index2;
    };
    var _default = getIndexBy;
    exports.default = _default;
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i])) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal(a[key], b[key])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useLoadDataEffect/index.js
var require_useLoadDataEffect = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useLoadDataEffect/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = require_react();
    var diff = function diff2(a1, a2) {
      if (a1.length != a2.length) {
        return true;
      }
      for (var i = 0; i < a1.length; i++) {
        if (!Object.is(a1[i], a2[i])) {
          return true;
        }
      }
      return false;
    };
    var resolved = Promise.resolve(true);
    var useLoadDataEffect = function useLoadDataEffect2(_ref, fn, _ref2) {
      var getDataSource = _ref.getDataSource;
      var reloadDeps = _ref2.reloadDeps, noReloadDeps = _ref2.noReloadDeps;
      var prevComputedDepsRef = (0, _react.useRef)([]);
      var reloadRef = (0, _react.useRef)();
      var noReloadRef = (0, _react.useRef)();
      var reloadDepsDifferent = !reloadRef.current || diff(reloadRef.current, reloadDeps);
      var noReloadDepsDifferent = !noReloadRef.current || diff(noReloadRef.current, noReloadDeps);
      var depsDifferent = reloadDepsDifferent || noReloadDepsDifferent;
      var shouldReload = reloadDepsDifferent;
      var shouldReloadRef = (0, _react.useRef)(false);
      var computedDeps = depsDifferent ? [{}] : prevComputedDepsRef.current;
      var resolveRef = (0, _react.useRef)(null);
      var promiseRef = (0, _react.useRef)(resolved);
      if (depsDifferent) {
        shouldReloadRef.current = shouldReload;
        promiseRef.current = new Promise(function(resolve) {
          resolveRef.current = resolve;
        });
      }
      var _useState = (0, _react.useState)(function() {
        return /* @__PURE__ */ new Set();
      }), _useState2 = (0, _slicedToArray2.default)(_useState, 1), pendingSet = _useState2[0];
      var intercept = (0, _react.useCallback)(function(promise, dataSource) {
        var isRemote = typeof dataSource === "function" || (dataSource === null || dataSource === void 0 ? void 0 : dataSource.then);
        if (!isRemote) {
        }
        pendingSet.clear();
        pendingSet.add(promise);
        return promise.then(function(r) {
          if (pendingSet.has(promise)) {
            pendingSet.delete(promise);
            return r;
          }
          return Promise.reject({
            message: "This request is discarded as it was still pending when a new request came in.",
            result: r
          });
        });
      }, []);
      (0, _react.useLayoutEffect)(function() {
        var reload = shouldReloadRef.current;
        var dataSource = getDataSource({
          shouldReload: reload
        });
        fn(dataSource, {
          shouldReload: reload,
          intercept
        }).then(function() {
          if (resolveRef.current) {
            resolveRef.current();
          }
        });
        shouldReloadRef.current = shouldReload;
      }, computedDeps);
      reloadRef.current = reloadDeps;
      noReloadRef.current = noReloadDeps;
      prevComputedDepsRef.current = computedDeps;
      return promiseRef.current;
    };
    var _default = useLoadDataEffect;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/filter.js
var require_filter = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/filter.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.validateFilters = exports.hasTypeOperators = exports.hasTypeOperator = exports.default = exports.checkForEmptyValue = exports.buildTypeOperators = exports.buildFilterParam = void 0;
    var _filterTypes = _interopRequireDefault(require_filterTypes());
    var buildTypeOperators = function buildTypeOperators2(filterTypes) {
      return Object.keys(filterTypes).reduce(function(acc, filterTypeName) {
        var filterType = filterTypes[filterTypeName];
        if (!filterType || !filterType.operators) {
          return acc;
        }
        var operators = filterType.operators.reduce(function(operatorAccumulator, operator) {
          operatorAccumulator[operator.name] = operator;
          return operatorAccumulator;
        }, {});
        acc[filterTypeName] = operators;
        return acc;
      }, {});
    };
    exports.buildTypeOperators = buildTypeOperators;
    var buildFilterParam = function buildFilterParam2(item, fv) {
      var filterTypes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _filterTypes.default;
      var columnsMap = arguments.length > 3 ? arguments[3] : void 0;
      var filterParam = {};
      var name = fv.name, getFilterValue = fv.getFilterValue, filterValue = fv.value, type = fv.type;
      filterParam.emptyValue = fv.hasOwnProperty("emptyValue") ? fv.emptyValue : filterTypes[type].emptyValue;
      filterParam.filterValue = filterValue;
      if (columnsMap) {
        filterParam.column = columnsMap[name];
      }
      filterParam.data = item;
      filterParam.value = typeof getFilterValue === "function" ? getFilterValue({
        data: item,
        value: item[name]
      }) : item[name];
      return filterParam;
    };
    exports.buildFilterParam = buildFilterParam;
    var hasTypeOperators = function hasTypeOperators2(fn, currentTypeOperators, type) {
      if (!fn && !currentTypeOperators) {
        console.error('No filter of type "'.concat(type, '" found!'));
        return true;
      }
      return false;
    };
    exports.hasTypeOperators = hasTypeOperators;
    var hasTypeOperator = function hasTypeOperator2(fn, currentTypeOperators, type, operator) {
      if (!fn && !currentTypeOperators[operator]) {
        console.error('No operator "'.concat(operator, '" found for filter type "').concat(type, '"!'));
        return true;
      }
      return false;
    };
    exports.hasTypeOperator = hasTypeOperator;
    var checkForEmptyValue = function checkForEmptyValue2(filterValue, emptyValue, filterOnEmptyValue) {
      if (filterValue === emptyValue && !filterOnEmptyValue) {
        return true;
      }
      return false;
    };
    exports.checkForEmptyValue = checkForEmptyValue;
    var validateFilters = function validateFilters2(fv) {
      var _currentTypeOperators;
      var filterTypes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _filterTypes.default;
      var currentTypeOperators = arguments.length > 2 ? arguments[2] : void 0;
      var active = fv.active, fn = fv.fn, type = fv.type, operator = fv.operator;
      var emptyValue = fv.hasOwnProperty("emptyValue") ? fv.emptyValue : filterTypes[type].emptyValue;
      var filterOnEmptyValue = currentTypeOperators ? (_currentTypeOperators = currentTypeOperators[operator]) === null || _currentTypeOperators === void 0 ? void 0 : _currentTypeOperators.filterOnEmptyValue : void 0;
      if (active === false) {
        return true;
      }
      if (!filterTypes[type]) {
        return true;
      }
      if (hasTypeOperators(fn, currentTypeOperators, type)) {
        return true;
      }
      if (hasTypeOperator(fn, currentTypeOperators, type, operator)) {
        return true;
      }
      if (checkForEmptyValue(fv.value, emptyValue, filterOnEmptyValue)) {
        return true;
      }
      return false;
    };
    exports.validateFilters = validateFilters;
    var doFilter = function doFilter2(item, filterValueArray) {
      var filterTypes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _filterTypes.default;
      var columnsMap = arguments.length > 3 ? arguments[3] : void 0;
      var typeOperators = buildTypeOperators(filterTypes);
      for (var i = 0, len = filterValueArray.length; i < len; i++) {
        var fv = filterValueArray[i];
        var type = fv.type, operator = fv.operator, fn = fv.fn;
        var currentTypeOperators = typeOperators[type];
        if (validateFilters(fv, filterTypes, currentTypeOperators)) {
          continue;
        }
        var filterParam = buildFilterParam(item, fv, filterTypes, columnsMap);
        var filterFn = fn || currentTypeOperators[operator].fn;
        if (filterFn(filterParam) !== true) {
          return false;
        }
      }
      return true;
    };
    var filter = function filter2(data, filterValueArray, filterTypes, columnsMap) {
      filterTypes = filterTypes || _filterTypes.default;
      var filterFn = function filterFn2(item) {
        var result = doFilter(item, filterValueArray, filterTypes, columnsMap);
        return result;
      };
      if (data === void 0) {
        return filterFn;
      }
      return data.filter(filterFn);
    };
    var _default = filter;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/treeFilter.js
var require_treeFilter = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/treeFilter.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _filterTypes = _interopRequireDefault(require_filterTypes());
    var _filter = require_filter();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var doFilter = function doFilter2(item, filterValueArray) {
      var filterTypes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _filterTypes.default;
      var columnsMap = arguments.length > 3 ? arguments[3] : void 0;
      var typeOperators = (0, _filter.buildTypeOperators)(filterTypes);
      for (var i = 0, len = filterValueArray.length; i < len; i++) {
        var fv = filterValueArray[i];
        var type = fv.type, operator = fv.operator, fn = fv.fn;
        var currentTypeOperators = typeOperators[type];
        if ((0, _filter.validateFilters)(fv, filterTypes, currentTypeOperators)) {
          continue;
        }
        var filterParam = (0, _filter.buildFilterParam)(item, fv, filterTypes, columnsMap);
        var filterFn = fn || currentTypeOperators[operator].fn;
        if (filterFn(filterParam) !== true) {
          return false;
        }
      }
      return true;
    };
    var filterData = function filterData2(dataArray, filterFn, config) {
      var nodesName = config.nodesName;
      return dataArray.map(function(item) {
        return _objectSpread({}, item);
      }).filter(function(item) {
        var itemNodes = item[nodesName];
        if (!itemNodes) {
          return filterFn(item);
        }
        var filteredItemNodes = filterData2(itemNodes, filterFn, config);
        if (filteredItemNodes.length) {
          item[nodesName] = filteredItemNodes;
          return true;
        }
        return filterFn(item);
      });
    };
    var treeFilter = function treeFilter2(data, filterValueArray) {
      var filterTypes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _filterTypes.default;
      var columnsMap = arguments.length > 3 ? arguments[3] : void 0;
      var options = arguments.length > 4 ? arguments[4] : void 0;
      var computedProps = options && options.props || {};
      var nodesName = computedProps && computedProps.nodesProperty || "nodes";
      var config = {
        nodesName
      };
      var filterFn = function filterFn2(item) {
        var filterItem = doFilter(item, filterValueArray, filterTypes, columnsMap);
        return filterItem;
      };
      return filterData(data, filterFn, config) || [];
    };
    var _default = treeFilter;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/paginate.js
var require_paginate = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/paginate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = function _default2(array, _ref) {
      var skip = _ref.skip, limit = _ref.limit;
      return array.slice(skip, skip + limit);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/getFilterValueForColumns.js
var require_getFilterValueForColumns = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/getFilterValueForColumns.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var getFilterValueForColumns = function getFilterValueForColumns2(filterValue, columnsMap) {
      return (filterValue || []).map(function(filterValueObject) {
        if (filterValueObject) {
          var column = columnsMap[filterValueObject.name];
          if (column) {
            if (column.type && !filterValueObject.type) {
              filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {
                type: column.filterType || column.type
              });
            }
            if (typeof column.getFilterValue == "function") {
              filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {
                getFilterValue: column.getFilterValue
              });
            }
            if (typeof column.filterName === "string") {
              filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {
                name: column.filterName
              });
            }
          }
        }
        return filterValueObject;
      });
    };
    var _default = getFilterValueForColumns;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/getSortInfoForColumns.js
var require_getSortInfoForColumns = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/getSortInfoForColumns.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var getCol = function getCol2(name, columnsMap) {
      var col = columnsMap[name];
      if (!col) {
        Object.keys(columnsMap).forEach(function(colId) {
          if (col) {
            return;
          }
          var theCol = columnsMap[colId];
          if (theCol.sortName === name) {
            col = theCol;
          }
        });
      }
      return col;
    };
    var getSortInfoForColumns = function getSortInfoForColumns2(sortInfo, columnsMap) {
      if (!columnsMap) {
        return sortInfo;
      }
      if (!Array.isArray(sortInfo)) {
        if (sortInfo && sortInfo.name) {
          var col = getCol(sortInfo.name, columnsMap);
          sortInfo = _objectSpread({}, sortInfo);
          if (col) {
            if (typeof col.sortName === "string") {
              sortInfo.name = col.sortName;
            }
            if (col.type) {
              sortInfo.type = col.type;
            }
            if (col.sort) {
              sortInfo.fn = function(one, two, data1, data2, sortInfo2) {
                return col.sort ? col.sort(one, two, col, data1, data2, sortInfo2) : 0;
              };
            }
          }
        }
        return sortInfo;
      } else {
        return sortInfo.map(function(sortInfo2) {
          var col2 = getCol(sortInfo2.name, columnsMap);
          sortInfo2 = _objectSpread({}, sortInfo2);
          if (col2 && typeof col2.sortName === "string") {
            sortInfo2.name = col2.sortName;
          }
          if (col2.type) {
            sortInfo2.type = col2.type;
          }
          if (col2.sort) {
            sortInfo2.fn = function(one, two, data1, data2, sortInfo3) {
              return col2.sort ? col2.sort(one, two, col2, data1, data2, sortInfo3) : 0;
            };
          }
          return sortInfo2;
        });
      }
    };
    var _default = getSortInfoForColumns;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/computeData.js
var require_computeData = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/computeData.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
    var _filter = _interopRequireDefault(require_filter());
    var _treeFilter = _interopRequireDefault(require_treeFilter());
    var _paginate = _interopRequireDefault(require_paginate());
    var _getFilterValueForColumns = _interopRequireDefault(require_getFilterValueForColumns());
    var _getSortInfoForColumns = _interopRequireDefault(require_getSortInfoForColumns());
    var _excluded = ["originalData"];
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var filterData = function filterData2(data, _ref, config) {
      var filterValue = _ref.filterValue, remoteFilter = _ref.remoteFilter, filterTypes = _ref.filterTypes, columnsMap = _ref.columnsMap;
      if (!Array.isArray(filterValue) || !filterValue.length) {
        return data;
      }
      if (remoteFilter) {
        return data;
      }
      var filterValueForColumns = (0, _getFilterValueForColumns.default)(filterValue, columnsMap);
      if (!filterValueForColumns.length) {
        return data;
      }
      if (config.treeEnabled) {
        return (0, _treeFilter.default)(data, filterValueForColumns, filterTypes, columnsMap, {
          props: config.computedProps
        });
      }
      return (0, _filter.default)(data, filterValueForColumns, filterTypes, columnsMap);
    };
    var flow = function flow2(_ref2) {
      var originalData = _ref2.originalData, rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
      var input = _objectSpread(_objectSpread({}, rest), {}, {
        data: originalData,
        originalData,
        previousData: []
      });
      for (var _len = arguments.length, transforms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        transforms[_key - 1] = arguments[_key];
      }
      return transforms.reduce(function(acc, transform) {
        acc = transform(acc);
        acc.previousData.push(acc.data);
        return acc;
      }, input);
    };
    var computeData = function computeData2(config, computedProps, batchUpdateQueue) {
      var columnsMap = computedProps.columnsMap;
      var originalData = config.originalData || computedProps.originalData;
      var dataCountAfterFilter = void 0;
      var loading = config.loading === void 0 ? computedProps.computedLoading : config.loading;
      var filterValue = config.filterValue === void 0 ? computedProps.computedFilterValue : config.filterValue;
      var remoteFilter = config.remoteFilter === void 0 ? computedProps.computedRemoteFilter : config.remoteFilter;
      var dataSourceCache = config.dataSourceCache === void 0 ? computedProps.computedDataSourceCache : config.dataSourceCache;
      var filterTypes = computedProps.filterTypes;
      var localPagination = config.localPagination === void 0 ? computedProps.computedLocalPagination : config.localPagination;
      var remoteData = config.remoteData === void 0 ? computedProps.computedRemoteData : config.remoteData;
      var sortInfo = config.sortInfo === void 0 ? computedProps.computedSortInfo : config.sortInfo;
      var skip = config.skip === void 0 ? computedProps.computedSkip : config.skip;
      var limit = config.limit === void 0 ? computedProps.computedLimit : config.limit;
      var groupBy = config.groupBy === void 0 ? computedProps.computedGroupBy : config.groupBy;
      var treeEnabled = computedProps.computedTreeEnabled;
      var pivot = computedProps.pivot;
      var computedSummary = !!computedProps.summaryReducer;
      if (remoteData) {
        return {
          data: void 0,
          dataCountAfterFilter
        };
      }
      var result = flow({
        originalData
      }, function(config2) {
        if (dataSourceCache && Object.keys(dataSourceCache).length) {
          config2.data = config2.data.map(function(item) {
            var id = computedProps.getItemId(item);
            if (dataSourceCache[id]) {
              item = _objectSpread(_objectSpread({}, item), dataSourceCache[id]);
            }
            return item;
          });
        }
        return config2;
      }, function(config2) {
        if (filterValue && !computedProps.filterValue) {
          filterValue = (0, _getFilterValueForColumns.default)(filterValue, columnsMap);
          config2.data = filterData(config2.data, {
            filterValue,
            filterTypes,
            remoteFilter,
            columnsMap
          }, {
            treeEnabled,
            computedProps
          });
        }
        dataCountAfterFilter = config2.data.length;
        return config2;
      }, function(config2) {
        if (!computedProps.sortInfo) {
          sortInfo = (0, _getSortInfoForColumns.default)(sortInfo, columnsMap);
          if (sortInfo && computedProps.sorty) {
            config2.data = (0, _toConsumableArray2.default)(config2.data);
            computedProps.sorty(sortInfo, config2.data);
          }
        }
        return config2;
      }, function(config2) {
        if (treeEnabled && computedProps.computeTreeData) {
          var expandedNodes = computedProps.computedExpandedNodes;
          config2.data = computedProps.computeTreeData(config2.data, {
            expandedNodes,
            isNodeLeaf: computedProps.isNodeLeaf,
            isNodeAsync: computedProps.isNodeAsync,
            pathSeparator: computedProps.nodePathSeparator,
            loadingNodes: computedProps.computedLoadingNodes,
            nodesName: computedProps.nodesProperty,
            nodeCache: computedProps.computedNodeCache,
            dataSourceCache: computedProps.computedDataSourceCache,
            generateIdFromPath: computedProps.generateIdFromPath,
            collapsingNodes: computedProps.collapsingNodesRef.current,
            idProperty: !computedProps.compoundIdProperty ? computedProps.idProperty : "id"
          });
        }
        dataCountAfterFilter = config2.data.length;
        return config2;
      }, function(config2) {
        if (computedSummary) {
          var summary = computedProps.summaryReducer.initialValue;
          var reducerFn = computedProps.summaryReducer.reducer || computedProps.summaryReducer.reduce;
          if (summary && (0, _typeof2.default)(summary) === "object") {
            summary = _objectSpread({}, summary);
          }
          var data = config2.data;
          var item;
          for (var i = 0, len = data.length; i < len; i++) {
            item = data[i];
            summary = reducerFn(summary, item, computedProps);
          }
          if (computedProps.summaryReducer.complete) {
            summary = computedProps.summaryReducer.complete(summary, data || [], computedProps);
          }
          batchUpdateQueue(function() {
            computedProps.setSummary(summary);
          });
        }
        return config2;
      }, function(config2) {
        if (localPagination && limit) {
          skip = skip || 0;
          config2.data = (0, _paginate.default)(config2.data, {
            skip,
            limit
          });
        }
        return config2;
      }, function(config2) {
        batchUpdateQueue(function() {
          computedProps.setUngroupedData(config2.data);
        });
        var length = config2.data.length;
        if (Array.isArray(groupBy) && groupBy.length && computedProps.computeDataStep && length) {
          config2 = computedProps.computeDataStep({
            groupBy,
            batchUpdateQueue,
            columnsMap,
            computedProps,
            config: config2
          });
        }
        return config2;
      });
      return {
        data: result.data,
        dataCountAfterFilter: dataCountAfterFilter || 0
      };
    };
    var _default = computeData;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/isControlledProperty.js
var require_isControlledProperty = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/isControlledProperty.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isControlledValue = _interopRequireDefault(require_isControlledValue());
    var _default = function _default2(props2, propName) {
      if (!props2) {
        return false;
      }
      return (0, _isControlledValue.default)(props2[propName]);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/index.js
var require_useDataSource = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isLivePagination = exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = require_react();
    var _clamp = _interopRequireDefault(require_clamp());
    var _getIndexBy = _interopRequireDefault(require_getIndexBy());
    var _fastDeepEqual = _interopRequireDefault(require_fast_deep_equal());
    var _useLoadDataEffect = _interopRequireDefault(require_useLoadDataEffect());
    var _useProperty7 = _interopRequireDefault(require_useProperty());
    var _useNamedState9 = _interopRequireDefault(require_useNamedState());
    var _computeData = _interopRequireDefault(require_computeData());
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var _usePrevious = _interopRequireDefault(require_usePrevious());
    var _isControlledProperty = _interopRequireDefault(require_isControlledProperty());
    var _getGlobal = require_getGlobal();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var raf = globalObject.requestAnimationFrame;
    var isRemoteData = function isRemoteData2(props2) {
      if (props2.dataSource == null) {
        return false;
      }
      return typeof props2.dataSource.then === "function" || typeof props2.dataSource === "function";
    };
    var isRemoteSort = function isRemoteSort2(props2) {
      var remoteSort = props2.remoteSort;
      return remoteSort === true || remoteSort === void 0 && isRemoteData(props2);
    };
    var isRemoteFilter = function isRemoteFilter2(props2) {
      var remoteFilter = props2.remoteFilter;
      return remoteFilter === true || remoteFilter === void 0 && isRemoteData(props2);
    };
    var isPagination = function isPagination2(props2) {
      return !!props2.pagination;
    };
    var isLocalPagination = function isLocalPagination2(props2) {
      return isPagination(props2) && !isRemotePagination(props2);
    };
    var isLivePagination = function isLivePagination2(props2) {
      return !!props2.livePagination && isRemotePagination(props2);
    };
    exports.isLivePagination = isLivePagination;
    var isRemotePagination = function isRemotePagination2(props2) {
      var remotePagination = props2.remotePagination, pagination = props2.pagination, livePagination = props2.livePagination;
      if (pagination === false || pagination === "local") {
        return false;
      }
      if (pagination === "remote" || isRemoteData(props2)) {
        return true;
      }
      if (remotePagination !== void 0) {
        return remotePagination;
      }
      return !!livePagination;
    };
    var loadDataSource = function loadDataSource2(dataSource, _ref) {
      var skip = _ref.skip, limit = _ref.limit, currentData = _ref.currentData, sortInfo = _ref.sortInfo, filterValue = _ref.filterValue, groupBy = _ref.groupBy;
      if (typeof dataSource === "function") {
        dataSource = loadDataSource2(dataSource({
          skip,
          limit,
          sortInfo,
          currentData,
          filterValue,
          groupBy
        }), {
          skip,
          limit,
          sortInfo,
          groupBy,
          filterValue,
          currentData
        });
      }
      if (dataSource instanceof Promise) {
        return dataSource.then(function(result) {
          if (Array.isArray(result)) {
            return {
              data: result,
              count: result.length
            };
          }
          return {
            data: result.data,
            count: result.count
          };
        });
      }
      return Promise.resolve({
        data: dataSource,
        count: dataSource.length
      });
    };
    var useData = function useData2(_ref2, context) {
      var dataSource = _ref2.dataSource, skip = _ref2.skip, limit = _ref2.limit, localPagination = _ref2.localPagination;
      var data;
      var silentSetData;
      var _useNamedState = (0, _useNamedState9.default)([], context, "data");
      var _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2);
      data = _useNamedState2[0];
      silentSetData = _useNamedState2[1];
      var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), dataMap = _useState2[0], setDataMap = _useState2[1];
      var _useState3 = (0, _react.useState)(null), _useState4 = (0, _slicedToArray2.default)(_useState3, 2), dataIndexMap = _useState4[0], setDataIndexMap = _useState4[1];
      var originalData;
      var setOriginalData;
      var _useNamedState3 = (0, _useNamedState9.default)(Array.isArray(dataSource) ? dataSource : [], context, "originalData");
      var _useNamedState4 = (0, _slicedToArray2.default)(_useNamedState3, 2);
      originalData = _useNamedState4[0];
      setOriginalData = _useNamedState4[1];
      var _useNamedState5 = (0, _useNamedState9.default)(data.length, context, "count"), _useNamedState6 = (0, _slicedToArray2.default)(_useNamedState5, 2), count = _useNamedState6[0], setCount = _useNamedState6[1];
      var _useNamedState7 = (0, _useNamedState9.default)(0, context, "dataCountAfterFilter"), _useNamedState8 = (0, _slicedToArray2.default)(_useNamedState7, 2), dataCountAfterFilter = _useNamedState8[0], setDataCountAfterFilter = _useNamedState8[1];
      return {
        setDataMap,
        dataMap,
        dataIndexMap,
        setDataIndexMap,
        originalData,
        setOriginalData,
        data,
        count,
        dataCountAfterFilter,
        silentSetData,
        setDataCountAfterFilter,
        setCount
      };
    };
    var getDataCountForPagination = function getDataCountForPagination2(props2) {
      var paginationCount = props2.remotePagination ? props2.count : props2.dataCountAfterFilter != null ? props2.dataCountAfterFilter : props2.originalData.length;
      return paginationCount;
    };
    var getCurrentPage = function getCurrentPage2(props2) {
      return Math.floor(props2.skip / props2.limit) + 1;
    };
    var getPageCount = function getPageCount2(_ref3) {
      var count = _ref3.count, limit = _ref3.limit;
      return Math.ceil(count / limit);
    };
    var getSkipForPage = function getSkipForPage2(_ref4) {
      var page = _ref4.page, limit = _ref4.limit;
      return Math.max(0, limit * (page - 1));
    };
    var hasNextPage = function hasNextPage2(_ref5) {
      var skip = _ref5.skip, limit = _ref5.limit, count = _ref5.count;
      return getCurrentPage({
        skip,
        limit
      }) < getPageCount({
        count,
        limit
      });
    };
    var hasPrevPage = function hasPrevPage2(_ref6) {
      var skip = _ref6.skip, limit = _ref6.limit, count = _ref6.count;
      var currentPage = getCurrentPage({
        skip,
        limit
      });
      return currentPage > 1 && currentPage - 1 < getPageCount({
        count,
        limit
      });
    };
    var usePagination = function usePagination2(_ref7, computedPropsRef) {
      var append = _ref7.append, reload = _ref7.reload, setAppend = _ref7.setAppend, skip = _ref7.skip, limit = _ref7.limit, count = _ref7.count, silentSetSkip = _ref7.setSkip, silentSetLimit = _ref7.setLimit, remotePagination = _ref7.remotePagination, localPagination = _ref7.localPagination, pagination = _ref7.pagination, lastSkipRef = _ref7.lastSkipRef, lastLimitRef = _ref7.lastLimitRef, dataCountAfterFilter = _ref7.dataCountAfterFilter, livePagination = _ref7.livePagination, originalData = _ref7.originalData, data = _ref7.data;
      var paginationCount = getDataCountForPagination({
        originalData,
        remotePagination,
        count,
        dataCountAfterFilter
      });
      var setLimitOrSkip = function setLimitOrSkip2(computedProps, config, queue) {
        return (0, _computeData.default)(_objectSpread(_objectSpread({
          skip,
          limit
        }, config), {}, {
          localPagination
        }), computedProps, queue);
      };
      var setSkip = function setSkip2(skip2, config) {
        var computedProps = computedPropsRef.current;
        var queue = (0, _batchUpdate.default)();
        var computedRemoteData = computedProps.computedRemoteData;
        queue.commit(function() {
          if (config && config.append !== void 0) {
            setAppend(config.append);
          }
          if (computedRemoteData) {
            computedProps.setLoadDataTrigger(function(loadDataTrigger) {
              return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ["skip"]);
            });
          }
          silentSetSkip(skip2);
        });
      };
      var setLimit = function setLimit2(limit2) {
        var computedProps = computedPropsRef.current;
        var queue = (0, _batchUpdate.default)();
        var computedRemoteData = computedProps.computedRemoteData;
        queue.commit(function() {
          if (computedRemoteData) {
            computedProps.setLoadDataTrigger(function(loadDataTrigger) {
              return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ["limit"]);
            });
          }
          silentSetLimit(limit2);
        });
      };
      var incrementSkip = function incrementSkip2(amount, config) {
        setSkip(skip + amount, config);
      };
      var gotoNextPage = function gotoNextPage2(config) {
        if (hasNextPage({
          skip,
          limit: lastLimitRef.current,
          count: paginationCount
        })) {
          incrementSkip(lastLimitRef.current, config);
        }
      };
      var gotoPrevPage = function gotoPrevPage2() {
        if (hasPrevPage({
          skip,
          limit,
          count: paginationCount
        })) {
          incrementSkip(-limit);
        }
      };
      var gotoPage = function gotoPage2(page, config) {
        page = (0, _clamp.default)(page, 1, getPageCount({
          count: paginationCount,
          limit
        }));
        var force = config ? config.force : false;
        if (page === getCurrentPage({
          skip,
          limit
        }) && !force) {
          return;
        }
        setSkip(getSkipForPage({
          page,
          limit
        }));
      };
      var hasNext = function hasNext2() {
        return hasNextPage({
          skip,
          limit,
          count: paginationCount
        });
      };
      var hasPrev = function hasPrev2() {
        return hasPrevPage({
          skip,
          limit,
          count: paginationCount
        });
      };
      var gotoFirstPage = function gotoFirstPage2() {
        return gotoPage(1);
      };
      var gotoLastPage = function gotoLastPage2() {
        return gotoPage(getPageCount({
          count: paginationCount,
          limit
        }));
      };
      var paginationProps;
      if ((localPagination || remotePagination) && !livePagination) {
        paginationProps = {
          onSkipChange: setSkip,
          onLimitChange: setLimit,
          reload,
          onRefresh: reload,
          totalCount: paginationCount,
          count,
          skip,
          limit,
          remotePagination,
          localPagination,
          livePagination,
          pagination,
          gotoPage,
          gotoNextPage,
          gotoFirstPage,
          gotoLastPage,
          gotoPrevPage,
          hasNextPage: hasNext,
          hasPrevPage: hasPrev
        };
      }
      return {
        count,
        paginationCount,
        reload,
        setSkip,
        setLimit,
        gotoNextPage,
        gotoPrevPage,
        hasNextPage: hasNext,
        hasPrevPage: hasPrev,
        gotoFirstPage,
        gotoLastPage,
        gotoPage,
        paginationProps
      };
    };
    var useDataSourceCache = function useDataSourceCache2(props2, computedProps, computedPropsRef) {
      var prevDataSource = (0, _usePrevious.default)(props2.dataSource, props2.dataSource);
      var _useProperty = (0, _useProperty7.default)(props2, "dataSourceCache", void 0, {
        onChange: function onChange(dataSourceCache2, info) {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          if (computedProps2.initialProps.onDataSourceCacheChange) {
            computedProps2.initialProps.onDataSourceCacheChange(dataSourceCache2, info);
          }
        }
      }), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), dataSourceCache = _useProperty2[0], setDataSourceCache = _useProperty2[1];
      if (props2.clearDataSourceCacheOnChange && prevDataSource !== props2.dataSource) {
        dataSourceCache = void 0;
      }
      (0, _react.useLayoutEffect)(function() {
        if (props2.clearDataSourceCacheOnChange) {
          setDataSourceCache(void 0);
        }
      }, [props2.dataSource]);
      return [dataSourceCache, setDataSourceCache];
    };
    var _default = function _default2(props2, computedProps, computedPropsRef) {
      var computedRemoteData = isRemoteData(props2);
      var computedRemoteFilter = isRemoteFilter(props2);
      var computedRemoteSort = isRemoteSort(props2);
      var computedLivePagination = isLivePagination(props2);
      var computedRemotePagination = isRemotePagination(props2);
      var computedLocalPagination = isLocalPagination(props2);
      var computedPagination = computedRemotePagination || computedLocalPagination;
      var _useState5 = (0, _react.useState)([]), _useState6 = (0, _slicedToArray2.default)(_useState5, 2), ungroupedData = _useState6[0], setUngroupedData = _useState6[1];
      var _useState7 = (0, _react.useState)([]), _useState8 = (0, _slicedToArray2.default)(_useState7, 2), loadDataTrigger = _useState8[0], setLoadDataTrigger = _useState8[1];
      var _useState9 = (0, _react.useState)(false), _useState10 = (0, _slicedToArray2.default)(_useState9, 2), append = _useState10[0], setAppend = _useState10[1];
      var _useProperty3 = (0, _useProperty7.default)(props2, "skip", 0), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), computedSkip = _useProperty4[0], setSkip = _useProperty4[1];
      var _useProperty5 = (0, _useProperty7.default)(props2, "limit", 50), _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2), computedLimit = _useProperty6[0], setLimit = _useProperty6[1];
      var _useDataSourceCache = useDataSourceCache(props2, computedProps, computedPropsRef), _useDataSourceCache2 = (0, _slicedToArray2.default)(_useDataSourceCache, 2), computedDataSourceCache = _useDataSourceCache2[0], setDataSourceCache = _useDataSourceCache2[1];
      var _useState11 = (0, _react.useState)(props2.summaryReducer ? props2.summaryReducer.initialValue : null), _useState12 = (0, _slicedToArray2.default)(_useState11, 2), summary = _useState12[0], setSummary = _useState12[1];
      var setItemOnReorderingGroups = function setItemOnReorderingGroups2(index2, item, config) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.setItemAt(index2, item, config);
        computedProps2.reload();
      };
      var setItemAt = function setItemAt2(index2, item, config) {
        var replace = config && config.replace;
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var newItem = computedProps2.getItemAt(index2);
        var oldId = computedProps2.getItemId(newItem);
        if (!newItem) {
          return;
        }
        if (replace) {
          newItem = item;
        } else {
          if (config && config.property) {
            newItem = _objectSpread(_objectSpread({}, newItem), {}, (0, _defineProperty2.default)({}, config.property, config.value));
          } else {
            if (config && config.deepCloning && computedProps2.compoundIdProperty) {
              var parts = computedProps2.idProperty.split(computedProps2.idPropertySeparator);
              for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                if (newItem[part]) {
                  Object.assign(newItem[part], _objectSpread({}, item[part]));
                }
              }
            } else {
              newItem = _objectSpread(_objectSpread({}, newItem), item);
            }
          }
        }
        var newId = computedProps2.getItemId(newItem);
        if (newId !== oldId) {
          if (computedProps2.showWarnings) {
            console.error("Cannot replace the item with another one that has a different value for the idProperty!");
          }
          return;
        }
        setDataSourceCache(_objectSpread(_objectSpread({}, computedProps2.computedDataSourceCache), {}, (0, _defineProperty2.default)({}, newId, newItem)));
      };
      var setItemsAt = function setItemsAt2(items, config) {
        var replace = config && config.replace;
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var newIds = {};
        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          var oldId = computedProps2.getItemId(item);
          var index2 = computedProps2.getItemIndex(item);
          var newItem = computedProps2.getItemAt(index2);
          if (!newItem) {
            continue;
          }
          if (replace) {
            newItem = item;
          } else {
            newItem = _objectSpread(_objectSpread({}, newItem), item);
          }
          var newId = computedProps2.getItemId(newItem);
          if (newId !== oldId) {
            continue;
          }
          newIds[newId] = newItem;
        }
        if (!items.length) {
          return;
        }
        setDataSourceCache(_objectSpread(_objectSpread({}, computedProps2.computedDataSourceCache), newIds));
      };
      var setItemPropertyAt = function setItemPropertyAt2(index2, property, value) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (property === computedProps2.idProperty) {
          if (computedProps2.showWarnings) {
            console.error('Cannot update the value of the "idProperty" property!');
          }
        }
        var item = computedProps2.getItemAt(index2);
        if (item) {
          item = _objectSpread({}, item);
          item[property] = value;
          setItemAt(index2, item, {
            property,
            value
          });
        }
      };
      var setItemPropertyForId = function setItemPropertyForId2(id, property, value) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var index2 = computedProps2.getRowIndexById(id);
        setItemPropertyAt(index2, property, value);
      };
      var _useData = useData({
        dataSource: props2.dataSource,
        skip: computedSkip,
        limit: computedLimit,
        localPagination: computedLocalPagination
      }, props2.context), data = _useData.data, dataMap = _useData.dataMap, dataIndexMap = _useData.dataIndexMap, setDataIndexMap = _useData.setDataIndexMap, setDataMap = _useData.setDataMap, count = _useData.count, silentSetData = _useData.silentSetData, setCount = _useData.setCount, originalData = _useData.originalData, setOriginalData = _useData.setOriginalData, dataCountAfterFilter = _useData.dataCountAfterFilter, setDataCountAfterFilter = _useData.setDataCountAfterFilter;
      var _useState13 = (0, _react.useState)(Date.now), _useState14 = (0, _slicedToArray2.default)(_useState13, 2), reloadTimestamp = _useState14[0], setReloadTimestamp = _useState14[1];
      var reload = function reload2() {
        setReloadTimestamp(Date.now());
      };
      var getFilteredRows = (0, _react.useCallback)(function(dataCount) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var filteredRowsCount = computedProps2.filteredRowsCount;
        if (dataCount === void 0) {
          return;
        }
        if (filteredRowsCount) {
          filteredRowsCount(dataCount);
        }
      }, [dataCountAfterFilter]);
      if (computedProps.filteredRowsCount) {
        getFilteredRows(dataCountAfterFilter);
      }
      var lastSkipRef = (0, _react.useRef)(computedSkip);
      var lastFilterValueRef = (0, _react.useRef)(computedProps.computedFilterValue);
      var lastLimitRef = (0, _react.useRef)(computedLimit);
      var lastGroupBy = (0, _usePrevious.default)(computedProps.computedGroupBy, computedProps.computedGroupBy);
      var lastDataSource = (0, _usePrevious.default)(props2.dataSource, props2.dataSource);
      var dataPromiseRef = (0, _react.useRef)(null);
      dataPromiseRef.current = (0, _useLoadDataEffect.default)({
        getDataSource: function getDataSource(_ref8) {
          var shouldReload = _ref8.shouldReload;
          var computedProps2 = computedPropsRef.current;
          return shouldReload ? computedProps2.dataSource : computedProps2.originalData;
        }
      }, function(dataToLoad, _ref9) {
        var shouldReload = _ref9.shouldReload, intercept = _ref9.intercept;
        var _computedPropsRef$cur = computedPropsRef.current, computedSortInfo = _computedPropsRef$cur.computedSortInfo, computedRemoteData2 = _computedPropsRef$cur.computedRemoteData, computedFilterValue = _computedPropsRef$cur.computedFilterValue, computedGroupBy = _computedPropsRef$cur.computedGroupBy, prevOriginalData = _computedPropsRef$cur.originalData, skipLoadOnMount = _computedPropsRef$cur.skipLoadOnMount, wasMountedRef = _computedPropsRef$cur.wasMountedRef, initialState = _computedPropsRef$cur.initialState;
        if (!prevOriginalData.length && computedRemoteData2) {
          computedPropsRef.current.setLoading(true);
        }
        var initialCount;
        if (skipLoadOnMount && !wasMountedRef.current && initialState && initialState.data) {
          dataToLoad = initialState.data;
          initialCount = initialState.count;
        }
        if (computedRemoteData2 && !Array.isArray(dataToLoad)) {
          computedPropsRef.current.setLoading(true);
        }
        var skipControlled = (0, _isControlledProperty.default)(computedProps.initialProps, "skip");
        var shouldResetSkip = shouldReload && typeof props2.dataSource === "function" && props2.dataSource !== lastDataSource && !skipControlled && computedPropsRef.current.computedSkip !== 0;
        if (!shouldResetSkip) {
          if (shouldReload && typeof props2.dataSource === "function" && computedPropsRef.current.computedSkip !== 0 && computedPropsRef.current.computedFilterable && (!(0, _fastDeepEqual.default)(computedPropsRef.current.computedFilterValue, lastFilterValueRef.current) || computedPropsRef.current.computedGroupBy !== lastGroupBy)) {
            shouldResetSkip = true;
          }
        }
        if (shouldResetSkip) {
          setSkip(0);
          return Promise.resolve(true);
        }
        return intercept(loadDataSource(dataToLoad, {
          sortInfo: computedSortInfo,
          currentData: computedPropsRef.current.data,
          skip: computedSkip,
          limit: computedLimit,
          filterValue: computedFilterValue,
          groupBy: computedGroupBy
        }), dataToLoad).then(function(_ref10) {
          var originalData2 = _ref10.data, count2 = _ref10.count;
          if (initialCount) {
            count2 = initialCount;
          }
          var computedProps2 = computedPropsRef.current;
          var queue = (0, _batchUpdate.default)();
          var data2 = originalData2;
          var shouldAppend = computedLivePagination && !shouldReload ? computedSkip > lastSkipRef.current : append;
          if (shouldAppend) {
            originalData2 = prevOriginalData.concat(originalData2);
            data2 = originalData2;
          }
          var computeDataResult = (0, _computeData.default)({
            remoteData: false,
            originalData: originalData2
          }, computedProps2, queue);
          data2 = computeDataResult.data || originalData2;
          var dataCountAfterFilter2 = computeDataResult.dataCountAfterFilter;
          var prevComputedSkip = lastSkipRef.current;
          lastSkipRef.current = computedSkip;
          lastFilterValueRef.current = computedFilterValue;
          lastLimitRef.current = computedLimit;
          var shouldIndexData = computedProps2.computedRowSelectionEnabled || computedProps2.computedRowExpandEnabled || computedProps2.treeColumn || computedProps2.treeEnabled || computedProps2.rowIndexColumn || computedProps2.computedRowHeights || computedProps2.computedGroupBy && props2.stickyGroupRows;
          var dataIndexMap2 = shouldIndexData && Array.isArray(data2) ? {} : null;
          var stickyGroupsIndexes = props2.stickyGroupRows === true || props2.stickyTreeNodes === true ? {} : null;
          var dataMap2 = shouldIndexData && Array.isArray(data2) ? data2.reduce(function(acc, item, index2) {
            var id = computedProps2.getItemId(item);
            if (stickyGroupsIndexes) {
              if (item.__group) {
                stickyGroupsIndexes[index2] = item.depth;
              }
              if (item.__nodeProps && !item.__nodeProps.leafNode) {
                stickyGroupsIndexes[index2] = item.__nodeProps.depth + 1;
              }
            }
            acc[id] = item;
            dataIndexMap2[id] = index2;
            return acc;
          }, {}) : null;
          return queue.commit(function() {
            var computedProps3 = computedPropsRef.current;
            setOriginalData(originalData2);
            if (computedProps3.scrollTopOnSort === true && computedProps3.loadDataTrigger.find(function(s) {
              return s == "sortInfo";
            }) || computedProps3.scrollTopOnSort === "always") {
              raf(function() {
                computedProps3.setScrollTop(0);
              });
            }
            if (computedSkip === 0 && prevComputedSkip > 0) {
              raf(function() {
                computedProps3.setScrollTop(0);
              });
            }
            if (computedProps3.scrollTopOnFilter && computedProps3.loadDataTrigger.find(function(s) {
              return s == "filterValue";
            })) {
              raf(function() {
                computedProps3.setScrollTop(0);
              });
            }
            setLoadDataTrigger([]);
            if (append) {
              setAppend(false);
            }
            computedProps3.setDataMap(dataMap2);
            computedProps3.setDataIndexMap(dataIndexMap2);
            if (stickyGroupsIndexes && computedProps3.setStickyGroupsIndexes) {
              computedProps3.setStickyGroupsIndexes(stickyGroupsIndexes);
            }
            setDataCountAfterFilter(dataCountAfterFilter2);
            if (dataCountAfterFilter2 != null && computedSkip >= dataCountAfterFilter2 && !computedRemoteData2) {
              setSkip(0);
            }
            silentSetData(data2 || []);
            computedProps3.setLoading(false);
            if (shouldReload) {
              setCount(count2);
            }
          });
        }, function(_err) {
        });
      }, {
        reloadDeps: [props2.dataSource, computedRemoteData ? computedSkip : null, computedRemoteData && !computedLivePagination ? computedLimit : null, reloadTimestamp, props2.pagination, props2.remotePagination, props2.pivot, props2.livePagination, computedRemoteData || props2.groupBy ? computedProps.computedGroupBy : null, computedRemoteData ? JSON.stringify(computedProps.computedSortInfo) : null, computedRemoteData ? JSON.stringify(computedProps.computedFilterValue) : null, computedRemoteFilter ? JSON.stringify(computedProps.computedFilterValue) : null, JSON.stringify(computedProps.computedCollapsedGroups || ""), JSON.stringify(computedProps.computedExpandedGroups || "")],
        noReloadDeps: [originalData, computedProps.computedGroupBy, computedProps.groupColumn, computedProps.renderRowDetails, computedProps.treeColumn, computedProps.showGroupSummaryRow, !computedRemoteData ? computedSkip : null, !computedRemoteData ? computedLimit : null, !computedRemoteData ? JSON.stringify(computedProps.computedSortInfo) : null, !computedRemoteFilter ? JSON.stringify(computedProps.computedFilterValue) : null, computedProps.computedExpandedNodes ? JSON.stringify(computedProps.computedExpandedNodes) : null, computedProps.computedNodeCache ? JSON.stringify(computedProps.computedNodeCache) : null, computedProps.computedLoadingNodes ? JSON.stringify(computedProps.computedLoadingNodes) : null, computedDataSourceCache, computedProps.stickyGroupRows, computedProps.stickyTreeNodes]
      });
      var paginationProps = usePagination({
        append,
        reload,
        setAppend,
        lastSkipRef,
        lastLimitRef,
        skip: computedSkip,
        limit: computedLimit,
        count,
        setSkip,
        setLimit,
        pagination: computedPagination,
        livePagination: computedLivePagination,
        localPagination: computedLocalPagination,
        remotePagination: computedRemotePagination,
        dataCountAfterFilter,
        originalData,
        data
      }, computedPropsRef);
      var getRowIndexById = (0, _react.useCallback)(function(rowId, data2) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return -1;
        }
        var dataIndexMap2 = computedProps2.dataIndexMap;
        if (dataIndexMap2) {
          return dataIndexMap2[rowId];
        }
        data2 = data2 || computedProps2.data;
        return (0, _getIndexBy.default)(data2, computedProps2.idProperty, rowId, computedProps2.getItemId, computedProps2.compoundIdProperty);
      }, []);
      var getItemIndexById = (0, _react.useCallback)(function(id, data2) {
        return getRowIndexById(id, data2);
      }, []);
      var getData = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return [];
        }
        return computedProps2.data;
      }, []);
      return _objectSpread({
        getData,
        getRowIndexById,
        getItemIndexById,
        data,
        dataMap,
        setDataMap,
        dataIndexMap,
        setDataIndexMap,
        loadDataTrigger,
        setLoadDataTrigger,
        originalData,
        setOriginalData,
        ungroupedData,
        setUngroupedData,
        computedSkip,
        computedPagination,
        computedLimit,
        computedSummary: summary,
        setSummary,
        dataPromiseRef,
        silentSetData,
        computedLivePagination,
        computedLocalPagination,
        computedRemotePagination,
        computedRemoteData,
        computedRemoteFilter,
        computedRemoteSort,
        computedDataSourceCache,
        setDataSourceCache,
        setItemPropertyAt,
        setItemPropertyForId,
        setItemAt,
        setItemsAt,
        setItemOnReorderingGroups
      }, paginationProps);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useScrollProps.js
var require_useScrollProps = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useScrollProps.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _react = require_react();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _default = function _default2(props2, computedProps) {
      var SCROLLBAR_WIDTH = (0, _react.useMemo)(function() {
        return (0, _getScrollbarWidth.default)();
      }, []);
      var scrollProps = _objectSpread({
        scrollMaxDelta: SCROLLBAR_WIDTH ? 1 : 1,
        scrollThreshold: computedProps.scrollThreshold,
        scrollDebounceDelay: 1
      }, props2.scrollProps);
      if (computedProps.livePagination) {
        var loadNextPage = function loadNextPage2() {
          if (!computedProps.computedLoading && computedProps.gotoNextPage) {
            computedProps.gotoNextPage({
              append: true
            });
          }
        };
        scrollProps.onContainerScrollVerticalMax = function() {
          if (props2.scrollProps && props2.scrollProps.onContainerScrollVerticalMax) {
            var _props$scrollProps;
            (_props$scrollProps = props2.scrollProps).onContainerScrollVerticalMax.apply(_props$scrollProps, arguments);
          }
          loadNextPage();
        };
      }
      return scrollProps;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useColumnsSizing.js
var require_useColumnsSizing = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useColumnsSizing.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _defaultCheckColumnId = require_defaultCheckColumnId();
    var _defaultRowReorderColumnId = require_defaultRowReorderColumnId();
    var _defaultRowIndexColumnId = require_defaultRowIndexColumnId();
    var _defaultRowExpandColumnId = require_defaultRowExpandColumnId();
    var EMPTY_OBJECT = {};
    var removeItemFromArray = function removeItemFromArray2(array, obj) {
      var index2 = array.indexOf(obj);
      if (index2 >= 0) {
        array.splice(index2, 1);
      }
    };
    var getColumnsWidths = function getColumnsWidths2(columns) {
      return columns.reduce(function(width, column) {
        return width + column.computedWidth;
      }, 0);
    };
    var checkForSpecialColumns = function checkForSpecialColumns2(id) {
      var specialColumns = [_defaultCheckColumnId.id, _defaultRowReorderColumnId.id, _defaultRowIndexColumnId.id, _defaultRowExpandColumnId.id];
      if (specialColumns.indexOf(id) === -1) {
        return false;
      }
      return true;
    };
    var useColumnsSizing = function useColumnsSizing2(_props, _computedProps, computedPropsRef) {
      var computeColumnSizesToFit = function computeColumnSizesToFit2(gridWidth) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var visibleColumns = computedProps.visibleColumns;
        if (gridWidth <= 0 || !visibleColumns.length) {
          return;
        }
        var columnsToSize = [];
        var columnsNotToSize = [];
        visibleColumns.forEach(function(column2) {
          if (column2.resizable === false) {
            columnsNotToSize.push(column2);
          } else {
            columnsToSize.push(column2);
          }
        });
        var columnsToResize = columnsToSize.slice(0);
        var finished = false;
        var updateColumnsNotToSize = function updateColumnsNotToSize2(column2) {
          removeItemFromArray(columnsToResize, column2);
          columnsNotToSize.push(column2);
        };
        var newColumnSizes = {};
        while (!finished) {
          finished = true;
          var availableSpace = gridWidth - getColumnsWidths(columnsNotToSize);
          var scale = availableSpace / getColumnsWidths(columnsToResize);
          var spaceForLastColumn = availableSpace;
          for (var i = columnsToResize.length - 1; i >= 0; i--) {
            var column = columnsToResize[i];
            var minWidth = column.computedMinWidth;
            var maxWidth = column.computedMaxWidth;
            var newWidth = Math.round(column.computedWidth * scale);
            if (minWidth && newWidth < minWidth) {
              newWidth = minWidth;
              updateColumnsNotToSize(column);
              finished = false;
            } else if (maxWidth && newWidth > maxWidth) {
              newWidth = maxWidth;
              updateColumnsNotToSize(column);
              finished = false;
            } else if (i === 0) {
              newWidth = spaceForLastColumn;
            }
            var columnId = column.id;
            Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));
            spaceForLastColumn -= newWidth;
          }
        }
        if (computedProps.virtualizeColumns) {
          var bodyRef = computedProps.bodyRef.current;
          var columnLayout = bodyRef.columnLayout;
          var headerLayout = columnLayout.headerLayout;
          var header = headerLayout.header;
          setTimeout(function() {
            header.updateColumns();
          }, 10);
        }
        var newReservedViewportWidth = computedProps.reservedViewportWidth;
        var columnFlexes = computedProps.columnFlexes;
        computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {
          getColumnBy: computedProps.getColumnBy,
          onColumnResize: computedProps.initialProps.onColumnResize,
          onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,
          columnSizes: computedProps.columnSizes,
          setColumnSizes: computedProps.setColumnSizes,
          setColumnFlexes: computedProps.setColumnFlexes
        });
      };
      var checkForAvaibleWidth = function checkForAvaibleWidth2() {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var scrollbars = computedProps.scrollbars;
        var hasVerticalScrollbar = scrollbars.vertical;
        var scrollbarWidth = hasVerticalScrollbar ? (0, _getScrollbarWidth.default)() : 0;
        var computedAvailableWidth = computedProps.availableWidth || 0;
        var availableWidth = computedAvailableWidth - scrollbarWidth;
        if (availableWidth > 0) {
          computeColumnSizesToFit(availableWidth);
        }
      };
      var computeColumnSizesAuto = function computeColumnSizesAuto2(columns, callback) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        if (!columns.length) {
          return;
        }
        columns.forEach(function(column) {
          if (column.resizable === false || checkForSpecialColumns(column.id)) {
          } else {
            callback(column);
          }
        });
      };
      var getCellForColumn = function getCellForColumn2(column, row) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var result;
        var columnId = column.id;
        var cells = row.getCells();
        if (!cells.length) {
          return;
        }
        cells.forEach(function(cell) {
          var cellProps = cell.props;
          var cellId = cellProps.id;
          if (columnId === cellId) {
            result = cell.domRef ? cell.domRef.current : cell.getDOMNode ? cell.getDOMNode() : null;
          }
        });
        return result;
      };
      var getCellsForColumn = function getCellsForColumn2(column) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var result = [];
        if (computedProps.getRows) {
          computedProps.getRows().forEach(function(rowInstance) {
            var row = rowInstance.row;
            var cell = getCellForColumn(column, row);
            result.push(cell);
          });
        }
        return result;
      };
      var cloneIntoDummyContainer = function cloneIntoDummyContainer2(cell, dummyContainer, skipSortTool) {
        var cellClone = cell && cell.cloneNode(true);
        if (!cellClone) {
          return;
        }
        cellClone.style.width = "";
        cellClone.style.minWidth = "";
        cellClone.style.maxWidth = "";
        cellClone.style.position = "static";
        cellClone.style.left = "";
        var rowClassName = "InovuaReactDataGrid__row";
        var headerClassName = "InovuaReactDataGrid__header";
        var headerCellClassName = "InovuaReactDataGrid__column-header";
        var sortToolClassName = "InovuaReactDataGrid__sort-icon-wrapper";
        var isHeader = cellClone.classList.contains(headerCellClassName);
        var cellContent;
        cellContent = (0, _toConsumableArray2.default)(cellClone.children).find(function(cell2) {
          var className = isHeader ? "InovuaReactDataGrid__column-header__content" : "InovuaReactDataGrid__cell__content";
          return cell2.classList.contains(className);
        });
        if (isHeader && skipSortTool) {
          var sortTool = cellContent.querySelector(".".concat(sortToolClassName));
          if (sortTool) {
            cellContent = cellContent.removeChild(sortTool);
          }
        }
        if (cellContent) {
          cellContent.style.width = "fit-content";
        } else {
          cellClone.style.width = "fit-content";
        }
        var cloneRow = document.createElement("div");
        var cloneRowClassList = cloneRow.classList;
        if (isHeader) {
          cloneRowClassList.add(headerClassName);
          cloneRow.style.position = "static";
        } else {
          cloneRowClassList.add(rowClassName);
        }
        var rowElement = cell.parentElement;
        while (rowElement) {
          var isRow = [rowClassName, headerClassName].some(function(cls) {
            return rowElement.classList.contains(cls);
          });
          if (isRow) {
            for (var i = 0; i < rowElement.classList.length; i++) {
              var item = rowElement.classList[i];
              cloneRowClassList.add(item);
            }
            break;
          }
          rowElement = rowElement.parentElement;
        }
        cloneRow.appendChild(cellClone);
        dummyContainer.appendChild(cloneRow);
      };
      var computeOptimizedWidth = function computeOptimizedWidth2(column, skipHeader, skipSortTool) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return -1;
        }
        var cells = getCellsForColumn(column);
        if (!cells || !cells.length) {
          return -1;
        }
        if (!skipHeader) {
          var headerCell;
          var header = computedProps.getHeader();
          var headerCells = header.getCells();
          headerCells.find(function(cell) {
            var cellProps = cell.props;
            if (cellProps.id === column.id) {
              headerCell = cell.getDOMNode();
            }
          });
          if (headerCell && headerCell.classList.contains("InovuaReactDataGrid__column-header__resize-wrapper")) {
            headerCell = (0, _toConsumableArray2.default)(headerCell.children).find(function(cell) {
              return cell.classList.contains("InovuaReactDataGrid__column-header");
            });
          }
          cells.push(headerCell);
        }
        return addCellsToContainer(cells, skipHeader, skipSortTool);
      };
      var addCellsToContainer = function addCellsToContainer2(cells, skipHeader, skipSortTool) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return -1;
        }
        var dummyContainer = document.createElement("span");
        dummyContainer.style.position = "fixed";
        var vl = computedProps.getVirtualList();
        var container = vl.getContainerNode();
        container.appendChild(dummyContainer);
        (0, _toConsumableArray2.default)(cells).map(function(cell) {
          return cloneIntoDummyContainer(cell, dummyContainer, skipSortTool);
        });
        var dummyContainerWidth = dummyContainer.offsetWidth;
        if (!skipHeader) {
          dummyContainerWidth += 3;
        } else {
          dummyContainerWidth += 1;
        }
        container.removeChild(dummyContainer);
        return dummyContainerWidth;
      };
      var normaliseWidth = function normaliseWidth2(column, width) {
        var minWidth = column.minWidth;
        var maxWidth = column.maxWidth;
        if (minWidth && width < minWidth) {
          width = minWidth;
        }
        if (maxWidth && width > maxWidth) {
          width = maxWidth;
        }
        return width;
      };
      var setColumnSizesToFit = function setColumnSizesToFit2() {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var enableColumnAutosize = computedProps.enableColumnAutosize;
        if (!enableColumnAutosize) {
          showWarning("setColumnSizesToFit");
          return;
        }
        checkForAvaibleWidth();
      };
      var setColumnsSizesAuto = function setColumnsSizesAuto2() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : EMPTY_OBJECT, columnIds = _ref.columnIds, skipHeader = _ref.skipHeader, skipSortTool = _ref.skipSortTool;
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var enableColumnAutosize = computedProps.enableColumnAutosize;
        if (!enableColumnAutosize) {
          showWarning("setColumnsSizesAuto");
          return;
        }
        var shouldSkipHeader = skipHeader != null ? skipHeader : computedProps.skipHeaderOnAutoSize;
        var shouldSkipSortTool = skipSortTool != null ? skipSortTool : false;
        var allIds = [];
        var columns = [];
        if (columnIds !== void 0) {
          if (Array.isArray(columnIds)) {
            allIds = columnIds;
          }
        }
        for (var i = 0; i < allIds.length; i++) {
          var id = allIds[i];
          var column = computedProps.getColumnBy(id);
          columns.push(column);
        }
        if (columns && columns.length === 0) {
          columns = computedProps.visibleColumns;
        }
        if (!columns || columns.length === 0) {
          return;
        }
        var columnsToSize = [];
        var counter = -1;
        var newColumnSizes = {};
        while (counter !== 0) {
          counter = 0;
          computeColumnSizesAuto(columns, function(column2) {
            if (columnsToSize.indexOf(column2) >= 0) {
              return false;
            }
            var optimizedWidth = computeOptimizedWidth(column2, shouldSkipHeader, shouldSkipSortTool);
            if (optimizedWidth > 0) {
              var newWidth = normaliseWidth(column2, optimizedWidth);
              var columnId = column2.id;
              columnsToSize.push(column2);
              Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));
              counter++;
            }
            return true;
          });
        }
        if (computedProps.virtualizeColumns) {
          var bodyRef = computedProps.bodyRef.current;
          var columnLayout = bodyRef.columnLayout;
          var headerLayout = columnLayout.headerLayout;
          var header = headerLayout.header;
          setTimeout(function() {
            header.updateColumns();
          }, 10);
        }
        var newReservedViewportWidth = computedProps.reservedViewportWidth;
        var columnFlexes = computedProps.columnFlexes;
        computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {
          getColumnBy: computedProps.getColumnBy,
          onColumnResize: computedProps.initialProps.onColumnResize,
          onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,
          columnSizes: computedProps.columnSizes,
          setColumnSizes: computedProps.setColumnSizes,
          setColumnFlexes: computedProps.setColumnFlexes
        });
      };
      var setColumnSizeAuto = function setColumnSizeAuto2(id, skipHeader) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var enableColumnAutosize = computedProps.enableColumnAutosize;
        if (!enableColumnAutosize) {
          showWarning("setColumnSizeAuto");
          return;
        }
        if (id) {
          setColumnsSizesAuto({
            columnIds: [id],
            skipHeader
          });
        }
        return;
      };
      var showWarning = function showWarning2(method) {
        return console.error("In order for ".concat(method, " to work, the 'enableColumnAutosize' prop should be 'true'."));
      };
      return {
        setColumnSizesToFit,
        setColumnsSizesAuto,
        setColumnSizeAuto
      };
    };
    var _default = useColumnsSizing;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/mapGroups.js
var require_mapGroups = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/mapGroups.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _default = function _default2(groups, props2) {
      var map = groups.reduce(function(acc, group) {
        if (group.name) {
          acc[group.name] = _objectSpread({}, group);
        }
        return acc;
      }, {});
      if (props2.showWarnings) {
        groups.forEach(function(group) {
          if (group.group && !map[group.group]) {
            console.error('You have referred group "'.concat(group.group, '", but it is not defined in your groups prop.'));
          }
        });
      }
      Object.keys(map).map(function(groupName) {
        var count = -1;
        var group;
        var itGroupName = groupName;
        while (group = map[itGroupName]) {
          count++;
          itGroupName = group.group;
          if (!itGroupName) {
            break;
          }
        }
        map[groupName].computedDepth = count;
      });
      return map;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useGroups.js
var require_useGroups = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useGroups.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _mapGroups = _interopRequireDefault(require_mapGroups());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var getGroupsDepth = function getGroupsDepth2(groupsMap) {
      if (!groupsMap) {
        return 0;
      }
      return Math.max.apply(Math, (0, _toConsumableArray2.default)(Object.keys(groupsMap).map(function(groupName) {
        return groupsMap[groupName].computedDepth || 0;
      })));
    };
    var getPivotGroups = function getPivotGroups2(uniqueValuesRoot, parentGroup, pivotSummaryGroups) {
      var groups = [];
      var field = uniqueValuesRoot.field, values = uniqueValuesRoot.values;
      if (field && values) {
        Object.keys(values).forEach(function(value) {
          var groupId = "".concat(parentGroup ? parentGroup + "_" : "").concat(field, ":").concat(value);
          var defaultGroup = pivotSummaryGroups[field];
          var group = {
            name: groupId,
            header: value
          };
          if (defaultGroup) {
            if (typeof defaultGroup === "function") {
              group = _objectSpread(_objectSpread({}, defaultGroup(_objectSpread(_objectSpread({}, group), {}, {
                field,
                values
              }))), group);
            } else {
              group = _objectSpread(_objectSpread({}, defaultGroup), group);
            }
          }
          if (parentGroup) {
            group.group = parentGroup;
          }
          groups.push(group);
          var nextRoot = values[value];
          groups.push.apply(groups, (0, _toConsumableArray2.default)(getPivotGroups2(nextRoot, groupId, pivotSummaryGroups)));
        });
      }
      return groups;
    };
    var useGroups = function useGroups2(props2, computedProps) {
      var computedPivotUniqueValuesPerColumn = computedProps.computedPivotUniqueValuesPerColumn;
      var groups = props2.groups;
      if (computedPivotUniqueValuesPerColumn && computedPivotUniqueValuesPerColumn.values) {
        var pivotSummaryGroups = computedProps.pivot ? computedProps.pivot.reduce(function(acc, pivot) {
          if (pivot && pivot.summaryGroup) {
            acc[pivot.name] = pivot.summaryGroup;
          }
          return acc;
        }, {}) : {};
        groups = getPivotGroups(computedPivotUniqueValuesPerColumn, void 0, pivotSummaryGroups);
      }
      var groupsMap = groups ? (0, _mapGroups.default)(groups, props2) : null;
      var computedGroupsDepth = getGroupsDepth(groupsMap);
      return {
        computedGroups: groups,
        computedGroupsMap: groupsMap,
        computedGroupsDepth
      };
    };
    var _default = useGroups;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useSelection/isSelectionEnabled.js
var require_isSelectionEnabled = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useSelection/isSelectionEnabled.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var isSelectionEnabled = function isSelectionEnabled2(props2) {
      var selected = props2.selected, defaultSelected = props2.defaultSelected, enableSelection = props2.enableSelection, cellSelection = props2.cellSelection, checkboxColumn = props2.checkboxColumn;
      if (enableSelection !== void 0) {
        return !!enableSelection;
      }
      return selected !== void 0 || defaultSelected !== void 0 && cellSelection === void 0 || !!checkboxColumn;
    };
    var _default = isSelectionEnabled;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useSelection/isSelectionControlled.js
var require_isSelectionControlled = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useSelection/isSelectionControlled.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isControlledProperty = _interopRequireDefault(require_isControlledProperty());
    var isSelectionControlled = function isSelectionControlled2(props2) {
      return (0, _isControlledProperty.default)(props2, "selected");
    };
    var _default = isSelectionControlled;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useSelection/isMultiSelect.js
var require_isMultiSelect = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useSelection/isMultiSelect.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _isSelectionEnabled = _interopRequireDefault(require_isSelectionEnabled());
    var _isSelectionControlled = _interopRequireDefault(require_isSelectionControlled());
    var isMultiSelect = function isMultiSelect2(props2) {
      if (!(0, _isSelectionEnabled.default)(props2)) {
        return false;
      }
      if (props2.multiSelect !== void 0) {
        return !!props2.multiSelect;
      }
      var controlled = (0, _isSelectionControlled.default)(props2);
      var isMulti = controlled ? !!((0, _typeof2.default)(props2.selected) == "object" && props2.selected) || typeof props2.selected === "boolean" : !!((0, _typeof2.default)(props2.defaultSelected) == "object" && props2.defaultSelected) || typeof props2.defaultSelected === "boolean" || props2.checkboxColumn;
      return !!isMulti;
    };
    var _default = isMultiSelect;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useRow/handleSelection.js
var require_handleSelection = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useRow/handleSelection.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.notifySelection = exports.handleSingleSelection = exports.handleSelection = exports.handleMultiSelectionRowToggle = exports.handleMultiSelection = exports.findInitialSelectionIndex = void 0;
    var _isControlledProperty = _interopRequireDefault(require_isControlledProperty());
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var ua = globalObject.navigator ? globalObject.navigator.userAgent : "";
    var isSafari = ua.indexOf("Safari") !== -1 && ua.indexOf("Chrome") === -1;
    var delay35 = function delay352(fn) {
      return function() {
        return setTimeout(fn, 35);
      };
    };
    var now = function now2(fn) {
      return function() {
        return fn();
      };
    };
    var findInitialSelectionIndex = function findInitialSelectionIndex2(computedProps) {
      var selected = computedProps.getSelectedMap();
      var index2 = null;
      if (!selected || !Object.keys(selected).length) {
        return index2;
      }
      var i = 0;
      var data = computedProps.data;
      var len = data.length;
      var id;
      for (; i < len; i++) {
        id = computedProps.getItemId(data[i]);
        if (selected[id]) {
          index2 = i;
        }
      }
      return index2;
    };
    exports.findInitialSelectionIndex = findInitialSelectionIndex;
    var notifySelection = function notifySelection2(computedProps, selected, data, unselected, queue) {
      var queueDefined = !!queue;
      queue = queue || (0, _batchUpdate.default)();
      var onSelectionChange = (isSafari ? delay35 : now)(function() {
        if (typeof computedProps.onSelectionChange == "function") {
          computedProps.onSelectionChange({
            selected,
            data,
            unselected,
            originalData: (computedProps === null || computedProps === void 0 ? void 0 : computedProps.originalData) || null
          });
        }
      });
      if (!(0, _isControlledProperty.default)(computedProps.initialProps, "unselected")) {
        queue(function() {
          computedProps.setUnselected(unselected);
        });
      }
      if (!(0, _isControlledProperty.default)(computedProps.initialProps, "selected")) {
        queue(function() {
          computedProps.setSelected(selected, {
            silent: true
          });
        });
      }
      onSelectionChange();
      if (!queueDefined) {
        queue.commit();
      }
    };
    exports.notifySelection = notifySelection;
    var handleSingleSelection = function handleSingleSelection2(rowProps, computedProps, event2, queue) {
      var data = rowProps.data;
      var rowSelected = computedProps.isRowSelected(data);
      var newSelected = !rowSelected;
      var ctrlKey = event2.metaKey || event2.ctrlKey;
      if (!computedProps.toggleRowSelectOnClick && rowSelected && event2 && !ctrlKey) {
        newSelected = true;
      }
      var selectedId = newSelected ? computedProps.getItemId(data) : null;
      notifySelection(computedProps, selectedId, data, null, queue);
    };
    exports.handleSingleSelection = handleSingleSelection;
    var handleMultiSelection = function handleMultiSelection2(computedProps, data, config, queue) {
      var selIndex = config.selIndex;
      var prevShiftKeyIndex = config.prevShiftKeyIndex;
      var map = selIndex == null ? {} : Object.assign({}, computedProps.computedSelected);
      if (prevShiftKeyIndex != null && selIndex != null) {
        var min = Math.min(prevShiftKeyIndex, selIndex);
        var max = Math.max(prevShiftKeyIndex, selIndex);
        var removeArray = computedProps.data.slice(min, max + 1) || [];
        removeArray.forEach(function(item) {
          if (item) {
            var id = computedProps.getItemId(item);
            delete map[id];
          }
        });
      }
      data.forEach(function(item) {
        if (item) {
          var id = computedProps.getItemId(item);
          map[id] = item;
        }
      });
      notifySelection(computedProps, map, data, null, queue);
    };
    exports.handleMultiSelection = handleMultiSelection;
    var handleMultiSelectionRowToggle = function handleMultiSelectionRowToggle2(computedProps, data, queue) {
      var selected = computedProps.computedSelected;
      var isSelected = computedProps.isRowSelected(data);
      if (selected !== true) {
        var clone = Object.assign({}, selected);
        var id = computedProps.getItemId(data);
        if (isSelected) {
          delete clone[id];
        } else {
          clone[id] = data;
        }
        notifySelection(computedProps, clone, data, null, queue);
      } else {
        var _id = computedProps.getItemId(data);
        var unselected = Object.assign({}, computedProps.computedUnselected);
        if (isSelected) {
          unselected[_id] = data;
        } else {
          delete unselected[_id];
        }
        notifySelection(computedProps, true, data, unselected, queue);
      }
      return isSelected;
    };
    exports.handleMultiSelectionRowToggle = handleMultiSelectionRowToggle;
    var handleSelection = function handleSelection2(rowProps, computedProps, event2, queue) {
      var queueDefined = !!queue;
      if (!queue) {
        queue = (0, _batchUpdate.default)();
      }
      if (!computedProps.computedRowSelectionEnabled) {
        return;
      }
      if (!computedProps.computedRowMultiSelectionEnabled) {
        handleSingleSelection(rowProps, computedProps, event2, queue);
        if (!queueDefined) {
          queue.commit();
        }
        return;
      }
      var selIndex = computedProps.selectionIndexRef.current;
      if (selIndex === null) {
        selIndex = findInitialSelectionIndex(computedProps);
      }
      var index2 = rowProps.rowIndex;
      var prevShiftKeyIndex = computedProps.shiftKeyIndexRef.current;
      var start;
      var end;
      var data;
      if (event2.metaKey || event2.ctrlKey || computedProps.toggleRowSelectOnClick && computedProps.getSelectedCount() === 1 && computedProps.isRowSelected(computedProps.data[index2])) {
        computedProps.selectionIndexRef.current = index2;
        computedProps.shiftKeyIndexRef.current = null;
        var unselect = handleMultiSelectionRowToggle(computedProps, computedProps.data[index2], queue);
        if (!queueDefined) {
          queue.commit();
        }
        if (unselect) {
          computedProps.selectionIndexRef.current++;
          computedProps.shiftKeyIndexRef.current = prevShiftKeyIndex;
          return false;
        }
        return;
      }
      if (!event2.shiftKey) {
        computedProps.selectionIndexRef.current = index2;
        computedProps.shiftKeyIndexRef.current = null;
        selIndex = null;
      } else {
        computedProps.shiftKeyIndexRef.current = index2;
      }
      if (selIndex == null) {
        data = [computedProps.data[index2]];
      } else {
        start = Math.min(index2, selIndex);
        end = Math.max(index2, selIndex) + 1;
        data = computedProps.data.slice(start, end);
      }
      handleMultiSelection(computedProps, data, {
        selIndex,
        prevShiftKeyIndex
      }, queue);
      if (!queueDefined) {
        queue.commit();
      }
    };
    exports.handleSelection = handleSelection;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useSelection/index.js
var require_useSelection = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useSelection/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = require_react();
    var _useProperty5 = _interopRequireDefault(require_useProperty());
    var _isSelectionEnabled = _interopRequireDefault(require_isSelectionEnabled());
    var _isMultiSelect = _interopRequireDefault(require_isMultiSelect());
    var _isSelectionControlled = _interopRequireDefault(require_isSelectionControlled());
    var _handleSelection = require_handleSelection();
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var _usePrevious = _interopRequireDefault(require_usePrevious());
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var EMPTY_OBJECT = {};
    var getUnselectedFromProps = function getUnselectedFromProps2(computedProps) {
      if (!computedProps) {
        return null;
      }
      if (computedProps.computedUnselected === void 0) {
        return null;
      }
      return computedProps.computedUnselected;
    };
    var getUnselectedCountFromProps = function getUnselectedCountFromProps2(computedProps, unselected) {
      if (!computedProps) {
        return 0;
      }
      if (!computedProps.computedRowSelectionEnabled) {
        return 0;
      }
      if (!computedProps.computedRowMultiSelectionEnabled) {
        return 0;
      }
      unselected = unselected === void 0 ? getUnselectedFromProps(computedProps) : unselected;
      return unselected ? Object.keys(unselected).length : 0;
    };
    var getSelectedCountFromProps = function getSelectedCountFromProps2(computedProps, selected, unselected) {
      if (!computedProps) {
        return 0;
      }
      if (!computedProps.computedRowSelectionEnabled) {
        return 0;
      }
      var multiSelect = computedProps.computedRowMultiSelectionEnabled;
      selected = selected === void 0 ? computedProps.computedSelected : selected;
      if (multiSelect && selected === true) {
        var unselectedCount = getUnselectedCountFromProps(computedProps, unselected);
        return computedProps.paginationCount - unselectedCount;
      }
      return multiSelect ? selected ? Object.keys(selected).length : 0 : !selected || Object.keys(selected).length === 0 ? 0 : 1;
    };
    var useUnselected = function useUnselected2(props2, _ref, _computedPropsRef) {
      var rowSelectionEnabled = _ref.rowSelectionEnabled, rowMultiSelectionEnabled = _ref.rowMultiSelectionEnabled;
      var _useProperty = (0, _useProperty5.default)(props2, "unselected"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), unselected = _useProperty2[0], setUnselected = _useProperty2[1];
      if (!rowSelectionEnabled) {
        return {
          unselected: null,
          setUnselected
        };
      }
      if (!rowMultiSelectionEnabled) {
        return {
          unselected: null,
          setUnselected
        };
      }
      return {
        unselected,
        setUnselected
      };
    };
    var useSelected = function useSelected2(props2, _computedProps, computedPropsRef) {
      var _useProperty3 = (0, _useProperty5.default)(props2, "selected", void 0, {
        onChange: function onChange(selected2) {
          var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, silent = _ref2.silent, unselected = _ref2.unselected, data = _ref2.data;
          var computedProps = computedPropsRef.current;
          if (props2.onSelectionChange && !silent) {
            props2.onSelectionChange({
              selected: selected2,
              data,
              unselected: unselected !== void 0 ? unselected : computedProps != null ? computedProps.computedUnselected : null
            });
          }
        }
      }), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), selected = _useProperty4[0], setSelected = _useProperty4[1];
      var rowSelectionEnabled = (0, _isSelectionEnabled.default)(props2);
      var rowMultiSelectionEnabled = (0, _isMultiSelect.default)(props2);
      if (!rowSelectionEnabled) {
        return {
          selected: null,
          setSelected,
          rowSelectionEnabled,
          rowMultiSelectionEnabled
        };
      }
      if ((0, _isSelectionControlled.default)(props2)) {
        return {
          selected,
          setSelected,
          rowSelectionEnabled,
          rowMultiSelectionEnabled
        };
      }
      if (rowMultiSelectionEnabled && ((0, _typeof2.default)(selected) != "object" || !selected) && selected !== true) {
        selected = EMPTY_OBJECT;
      }
      return {
        selected,
        setSelected,
        rowSelectionEnabled,
        rowMultiSelectionEnabled
      };
    };
    var _default = function _default2(props2, computedProps, computedPropsRef) {
      var _useSelected = useSelected(props2, computedProps, computedPropsRef), computedSelected = _useSelected.selected, setSelected = _useSelected.setSelected, rowMultiSelectionEnabled = _useSelected.rowMultiSelectionEnabled, rowSelectionEnabled = _useSelected.rowSelectionEnabled;
      var previousRowMultiSelectionEnabled = (0, _usePrevious.default)(rowMultiSelectionEnabled, rowMultiSelectionEnabled);
      (0, _react.useEffect)(function() {
        if (previousRowMultiSelectionEnabled === true && rowMultiSelectionEnabled === false) {
          setSelected({});
        }
      }, [previousRowMultiSelectionEnabled, rowMultiSelectionEnabled]);
      var computedRowSelectionEnabled = rowSelectionEnabled;
      var computedRowMultiSelectionEnabled = rowMultiSelectionEnabled;
      var _useUnselected = useUnselected(props2, {
        rowSelectionEnabled,
        rowMultiSelectionEnabled
      }, computedPropsRef), computedUnselected = _useUnselected.unselected, setUnselected = _useUnselected.setUnselected;
      var computedSelectedCount = getSelectedCountFromProps({
        computedPagination: computedProps.computedPagination,
        computedRemoteData: computedProps.computedRemoteData,
        paginationCount: computedProps.paginationCount,
        computedRowMultiSelectionEnabled,
        computedRowSelectionEnabled
      }, computedSelected, computedUnselected);
      var computedUnselectedCount = getUnselectedCountFromProps({
        computedRowMultiSelectionEnabled,
        computedRowSelectionEnabled
      }, computedUnselected);
      var isSelectionEmpty = (0, _react.useCallback)(function() {
        var selected = computedSelected;
        var selectionEmpty = false;
        if (selected == null) {
          selectionEmpty = true;
        }
        if ((0, _typeof2.default)(selected) === "object" && selected !== null) {
          selectionEmpty = Object.keys(selected).length === 0;
        }
        return selectionEmpty;
      }, [computedSelected]);
      var getSelectedMap = (0, _react.useCallback)(function() {
        if (computedRowMultiSelectionEnabled) {
          return computedSelected;
        }
        return (0, _defineProperty2.default)({}, computedSelected, true);
      }, [computedRowMultiSelectionEnabled, computedSelected]);
      var getUnselected = (0, _react.useCallback)(function() {
        return getUnselectedFromProps(computedPropsRef.current);
      }, []);
      var getUnselectedMap = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return {};
        }
        var unselected = getUnselected();
        if (computedProps2.computedRowMultiSelectionEnabled) {
          return unselected || {};
        }
        return {};
      }, [getUnselected]);
      var getUnselectedCount = function getUnselectedCount2(unselected) {
        return getUnselectedCountFromProps(computedPropsRef.current, unselected);
      };
      var getSelectedCount = function getSelectedCount2(selected, unselected) {
        return getSelectedCountFromProps(computedPropsRef.current, selected, unselected);
      };
      var isRowSelected = (0, _react.useCallback)(function(data) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return false;
        }
        if (typeof data == "number") {
          data = computedProps2.getItemAt(data);
        }
        var selectedMap = getSelectedMap();
        var id = computedProps2.getItemId(data);
        if (selectedMap === true) {
          var unselectedMap = getUnselectedMap();
          return !unselectedMap[id];
        }
        return !!selectedMap[id];
      }, [getSelectedMap, getUnselectedMap]);
      var cellSelectionTmp = props2.cellSelection || props2.defaultCellSelection;
      var activeCellDefined = props2.activeCell !== void 0 || props2.defaultActiveCell !== void 0;
      var computedHasRowNavigation = (computedRowSelectionEnabled || !cellSelectionTmp) && computedProps.computedActiveIndex > -1 ? true : props2.enableKeyboardNavigation !== false && !cellSelectionTmp && !activeCellDefined;
      if (props2.enableKeyboardNavigation === false) {
        computedHasRowNavigation = false;
      }
      var _computedProps$useCel = computedProps.useCellSelection(props2, {
        rowSelectionEnabled,
        listenOnCellEnter: computedProps.listenOnCellEnter,
        hasRowNavigation: computedHasRowNavigation
      }, computedPropsRef), computedCellSelection = _computedProps$useCel.computedCellSelection, setCellSelection = _computedProps$useCel.setCellSelection, computedCellSelectionEnabled = _computedProps$useCel.cellSelectionEnabled, computedCellMultiSelectionEnabled = _computedProps$useCel.cellMultiSelectionEnabled, computedCellNavigationEnabled = _computedProps$useCel.cellNavigationEnabled, computedActiveCell = _computedProps$useCel.computedActiveCell, incrementActiveCell = _computedProps$useCel.incrementActiveCell, getCellSelectionIdKey = _computedProps$useCel.getCellSelectionIdKey, getCellSelectionBetween = _computedProps$useCel.getCellSelectionBetween, toggleActiveCellSelection = _computedProps$useCel.toggleActiveCellSelection, onCellEnter = _computedProps$useCel.onCellEnter, setActiveCell = _computedProps$useCel.setActiveCell, getCellSelectionKey = _computedProps$useCel.getCellSelectionKey, cellDragStartRowIndex = _computedProps$useCel.cellDragStartRowIndex, setCellDragStartRowIndex = _computedProps$useCel.setCellDragStartRowIndex, onCellSelectionDraggerMouseDown = _computedProps$useCel.onCellSelectionDraggerMouseDown, computedCellBulkUpdateMouseDown = _computedProps$useCel.computedCellBulkUpdateMouseDown, bulkUpdateMouseDown = _computedProps$useCel.bulkUpdateMouseDown, computedCellBulkUpdateMouseUp = _computedProps$useCel.computedCellBulkUpdateMouseUp;
      var selectAll = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (!computedProps2.computedRowSelectionEnabled) {
          return;
        }
        var data = computedProps2.data;
        var dataMap = computedProps2.dataMap;
        if (computedProps2.computedGroupBy) {
          dataMap = {};
          data = data.map(function(d) {
            var id = computedProps2.getItemId(d);
            dataMap[id] = id;
          });
        }
        if (computedProps2.computedTreeEnabled && computedProps2.stickyTreeNodes) {
          var vl = computedProps2.getVirtualList();
          vl.updateStickyRows(void 0, void 0, {
            force: true
          });
        }
        (0, _handleSelection.notifySelection)(computedProps2, computedProps2.computedRemoteData || computedProps2.computedPagination ? data.length === 0 ? false : true : dataMap, data, null);
      }, []);
      var deselectAll = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.computedTreeEnabled && computedProps2.stickyTreeNodes) {
          var vl = computedProps2.getVirtualList();
          vl.updateStickyRows(void 0, void 0, {
            force: true
          });
        }
        (0, _handleSelection.notifySelection)(computedProps2, {}, [], null);
      }, []);
      var setRowSelected = (0, _react.useCallback)(function(index2, selected, event2) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var queue = (0, _batchUpdate.default)();
        if (computedProps2.checkboxSelectEnableShiftKey && computedProps2.computedRowMultiSelectionEnabled) {
          if (event2 && event2.target) {
            var shiftKey = event2.shiftKey, metaKey = event2.metaKey, ctrlKey = event2.ctrlKey;
            if (shiftKey) {
              var rowProps = {
                data: computedProps2.getItemAt(index2),
                rowIndex: index2
              };
              (0, _handleSelection.handleSelection)(rowProps, computedProps2, {
                shiftKey,
                metaKey,
                ctrlKey
              }, queue);
              return;
            }
            computedProps2.shiftKeyIndexRef.current = index2;
            computedProps2.selectionIndexRef.current = index2;
          }
        }
        computedProps2.setSelectedAt(index2, selected, queue);
        queue.commit();
      }, [computedProps.initialProps.checkboxSelectEnableShiftKey]);
      var setSelectedAt = (0, _react.useCallback)(function(index2, selected, queue) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var data = computedProps2.data[index2];
        if (!data) {
          return;
        }
        var id = computedProps2.getItemId(data);
        computedProps2.setSelectedById(id, selected, queue);
      }, []);
      var treeGridChildrenSelection = function treeGridChildrenSelection2(dataArray, id, selected, clone, treeGridChildrenDeselectionEnabled, parentNode) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var idProperty = computedProps2.idProperty;
        var nodesName = computedProps2.nodesProperty;
        var pathSeparator = computedProps2.nodePathSeparator;
        var expandedNodes = computedProps2.computedExpandedNodes || EMPTY_OBJECT;
        var generateIdFromPath = computedProps2.generateIdFromPath;
        for (var i = 0; i < dataArray.length; i++) {
          var item = dataArray[i];
          if (item) {
            var _id$split;
            var itemId = item[idProperty];
            var itemNodes = item[nodesName];
            var parentNodeId = parentNode ? "".concat(parentNode[idProperty]) : void 0;
            var path = parentNode ? "".concat(parentNodeId).concat(pathSeparator).concat(itemId) : "".concat(itemId);
            if (generateIdFromPath) {
              item[idProperty] = path;
            }
            var idLength = (_id$split = id.split(pathSeparator)) === null || _id$split === void 0 ? void 0 : _id$split.length;
            var idFromPath = path.split(pathSeparator).slice(0, idLength).join(pathSeparator);
            if (idFromPath === id) {
              var treeData = computedProps2.dataMap ? computedProps2.dataMap[path] : null;
              if (!treeData) {
                continue;
              }
              if (selected) {
                clone[path] = treeData;
              } else {
                if (treeGridChildrenDeselectionEnabled) {
                  delete clone[path];
                } else {
                  delete clone[id];
                }
              }
            }
            if (expandedNodes && expandedNodes[idFromPath]) {
              if (Array.isArray(itemNodes)) {
                treeGridChildrenSelection2(itemNodes, id, selected, clone, treeGridChildrenDeselectionEnabled, item);
              }
            }
          }
        }
        return clone;
      };
      var groupChildrenSelection = function groupChildrenSelection2(_ref4) {
        var clone = _ref4.clone, id = _ref4.id, selected = _ref4.selected, dataMap = _ref4.dataMap, idProperty = _ref4.idProperty;
        if (!dataMap) {
          return;
        }
        for (var key in dataMap) {
          if (!key) {
            break;
          }
          if (!key.includes(id)) {
            continue;
          }
          var data = dataMap[key];
          if (data.__group) {
            if (selected) {
              if (!clone[key]) {
                clone[key] = data;
              }
            } else {
              delete clone[key];
            }
            if (data.array && Array.isArray(data.array)) {
              var _iterator = _createForOfIteratorHelper(data.array), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var item = _step.value;
                  var itemId = item[idProperty];
                  if (selected) {
                    if (!clone[itemId]) clone[itemId] = item;
                  } else {
                    delete clone[itemId];
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
            }
          } else {
            var dataId = data[idProperty];
            if (dataId === id) {
              if (selected) {
                if (!clone[id]) clone[id] = data;
              } else {
                delete clone[id];
              }
            }
          }
        }
        return clone;
      };
      var setSelectedById = (0, _react.useCallback)(function(id, selected, queue) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var data = computedProps2.dataMap ? computedProps2.dataMap[id] : null;
        if (!data) {
          return;
        }
        var isSelected = computedProps2.isRowSelected(data);
        var multiSelect = computedProps2.computedRowMultiSelectionEnabled;
        if (isSelected === selected) {
          return;
        }
        if (multiSelect) {
          var selectedMap = computedProps2.computedSelected;
          var unselectedMap = selectedMap === true ? computedProps2.computedUnselected || {} : null;
          var clone = selectedMap;
          if (selectedMap === true) {
            if (unselectedMap) {
              unselectedMap = Object.assign({}, unselectedMap);
            }
            if (!selected && unselectedMap) {
              unselectedMap[id] = true;
              var totalCount = computedProps2.paginationCount;
              if (Object.keys(unselectedMap).length === totalCount) {
                computedProps2.deselectAll();
                return;
              }
            } else {
              if (unselectedMap) {
                delete unselectedMap[id];
              }
              if (getUnselectedCountFromProps(computedProps2, unselectedMap) === 0) {
                unselectedMap = null;
              }
            }
          } else {
            clone = Object.assign({}, selectedMap);
            if (computedProps2.computedTreeEnabled && computedProps2.treeGridChildrenSelectionEnabled) {
              var originalData = JSON.stringify(computedProps2.originalData || []);
              var cloneOriginalData = (0, _toConsumableArray2.default)(JSON.parse(originalData));
              var treeGridChildrenDeselectionEnabled = computedProps2.treeGridChildrenDeselectionEnabled;
              treeGridChildrenSelection(cloneOriginalData, id, selected, clone, treeGridChildrenDeselectionEnabled);
            } else if (computedProps2.groupColumn) {
              groupChildrenSelection({
                clone,
                id,
                selected,
                dataMap: computedProps2.dataMap,
                idProperty: computedProps2.idProperty
              });
            } else {
              if (selected) {
                clone[id] = data;
              } else {
                delete clone[id];
              }
            }
          }
          (0, _handleSelection.notifySelection)(computedProps2, clone, data, unselectedMap, queue);
        } else {
          (0, _handleSelection.notifySelection)(computedProps2, selected ? id : null, data, null, queue);
        }
      }, []);
      return {
        selectAll,
        deselectAll,
        setRowSelected,
        setSelectedAt,
        setSelectedById,
        setCellSelection,
        computedCellSelection,
        computedCellSelectionEnabled,
        computedCellMultiSelectionEnabled,
        computedCellNavigationEnabled,
        computedActiveCell,
        getCellSelectionBetween,
        incrementActiveCell,
        cellDragStartRowIndex,
        setCellDragStartRowIndex,
        onCellEnter,
        onCellSelectionDraggerMouseDown,
        toggleActiveCellSelection,
        computedHasRowNavigation,
        computedRowSelectionEnabled,
        computedRowMultiSelectionEnabled,
        computedSelected,
        setSelected,
        computedUnselected,
        setUnselected,
        isSelectionEmpty,
        getSelectedMap,
        getUnselectedMap,
        isRowSelected,
        getUnselectedCount,
        getSelectedCount,
        computedUnselectedCount,
        computedSelectedCount,
        getCellSelectionIdKey,
        setActiveCell,
        getCellSelectionKey,
        computedCellBulkUpdateMouseDown,
        computedCellBulkUpdateMouseUp,
        bulkUpdateMouseDown
      };
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useRow/handleRowNavigation.js
var require_handleRowNavigation = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useRow/handleRowNavigation.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _contains = _interopRequireDefault(require_contains());
    var handleRowNavigation = function handleRowNavigation2(event2, computedProps) {
      var key = event2.key;
      var activeItem = computedProps.computedActiveItem;
      var isGroup = computedProps.isGroup(activeItem);
      var options = {
        ArrowUp: function ArrowUp() {
          return computedProps.incrementActiveIndex(-1);
        },
        ArrowDown: function ArrowDown() {
          return computedProps.incrementActiveIndex(1);
        },
        Home: function Home() {
          return computedProps.setActiveIndex(0);
        },
        Enter: function Enter(event3) {
          if (!activeItem) {
            return;
          }
          if (isGroup) {
            computedProps.toggleGroup(activeItem);
            return;
          }
          computedProps.toggleActiveRowSelection(event3);
        },
        End: function End() {
          return computedProps.setActiveIndex(computedProps.data.length - 1);
        },
        PageUp: function PageUp() {
          return computedProps.incrementActiveIndex(-computedProps.keyPageStep);
        },
        PageDown: function PageDown() {
          return computedProps.incrementActiveIndex(computedProps.keyPageStep);
        }
      };
      var fn = options[key];
      if (fn) {
        fn(event2);
        return true;
      }
      if (computedProps.allowRowTabNavigation) {
        if (key === "Tab") {
          var dir = event2.shiftKey ? -1 : 1;
          var rowNode = computedProps.getDOMNodeForRowIndex(computedProps.computedActiveIndex);
          if (document.activeElement && rowNode && (0, _contains.default)(rowNode, document.activeElement)) {
            return false;
          }
          var nextIndex = computedProps.computedActiveIndex + dir;
          var validNextIndex = nextIndex >= 0 && nextIndex < computedProps.count;
          if (validNextIndex) {
            computedProps.incrementActiveIndex(dir);
            return true;
          }
        }
      }
      return false;
    };
    var _default = handleRowNavigation;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useRow/handleCellNavigation.js
var require_handleCellNavigation = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useRow/handleCellNavigation.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _lodash = _interopRequireDefault(require_lodash2());
    var waitFn = _lodash.default;
    var WAIT_TIME = 36;
    var WAIT_PARAMS = {
      maxWait: 100,
      leading: true
    };
    var handleCellNavigation = function handleCellNavigation2(event2, computedProps) {
      var key = event2.key;
      var cellNavigationRef = computedProps.cellNavigationRef;
      if (!cellNavigationRef.current) {
        cellNavigationRef.current = {
          onArrowUp: function onArrowUp() {
            var computedProps2 = cellNavigationRef.current.computedProps;
            if (computedProps2.incrementActiveCell) {
              computedProps2.incrementActiveCell([-1, 0]);
            }
          },
          onArrowDown: function onArrowDown() {
            var computedProps2 = cellNavigationRef.current.computedProps;
            if (computedProps2.incrementActiveCell) {
              computedProps2.incrementActiveCell([1, 0]);
            }
          },
          onArrowRight: function onArrowRight() {
            var computedProps2 = cellNavigationRef.current.computedProps;
            if (computedProps2.incrementActiveCell) {
              computedProps2.incrementActiveCell([0, 1]);
            }
          },
          onArrowLeft: function onArrowLeft() {
            var computedProps2 = cellNavigationRef.current.computedProps;
            if (computedProps2.incrementActiveCell) {
              computedProps2.incrementActiveCell([0, -1]);
            }
          },
          onHome: function onHome() {
            var computedProps2 = cellNavigationRef.current.computedProps;
            if (computedProps2.setActiveCell && activeCell) {
              computedProps2.setActiveCell([0, activeCell[1]]);
            }
          },
          onEnd: function onEnd() {
            var computedProps2 = cellNavigationRef.current.computedProps;
            if (computedProps2.setActiveCell && activeCell) {
              computedProps2.setActiveCell([computedProps2.data.length - 1, activeCell[1]]);
            }
          },
          onPageUp: function onPageUp() {
            var computedProps2 = cellNavigationRef.current.computedProps;
            if (computedProps2.incrementActiveCell) {
              computedProps2.incrementActiveCell([-computedProps2.keyPageStep, 0]);
            }
          },
          onPageDown: function onPageDown() {
            var computedProps2 = cellNavigationRef.current.computedProps;
            if (computedProps2.incrementActiveCell) {
              computedProps2.incrementActiveCell([computedProps2.keyPageStep, 0]);
            }
          },
          onEnter: function onEnter() {
            var computedProps2 = cellNavigationRef.current.computedProps;
            if (computedProps2.toggleActiveCellSelection) {
              computedProps2.toggleActiveCellSelection(event2);
            }
          }
        };
        Object.keys(cellNavigationRef.current).forEach(function(key2) {
          var fn2 = cellNavigationRef.current[key2];
          cellNavigationRef.current[key2] = waitFn(fn2, WAIT_TIME, WAIT_PARAMS);
        });
      }
      cellNavigationRef.current.computedProps = computedProps;
      var activeCell = computedProps.computedActiveCell;
      var options = {
        ArrowUp: cellNavigationRef.current.onArrowUp,
        ArrowDown: cellNavigationRef.current.onArrowDown,
        ArrowRight: cellNavigationRef.current.onArrowRight,
        ArrowLeft: cellNavigationRef.current.onArrowLeft,
        Home: cellNavigationRef.current.onHome,
        End: cellNavigationRef.current.onEnd,
        PageUp: cellNavigationRef.current.onPageUp,
        PageDown: cellNavigationRef.current.onPageDown,
        Enter: cellNavigationRef.current.onEnter
      };
      var fn = options[key];
      if (fn) {
        fn({
          shiftKey: event2.shiftKey,
          ctrlKey: event2.ctrlKey,
          metaKey: event2.metaKey
        });
        return true;
      }
      return false;
    };
    var _default = handleCellNavigation;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useRow/index.js
var require_useRow = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useRow/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = require_react();
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var _handleSelection = require_handleSelection();
    var _handleRowNavigation = _interopRequireDefault(require_handleRowNavigation());
    var _handleCellNavigation = _interopRequireDefault(require_handleCellNavigation());
    var _containsNode = _interopRequireDefault(require_containsNode());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _default = function _default2(props2, computedProps, computedPropsRef) {
      var computedOnKeyDown = function computedOnKeyDown2(event2) {
        if (props2.onKeyDown) {
          props2.onKeyDown(event2);
        }
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (event2.nativeEvent && event2.nativeEvent.__handled_in_details) {
          return;
        }
        var sameElement = event2.target === computedProps2.getScrollingElement();
        var handled = false;
        if (event2.key === "Escape" && !sameElement && computedProps2.autoFocusOnEditEscape) {
          handled = true;
          computedProps2.focus();
        }
        if (!sameElement) {
          return;
        }
        if (computedProps2.computedHasRowNavigation) {
          handled = (0, _handleRowNavigation.default)(event2, computedProps2);
        } else if (computedProps2.computedCellNavigationEnabled) {
          handled = (0, _handleCellNavigation.default)(event2, computedProps2);
        }
        var activeItem = computedProps2.computedActiveItem;
        var activeIndex = computedProps2.computedActiveIndex;
        var isGroup2 = computedProps2.isGroup(activeItem);
        var rowExpandEnabled = computedProps2.computedRowExpandEnabled;
        var rowExpandable = activeItem && computedProps2.isRowExpandableAt ? computedProps2.isRowExpandableAt(activeIndex) : false;
        var rowExpanded = rowExpandable && activeItem ? computedProps2.isRowExpanded(activeItem) : false;
        var treeEnabled = computedProps2.computedTreeEnabled;
        var nodeExpandable = treeEnabled && activeItem && computedProps2.isNodeExpandableAt ? computedProps2.isNodeExpandableAt(activeIndex) : false;
        var nodeExpanded = treeEnabled && activeItem && computedProps2.isNodeExpanded ? computedProps2.isNodeExpanded(activeItem) : false;
        var rowSelectionEnabled = computedProps2.computedRowSelectionEnabled;
        var keyShortcutArg = {
          event: event2,
          data: activeItem,
          index: activeIndex,
          activeItem,
          activeIndex,
          handle: computedPropsRef,
          isGroup: isGroup2,
          treeEnabled,
          rowSelectionEnabled,
          nodeExpandable,
          nodeExpanded,
          rowExpandEnabled,
          rowExpandable,
          rowExpanded
        };
        var editKeyPressed = !!computedProps2.isStartEditKeyPressed(keyShortcutArg);
        var expandKeyPressed = !!computedProps2.isExpandKeyPressed(keyShortcutArg);
        var collapseKeyPressed = !expandKeyPressed ? computedProps2.isCollapseKeyPressed(keyShortcutArg) : false;
        if (expandKeyPressed) {
          handled = true;
        }
        if (expandKeyPressed && activeItem) {
          if (rowExpandEnabled && rowExpandable && !rowExpanded) {
            computedProps2.setRowExpandedAt(activeIndex, true);
          } else {
            if (isGroup2) {
              computedProps2.expandGroup(activeItem);
            } else if (treeEnabled && nodeExpandable && !nodeExpanded) {
              computedProps2.setNodeExpandedAt(activeIndex, true);
            }
          }
        }
        if (collapseKeyPressed) {
          handled = true;
        }
        if (collapseKeyPressed && activeItem) {
          if (rowExpandEnabled && rowExpandable && rowExpanded) {
            computedProps2.setRowExpandedAt(activeIndex, false);
          } else {
            if (isGroup2) {
              computedProps2.collapseGroup(activeItem);
            } else if (treeEnabled && nodeExpandable && nodeExpanded) {
              computedProps2.setNodeExpandedAt(activeIndex, false);
            }
          }
        }
        if (editKeyPressed) {
          handled = true;
          if (computedProps2.visibleColumns && computedProps2.visibleColumns.length) {
            if (computedProps2.tryStartEdit) {
              computedProps2.tryStartEdit({
                rowIndex: activeItem ? activeIndex : 0,
                columnId: computedProps2.visibleColumns[0].id,
                dir: 1
              });
            }
          }
        }
        if (activeItem && event2.key === "Enter") {
          if (rowExpandEnabled && rowExpandable) {
            if (!rowSelectionEnabled) {
              computedProps2.toggleRowExpand(activeIndex);
              handled = true;
            }
          } else {
            if (isGroup2) {
              computedProps2.toggleGroup(activeItem);
              handled = true;
            } else if (nodeExpandable && !rowSelectionEnabled && computedProps2.computedTreeEnabled) {
              computedProps2.toggleNodeExpand(activeItem);
              handled = true;
            }
          }
        }
        if (handled) {
          event2.preventDefault();
          if (event2.nativeEvent) {
            event2.nativeEvent.__handled_in_details = true;
          }
        }
        if (computedProps2.enableClipboard) {
          var cellSelection = !!computedProps2.computedCellSelection;
          var checkboxColumn = !!computedProps2.checkboxColumn;
          var selected = !!computedProps2.computedSelected;
          if ((event2.ctrlKey || event2.metaKey) && event2.key == "c") {
            if (checkboxColumn || selected) {
              computedProps2.copySelectedRowsToClipboard && computedProps2.copySelectedRowsToClipboard();
            } else if (cellSelection) {
              computedProps2.copySelectedCellsToClipboard && computedProps2.copySelectedCellsToClipboard();
            } else {
              computedProps2.copyActiveRowToClipboard && computedProps2.copyActiveRowToClipboard();
            }
          }
          if ((event2.ctrlKey || event2.metaKey) && event2.key == "v") {
            if (checkboxColumn || selected) {
              computedProps2.pasteSelectedRowsFromClipboard && computedProps2.pasteSelectedRowsFromClipboard();
            } else if (cellSelection) {
              computedProps2.pasteSelectedCellsFromClipboard && computedProps2.pasteSelectedCellsFromClipboard();
            } else {
              computedProps2.pasteActiveRowFromClipboard && computedProps2.pasteActiveRowFromClipboard();
            }
          }
        }
      };
      var onFullBlur = (0, _react.useCallback)(function(_event) {
      }, []);
      var isGroup = (0, _react.useCallback)(function(item) {
        return !!item && !!item.__group;
      }, []);
      var computedOnFocus = (0, _react.useCallback)(function(event2) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        event2.preventDefault();
        if (props2.onFocus) {
          props2.onFocus(event2);
        }
        if (event2.nativeEvent.preventParentFocus) {
          onFullBlur(event2);
          return;
        }
        event2.nativeEvent.preventParentFocus = true;
        if (computedProps2.computedWillReceiveFocusRef.current) {
          computedProps2.computedWillReceiveFocusRef.current = false;
          return;
        }
        if (!computedProps2.computedFocused) {
          computedProps2.computedSetFocused(true);
        }
      }, []);
      var computedOnBlur = (0, _react.useCallback)(function(event2) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.isInEdit.current) {
          return;
        }
        event2.preventDefault();
        if (computedProps2.preventBlurOnContextMenuOpen && computedProps2.preventBlurOnContextMenuOpen.current) {
          return;
        }
        var domNode = computedProps2.getDOMNode();
        if (event2.relatedTarget && (0, _containsNode.default)(domNode, event2.relatedTarget)) {
          return;
        }
        if (props2.onBlur) {
          props2.onBlur(event2);
        }
        var computedActiveIndex2 = computedProps2.computedActiveIndex;
        if (computedActiveIndex2 >= 0) {
          computedProps2.doSetLastActiveIndex(computedActiveIndex2);
        }
        computedProps2.setActiveIndex(-1);
        computedProps2.computedSetFocused(false);
      }, []);
      var onGroupRowClick = (0, _react.useCallback)(function(rowProps, _ref, queue) {
        var enableKeyboardNavigation = _ref.enableKeyboardNavigation, setActiveIndex = _ref.setActiveIndex;
        if (rowProps.groupProps || rowProps.data && rowProps.data.__group) {
          if (enableKeyboardNavigation) {
            queue(function() {
              setActiveIndex(rowProps.rowIndex);
            });
          }
          queue.commit();
          return true;
        }
        return false;
      }, []);
      var handleRowSelectionOnClick = function handleRowSelectionOnClick2(event2, rowProps, computedProps2, queue) {
        if (event2.nativeEvent.skipSelect) {
          if (computedProps2.enableKeyboardNavigation) {
            queue(function() {
              computedProps2.setActiveIndex(rowProps.rowIndex);
            });
          }
          queue.commit();
          return;
        }
        var shiftKey = event2.shiftKey, metaKey = event2.metaKey, ctrlKey = event2.ctrlKey;
        var multiSelectKey = shiftKey || metaKey || ctrlKey;
        var autoCheckboxColumn = props2.autoCheckboxColumn;
        if (autoCheckboxColumn && multiSelectKey) {
          return;
        }
        if ((0, _handleSelection.handleSelection)(rowProps, computedProps2, event2, queue) !== false) {
          queue(function() {
            computedProps2.setActiveIndex(rowProps.rowIndex);
          });
        }
      };
      var computedOnRowMouseDown = (0, _react.useCallback)(function() {
      }, []);
      var computedOnRowClick = (0, _react.useCallback)(function(event2, rowProps) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var preventRowSelectionOnClickWithMouseMove = computedProps2.preventRowSelectionOnClickWithMouseMove, initialProps = computedProps2.initialProps;
        if (initialProps.onRowClick) {
          initialProps.onRowClick({
            rowIndex: rowProps.rowIndex,
            remoteRowIndex: rowProps.remoteRowIndex,
            groupProps: rowProps.groupProps,
            empty: rowProps.empty,
            columns: rowProps.columns,
            dataSourceArray: rowProps.dataSourceArray,
            data: rowProps.data
          }, event2);
        }
        var queue = (0, _batchUpdate.default)();
        var lastMouseDownEventProps = computedProps2.lastMouseDownEventPropsRef.current;
        var mouseDidNotMove = event2.type !== "click";
        if (lastMouseDownEventProps && event2.type === "click") {
          var pageX = lastMouseDownEventProps.pageX, pageY = lastMouseDownEventProps.pageY, rowIndex = lastMouseDownEventProps.rowIndex;
          mouseDidNotMove = pageX === Math.floor(event2.pageX) && pageY === Math.floor(event2.pageY) && rowIndex === rowProps.rowIndex;
        }
        if (!computedProps2.computedFocused) {
          queue(function() {
            computedProps2.computedSetFocused(true);
          });
        }
        if (computedProps2.computedCellSelectionEnabled) {
          queue.commit();
          return;
        }
        if (onGroupRowClick(rowProps, computedProps2, queue)) {
          queue.commit();
          return;
        }
        var threshold = 20;
        var preventRowSelection = preventRowSelectionOnClickWithMouseMove ? mouseDidNotMove : true;
        if (preventRowSelection === false && Math.abs(lastMouseDownEventProps.pageX - event2.pageX) < threshold || Math.abs(lastMouseDownEventProps.pageY - event2.pageY) < threshold) {
          preventRowSelection = true;
        }
        if ((!props2.checkboxOnlyRowSelect || event2.type !== "click") && preventRowSelection) {
          handleRowSelectionOnClick(event2, rowProps, computedProps2, queue);
        } else {
          if (computedProps2.enableKeyboardNavigation && computedProps2.computedHasRowNavigation) {
            queue(function() {
              computedProps2.setActiveIndex(rowProps.rowIndex);
            });
          }
        }
        queue.commit();
      }, []);
      var computedRowDoubleClick = (0, _react.useCallback)(function(event2, rowProps) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.onRowDoubleClick) {
          computedProps2.onRowDoubleClick(event2, rowProps);
        }
      }, []);
      var computedCellDoubleClick = (0, _react.useCallback)(function(event2, cellProps) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.onCellDoubleClick) {
          computedProps2.onCellDoubleClick(event2, cellProps);
        }
      }, []);
      var onCellClickAction = (0, _react.useCallback)(function(event2, cellProps) {
        if (cellProps.groupProps || cellProps.cellSelectable === false) {
          return;
        }
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var hasCellSelection = computedProps2.computedCellSelectionEnabled;
        var cellMultiSelect = computedProps2.computedCellMultiSelectionEnabled;
        var queue = (0, _batchUpdate.default)();
        if (hasCellSelection) {
          var ctrlKey = event2.ctrlKey || event2.metaKey;
          var append = cellMultiSelect && ctrlKey;
          var cellCoords = [cellProps.rowIndex, cellProps.columnIndex];
          var key = computedProps2.getCellSelectionKey(cellProps);
          var shiftKey = event2.shiftKey && (computedProps2.computedActiveCell || computedProps2.lastSelectedCell);
          if (shiftKey && cellMultiSelect) {
            var cellSelection = computedProps2.getCellSelectionBetween(computedProps2.computedActiveCell || computedProps2.lastSelectedCell || void 0, cellCoords);
            queue(function() {
              computedProps2.setLastCellInRange(Object.keys(cellSelection).pop() || "");
              computedProps2.setCellSelection(cellSelection);
            });
          } else {
            var cellSelectionMap = computedProps2.computedCellSelection;
            var isSelected = !!cellSelectionMap[key];
            var newCellSelectionMap = append ? Object.assign({}, cellSelectionMap) : {};
            if (isSelected && (cellMultiSelect || computedProps2.initialProps.toggleCellSelectOnClick || ctrlKey)) {
              delete newCellSelectionMap[key];
            } else {
              if (!shiftKey) {
                queue(function() {
                  computedProps2.setLastSelectedCell(cellCoords);
                });
              }
              newCellSelectionMap[key] = true;
            }
            queue(function() {
              computedProps2.setCellSelection(newCellSelectionMap);
            });
          }
        }
        var shouldSetActiveCell = computedProps2.computedCellNavigationEnabled && (!event2.shiftKey || !cellMultiSelect);
        queue(function() {
          if (shouldSetActiveCell) {
            computedProps2.setActiveCell([cellProps.rowIndex, cellProps.columnIndex]);
          }
        });
        queue.commit();
      }, []);
      var setItemAtAsSelected = (0, _react.useCallback)(function(index2, event2) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var computedRowSelectionEnabled = computedProps2.computedRowSelectionEnabled, getItemAt = computedProps2.getItemAt, getItemId = computedProps2.getItemId;
        var item = getItemAt(index2);
        var itemId = item ? getItemId(item) : void 0;
        if (itemId === void 0) {
          return;
        }
        if (computedRowSelectionEnabled) {
          (0, _handleSelection.handleSelection)({
            rowIndex: index2,
            data: item
          }, computedProps2, event2 || {
            nativeEvent: null
          });
        }
      }, []);
      var selectionIndexRef = (0, _react.useRef)(null);
      var shiftKeyIndexRef = (0, _react.useRef)(null);
      var lastMouseDownEventPropsRef = (0, _react.useRef)({
        rowIndex: -1,
        pageX: -1,
        pageY: -1
      });
      var computedOnCellMouseDown = (0, _react.useCallback)(function(event2, cellProps) {
        lastMouseDownEventPropsRef.current = {
          rowIndex: cellProps.rowIndex,
          pageX: Math.floor(event2.pageX),
          pageY: Math.floor(event2.pageY)
        };
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.columnUserSelect && event2.shiftKey && computedProps2.preventDefaultTextSelectionOnShiftMouseDown) {
          event2.preventDefault();
        }
        computedProps2.onCellClickAction(event2, cellProps);
        if (computedProps2.onCellSelectionDraggerMouseDown) {
          computedProps2.onCellSelectionDraggerMouseDown(event2, cellProps);
        }
      }, []);
      var computedActiveIndex = computedProps.computedActiveIndex;
      return {
        selectionIndexRef,
        shiftKeyIndexRef,
        onCellClickAction,
        computedCellDoubleClick,
        computedOnKeyDown,
        computedOnFocus,
        computedOnBlur,
        computedOnRowClick,
        computedRowDoubleClick,
        computedOnRowMouseDown,
        computedOnCellMouseDown,
        isGroup,
        computedActiveItem: computedActiveIndex !== -1 && computedProps.data ? computedProps.data[computedActiveIndex] : null,
        lastMouseDownEventPropsRef,
        toggleActiveRowSelection: function toggleActiveRowSelection(event2) {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          var computedActiveIndex2 = computedProps2.computedActiveIndex;
          if (computedActiveIndex2 == -1) {
            return;
          }
          setItemAtAsSelected(computedActiveIndex2, event2);
        },
        rowProps: _objectSpread(_objectSpread({}, computedProps.initialProps.rowProps), {}, {
          onMouseDown: function onMouseDown(event2) {
            if (computedProps.initialProps.rowProps && computedProps.initialProps.rowProps.onMouseDown) {
              computedProps.initialProps.rowProps.onMouseDown(event2);
            }
            if (!computedProps.computedFocused && computedProps.enableKeyboardNavigation) {
              computedProps.computedWillReceiveFocusRef.current = true;
            }
          }
        })
      };
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/prepareClassName.js
var require_prepareClassName2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/prepareClassName.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _join = _interopRequireDefault(require_join4());
    var prepareClassName = function prepareClassName2(computedProps) {
      var visibleColumns = computedProps.visibleColumns, computedShowCellBorders = computedProps.computedShowCellBorders, computedShowZebraRows = computedProps.computedShowZebraRows, theme = computedProps.theme, rtl = computedProps.rtl, viewportAvailableWidth = computedProps.viewportAvailableWidth, totalComputedWidth = computedProps.totalComputedWidth, computedFocused = computedProps.computedFocused, computedShowHoverRows = computedProps.computedShowHoverRows, nativeScroll = computedProps.nativeScroll, focusedClassName = computedProps.focusedClassName, computedFilterable = computedProps.computedFilterable, computedShowHeaderBorderRight = computedProps.computedShowHeaderBorderRight, virtualizeColumns = computedProps.virtualizeColumns, className = computedProps.className, stickyHeader = computedProps.stickyHeader;
      return (0, _join.default)("InovuaReactDataGrid", className, theme && "InovuaReactDataGrid--theme-".concat(theme), virtualizeColumns && "InovuaReactDataGrid--virtualize-columns", nativeScroll && "InovuaReactDataGrid--native-scroll", visibleColumns.length && "InovuaReactDataGrid--columns-ready", computedShowZebraRows && "InovuaReactDataGrid--zebra-rows", computedFilterable && "InovuaReactDataGrid--filterable", computedFocused && "InovuaReactDataGrid--focused", computedShowHoverRows && "InovuaReactDataGrid--show-hover-rows", rtl ? "InovuaReactDataGrid--direction-rtl" : "InovuaReactDataGrid--direction-ltr", computedFocused && focusedClassName, computedShowHeaderBorderRight ? "InovuaReactDataGrid--show-header-border-right" : "InovuaReactDataGrid--no-header-border-right", viewportAvailableWidth > totalComputedWidth && "InovuaReactDataGrid--show-border-right", computedShowCellBorders && (computedShowCellBorders === true ? "InovuaReactDataGrid--cell-borders-horizontal InovuaReactDataGrid--cell-borders-vertical" : "InovuaReactDataGrid--cell-borders-".concat(computedShowCellBorders)), stickyHeader && "InovuaReactDataGrid--sticky-header");
    };
    var _default = prepareClassName;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/Cover.js
var require_Cover = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/Cover.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = _interopRequireWildcard(require_react());
    var _join = _interopRequireDefault(require_join4());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = function _default2(_ref) {
      var handle = _ref.handle;
      var _useState = (0, _react.useState)(false), _useState2 = (0, _slicedToArray2.default)(_useState, 2), active = _useState2[0], setActive = _useState2[1];
      var _useState3 = (0, _react.useState)("inherit"), _useState4 = (0, _slicedToArray2.default)(_useState3, 2), cursor = _useState4[0], setCursor = _useState4[1];
      (0, _react.useEffect)(function() {
        handle({
          setActive,
          setCursor
        });
      }, []);
      return _react.default.createElement("div", {
        style: {
          opacity: active ? 1 : 0,
          cursor: active ? cursor || "inherit" : "inherit"
        },
        className: (0, _join.default)("InovuaReactDataGrid__cover", active && "InovuaReactDataGrid__cover--active")
      });
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/throttle/index.js
var require_throttle2 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/throttle/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function throttle2(func, wait) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var context;
      var args;
      var result;
      var timeout = null;
      var previous = 0;
      var later = function later2() {
        previous = options.leading === false ? 0 : Date.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) {
          context = null;
          args = null;
        }
      };
      return (function() {
        for (var _len = arguments.length, _rest = new Array(_len), _key = 0; _key < _len; _key++) {
          _rest[_key] = arguments[_key];
        }
        var now = Date.now();
        if (!previous && options.leading === false) {
          previous = now;
        }
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          previous = now;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }
        return result;
      }).apply(this, [func, wait, options]);
    }
    var _default = throttle2;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useActiveIndex.js
var require_useActiveIndex = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useActiveIndex.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _useProperty5 = _interopRequireDefault(require_useProperty());
    var _react = require_react();
    var _clamp = _interopRequireDefault(require_clamp());
    var _usePrevious = _interopRequireDefault(require_usePrevious());
    var _throttle = _interopRequireDefault(require_throttle2());
    var _getGlobal = require_getGlobal();
    var globalObject = (0, _getGlobal.getGlobal)();
    var useActiveIndex = function useActiveIndex2(props2, computedProps, computedPropsRef) {
      var _useProperty = (0, _useProperty5.default)(props2, "activeIndex", -1), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), computedActiveIndex = _useProperty2[0], doSetActiveIndex = _useProperty2[1];
      var _useProperty3 = (0, _useProperty5.default)(props2, "lastActiveIndex", null), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), computedLastActiveIndex = _useProperty4[0], doSetLastActiveIndex = _useProperty4[1];
      if (!props2.enableKeyboardNavigation) {
        computedActiveIndex = -1;
      }
      var setActiveIndex = (0, _react.useCallback)(function(activeIndex) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2 || !computedProps2.computedHasRowNavigation || globalObject.isNaN(activeIndex)) {
          return;
        }
        var data = computedProps2.data;
        if (activeIndex >= 0) {
          activeIndex = (0, _clamp.default)(activeIndex, 0, data.length - 1);
        } else {
          activeIndex = -1;
        }
        if (activeIndex === computedProps2.computedActiveIndex) {
          return;
        }
        doSetActiveIndex(activeIndex);
      }, []);
      var incrementActiveIndex = (0, _react.useCallback)(function(inc) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var computedActiveIndex2 = computedProps2.computedActiveIndex;
        if (computedProps2.activeIndexThrottle) {
          (0, _throttle.default)(function() {
            return setActiveIndex(computedActiveIndex2 + inc);
          }, computedProps2.activeIndexThrottle, {
            trailing: true,
            leading: false
          });
        } else {
          setActiveIndex(computedActiveIndex2 + inc);
        }
      }, []);
      var getActiveItem = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        return computedProps2 ? computedProps2.data[computedProps2.computedActiveIndex] : null;
      }, []);
      var getFirstVisibleIndex = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return -1;
        }
        var scrollTop = computedProps2.getScrollTop();
        var rowHeight = props2.rowHeight;
        return Math.ceil(scrollTop / rowHeight);
      }, [props2.rowHeight]);
      var oldActiveIndex = (0, _usePrevious.default)(computedActiveIndex, -1);
      (0, _react.useEffect)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (!computedProps2.computedFocused) {
          return;
        }
        if (oldActiveIndex !== computedActiveIndex) {
          var top = computedActiveIndex < oldActiveIndex;
          computedProps2.scrollToIndexIfNeeded(computedActiveIndex, {
            top
          });
        }
      }, [computedActiveIndex, oldActiveIndex]);
      computedProps.activeRowRef = (0, _react.useRef)(null);
      return {
        computedActiveIndex,
        setActiveIndex,
        incrementActiveIndex,
        getActiveItem,
        getFirstVisibleIndex,
        computedLastActiveIndex,
        doSetLastActiveIndex
      };
    };
    var _default = useActiveIndex;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/warn.js
var require_warn = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/warn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.warnOnce = exports.warn = exports.communityFeatureWarn = void 0;
    var warn = function warn2(msg) {
      console.warn("**************************************** INOVUA REACTDATAGRID COMMUNITY EDITION WARNING ****************************************\n\n                             ".concat(msg, "\n\n*********************************************************************************************************************************\n    "));
    };
    exports.warn = warn;
    var onceMessages = {};
    var warnOnce = function warnOnce2(msg) {
      if (onceMessages[msg]) {
        return;
      }
      onceMessages[msg] = true;
      console.warn("**************************************** INOVUA REACTDATAGRID COMMUNITY EDITION WARNING ****************************************\n\n                             ".concat(msg, "\n\n*********************************************************************************************************************************\n    "));
    };
    exports.warnOnce = warnOnce;
    var communityFeatureWarn = function communityFeatureWarn2(featureName, checkObj) {
      if (checkObj[featureName]) {
        return;
      }
      checkObj[featureName] = true;
      warn("".concat(featureName, " is only supported in ENTERPRISE Edition, but you're using the Community Edition!"));
    };
    exports.communityFeatureWarn = communityFeatureWarn;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/empty.js
var require_empty = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/empty.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _warn = require_warn();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var emptyPlugin = {
      name: "",
      hook: function hook(props2, computedProps, computedPropsRef) {
      }
    };
    var _default = [_objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "sortable-columns",
      defaultProps: function defaultProps() {
        return {
          sortable: false
        };
      }
    }), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "license",
      defaultProps: function defaultProps() {
        return {};
      },
      renderLicenseNotice: function renderLicenseNotice() {
        return null;
      }
    }), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "menus",
      defaultProps: function defaultProps() {
        return {
          showColumnMenuTool: false
        };
      }
    }), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "group-and-pivot",
      hook: function hook() {
        return {
          computeDataStep: function computeDataStep(_ref) {
            var config = _ref.config;
            (0, _warn.warnOnce)("You are trying to use the grouping or pivot functionality, but are currently using the community edition. Please use the enterprise edition for this functionality to be available.");
            return config;
          }
        };
      },
      defaultProps: function defaultProps() {
        return {};
      }
    }), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "tree",
      hook: function hook() {
        return {
          computeTreeData: function computeTreeData(data, arg) {
            (0, _warn.warnOnce)("You are trying to use the tree functionality, but are currently using the community edition. Please use the enterprise edition for this functionality to be available.");
            return data;
          }
        };
      },
      defaultProps: function defaultProps() {
        return {};
      }
    }), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "filters",
      defaultProps: function defaultProps() {
        return {
          columnFilterContextMenuConstrainTo: true,
          columnFilterContextMenuPosition: "fixed"
        };
      }
    }), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "cell-selection",
      hook: function hook() {
        return {};
      },
      defaultProps: function defaultProps() {
        return {};
      }
    }), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "live-pagination",
      hook: function hook() {
        return {};
      },
      defaultProps: function defaultProps() {
        return {};
      }
    }), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "row-index-column",
      renderRowResizeIndicator: function renderRowResizeIndicator() {
        return null;
      },
      defaultProps: function defaultProps() {
        return {};
      }
    }), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
      name: "clipboard",
      hook: function hook() {
        return {};
      },
      defaultProps: function defaultProps() {
        return {};
      }
    })];
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/ActiveRowIndicator/index.js
var require_ActiveRowIndicator = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/ActiveRowIndicator/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = _interopRequireWildcard(require_react());
    var _join = _interopRequireDefault(require_join4());
    var _usePrevious = _interopRequireDefault(require_usePrevious());
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var CLASS_NAME = "InovuaReactDataGrid__row";
    var SCROLLBAR_WIDTH = (0, _getScrollbarWidth.default)();
    var RTL_OFFSET = SCROLLBAR_WIDTH || 17;
    var ActiveRowIndicator = function ActiveRowIndicator2(props2) {
      var _style;
      var _useState = (0, _react.useState)(""), _useState2 = (0, _slicedToArray2.default)(_useState, 2), offset = _useState2[0], setOffset = _useState2[1];
      var _useState3 = (0, _react.useState)(0), _useState4 = (0, _slicedToArray2.default)(_useState3, 2), _scrollLeft = _useState4[0], setScrollLeft = _useState4[1];
      var activeIndex = props2.activeIndex, rtl = props2.rtl, rtlOffset = props2.rtlOffset, activeRowIndicatorClassName = props2.activeRowIndicatorClassName;
      var oldActiveIndex = (0, _usePrevious.default)(activeIndex, -1);
      var _ref = props2.activeRowRef.current || {}, _ref$instance = _ref.instance, row = _ref$instance === void 0 ? {} : _ref$instance;
      var hasBorderBottom = row.hasBorderBottom, hasBorderTop = row.hasBorderTop;
      var rowProps = row.props || {};
      var groupColumn = rowProps.groupColumn, data = rowProps.data, depth = rowProps.depth, groupNestingSize = rowProps.groupNestingSize;
      var deps = [activeIndex, rtlOffset, oldActiveIndex, props2.dataSourceCount, props2.computedExpandedRows, props2.computedExpandedNodes, props2.computedRowHeights, row];
      var updateLayout = function updateLayout2(config) {
        var node = (props2.activeRowRef.current || {
          node: null
        }).node;
        var instance = (props2.activeRowRef.current || {
          instance: null
        }).instance;
        if (!node || !node.parentNode || props2.dataSourceCount < activeIndex) {
          return setOffset("");
        }
        if (instance && instance.props.rowIndex !== props2.activeIndex && props2.activeIndex >= 0) {
          requestAnimationFrame(function() {
            return updateLayout2({
              raf: false
            });
          });
          return;
        }
        var doSetOffset = function doSetOffset2(left2, top) {
          top = Number.parseFloat(top) || 0;
          setOffset("translate3d(".concat(left2 || 0, "px, ").concat(top, "px, 0px)"));
        };
        if (config && config.raf === false) {
          doSetOffset(rtl ? -RTL_OFFSET : 0, node.style.top);
        } else {
          requestAnimationFrame(function() {
            if (node && node.parentNode) {
              doSetOffset(rtl ? -RTL_OFFSET : 0, node.style.top);
            }
          });
        }
      };
      (0, _react.useLayoutEffect)(updateLayout, deps);
      (0, _react.useEffect)(function() {
        if (props2.handle) {
          props2.handle({
            setScrollLeft
          });
        }
        return function() {
          if (props2.handle) {
            props2.handle(null);
          }
        };
      }, [props2.handle]);
      var groupDepth = groupColumn ? 0 : data && data.__group ? data.depth - 1 : data && data.__summary ? rowProps.summaryProps.depth : depth || 0;
      var scrollbarOffset = props2.rtl ? RTL_OFFSET : 0;
      var left = (groupNestingSize || 0) * groupDepth;
      var style = (_style = {}, (0, _defineProperty2.default)(_style, rtl ? "right" : "left", left - scrollbarOffset), (0, _defineProperty2.default)(_style, "width", props2.width - left), _style);
      var transform;
      if (!offset) {
        style.opacity = 0;
      } else {
        style.willChange = "transform";
        transform = offset;
        style.height = props2.activeRowHeight;
      }
      if (transform) {
        style.transform = transform;
      }
      var innerClassName = (0, _join.default)("".concat(CLASS_NAME, "-active-borders-inner"), activeRowIndicatorClassName ? activeRowIndicatorClassName : "");
      return _react.default.createElement("div", {
        key: "active-row-borders",
        className: (0, _join.default)("".concat(CLASS_NAME, "-active-borders"), offset != "" ? "".concat(CLASS_NAME, "-active-borders--active") : "", hasBorderTop && "".concat(CLASS_NAME, "-active-borders--has-border-top"), hasBorderBottom && "".concat(CLASS_NAME, "-active-borders--has-border-bottom")),
        style
      }, _react.default.createElement("div", {
        className: innerClassName
      }));
    };
    var _default = ActiveRowIndicator;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/hooks/useColumnHover.js
var require_useColumnHover = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/hooks/useColumnHover.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = require_react();
    var useColumnHover = function useColumnHover2(_props, _computedProps, computedPropsRef) {
      var _useState = (0, _react.useState)(-1), _useState2 = (0, _slicedToArray2.default)(_useState, 2), columnIndexHovered = _useState2[0], setColumnIndexHovered = _useState2[1];
      var onColumnMouseEnter = (0, _react.useCallback)(function(cellProps) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        if (computedProps.computedEnableColumnHover || cellProps.computedEnableColumnHover) {
          var columnIndex = cellProps.columnIndex;
          if (columnIndex != null) {
            setColumnIndexHovered(columnIndex);
          }
        }
      }, []);
      var onColumnMouseLeave = (0, _react.useCallback)(function(cellProps) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        if (computedProps.computedEnableColumnHover || cellProps.computedEnableColumnHover) {
          setColumnIndexHovered(-1);
        }
      }, []);
      return {
        columnIndexHovered,
        onColumnMouseEnter,
        onColumnMouseLeave
      };
    };
    var _default = useColumnHover;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/utils/notifier.js
var require_notifier = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/utils/notifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.notifier = notifier;
    function notifier(defaultValue) {
      var lastValue = defaultValue;
      var listeners = [];
      function fn(value) {
        lastValue = value;
        listeners.forEach(function(listener) {
          return listener(lastValue);
        });
      }
      fn.get = function() {
        return lastValue;
      };
      fn.onCalled = function(listener) {
        listeners.push(listener);
        return function() {
          listeners = listeners.filter(function(l) {
            return l !== listener;
          });
        };
      };
      fn.destroy = function() {
        listeners.length = 0;
      };
      return fn;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/factory.js
var require_factory = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/factory.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof3 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "filterTypes", {
      enumerable: true,
      get: function get() {
        return _filterTypes.default;
      }
    });
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _objectWithoutProperties2 = _interopRequireDefault(require_objectWithoutProperties());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _reactDom = require_react_dom();
    var _src = _interopRequireDefault(require_src());
    var _uglified = _interopRequireDefault(require_uglified());
    var _useProperty13 = _interopRequireDefault(require_useProperty());
    var _getScrollbarWidth = _interopRequireDefault(require_getScrollbarWidth());
    var _clamp = _interopRequireDefault(require_clamp());
    var _isMobile = _interopRequireDefault(require_isMobile());
    var _Layout = _interopRequireDefault(require_Layout());
    var _LoadMask = _interopRequireDefault(require_LoadMask2());
    var _filterTypes = _interopRequireDefault(require_filterTypes());
    var _useColumns = _interopRequireDefault(require_useColumns());
    var _useSize3 = _interopRequireDefault(require_useSize());
    var _useNamedState5 = _interopRequireDefault(require_useNamedState());
    var _useHeader = _interopRequireDefault(require_useHeader());
    var _useEditable = _interopRequireDefault(require_useEditable());
    var _useDataSource = _interopRequireDefault(require_useDataSource());
    var _useScrollProps = _interopRequireDefault(require_useScrollProps());
    var _useColumnsSizing = _interopRequireDefault(require_useColumnsSizing());
    var _useGroups = _interopRequireDefault(require_useGroups());
    var _useSelection = _interopRequireDefault(require_useSelection());
    var _useRow2 = _interopRequireDefault(require_useRow());
    var _RowHeightManager = _interopRequireDefault(require_RowHeightManager());
    var _ua = require_ua();
    var _prepareClassName = _interopRequireDefault(require_prepareClassName2());
    var _context = require_context();
    var _Cover = _interopRequireDefault(require_Cover());
    var _useActiveIndex = _interopRequireDefault(require_useActiveIndex());
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var _empty = _interopRequireDefault(require_empty());
    var _ActiveRowIndicator = _interopRequireDefault(require_ActiveRowIndicator());
    var _warn = require_warn();
    var _StickyRowsContainer = require_StickyRowsContainer();
    var _getGlobal = require_getGlobal();
    var _useColumnHover = _interopRequireDefault(require_useColumnHover());
    var _notifier = require_notifier();
    var _excluded = ["computedOnKeyDown", "computedOnFocus", "computedOnBlur"];
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var GRID_ID = 0;
    var globalObject = (0, _getGlobal.getGlobal)();
    var DEFAULT_I18N = {
      pageText: "Page ",
      ofText: " of ",
      perPageText: "Results per page",
      showingText: "Showing ",
      clearAll: "Clear all",
      clear: "Clear",
      showFilteringRow: "Show filtering row",
      hideFilteringRow: "Hide filtering row",
      enable: "Enable",
      disable: "Disable",
      sortAsc: "Sort ascending",
      sortDesc: "Sort descending",
      unsort: "Unsort",
      group: "Group",
      ungroup: "Ungroup",
      lockStart: "Lock start",
      lockEnd: "Lock end",
      unlock: "Unlock",
      columns: "Columns",
      autoresizeThisColumn: "Autoresize this column",
      autoresizeAllColumns: "Autoresize all columns",
      autoSizeToFit: "Autosize to fit",
      contains: "Contains",
      startsWith: "Starts with",
      endsWith: "Ends with",
      notContains: "Does not contain",
      inlist: "In list",
      notinlist: "Not in list",
      neq: "Does not equal",
      inrange: "In range",
      notinrange: "Not in range",
      eq: "Equals",
      notEmpty: "Not empty",
      empty: "Empty",
      lt: "Less than",
      lte: "Less than or equal",
      gt: "Greater than",
      gte: "Greater than or equal",
      before: "Before",
      beforeOrOn: "Before or on",
      afterOrOn: "After or on",
      after: "After",
      start: "Start",
      end: "End",
      dragHeaderToGroup: "Drag header to group",
      noRecords: "No records available",
      "calendar.todayButtonText": "Today",
      "calendar.clearButtonText": "Clear",
      "calendar.okButtonText": "OK",
      "calendar.cancelButtonText": "Cancel"
    };
    var renderLoadMask = function renderLoadMask2(props2) {
      var loadMaskProps = {
        visible: props2.computedLoading,
        livePagination: props2.computedLivePagination,
        loadingText: props2.loadingText || "Loading",
        zIndex: 1e4,
        theme: props2.theme
      };
      var loadMask;
      if (props2.renderLoadMask) {
        loadMask = props2.renderLoadMask(loadMaskProps);
      }
      if (loadMask !== void 0) {
        return loadMask;
      }
      return _react.default.createElement(_LoadMask.default, _objectSpread({}, loadMaskProps));
    };
    var reducePlugins = function reducePlugins2(acc, plugin) {
      if (!plugin.name || typeof plugin.hook !== "function") {
        return acc;
      }
      acc[plugin.name] = plugin;
      return acc;
    };
    var GridFactory = function GridFactory2() {
      var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, plugins = _ref.plugins;
      var edition = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "community";
      plugins = plugins || [];
      var maybeAddColumns;
      var defaultSize = {
        width: 0,
        height: 0
      };
      var emptyCoverHandle = {
        setActive: function setActive() {
        },
        setCursor: function setCursor() {
        }
      };
      plugins = [].concat((0, _toConsumableArray2.default)(_empty.default), (0, _toConsumableArray2.default)(plugins));
      var pluginsMap = plugins.reduce(reducePlugins, {});
      var Grid = _react.default.memo(function(props2) {
        var _useState = (0, _react.useState)(false), _useState2 = (0, _slicedToArray2.default)(_useState, 2), computedFocused = _useState2[0], computedSetFocused = _useState2[1];
        var computedPropsRef = (0, _react.useRef)(null);
        var warnRef = (0, _react.useMemo)(function() {
          return {};
        }, []);
        var context = (0, _react.useContext)(props2.context);
        (0, _react.useEffect)(function() {
          if (computedFocused && props2.activateRowOnFocus) {
            var _computedProps = computedPropsRef.current;
            if (!_computedProps) {
              return;
            }
            var count = _computedProps.count;
            if (!count) {
              return;
            }
            var _activeItem = _computedProps.getActiveItem();
            if (!_activeItem) {
              var index2 = _computedProps.computedLastActiveIndex || _computedProps.getFirstVisibleIndex();
              _computedProps.setActiveIndex(index2);
            }
          }
        }, [computedFocused]);
        var bodyRef = (0, _react.useRef)(null);
        var domRef = (0, _react.useRef)(null);
        var portalRef = (0, _react.useRef)(null);
        var getDOMNode = function getDOMNode2() {
          return domRef.current;
        };
        var getBodyDOMNode = function getBodyDOMNode2() {
          var _bodyRef$current;
          return bodyRef === null || bodyRef === void 0 ? void 0 : (_bodyRef$current = bodyRef.current) === null || _bodyRef$current === void 0 ? void 0 : _bodyRef$current.getDOMNode();
        };
        var getVirtualList = function getVirtualList2() {
          return bodyRef.current != null ? bodyRef.current.getVirtualList() : null;
        };
        var getColumnLayout = function getColumnLayout2() {
          return bodyRef.current != null ? bodyRef.current.columnLayout : null;
        };
        var getDefaultSize = function getDefaultSize2() {
          if (props2.viewportSize) {
            return props2.viewportSize;
          }
          return defaultSize;
        };
        var _useProperty = (0, _useProperty13.default)(props2, "loading"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), computedLoading = _useProperty2[0], doSetLoading = _useProperty2[1];
        var loadingTimeoutIdRef = (0, _react.useRef)();
        var setLoading = function setLoading2(loading) {
          var computedProps2 = computedPropsRef.current;
          var isLoading = loading instanceof Function ? loading(computedProps2 ? computedProps2.computedLoading : false) : loading;
          if (!computedProps2) {
            doSetLoading(isLoading);
            return;
          }
          if (loadingTimeoutIdRef.current) {
            clearTimeout(loadingTimeoutIdRef.current);
          }
          if (computedProps2.computedLivePagination && !isLoading && computedProps2.livePaginationLoadMaskHideDelay) {
            loadingTimeoutIdRef.current = setTimeout(function() {
              doSetLoading(isLoading);
              loadingTimeoutIdRef.current = null;
            }, computedProps2.livePaginationLoadMaskHideDelay);
          } else {
            doSetLoading(isLoading);
          }
        };
        var _useNamedState = (0, _useNamedState5.default)({}, props2.context, "columnSizes"), _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2), columnSizes = _useNamedState2[0], setColumnSizes = _useNamedState2[1];
        var _useNamedState3 = (0, _useNamedState5.default)({}, props2.context, "columnFlexes"), _useNamedState4 = (0, _slicedToArray2.default)(_useNamedState3, 2), columnFlexes = _useNamedState4[0], setColumnFlexes = _useNamedState4[1];
        var _useState3 = (0, _react.useState)({}), _useState4 = (0, _slicedToArray2.default)(_useState3, 2), lockedColumnsState = _useState4[0], setLockedColumnsState = _useState4[1];
        var _useState5 = (0, _react.useState)({
          vertical: false,
          horizontal: false
        }), _useState6 = (0, _slicedToArray2.default)(_useState5, 2), scrollbars = _useState6[0], setScrollbars = _useState6[1];
        var _useProperty3 = (0, _useProperty13.default)(props2, "reservedViewportWidth", 0), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), reservedViewportWidth = _useProperty4[0], setReservedViewportWidth = _useProperty4[1];
        var _useSize = (0, _useSize3.default)(getDefaultSize()), _useSize2 = (0, _slicedToArray2.default)(_useSize, 2), size = _useSize2[0], setSize = _useSize2[1];
        var _useState7 = (0, _react.useState)(0), _useState8 = (0, _slicedToArray2.default)(_useState7, 2), viewportAvailableWidth = _useState8[0], setViewportAvailableWidth = _useState8[1];
        (0, _react.useEffect)(function() {
          if (props2.viewportSize) {
            setSize(props2.viewportSize);
          }
        }, [props2.viewportSize]);
        var onResize = function onResize2(size2) {
          (0, _batchUpdate.default)().commit(function() {
            if (_ua.IS_MS_BROWSER || _ua.IS_FF) {
              size2.width -= 2;
            }
            setSize(size2);
            updateViewportAvailableWidth(size2.width);
            var rowHeight = typeof props2.rowHeight !== "number" ? props2.minRowHeight : props2.rowHeight;
            if (rowHeight) {
              setMaxVisibleRows(Math.ceil(size2.height / rowHeight));
            }
          });
        };
        var updateViewportAvailableWidth = function updateViewportAvailableWidth2(newViewportAvailableWidth) {
          var scrolls = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : scrollbars;
          if (props2.nativeScroll && scrolls.vertical) {
            newViewportAvailableWidth -= (0, _getScrollbarWidth.default)();
          }
          setViewportAvailableWidth(Math.round(newViewportAvailableWidth));
        };
        var _useState9 = (0, _react.useState)({
          virtualListBorderLeft: 0,
          virtualListBorderRight: 0,
          virtualListExtraWidth: 0
        }), _useState10 = (0, _slicedToArray2.default)(_useState9, 2), _useState10$ = _useState10[0], virtualListBorderLeft = _useState10$.virtualListBorderLeft, virtualListBorderRight = _useState10$.virtualListBorderRight, virtualListExtraWidth = _useState10$.virtualListExtraWidth, setVirtualListState = _useState10[1];
        var onScrollbarsChange = function onScrollbarsChange2(scrollbars2) {
          var onChange = function onChange2() {
            var vl = getVirtualList();
            var computedStyle = vl && globalObject.getComputedStyle(vl.getDOMNode());
            if (!computedStyle) {
              return;
            }
            var virtualListBorderLeft2 = parseInt(computedStyle.borderLeftWidth, 10);
            var virtualListBorderRight2 = parseInt(computedStyle.borderRightWidth, 10);
            var virtualListExtraWidth2 = virtualListBorderLeft2 + virtualListBorderRight2;
            (0, _batchUpdate.default)().commit(function() {
              setScrollbars(scrollbars2);
              if (size.width) {
                updateViewportAvailableWidth(size.width, scrollbars2);
              }
              setVirtualListState({
                virtualListBorderLeft: virtualListBorderLeft2,
                virtualListBorderRight: virtualListBorderRight2,
                virtualListExtraWidth: virtualListExtraWidth2
              });
            });
          };
          if (!bodyRef.current) {
            requestAnimationFrame(onChange);
          } else {
            onChange();
          }
        };
        var _useProperty5 = (0, _useProperty13.default)(props2, "showCellBorders"), _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2), computedShowCellBorders = _useProperty6[0], setShowCellBorders = _useProperty6[1];
        var showHorizontalCellBorders = computedShowCellBorders === true || computedShowCellBorders === "horizontal";
        var showVerticalCellBorders = computedShowCellBorders === true || computedShowCellBorders === "vertical";
        var _useState11 = (0, _react.useState)(false), _useState12 = (0, _slicedToArray2.default)(_useState11, 2), listenOnCellEnter = _useState12[0], updateListenOnCellEnter = _useState12[1];
        var _useState13 = (0, _react.useState)(null), _useState14 = (0, _slicedToArray2.default)(_useState13, 2), selectionFixedCell = _useState14[0], setSelectionFixedCell = _useState14[1];
        var setListenOnCellEnter = function setListenOnCellEnter2(value, callback) {
          if (value) {
            globalObject.addEventListener("mouseup", callback);
          } else {
            globalObject.removeEventListener("mouseup", callback);
          }
          updateListenOnCellEnter(value);
        };
        var renderCallbacks = (0, _react.useRef)([]);
        var onNextRender = function onNextRender2(fn) {
          renderCallbacks.current.push(fn);
        };
        (0, _react.useEffect)(function() {
          renderCallbacks.current.forEach(function(fn) {
            return fn();
          });
          renderCallbacks.current.length = 0;
        });
        var _useState15 = (0, _react.useState)(""), _useState16 = (0, _slicedToArray2.default)(_useState15, 2), lastCellInRange = _useState16[0], setLastCellInRange = _useState16[1];
        var _useState17 = (0, _react.useState)(null), _useState18 = (0, _slicedToArray2.default)(_useState17, 2), lastSelectedCell = _useState18[0], setLastSelectedCell = _useState18[1];
        var renderInPortal = (0, _react.useMemo)(function() {
          return props2.renderInPortal || function(el) {
            return portalRef.current ? (0, _reactDom.createPortal)(el, portalRef.current) : null;
          };
        }, [props2.renderInPortal]);
        var cProps = _objectSpread(_objectSpread({}, props2), {}, {
          initialProps: props2,
          selectionFixedCell,
          setSelectionFixedCell,
          bodyRef,
          domRef,
          portalRef,
          renderInPortal,
          listenOnCellEnter,
          setListenOnCellEnter,
          lastCellInRange,
          setLastCellInRange,
          setLastSelectedCell,
          lastSelectedCell,
          onScrollbarsChange,
          virtualListBorderLeft,
          virtualListBorderRight,
          virtualListExtraWidth,
          scrollbars,
          reservedViewportWidth,
          setReservedViewportWidth,
          getColumnLayout,
          getDOMNode,
          computedLoading,
          computedFocused,
          computedSetFocused,
          columnFlexes,
          columnSizes,
          setColumnFlexes,
          setColumnSizes,
          lockedColumnsState,
          setLockedColumnsState,
          setLoading,
          isLoading: function isLoading() {
            return computedProps.computedLoading;
          },
          size,
          setSize,
          viewportAvailableWidth,
          availableWidth: viewportAvailableWidth,
          maxAvailableWidthForColumns: viewportAvailableWidth - reservedViewportWidth,
          showHorizontalCellBorders,
          showVerticalCellBorders,
          shareSpaceOnResize: props2.shareSpaceOnResize || false,
          onNextRender,
          computedEnableColumnHover: props2.enableColumnHover || void 0
        });
        cProps.i18n = function(key, defaultLabel) {
          return props2.i18n[key] || DEFAULT_I18N[key] || defaultLabel;
        };
        Object.assign(cProps, (0, _useActiveIndex.default)(props2, cProps, computedPropsRef));
        Object.assign(cProps, pluginsMap["sortable-columns"].hook(props2, cProps, computedPropsRef));
        if (pluginsMap["group-and-pivot"] && pluginsMap["group-and-pivot"].hook) {
          Object.assign(cProps, pluginsMap["group-and-pivot"].hook(props2, cProps, computedPropsRef));
        }
        Object.assign(cProps, (0, _useGroups.default)(props2, cProps, computedPropsRef));
        if (pluginsMap.tree && pluginsMap.tree.hook) {
          Object.assign(cProps, pluginsMap.tree.hook(props2, cProps, computedPropsRef));
        }
        if (pluginsMap.filters && pluginsMap.filters.hook) {
          Object.assign(cProps, pluginsMap.filters.hook(props2, cProps, computedPropsRef));
        }
        Object.assign(cProps, (0, _useEditable.default)(props2, cProps, computedPropsRef));
        cProps.maybeAddColumns = maybeAddColumns;
        var columnInfo = (0, _useColumns.default)(props2, cProps, computedPropsRef);
        Object.assign(cProps, columnInfo);
        if (edition === "enterprise") {
          var columnsSizing = (0, _useColumnsSizing.default)(props2, cProps, computedPropsRef);
          Object.assign(cProps, columnsSizing);
        }
        Object.assign(cProps, (0, _useColumnHover.default)(props2, cProps, computedPropsRef));
        cProps.wasMountedRef = (0, _react.useRef)(false);
        cProps.wasUnmountedRef = (0, _react.useRef)(false);
        var dataInfo = (0, _useDataSource.default)(props2, cProps, computedPropsRef);
        Object.assign(cProps, pluginsMap["live-pagination"].hook(props2, cProps, computedPropsRef));
        var rowHeightManager = (0, _react.useMemo)(function() {
          return new _RowHeightManager.default({
            rowHeight: props2.rowHeight || props2.minRowHeight,
            minRowHeight: props2.minRowHeight
          }, {}, {
            cache: !!props2.rowHeight
          });
        }, []);
        var i18nFn = (0, _react.useCallback)(function(key, defaultLabel) {
          if (!props2.i18n) {
            return defaultLabel;
          }
          return props2.i18n[key] || DEFAULT_I18N[key] || defaultLabel;
        }, [props2.i18n]);
        var getItemId = (0, _react.useCallback)(function(item) {
          if (!item) return;
          if (item.__group && Array.isArray(item.keyPath)) {
            return item.keyPath.join(props2.groupPathSeparator);
          }
          var itemId = computeIdProperty() ? compoundItemId(item) : simpleItemId(item);
          return itemId;
        }, []);
        var simpleItemId = (0, _react.useCallback)(function(item) {
          return item[props2.idProperty];
        }, []);
        var compoundItemId = (0, _react.useCallback)(function(item) {
          var parts = props2.idProperty.split(props2.idPropertySeparator);
          return parts.reduce(function(itemObj, id) {
            if (itemObj) {
              return itemObj[id] ? itemObj[id] : itemObj;
            }
          }, item);
        }, []);
        var getItemIndexBy = function getItemIndexBy2(fn) {
          var data = computedProps.data;
          if (!data || typeof fn != "function") {
            return -1;
          }
          if (data.findIndex) {
            return data.findIndex(fn);
          }
          for (var i = 0, len = data.length; i < len; i++) {
            if (fn(data[i]) === true) {
              return i;
            }
          }
          return -1;
        };
        var getItemAt = function getItemAt2(index2) {
          if (!computedPropsRef.current) {
            return void 0;
          }
          var item = computedPropsRef.current.data[index2];
          if (!item) {
            return;
          }
          return getItemWithCache(item);
        };
        var getItemWithCache = function getItemWithCache2(item) {
          if (item && computedPropsRef.current && computedPropsRef.current.computedDataSourceCache) {
            var itemId = getItemId(item);
            var cachedItem = computedPropsRef.current.computedDataSourceCache[itemId];
            if (cachedItem) {
              item = _objectSpread(_objectSpread({}, item), cachedItem);
            }
          }
          return item;
        };
        var getItemIndex = function getItemIndex2(item) {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return -1;
          }
          var data = computedProps2.data;
          var itemId = getItemId(item);
          for (var i = 0; i < data.length; i++) {
            var dataItem = data[i];
            var dataItemId = getItemId(dataItem);
            if (dataItemId === itemId) {
              return i;
            }
          }
          return -1;
        };
        var getItemIdAt = function getItemIdAt2(index2) {
          if (index2 === -1) return;
          return getItemId(getItemAt(index2));
        };
        var isRowExpandedById = function isRowExpandedById2() {
          return false;
        };
        var isCellVisible = function isCellVisible2(_ref2) {
          var rowIndex = _ref2.rowIndex, columnIndex = _ref2.columnIndex;
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return false;
          }
          var column = computedProps2.visibleColumns[columnIndex];
          if (!computedProps2.rowHeightManager) {
            throw "You need fixed row height for this method to work";
          }
          var columnStart = column.computedOffset;
          var columnEnd = columnStart + column.computedWidth;
          var rowStart = computedProps2.rowHeightManager.getRowOffset(rowIndex);
          var rowEnd = rowStart + computedProps2.rowHeightManager.getRowHeight(rowIndex);
          var virtualList = getVirtualList();
          var visibleTop = virtualList.scrollTop;
          var visibleBottom = visibleTop + computedProps2.size.height;
          var visibleLeft = virtualList.scrollLeft;
          var visibleRight = visibleLeft + computedProps2.size.width;
          var leftDiff = columnStart - visibleLeft;
          var rightDiff = visibleRight - columnEnd;
          var topDiff = rowStart - visibleTop;
          var bottomDiff = visibleBottom - rowEnd;
          if (topDiff >= 0 && bottomDiff >= 0 && leftDiff >= 0 && rightDiff >= 0) {
            return true;
          }
          return {
            topDiff,
            bottomDiff,
            leftDiff,
            rightDiff
          };
        };
        var setScrollTop = function setScrollTop2(scrollTop) {
          var virtualList = getVirtualList();
          if (virtualList) {
            virtualList.scrollTop = scrollTop;
          }
        };
        var incrementScrollTop = function incrementScrollTop2(increment) {
          var virtualList = getVirtualList();
          if (virtualList) {
            virtualList.scrollTop += increment;
          }
        };
        var getScrollTop = function getScrollTop2() {
          var body = bodyRef.current;
          if (body && body.columnLayout) {
            return body.columnLayout.scrollTop || 0;
          }
          return 0;
        };
        var getScrollLeft = function getScrollLeft2() {
          var body = bodyRef.current;
          if (body && body.columnLayout) {
            return body.columnLayout.scrollLeft || 0;
          }
          return 0;
        };
        var getScrollLeftMax = function getScrollLeftMax2() {
          var virtualList = getVirtualList();
          if (virtualList) {
            return virtualList.scrollLeftMax || 0;
          }
          return 0;
        };
        var setScrollLeft = function setScrollLeft2(scrollLeft) {
          var virtualList = getVirtualList();
          if (virtualList) {
            virtualList.scrollLeft = scrollLeft;
          }
        };
        var incrementScrollLeft = function incrementScrollLeft2(increment) {
          var virtualList = getVirtualList();
          if (virtualList) {
            virtualList.scrollLeft += increment;
          }
        };
        var getRows = function getRows2() {
          var vl = getVirtualList();
          return vl.getRows();
        };
        var getDOMNodeForRowIndex = function getDOMNodeForRowIndex2(index2) {
          var rows = getRows();
          var row = rows.find(function(row2) {
            return row2.index === index2;
          });
          var rowInstance = row.getInstance();
          return rowInstance.getDOMNode ? rowInstance.getDOMNode() : rowInstance.domRef ? rowInstance.domRef.current : null;
        };
        var getHeader = function getHeader2() {
          var body = bodyRef.current;
          var columnLayout = body && body.getColumnLayout();
          var header = columnLayout.getHeader();
          return header;
        };
        var scrollToId = function scrollToId2(id, config, callback) {
          var index2 = computedProps.getRowIndexById(id);
          scrollToIndex(index2, config, callback);
        };
        var scrollToIndex = function scrollToIndex2(index2, config, callback) {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          index2 = (0, _clamp.default)(index2, 0, computedProps2.data.length - 1);
          config = config || {};
          var top = config.top;
          var force = config.force;
          var direction = config.direction;
          var duration = config.duration;
          var offset = config.offset;
          top = !!top;
          force = !!force;
          direction = direction || (top ? "top" : "bottom");
          getVirtualList().scrollToIndex(index2, {
            direction,
            force,
            duration,
            offset
          }, callback);
        };
        var scrollToCell = function scrollToCell2(_ref3) {
          var rowIndex = _ref3.rowIndex, columnIndex = _ref3.columnIndex;
          var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, offset = _ref4.offset, left = _ref4.left, right = _ref4.right, top = _ref4.top;
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          if (offset === void 0) {
            offset = (computedProps2.rowHeight || 50) / 2;
          }
          var columnDirection = left === true ? "left" : left === false || right === true ? "right" : void 0;
          var col = computedProps2.visibleColumns[columnIndex];
          var scrollToRow = function scrollToRow2() {
            var maxIndex = computedProps2.computedTreeEnabled ? computedProps2.data.length - 1 : computedProps2.count - 1;
            computedProps2.scrollToIndex((0, _clamp.default)(rowIndex + (top ? -0 : 0), 0, maxIndex), {
              top,
              offset: 0
            });
          };
          if (!col) {
            return;
          }
          if (col.computedLocked) {
            scrollToRow();
            return;
          }
          computedProps2.scrollToColumn(columnIndex, {
            offset,
            direction: columnDirection
          }, function() {
            scrollToRow();
          });
        };
        var smoothScrollTo = (0, _react.useCallback)(function(value, config) {
          var virtualList = getVirtualList();
          virtualList.smoothScrollTo(value, config);
        }, []);
        var scrollToColumn = (0, _react.useCallback)(function(index2, config, callback) {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          if (!computedProps2.size.width) {
            return requestAnimationFrame(function() {
              scrollToColumn(index2, config, callback);
            });
          }
          config = config || {};
          var _config = config, direction = _config.direction, force = _config.force, duration = _config.duration, offset = _config.offset;
          if (offset === void 0) {
            offset = (computedProps2.rowHeight || 50) / 2;
          }
          var col = computedProps2.getColumnBy(index2);
          if (col.computedLocked) {
            if (callback) {
              callback();
            }
            return;
          }
          var virtualList = getVirtualList();
          var scrollLeft = virtualList.scrollLeft;
          var scrollWidth = computedProps2.size.width;
          if (direction) {
            if (direction != "left" && direction != "right") {
              direction = null;
            }
          }
          if (force && !direction) {
            force = false;
          }
          if (typeof callback != "function") {
            callback = function callback2() {
            };
          }
          var getColumnOffset = function getColumnOffset2() {
            return direction === "left" || !direction ? col.computedOffset : col.computedOffset + col.computedWidth;
          };
          var getLeftDiff = function getLeftDiff2() {
            return getColumnOffset() - scrollLeft - (computedProps2.totalLockedStartWidth || 0);
          };
          var getRightDiff = function getRightDiff2() {
            return scrollLeft + scrollWidth - getColumnOffset() - (computedProps2.totalLockedEndWidth || 0);
          };
          var leftDiff = getLeftDiff();
          var rightDiff = getRightDiff();
          var toLeft = leftDiff < 0;
          var toRight = rightDiff < 0;
          var visible = !toLeft && !toRight;
          if (!visible) {
            if (!direction) {
              direction = leftDiff < 0 ? "left" : "right";
              force = true;
              leftDiff = getLeftDiff();
              rightDiff = getRightDiff();
            }
          }
          if (!visible || direction && force) {
            var newScrollLeft;
            if (direction == "left" || leftDiff < 0) {
              newScrollLeft = scrollLeft + leftDiff - offset;
            } else if (direction == "right" || rightDiff < 0) {
              newScrollLeft = scrollLeft - rightDiff + offset;
            }
            if (newScrollLeft != null) {
              if (duration) {
                virtualList.smoothScrollTo(newScrollLeft, {
                  duration,
                  orientation: "horizontal"
                }, callback);
                return;
              }
              virtualList.scrollLeft = newScrollLeft;
            }
          }
          callback();
        }, []);
        var getStickyContainerHeight = function getStickyContainerHeight2() {
          var _getDOMNode, _stickyContainer$scro;
          var stickyContainer = (_getDOMNode = getDOMNode()) === null || _getDOMNode === void 0 ? void 0 : _getDOMNode.querySelector(".".concat(_StickyRowsContainer.StickyRowsContainerClassName));
          var stickyContainerHeight = (_stickyContainer$scro = stickyContainer === null || stickyContainer === void 0 ? void 0 : stickyContainer.scrollHeight) !== null && _stickyContainer$scro !== void 0 ? _stickyContainer$scro : 0;
          return stickyContainerHeight;
        };
        var scrollToIndexIfNeeded = (0, _react.useCallback)(function(index2, config, callback) {
          var needed = !isRowFullyVisible(index2);
          if (!needed) {
            var _computedProps2 = computedPropsRef.current;
            if (_computedProps2 !== null && _computedProps2 !== void 0 && _computedProps2.computedStickyRows) {
              if (_computedProps2.computedStickyRows[index2]) {
                needed = false;
              } else {
                var stickyContainerHeight = getStickyContainerHeight();
                var scrollTop = getScrollTop();
                var relativeScrollTop = scrollTop + stickyContainerHeight;
                var rowOffset = _computedProps2.rowHeightManager.getRowOffset(index2);
                if (relativeScrollTop > rowOffset) {
                  needed = true;
                  config = config || {
                    direction: "top"
                  };
                  config.offset = relativeScrollTop - rowOffset + rowHeightManager.getRowHeight(index2);
                }
              }
            }
          } else {
            if (computedProps !== null && computedProps !== void 0 && computedProps.computedStickyRows) {
              config = config || {
                direction: "top"
              };
              config.offset = config.offset || 0;
              if (config.direction === "top" || config.top) {
                config.offset += getStickyContainerHeight();
              }
            }
          }
          if (needed) {
            scrollToIndex(index2, config, callback);
          } else {
            if (callback) {
              callback();
            }
          }
          return needed;
        }, []);
        var isRowFullyVisible = function isRowFullyVisible2(rowIndex) {
          var list = getVirtualList();
          if (!list) {
            return false;
          }
          return list.isRowVisible(rowIndex);
        };
        var getRenderRange = function getRenderRange2() {
          return bodyRef.current != null ? bodyRef.current.getRenderRange() : {
            from: 0,
            to: 0
          };
        };
        var isRowRendered = function isRowRendered2(index2) {
          var _getRenderRange = getRenderRange(), from = _getRenderRange.from, to = _getRenderRange.to;
          return index2 >= from && index2 < to;
        };
        var focus = function focus2() {
          var virtualList = getVirtualList();
          if (!virtualList) {
            return;
          }
          var scrollContainer = virtualList.scrollContainer;
          if (!scrollContainer) {
            return;
          }
          scrollContainer.focus();
        };
        var blur = function blur2() {
          var virtualList = getVirtualList();
          if (!virtualList) {
            return;
          }
          var scrollContainer = virtualList.scrollContainer;
          if (!scrollContainer) {
            return;
          }
          scrollContainer.blur();
        };
        var computeIdProperty = (0, _react.useCallback)(function() {
          var idProperty = props2.idProperty;
          if (idProperty.includes(props2.idPropertySeparator)) {
            return true;
          }
          return false;
        }, []);
        var computedProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, cProps), {}, {
          gridId: (0, _react.useMemo)(function() {
            return ++GRID_ID;
          }, []),
          isRowFullyVisible,
          bodyRef,
          notifyColumnFilterVisibleStateChange: (0, _react.useMemo)(function() {
            return (0, _notifier.notifier)(false);
          }, []),
          getMenuPortalContainer: getDOMNode,
          scrollToIndexIfNeeded,
          scrollToIndex,
          scrollToId,
          scrollToColumn,
          scrollToCell,
          setScrollTop,
          setScrollLeft,
          smoothScrollTo,
          incrementScrollLeft,
          incrementScrollTop,
          getScrollTop,
          getScrollLeft,
          getScrollLeftMax,
          getHeader,
          isCellVisible,
          naturalRowHeight: typeof props2.rowHeight !== "number",
          isRowRendered,
          getRenderRange,
          computedShowCellBorders,
          setShowCellBorders,
          groupCounts: [],
          computedLoading,
          setLoading
        }, dataInfo), columnInfo), {}, {
          rowHeightManager,
          isRowExpandedById,
          getItemId,
          getRowId: getItemIdAt,
          getItemIndexBy,
          getItemIndex,
          getItemAt,
          getItemIdAt,
          getRows,
          focus,
          getDOMNodeForRowIndex,
          blur,
          computedShowHeaderBorderRight: columnInfo.totalComputedWidth < viewportAvailableWidth || props2.nativeScroll && (0, _getScrollbarWidth.default)() && scrollbars.vertical,
          i18n: i18nFn,
          totalColumnCount: columnInfo.allColumns.length,
          totalComputedWidth: columnInfo.totalComputedWidth,
          minRowWidth: columnInfo.totalComputedWidth,
          columnResizeHandleWidth: (0, _clamp.default)(props2.columnResizeHandleWidth, 2, 25),
          compoundIdProperty: computeIdProperty()
        });
        computedProps.rtlOffset = props2.rtl ? Math.min(computedProps.size.width - computedProps.totalComputedWidth, 0) : 0;
        computedPropsRef.current = computedProps;
        var menusRef = (0, _react.useRef)([]);
        computedProps.menusRef = menusRef;
        computedProps.updateMenuPositions = function() {
          menusRef.current.forEach(function(menu) {
            if (menu && menu.updatePosition) {
              menu.updatePosition();
            }
          });
        };
        computedProps.updateMainMenuPosition = function(alignTo) {
          menusRef.current.forEach(function(menu) {
            if (menu && menu.updatePosition && !menu.props.subMenu) {
              menu.updateAlignment(alignTo);
            }
          });
        };
        computedProps.onScroll = function() {
          if (computedProps.initialProps.onScroll) {
            computedProps.initialProps.onScroll();
          }
          if (computedProps.updateMenuPositionOnScroll) {
            computedProps.updateMenuPositions();
          }
        };
        if (pluginsMap["row-details"] && pluginsMap["row-details"].hook) {
          Object.assign(computedProps, pluginsMap["row-details"].hook(props2, computedProps, computedPropsRef));
        }
        computedProps.useCellSelection = pluginsMap["cell-selection"].hook;
        Object.assign(computedProps, (0, _useSelection.default)(props2, computedProps, computedPropsRef));
        Object.assign(computedProps, (0, _useHeader.default)(props2, computedProps));
        computedProps.scrollProps = (0, _useScrollProps.default)(props2, computedProps);
        var _useState19 = (0, _react.useState)(0), _useState20 = (0, _slicedToArray2.default)(_useState19, 2), maxVisibleRows = _useState20[0], setMaxVisibleRows = _useState20[1];
        var _useProperty7 = (0, _useProperty13.default)(props2, "showZebraRows"), _useProperty8 = (0, _slicedToArray2.default)(_useProperty7, 2), computedShowZebraRows = _useProperty8[0], setShowZebraRows = _useProperty8[1];
        var _useProperty9 = (0, _useProperty13.default)(props2, "showHoverRows"), _useProperty10 = (0, _slicedToArray2.default)(_useProperty9, 2), computedShowHoverRows = _useProperty10[0], setShowHoverRows = _useProperty10[1];
        var _useProperty11 = (0, _useProperty13.default)(props2, "showEmptyRows"), _useProperty12 = (0, _slicedToArray2.default)(_useProperty11, 2), computedShowEmptyRows = _useProperty12[0], setShowEmptyRows = _useProperty12[1];
        computedProps.getVirtualList = getVirtualList;
        computedProps.computedShowZebraRows = computedShowZebraRows;
        computedProps.computedShowHoverRows = computedShowHoverRows;
        computedProps.computedShowEmptyRows = computedShowEmptyRows;
        computedProps.setShowZebraRows = setShowZebraRows;
        computedProps.setShowHoverRows = setShowHoverRows;
        computedProps.setShowEmptyRows = setShowEmptyRows;
        computedProps.maxVisibleRows = maxVisibleRows;
        var className = (0, _prepareClassName.default)(computedProps);
        var _useRow = (0, _useRow2.default)(props2, computedProps, computedPropsRef), onKeyDown = _useRow.computedOnKeyDown, onFocus = _useRow.computedOnFocus, onBlur = _useRow.computedOnBlur, useRowProps = (0, _objectWithoutProperties2.default)(_useRow, _excluded);
        if (pluginsMap["locked-rows"] && pluginsMap["locked-rows"].hook) {
          Object.assign(computedProps, pluginsMap["locked-rows"].hook(props2, computedProps, computedPropsRef));
        }
        if (pluginsMap["locked-columns"] && pluginsMap["locked-columns"].hook) {
          Object.assign(computedProps, pluginsMap["locked-columns"].hook(props2, computedProps, computedPropsRef));
        } else if (computedProps.lockedEndColumns && computedProps.lockedEndColumns.length || computedProps.lockedStartColumns && computedProps.lockedStartColumns.length) {
          (0, _warn.communityFeatureWarn)("Locked columns", warnRef);
        }
        if (pluginsMap["footer-rows"] && pluginsMap["footer-rows"].hook) {
          Object.assign(computedProps, pluginsMap["footer-rows"].hook(props2, computedProps, computedPropsRef));
        }
        if ((props2.renderRowDetails || props2.expandedRows || props2.defaultExpandedRows) && !pluginsMap["row-details"]) {
          (0, _warn.communityFeatureWarn)("Row Details and Master Details", warnRef);
        }
        if (props2.lockedRows && !pluginsMap["locked-rows"]) {
          (0, _warn.communityFeatureWarn)("Locked rows", warnRef);
        }
        if (props2.footerRows && !pluginsMap["footer-rows"]) {
          (0, _warn.communityFeatureWarn)("Footer rows", warnRef);
        }
        Object.assign(computedProps, useRowProps);
        Object.assign(computedProps, pluginsMap["menus"].hook(props2, computedProps, computedPropsRef));
        var computedWillReceiveFocusRef = (0, _react.useRef)(false);
        computedProps.getState = function() {
          return context.state;
        };
        computedProps.setStateProperty = function(name, value) {
          context.state[name] = value;
        };
        computedProps.computedWillReceiveFocusRef = computedWillReceiveFocusRef;
        delete computedProps.style;
        var getScrollingElement = function getScrollingElement2() {
          var scrollingElement = getVirtualList().getScrollingElement();
          if (!scrollingElement.scrollerNode) {
            scrollingElement = scrollingElement.scroller;
          }
          return scrollingElement.scrollerNode;
        };
        computedProps.getScrollingElement = getScrollingElement;
        var onGridScrollIntoView = function onGridScrollIntoView2(event2) {
          var gridNode = getBodyDOMNode();
          var eventTarget = event2.target;
          if (event2.target != gridNode) {
            return;
          }
          var scrollLeft = gridNode.scrollLeft, scrollTop = gridNode.scrollTop;
          if (scrollLeft) {
            gridNode.scrollLeft = computedProps.rtl ? getScrollLeftMax() : 0;
            requestAnimationFrame(function() {
              if (computedProps.wasUnmountedRef.current) {
                return;
              }
              incrementScrollLeft(scrollLeft);
            });
          }
          if (scrollTop && eventTarget) {
            eventTarget.scrollTop = 0;
            globalObject.requestAnimationFrame(function() {
              if (computedProps.wasUnmountedRef.current) {
                return;
              }
              incrementScrollTop(scrollTop);
            });
          }
        };
        var setupPassiveScrollListener = function setupPassiveScrollListener2(node) {
          node.addEventListener("scroll", onGridScrollIntoView, {
            passive: true
          });
        };
        var removePassiveScrollListener = function removePassiveScrollListener2(node) {
          if (node) {
            node.removeEventListener("scroll", onGridScrollIntoView, {
              passive: true
            });
          }
        };
        (0, _react.useEffect)(function() {
          computedProps.wasMountedRef.current = true;
          if (props2.onDidMount) {
            props2.onDidMount(computedPropsRef);
          }
          var initialScrollLeft = props2.initialScrollLeft, initialScrollTop = props2.initialScrollTop;
          if (props2.skipLoadOnMount) {
            if (initialScrollTop) {
              setScrollTop(initialScrollTop);
            }
            if (initialScrollLeft) {
              setScrollLeft(initialScrollLeft);
            }
          }
          var bodyNode = getBodyDOMNode();
          setupPassiveScrollListener(bodyNode);
          return function() {
            removePassiveScrollListener(bodyNode);
            if (props2.onWillUnmount) {
              props2.onWillUnmount(computedPropsRef);
            }
            computedProps.wasUnmountedRef.current = true;
          };
        }, []);
        (0, _react.useEffect)(function() {
          if (props2.handle) {
            props2.handle(computedPropsRef);
          }
          return function() {
            if (props2.handle) {
              props2.handle(null);
            }
          };
        }, [props2.handle]);
        (0, _react.useEffect)(function() {
          if (props2.onReady && size.width) {
            props2.onReady(computedPropsRef);
          }
        }, [size.width !== 0]);
        computedProps.cellNavigationRef = (0, _react.useRef)(null);
        Object.assign(computedProps, pluginsMap["row-index-column"].hook(props2, computedProps, computedPropsRef));
        computedProps.coverHandleRef = (0, _react.useRef)(emptyCoverHandle);
        computedProps.rowResizeIndexRef = (0, _react.useRef)(null);
        var coverHandle = function coverHandle2(_ref5) {
          var setActive = _ref5.setActive, setCursor = _ref5.setCursor;
          computedPropsRef.current.coverHandleRef.current = {
            setActive,
            setCursor
          };
        };
        var activeItem = getItemAt(computedProps.computedActiveIndex);
        var activeRowHeight = computedProps.computedRowHeights && activeItem ? computedProps.computedRowHeights[getItemId(activeItem)] : computedProps.rowHeight == null ? rowHeightManager.getRowHeight(computedProps.computedActiveIndex) : computedPropsRef.rowHeight;
        computedProps.activeRowHeight = activeRowHeight || computedProps.rowHeight;
        var emptyData = computedProps.data && computedProps.data.length;
        if (computedFocused && computedProps.showActiveRowIndicator && emptyData) {
          computedProps.renderActiveRowIndicator = function(handle) {
            return _react.default.createElement(_ActiveRowIndicator.default, {
              handle,
              rtl: computedProps.rtl,
              rtlOffset: computedProps.rtlOffset,
              getDOMNode: computedProps.getDOMNode,
              dataSourceCount: computedProps.data.length,
              width: computedProps.minRowWidth || 0,
              computedRowHeights: computedProps.computedRowHeights,
              computedExpandedRows: computedProps.computedExpandedRows,
              computedExpandedNodes: computedProps.computedExpandedNodes,
              activeRowHeight: computedProps.activeRowHeight,
              activeIndex: computedProps.computedActiveIndex,
              activeRowRef: computedProps.activeRowRef,
              activeRowIndicatorClassName: computedProps.activeRowIndicatorClassName
            });
          };
        }
        computedProps.computedLicenseValid = false;
        if (pluginsMap.license && pluginsMap.license.hook) {
          Object.assign(computedProps, pluginsMap.license.hook(props2, computedProps, computedPropsRef));
        }
        Object.assign(computedProps, pluginsMap["clipboard"].hook(props2, computedProps, computedPropsRef));
        if (edition !== "enterprise") {
          if (props2.rowIndexColumn) {
            (0, _warn.communityFeatureWarn)("Row resize (row index column)", warnRef);
          }
          if (props2.livePagination) {
            (0, _warn.communityFeatureWarn)("Live pagination", warnRef);
          }
          if (props2.onRowReorder != null || props2.rowReorderColumn != null) {
            (0, _warn.communityFeatureWarn)("Row reorder", warnRef);
          }
          if (props2.enableClipboard) {
            (0, _warn.communityFeatureWarn)("Clipboard", warnRef);
          }
        }
        delete computedProps.renderLockedStartCells;
        delete computedProps.renderLockedEndCells;
        if (pluginsMap["locked-columns"]) {
          computedProps.renderLockedStartCells = pluginsMap["locked-columns"].renderLockedStartCells;
          computedProps.renderLockedEndCells = pluginsMap["locked-columns"].renderLockedEndCells;
        }
        Object.defineProperty(computedProps, "scrollTop", {
          get: function get() {
            return getScrollTop();
          },
          set: function set(newValue) {
            setScrollTop(newValue);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(computedProps, "scrollLeft", {
          get: function get() {
            return getScrollLeft();
          },
          set: function set(newValue) {
            setScrollLeft(newValue);
          },
          enumerable: true,
          configurable: true
        });
        computedProps.edition = edition;
        return _react.default.createElement("div", {
          style: props2.style,
          className,
          onKeyDown,
          onFocus,
          onBlur,
          ref: domRef
        }, _react.default.createElement(_context.Provider, {
          value: computedProps
        }, pluginsMap["row-index-column"].renderRowResizeIndicator(computedProps, computedPropsRef), _react.default.createElement(_Layout.default, {
          Footer: pluginsMap["footer-rows"] ? pluginsMap["footer-rows"].Footer : null,
          ref: bodyRef,
          renderInPortal
        }), _react.default.createElement(_Cover.default, {
          handle: coverHandle
        })), computedProps.computedLicenseValid === false && edition === "enterprise" ? pluginsMap["license"].renderLicenseNotice(computedProps, computedPropsRef) : null, _react.default.createElement(_src.default, {
          onResize,
          notifyOnMount: true
        }), renderLoadMask(computedProps), typeof pluginsMap["menus"].renderColumnContextMenu === "function" ? pluginsMap["menus"].renderColumnContextMenu(computedProps, computedPropsRef) : null, typeof pluginsMap["menus"].renderRowContextMenu === "function" ? pluginsMap["menus"].renderRowContextMenu(computedProps, computedPropsRef) : null, typeof pluginsMap["filters"].renderColumnFilterContextMenu === "function" ? pluginsMap["filters"].renderColumnFilterContextMenu(computedProps, computedPropsRef) : null, _react.default.createElement("div", {
          ref: portalRef,
          className: "InovuaReactDataGrid__portal-host"
        }));
      });
      var defaultProps = {
        idProperty: "id",
        rowHeight: 40,
        headerHeight: 40,
        filterRowHeight: 40,
        minRowHeight: 20,
        nativeScroll: false,
        autoCheckboxColumn: false,
        activateRowOnFocus: true,
        checkboxOnlyRowSelect: false,
        checkboxSelectEnableShiftKey: false,
        renderScroller: function renderScroller(domProps) {
          domProps.tabIndex = 0;
        },
        stickyHeader: false,
        enableCellBulkUpdate: false,
        enableKeyboardNavigation: true,
        scrollTopOnFilter: true,
        scrollTopOnSort: true,
        scrollTopOnGroupBy: true,
        defaultShowHeader: true,
        defaultShowEmptyRows: false,
        defaultShowHoverRows: true,
        defaultShowZebraRows: true,
        defaultShowCellBorders: true,
        allowRowTabNavigation: false,
        cellSelectionByIndex: false,
        columnResizeHandleWidth: _isMobile.default ? 15 : 5,
        columnResizeProxyWidth: 5,
        virtualizeColumnsThreshold: 15,
        shareSpaceOnResize: false,
        enableColumnFilterContextMenu: true,
        copySpreadsheetCompatibleString: false,
        clipboardSeparator: "	",
        resizable: true,
        virtualized: true,
        allowUnsort: true,
        rtl: false,
        theme: "default-light",
        filterTypes: _filterTypes.default,
        keyPageStep: 10,
        expandGroupTitle: true,
        allowGroupSplitOnReorder: true,
        defaultCollapsedGroups: {},
        groupPathSeparator: "/",
        nodePathSeparator: "/",
        idPropertySeparator: ".",
        groupNestingSize: 22,
        treeNestingSize: 22,
        columnMinWidth: 40,
        enableTreeRowReorderNestingChange: true,
        enableTreeRowReorderParentChange: true,
        columnReorderScrollByAmount: 20,
        rowReorderScrollByAmount: 20,
        rowReorderAutoScroll: false,
        rowReorderAutoScrollSpeed: 40,
        allowRowReorderBetweenGroups: false,
        reorderProxySize: 3,
        expandOnMouseDown: false,
        columnMaxWidth: null,
        editStartEvent: "dblclick",
        hideGroupByColumns: true,
        defaultColumnOrder: void 0,
        columnUserSelect: false,
        columnHeaderUserSelect: false,
        stickyGroupRows: false,
        showWarnings: !_uglified.default,
        toggleRowSelectOnClick: false,
        toggleCellSelectOnClick: true,
        clearNodeCacheOnDataSourceChange: true,
        clearDataSourceCacheOnChange: true,
        preventDefaultTextSelectionOnShiftMouseDown: true,
        preventRowSelectionOnClickWithMouseMove: true,
        showColumnMenuSortOptions: true,
        showColumnMenuLockOptions: true,
        showColumnMenuFilterOptions: true,
        showColumnMenuGroupOptions: true,
        autoFocusOnEditComplete: true,
        autoFocusOnEditEscape: true,
        showActiveRowIndicator: true,
        showPivotSummaryColumns: true,
        showColumnMenuToolOnHover: !_isMobile.default,
        columnFilterContextMenuConstrainTo: true,
        columnFilterContextMenuPosition: "absolute",
        generateIdFromPath: true,
        collapseChildrenOnAsyncNodeCollapse: true,
        collapseChildrenRecursive: true,
        selectNodesRecursive: true,
        isExpandKeyPressed: function isExpandKeyPressed(_ref6) {
          var event2 = _ref6.event;
          return event2.key === "ArrowRight" && event2.altKey;
        },
        isCollapseKeyPressed: function isCollapseKeyPressed(_ref7) {
          var event2 = _ref7.event;
          return event2.key === "ArrowLeft" && event2.altKey;
        },
        isStartEditKeyPressed: function isStartEditKeyPressed(_ref8) {
          var event2 = _ref8.event;
          return event2.key === "e" && event2.ctrlKey;
        },
        rowExpandHeight: 80,
        growExpandHeightWithDetails: true,
        livePaginationLoadNextDelay: true,
        livePaginationLoadMaskHideDelay: 50,
        checkResizeDelay: 0,
        multiRowExpand: true,
        useNativeFlex: false,
        disableGroupByToolbar: false,
        updateMenuPositionOnScroll: true,
        updateMenuPositionOnColumnsChange: true,
        useRowHeightForLockedRows: true,
        nodesProperty: "nodes",
        rowDetailsWidth: "max-viewport-width",
        contain: "style layout",
        rowContain: "style layout",
        groupToString: function groupToString(obj) {
          var type = (0, _typeof2.default)(obj);
          return type == "string" || type === "number" || type === "boolean" ? "".concat(obj) : JSON.stringify(obj);
        },
        scrollProps: {
          autoHide: true,
          scrollThumbMargin: 4,
          scrollThumbWidth: 6,
          scrollThumbOverWidth: 8
        },
        detailsGridCacheKey: true,
        sortFunctions: {
          date: function date(v1, v2, column) {
            if (window.moment && column.dateFormat) {
              return window.moment(v1, column.dateFormat) - window.moment(v2, column.dateFormat);
            }
            return v1 - v2;
          }
        },
        i18n: DEFAULT_I18N,
        emptyText: "noRecords",
        isBinaryOperator: function isBinaryOperator(operator) {
          return operator === "inrange" || operator === "notinrange";
        },
        skipHeaderOnAutoSize: false,
        enableColumnAutosize: true
      };
      var maybeAddCols = [];
      plugins.forEach(function(plugin) {
        if (!plugin.name) {
          return;
        }
        if (typeof plugin.defaultProps === "function") {
          var result = plugin.defaultProps(Grid.defaultProps);
          if (result != null) {
            Grid.defaultProps = _objectSpread(_objectSpread({}, Grid.defaultProps), result);
          }
        }
        if (typeof plugin.maybeAddColumns === "function") {
          maybeAddCols.push(plugin.maybeAddColumns);
        }
      });
      if (maybeAddCols.length) {
        maybeAddColumns = function maybeAddColumns2(columns, props2) {
          var result = columns;
          maybeAddCols.forEach(function(fn) {
            result = fn(result, props2);
          });
          return result;
        };
      }
      var TheGrid = function TheGrid2(props2) {
        var contextValue = (0, _react.useMemo)(function() {
          return {
            state: props2.initialState || {}
          };
        }, []);
        var Context = (0, _react.useMemo)(function() {
          return _react.default.createContext(contextValue);
        }, []);
        return _react.default.createElement(Context.Provider, {
          value: contextValue
        }, _react.default.createElement(Grid, _objectSpread(_objectSpread({}, props2), {}, {
          context: Context
        })));
      };
      TheGrid.defaultProps = defaultProps;
      return TheGrid;
    };
    var _default = GridFactory;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/sortable-columns/useSortInfo.js
var require_useSortInfo = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/sortable-columns/useSortInfo.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _react = require_react();
    var _isControlledProperty = _interopRequireDefault(require_isControlledProperty());
    var _useProperty3 = _interopRequireDefault(require_useProperty());
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var getNextSortInfoForColumn = function getNextSortInfoForColumn2(currentDir, column, _ref) {
      var allowUnsort = _ref.allowUnsort, multiSort = _ref.multiSort, forceDir = _ref.forceDir, defaultDir = _ref.defaultDir, sortFunctions = _ref.sortFunctions;
      var newSortInfo = {
        dir: 1,
        id: column.id,
        name: column.sortName || column.name || "",
        columnName: column.name || "",
        type: column.type
      };
      var sortName = newSortInfo.name;
      if (!sortName && !column.sort) {
        return null;
      }
      var sortFn = column.sort;
      if (!sortFn && sortFunctions && sortFunctions[column.type]) {
        sortFn = sortFunctions[column.type];
      }
      if (sortFn) {
        newSortInfo.fn = function(one, two) {
          return sortFn(one, two, column);
        };
      }
      if (forceDir !== void 0) {
        newSortInfo.dir = forceDir;
        return newSortInfo;
      }
      if (defaultDir === void 0) {
        defaultDir = 1;
      }
      if (defaultDir === 1) {
        if (!currentDir) {
          newSortInfo.dir = 1;
        } else if (currentDir === 1) {
          newSortInfo.dir = -1;
        } else if (currentDir === -1) {
          if (allowUnsort || multiSort) {
            return null;
          }
          newSortInfo.dir = 1;
        }
      } else if (defaultDir === -1) {
        if (!currentDir) {
          newSortInfo.dir = -1;
        } else if (currentDir === -1) {
          newSortInfo.dir = 1;
        } else if (currentDir === 1) {
          if (allowUnsort || multiSort) {
            return null;
          }
          newSortInfo.dir = 1;
        }
      }
      return newSortInfo;
    };
    var getNextSingleSortInfo = function getNextSingleSortInfo2(column, currentSortInfo, _ref2) {
      var _ref2$allowUnsort = _ref2.allowUnsort, allowUnsort = _ref2$allowUnsort === void 0 ? false : _ref2$allowUnsort, multiSort = _ref2.multiSort, forceDir = _ref2.forceDir, defaultDir = _ref2.defaultDir, sortFunctions = _ref2.sortFunctions;
      if (Array.isArray(currentSortInfo)) {
        return null;
      }
      return getNextSortInfoForColumn(currentSortInfo && (currentSortInfo.name === column.id || currentSortInfo.id === column.id || currentSortInfo.name === column.sortName) ? currentSortInfo.dir : 0, column, {
        allowUnsort,
        multiSort,
        forceDir,
        defaultDir,
        sortFunctions
      });
    };
    var getNextMultipleSortInfo = function getNextMultipleSortInfo2(column, currentSortInfo, _ref3) {
      var _ref3$allowUnsort = _ref3.allowUnsort, allowUnsort = _ref3$allowUnsort === void 0 ? false : _ref3$allowUnsort, forceDir = _ref3.forceDir, sortFunctions = _ref3.sortFunctions;
      var result;
      if (!Array.isArray(currentSortInfo)) {
        var info = getNextSingleSortInfo(column, currentSortInfo, {
          allowUnsort,
          multiSort: true,
          forceDir,
          sortFunctions
        });
        result = [info].filter(function(x) {
          return x;
        });
      } else {
        var sortInfoIndex = currentSortInfo.findIndex(function(value) {
          return value.id ? value.id === column.id : value.name === column.name || value.name === column.sortName;
        });
        var currentSortInfoForColumn = currentSortInfo[sortInfoIndex];
        var nextSortInfoForColumn = getNextSingleSortInfo(column, currentSortInfo[sortInfoIndex], {
          allowUnsort,
          multiSort: true,
          forceDir,
          sortFunctions
        });
        if (nextSortInfoForColumn && forceDir !== void 0) {
          nextSortInfoForColumn.dir = forceDir;
        }
        result = (currentSortInfoForColumn ? [].concat((0, _toConsumableArray2.default)(currentSortInfo.slice(0, sortInfoIndex)), [nextSortInfoForColumn], (0, _toConsumableArray2.default)(currentSortInfo.slice(sortInfoIndex + 1))) : [].concat((0, _toConsumableArray2.default)(currentSortInfo), [nextSortInfoForColumn])).filter(function(x) {
          return x;
        });
      }
      return result;
    };
    var useSortInfo = function useSortInfo2(props2, _, computedPropsRef) {
      var controlled = (0, _isControlledProperty.default)(props2, "sortInfo");
      var _useProperty = (0, _useProperty3.default)(props2, "sortInfo"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), sortInfo = _useProperty2[0], silentSetSortInfo = _useProperty2[1];
      if (controlled) {
      }
      var setSortInfo = (0, _react.useCallback)(function(sortInfo2) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var queue = (0, _batchUpdate.default)();
        var computedRemoteData = computedProps.computedRemoteData;
        queue.commit(function() {
          if (computedProps.computedPagination && computedProps.setSkip && computedProps.computedSkip) {
            computedProps.setSkip(0);
          }
          silentSetSortInfo(sortInfo2);
          if (computedRemoteData) {
            computedProps.setLoadDataTrigger(function(loadDataTrigger) {
              return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ["sortInfo"]);
            });
          }
        });
      }, [silentSetSortInfo]);
      var toggleColumnSort = (0, _react.useCallback)(function(colId, defaultSortingDirection) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var allowUnsort = computedProps.allowUnsort;
        var computedColumn = computedProps.getColumnBy(colId);
        if (!computedColumn) {
          return;
        }
        var sortInfo2 = computedProps.computedSortInfo === void 0 ? null : computedProps.computedSortInfo;
        var sortingDirection;
        if (computedProps.defaultSortingDirection) {
          sortingDirection = computedProps.defaultSortingDirection === "asc" ? 1 : -1;
        }
        if (defaultSortingDirection) {
          sortingDirection = defaultSortingDirection === "asc" ? 1 : -1;
        }
        var computedIsMultiSort = computedProps.computedIsMultiSort;
        var nextSortInfo = computedIsMultiSort ? getNextMultipleSortInfo(computedColumn, sortInfo2, {
          allowUnsort,
          sortFunctions: computedProps.sortFunctions
        }) : getNextSingleSortInfo(computedColumn, sortInfo2, {
          allowUnsort,
          multiSort: false,
          forceDir: void 0,
          defaultDir: sortingDirection,
          sortFunctions: computedProps.sortFunctions
        });
        setSortInfo(nextSortInfo);
      }, [setSortInfo]);
      var setColumnSortInfo = (0, _react.useCallback)(function(column, dir) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var allowUnsort = computedProps.allowUnsort;
        var computedColumn = computedProps.getColumnBy(column);
        if (!computedColumn) {
          return;
        }
        var computedIsMultiSort = computedProps.computedIsMultiSort;
        var nextSortInfo = computedIsMultiSort ? getNextMultipleSortInfo(computedColumn, sortInfo, {
          allowUnsort,
          forceDir: dir,
          sortFunctions: computedProps.sortFunctions
        }) : getNextSingleSortInfo(computedColumn, sortInfo, {
          allowUnsort,
          multiSort: false,
          forceDir: dir,
          sortFunctions: computedProps.sortFunctions
        });
        setSortInfo(nextSortInfo);
      }, [setSortInfo]);
      var unsortColumn = function unsortColumn2(column) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var computedColumn = computedProps.getColumnBy(column);
        if (!computedColumn) {
          return;
        }
        var columnSortInfo = computedColumn.computedSortInfo;
        if (!columnSortInfo) {
          return;
        }
        var sortInfo2 = computedProps.computedSortInfo;
        var newSortInfo = null;
        if (Array.isArray(sortInfo2)) {
          newSortInfo = sortInfo2.filter(function(sortInfo3) {
            if (sortInfo3 && (sortInfo3.id === columnSortInfo.id || sortInfo3.name === columnSortInfo.name)) {
              return false;
            }
            return true;
          });
        }
        setSortInfo(newSortInfo);
      };
      return {
        computedSortInfo: sortInfo,
        unsortColumn,
        setSortInfo,
        computedIsMultiSort: Array.isArray(sortInfo),
        toggleColumnSort,
        setColumnSortInfo
      };
    };
    var _default = useSortInfo;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/deep-get/index.js
var require_deep_get = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/deep-get/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    function _default(obj, key, defaultValue, undef) {
      var keys = key.split ? key.split(".") : Array.isArray(key) ? key : [key];
      for (var propIndex = 0; propIndex < keys.length; propIndex++) {
        obj = obj ? obj[keys[propIndex]] : undef;
      }
      return obj === undef ? defaultValue : obj;
    }
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/sorty/src/curry.js
var require_curry = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/sorty/src/curry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function curry(fn, n) {
      if (typeof n !== "number") {
        n = fn.length;
      }
      function getCurryClosure(prevArgs) {
        function curryClosure() {
          var len = arguments.length;
          var args = [].concat(prevArgs);
          if (len) {
            args.push.apply(args, arguments);
          }
          if (args.length < n) {
            return getCurryClosure(args);
          }
          return fn.apply(this, args);
        }
        return curryClosure;
      }
      return getCurryClosure([]);
    }
    var _default = curry;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/sorty/src/types.js
var require_types = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/sorty/src/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = {
      string: function string(a, b) {
        a += "";
        b += "";
        return a.localeCompare(b);
      },
      number: function number(a, b) {
        if (isFinite(a - b)) {
          return a - b;
        } else {
          return isFinite(a) ? -1 : 1;
        }
      }
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/sorty/src/index.js
var require_src22 = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/sorty/src/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _deepGet = _interopRequireDefault(require_deep_get());
    var _curry = _interopRequireDefault(require_curry());
    var _types = _interopRequireDefault(require_types());
    function isFn(fn) {
      return typeof fn === "function";
    }
    var sorty = (0, _curry.default)(function(sortInfo, array) {
      return array.sort(getMultiSortFunction(sortInfo));
    });
    sorty.types = _types.default;
    var getSingleSortFunction = function getSingleSortFunction2(info) {
      if (!info) {
        return;
      }
      var field = info.name;
      var dir = info.dir === "desc" || info.dir < 0 ? -1 : info.dir === "asc" || info.dir > 0 ? 1 : 0;
      if (!dir) {
        return;
      }
      if (!info.fn && info.type) {
        info.fn = sorty.types[info.type];
      }
      if (!info.fn) {
        info.fn = sorty.types.string || _types.default.string;
      }
      var fn = info.fn;
      return function(first, second) {
        var a = field ? (0, _deepGet.default)(first, field) : first;
        var b = field ? (0, _deepGet.default)(second, field) : second;
        return dir * fn(a, b, first, second, info);
      };
    };
    var getSortFunctions = function getSortFunctions2(sortInfo) {
      if (!Array.isArray(sortInfo)) {
        sortInfo = [sortInfo];
      }
      return sortInfo.map(getSingleSortFunction).filter(isFn);
    };
    var getMultiSortFunction = function getMultiSortFunction2(sortInfo) {
      var fns = getSortFunctions(sortInfo);
      return function(first, second) {
        var result = 0;
        var i = 0;
        var len = fns.length;
        var fn;
        for (; i < len; i++) {
          fn = fns[i];
          if (!fn) {
            continue;
          }
          result = fn(first, second);
          if (result != 0) {
            return result;
          }
        }
        return result;
      };
    };
    sorty._getSortFunctions = getSortFunctions;
    sorty.getFunction = getMultiSortFunction;
    var _default = sorty;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/packages/sorty/index.js
var require_sorty = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/packages/sorty/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _src = _interopRequireDefault(require_src22());
    var _default = _src.default;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/sortable-columns/index.js
var require_sortable_columns = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/sortable-columns/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _useSortInfo = _interopRequireDefault(require_useSortInfo());
    var _sorty = _interopRequireDefault(require_sorty());
    var _default = {
      name: "sortable-columns",
      hook: _useSortInfo.default,
      defaultProps: function defaultProps() {
        return {
          sorty: _sorty.default,
          sortable: true
        };
      }
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/renderGridMenu.js
var require_renderGridMenu = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/renderGridMenu.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _reactDom = _interopRequireDefault(require_react_dom());
    var _react = require_react();
    var _default = function _default2(menu, computedProps, menusRef) {
      var menuPortalContainer = computedProps.menuPortalContainer;
      var didMount = menu ? menu.props.componentDidMount : null;
      var willUnmount = menu ? menu.props.componentWillUnmount : null;
      if (menu) {
        menu = (0, _react.cloneElement)(menu, {
          rtl: computedProps.rtl,
          componentDidMount: function componentDidMount() {
            if (didMount) {
              didMount.apply(void 0, arguments);
            }
            menusRef = menusRef || computedProps.menusRef;
            var menuInstance = arguments.length <= 0 ? void 0 : arguments[0];
            menusRef.current.push(menuInstance);
          },
          componentWillUnmount: function componentWillUnmount() {
            if (willUnmount) {
              willUnmount.apply(void 0, arguments);
            }
            var menuInstance = arguments.length <= 0 ? void 0 : arguments[0];
            menusRef = menusRef || computedProps.menusRef;
            menusRef.current = menusRef.current.filter(function(it) {
              return it !== menuInstance;
            });
          }
        });
      }
      if (menuPortalContainer && _reactDom.default.createPortal) {
        var container = menuPortalContainer;
        if (typeof container === "string") {
          container = document.querySelector(container);
        }
        if (container) {
          return _reactDom.default.createPortal(menu, container);
        }
      }
      return menu;
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/filters/useFilters/index.js
var require_useFilters = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/filters/useFilters/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.renderColumnFilterContextMenu = exports.default = void 0;
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireWildcard(require_react());
    var _useProperty5 = _interopRequireDefault(require_useProperty());
    var _getFilterValueForColumns = _interopRequireDefault(require_getFilterValueForColumns());
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var _mapColumns = _interopRequireDefault(require_mapColumns());
    var _ua = require_ua();
    var _Menu = _interopRequireDefault(require_Menu2());
    var _renderGridMenu = _interopRequireDefault(require_renderGridMenu());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var emptyArray = [];
    var COLUMN_MENU_ALIGN_POSITIONS = ["tl-bl", "tr-br", "tl-tr", "tr-tl", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
    var COLUMN_MENU_ALIGN_POSITIONS_RTL = ["tr-br", "tl-bl", "tr-tl", "tl-tr", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
    var renderColumnFilterContextMenu = function renderColumnFilterContextMenu2(computedProps, computedPropsRef) {
      if (!computedProps) {
        return null;
      }
      var cellProps = computedProps.columnFilterContextMenuProps;
      if (!cellProps) {
        return null;
      }
      var filterValue = computedProps.computedFilterValueMap ? computedProps.computedFilterValueMap[cellProps.id] : null;
      if (!filterValue) {
        return null;
      }
      var columnOperators = computedProps.initialProps.filterTypes[filterValue.type].operators || emptyArray;
      var selected = {
        operator: filterValue.operator
      };
      var showEnableButton = filterValue.active === false;
      var filterType = computedProps.initialProps.filterTypes[filterValue.type];
      var isFiltered = computedProps.computedFiltered;
      var items = function() {
        var activationItems = ["-", {
          label: computedProps.i18n("enable", "Enable"),
          itemId: "enableFilter",
          disabled: !showEnableButton,
          onClick: function onClick() {
            var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
              active: true
            });
            var computedProps2 = computedPropsRef.current;
            if (!computedProps2) {
              return;
            }
            computedProps2.computedOnColumnFilterValueChange({
              columnId: cellProps.id,
              columnIndex: cellProps.computedVisibleIndex,
              cellProps,
              filterValue: newFilterValue
            });
            computedProps2.hideColumnFilterContextMenu();
          }
        }, {
          label: computedProps.i18n("disable", "Disable"),
          disabled: showEnableButton,
          itemId: "disableFilter",
          onClick: function onClick() {
            var computedProps2 = computedPropsRef.current;
            if (!computedProps2) {
              return;
            }
            var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
              active: false
            });
            computedProps2.computedOnColumnFilterValueChange({
              columnId: cellProps.id,
              cellProps,
              columnIndex: cellProps.computedVisibleIndex,
              filterValue: newFilterValue
            });
            computedProps2.hideColumnFilterContextMenu();
          }
        }, "-", {
          label: computedProps.i18n("clear", "Clear"),
          itemId: "clearFilter",
          disabled: filterValue.value === filterType.emptyValue,
          onClick: function onClick() {
            var computedProps2 = computedPropsRef.current;
            if (!computedProps2) {
              return;
            }
            computedProps2.clearColumnFilter(cellProps.id);
            computedProps2.hideColumnFilterContextMenu();
          }
        }, {
          label: computedProps.i18n("clearAll", "Clear All"),
          itemId: "clearAllFilters",
          disabled: !isFiltered,
          onClick: function onClick() {
            var computedProps2 = computedPropsRef.current;
            if (!computedProps2) {
              return;
            }
            computedProps2.clearAllFilters();
            computedProps2.hideColumnFilterContextMenu();
          }
        }];
        var items2 = columnOperators.map(function(operator) {
          return {
            label: computedProps.i18n(operator.label, operator.label) || computedProps.i18n(operator.name, operator.name),
            name: "operator",
            itemId: "operator-".concat(operator.name),
            value: operator.name
          };
        });
        items2.push.apply(items2, activationItems);
        return items2;
      }();
      var onSelectionChange = function onSelectionChange2(selected2) {
        var operator = selected2.operator;
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var filterTypes = computedProps2.initialProps.filterTypes;
        var filterTypeDescription = filterTypes[filterType.type] || {
          operators: []
        };
        var operatorDescriptor = filterTypeDescription.operators.filter(function(op) {
          return op.name === operator;
        })[0];
        var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
          operator
        });
        if (operatorDescriptor && operatorDescriptor.valueOnOperatorSelect !== void 0) {
          newFilterValue.value = operatorDescriptor.valueOnOperatorSelect;
        }
        computedProps2.computedOnColumnFilterValueChange({
          columnId: cellProps.id,
          cellProps,
          columnIndex: cellProps.computedVisibleIndex,
          filterValue: newFilterValue
        });
        computedProps2.hideColumnFilterContextMenu();
      };
      var rtl = computedProps.rtl;
      var menuProps = {
        autoFocus: true,
        dismissWithEscape: true,
        items,
        theme: computedProps.theme,
        updatePositionOnScroll: computedProps.updateMenuPositionOnScroll,
        nativeScroll: !_ua.IS_MS_BROWSER,
        enableSelection: true,
        maxHeight: computedProps.columnFilterContextMenuConstrainTo ? null : computedProps.getMenuAvailableHeight(),
        style: {
          zIndex: 1e4,
          position: computedProps.columnFilterContextMenuPosition || "absolute"
        },
        selected,
        onSelectionChange,
        onDismiss: computedProps.hideColumnFilterContextMenu,
        constrainTo: computedProps.columnFilterContextMenuConstrainTo,
        alignPositions: computedProps.columnFilterContextMenuAlignPositions || rtl ? COLUMN_MENU_ALIGN_POSITIONS_RTL : COLUMN_MENU_ALIGN_POSITIONS,
        alignTo: computedProps.columnFilterContextMenuAlignToRef.current
      };
      var result;
      if (computedProps.initialProps.renderColumnFilterContextMenu) {
        result = computedProps.initialProps.renderColumnFilterContextMenu(menuProps, {
          cellProps,
          grid: computedPropsRef,
          props: computedProps
        });
      }
      if (result === void 0) {
        result = _react.default.createElement(_Menu.default, _objectSpread({}, menuProps));
      }
      if (computedProps.initialProps.renderGridMenu) {
        return computedProps.initialProps.renderGridMenu(result, computedProps);
      }
      return (0, _renderGridMenu.default)(result, computedProps);
    };
    exports.renderColumnFilterContextMenu = renderColumnFilterContextMenu;
    var useFilterValue = function useFilterValue2(props2, _ref, computedPropsRef) {
      var columnsMap = _ref.columnsMap, enableFiltering = _ref.enableFiltering;
      var _useProperty = (0, _useProperty5.default)(props2, "filterValue"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), filterValue = _useProperty2[0], doSetFilterValue = _useProperty2[1];
      filterValue = (0, _react.useMemo)(function() {
        return (0, _getFilterValueForColumns.default)(filterValue || [], columnsMap);
      }, [filterValue || [], columnsMap]);
      if (!filterValue.length) {
        filterValue = null;
      }
      var setFilterValue = (0, _react.useCallback)(function(filterValue2) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        filterValue2 = (0, _getFilterValueForColumns.default)(filterValue2, computedProps.columnsMap);
        var queue = (0, _batchUpdate.default)();
        queue.commit(function() {
          computedProps.setLoadDataTrigger(function(loadDataTrigger) {
            return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ["filterValue"]);
          });
          doSetFilterValue(filterValue2);
        });
      }, [doSetFilterValue]);
      return [filterValue, setFilterValue];
    };
    var isFilterable = function isFilterable2(_ref2) {
      var enableFiltering = _ref2.enableFiltering, filterValue = _ref2.filterValue;
      if (enableFiltering !== void 0) {
        return enableFiltering;
      }
      if (!Array.isArray(filterValue) || !filterValue.length) {
        return false;
      }
      return true;
    };
    var useFilters = function useFilters2(props2, computedProps, computedPropsRef) {
      var _useProperty3 = (0, _useProperty5.default)(props2, "enableFiltering"), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), enableFiltering = _useProperty4[0], setEnableFiltering = _useProperty4[1];
      var isColumnFiltered = (0, _react.useCallback)(function(col) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return false;
        }
        var filterValue = computedProps2.getColumnFilterValue(col.id);
        if (!filterValue) {
          return false;
        }
        var filterType = computedProps2.initialProps.filterTypes[filterValue.type];
        return filterValue.value !== filterType.emptyValue;
      }, []);
      var columnsMap = (0, _react.useMemo)(function() {
        return (0, _mapColumns.default)(props2.columns, {
          showWarnings: false
        });
      }, [props2.columns]);
      var _useFilterValue = useFilterValue(props2, {
        enableFiltering,
        columnsMap
      }, computedPropsRef), _useFilterValue2 = (0, _slicedToArray2.default)(_useFilterValue, 2), computedFilterValue = _useFilterValue2[0], setFilterValue = _useFilterValue2[1];
      var getMenuAvailableHeight = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return void 0;
        }
        var filtersHeight = 0;
        if (computedProps2.computedFilterable) {
          var filterNode = computedProps2.getDOMNode().querySelector(".InovuaReactDataGrid__column-header__filter-wrapper");
          if (filterNode) {
            filtersHeight = filterNode.offsetHeight;
          }
        }
        return computedProps2.size ? computedProps2.size.height - 5 + filtersHeight : void 0;
      }, []);
      var clearAllFilters = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (!computedProps2.computedFilterValueMap) {
          return;
        }
        var allFiltersValue = [];
        var headerCells = computedProps2.getColumnLayout().getHeaderCells();
        computedProps2.allColumns.forEach(function(column) {
          var filterValue = computedProps2.computedFilterValueMap[column.id];
          if (!filterValue) {
            return;
          }
          var filterType = computedProps2.initialProps.filterTypes[filterValue.type];
          var headerCell = headerCells[column.computedVisibleIndex];
          var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
            value: filterType.emptyValue
          });
          if (headerCell && headerCell.filter) {
            headerCell.filter.setValue(newFilterValue.value);
          }
          allFiltersValue.push(newFilterValue);
        });
        setFilterValue(allFiltersValue);
      }, [setFilterValue]);
      var columnFilterContextMenuAlignToRef = (0, _react.useRef)(null);
      var columnFilterContextMenuConstrainToRef = (0, _react.useRef)(null);
      var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), columnFilterContextMenuProps = _useState2[0], setColumnFilterContextMenuProps = _useState2[1];
      var showColumnFilterContextMenu = (0, _react.useCallback)(function(alignTo, cellProps) {
        var computedProps2 = computedPropsRef.current;
        if (columnFilterContextMenuProps || !computedProps2) {
          return;
        }
        columnFilterContextMenuAlignToRef.current = alignTo;
        columnFilterContextMenuConstrainToRef.current = computedProps2.columnFilterContextMenuConstrainTo || computedProps2.getDOMNode();
        if (computedProps2.hideColumnContextMenu) {
          computedProps2.hideColumnContextMenu();
        }
        setColumnFilterContextMenuProps(cellProps);
        computedProps2.notifyColumnFilterVisibleStateChange(true);
      }, [setColumnFilterContextMenuProps]);
      var hideColumnFilterContextMenu = (0, _react.useCallback)(function(node) {
        var computedProps2 = computedPropsRef.current;
        if (columnFilterContextMenuProps && computedProps2) {
          setColumnFilterContextMenuProps(null);
          computedProps2.notifyColumnFilterVisibleStateChange(false);
        }
        if (node && !node.type) {
          var filterIcon = node.querySelector(".InovuaReactDataGrid__column-header__filter-settings-icon");
          filterIcon.focus();
        }
      }, [columnFilterContextMenuProps]);
      var shouldShowFilteringMenuItems = (0, _react.useCallback)(function() {
        if (props2.showFilteringMenuItems) {
          return true;
        }
        if (computedFilterValue) {
          return true;
        }
        if (enableFiltering) {
          return true;
        }
        return false;
      }, [computedFilterValue, enableFiltering, props2.showFilteringMenuItems]);
      var computedFilterValueMap = (0, _react.useMemo)(function() {
        return computedFilterValue ? computedFilterValue.reduce(function(acc, columnFilterValue) {
          acc[columnFilterValue.name] = columnFilterValue;
          return acc;
        }, {}) : null;
      }, [computedFilterValue]);
      var computedOnColumnFilterValueChange = (0, _react.useCallback)(function(columnFilterValue) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var isBinaryOperator = computedProps2.isBinaryOperator;
        if (computedProps2.onColumnFilterValueChange) {
          computedProps2.onColumnFilterValueChange(columnFilterValue);
        }
        var computedFilterValue2 = computedProps2.computedFilterValue;
        var newFilterValue = (computedFilterValue2 || []).map(function(oldFilterValue) {
          if (oldFilterValue.name === columnFilterValue.columnId) {
            var emptyValue = getColumnFilterEmptyValue(columnFilterValue.columnId);
            if (columnFilterValue.filterValue.type === "date" || columnFilterValue.filterValue.type === "number") {
              if (isBinaryOperator(oldFilterValue.operator) && !isBinaryOperator(columnFilterValue.filterValue.operator)) {
                return _objectSpread(_objectSpread({}, columnFilterValue.filterValue), {}, {
                  value: emptyValue
                });
              }
              if (!isBinaryOperator(oldFilterValue.operator) && isBinaryOperator(columnFilterValue.filterValue.operator)) {
                return _objectSpread(_objectSpread({}, columnFilterValue.filterValue), {}, {
                  value: columnFilterValue.filterValue && columnFilterValue.filterValue.value != null && columnFilterValue.filterValue.value.start != null ? columnFilterValue.filterValue.value : {
                    start: emptyValue,
                    end: emptyValue
                  }
                });
              }
            }
            return columnFilterValue.filterValue;
          }
          return oldFilterValue;
        }).filter(function(f) {
          return !!f;
        });
        setFilterValue(newFilterValue);
      }, [setFilterValue]);
      var getColumnFilterValue = (0, _react.useCallback)(function(column) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return null;
        }
        var col = computedProps2.getColumnBy(column);
        if (!col) {
          return null;
        }
        if (!computedProps2.computedFilterValueMap) {
          return null;
        }
        return computedProps2.computedFilterValueMap[col.id];
      }, []);
      var setColumnFilterValue = (0, _react.useCallback)(function(column, value, operator) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return null;
        }
        var filterValue = getColumnFilterValue(column);
        if (!filterValue) {
          return;
        }
        var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
          value
        });
        if (operator) {
          newFilterValue.operator = operator;
        }
        var col = computedProps2.getColumnBy(column);
        var headerCells = computedProps2.getColumnLayout().getHeaderCells();
        var headerCell = headerCells[col.computedVisibleIndex];
        if (!headerCell || !headerCell.filter) {
          return;
        }
        computedProps2.computedOnColumnFilterValueChange({
          columnId: col.id,
          columnIndex: col.computedVisibleIndex,
          filterValue: newFilterValue
        });
        headerCell.filter.setValue(value);
      }, []);
      var getColumnFilterEmptyValue = (0, _react.useCallback)(function(idNameOrIndex) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var col = computedProps2.getColumnBy(idNameOrIndex);
        if (!col) {
          return;
        }
        if (!computedProps2.computedFilterValueMap) {
          return;
        }
        var filterValue = computedProps2.computedFilterValueMap[col.id];
        if (!filterValue) {
          return;
        }
        var filterType = computedProps2.initialProps.filterTypes[filterValue.type];
        return filterType.emptyValue;
      }, []);
      var clearColumnFilter = (0, _react.useCallback)(function(idNameOrIndex) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var col = computedProps2.getColumnBy(idNameOrIndex);
        if (!col) {
          return;
        }
        computedProps2.setColumnFilterValue(idNameOrIndex, getColumnFilterEmptyValue(idNameOrIndex));
      }, []);
      var isFiltered = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return false;
        }
        return (computedProps2.computedFilterValue || []).reduce(function(result, filterValue) {
          if (result) {
            return true;
          }
          var col = computedProps2.getColumnBy(filterValue.name);
          if (col && isColumnFiltered(col)) {
            return true;
          }
          return false;
        }, false);
      }, []);
      var computedFiltered = isFiltered();
      return {
        clearColumnFilter,
        computedOnColumnFilterValueChange,
        computedFilterValueMap,
        computedFilterValue,
        computedFiltered,
        computedFilterable: isFilterable({
          enableFiltering,
          filterValue: computedFilterValue
        }),
        setEnableFiltering,
        setFilterValue,
        getMenuAvailableHeight,
        showColumnFilterContextMenu,
        hideColumnFilterContextMenu,
        shouldShowFilteringMenuItems,
        renderColumnFilterContextMenu,
        columnFilterContextMenuProps,
        columnFilterContextMenuAlignToRef,
        clearAllFilters,
        getColumnFilterValue,
        setColumnFilterValue,
        isColumnFiltered
      };
    };
    var _default = useFilters;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/filters/index.js
var require_filters = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/filters/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _useFilters = _interopRequireWildcard(require_useFilters());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = {
      name: "filters",
      hook: _useFilters.default,
      renderColumnFilterContextMenu: _useFilters.renderColumnFilterContextMenu,
      defaultProps: function defaultProps() {
        return {
          columnFilterContextMenuConstrainTo: true,
          columnFilterContextMenuPosition: "absolute"
        };
      }
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/menus/useMenus/renderColumnContextMenu.js
var require_renderColumnContextMenu = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/menus/useMenus/renderColumnContextMenu.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _detectUa = require_detect_ua();
    var _Header = require_Header();
    var _Menu = _interopRequireDefault(require_Menu2());
    var _renderGridMenu = _interopRequireDefault(require_renderGridMenu());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var COLUMN_MENU_ALIGN_POSITIONS = ["tl-bl", "tr-br", "tl-tr", "tr-tl", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
    var COLUMN_MENU_ALIGN_POSITIONS_RTL = ["tr-br", "tl-bl", "tr-tl", "tl-tr", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
    var notEmpty = function notEmpty2(x) {
      return !!x;
    };
    var getTopComputedProps = function getTopComputedProps2(computedProps) {
      while (computedProps.initialProps.parentComputedProps) {
        computedProps = computedProps.initialProps.parentComputedProps;
      }
      return computedProps;
    };
    var getAlignTo = function getAlignTo2(selection, menuTools, index2) {
      var filteredTools = menuTools.filter(function(_, i) {
        return i !== Object.keys(selection).length;
      });
      var length = filteredTools.length;
      var alignTo;
      if (index2 > length) {
        alignTo = filteredTools[length - 1];
      } else if (index2 <= length) {
        alignTo = filteredTools[index2 - 1];
      }
      if (!alignTo) {
        alignTo = filteredTools[0];
      }
      return alignTo;
    };
    var _default = function _default2(computedProps, computedPropsRef) {
      var cellProps = computedProps.columnContextMenuProps;
      if (!cellProps) {
        return null;
      }
      var groupBy = computedProps.computedGroupBy;
      var visibleCountWithColumnMenu = 0;
      var visibleMap = computedProps.initialProps.columns.reduce(function(acc, col) {
        var column = computedProps.getColumnBy(col.name || col.id);
        if (column && computedProps.isColumnVisible(column)) {
          var value = column.id || column.name;
          acc[value] = column.id || column.name;
          if (column.showColumnMenuTool !== false) {
            visibleCountWithColumnMenu++;
          }
        }
        return acc;
      }, {});
      var onSelectionChange = function onSelectionChange2(selection) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (_detectUa.IS_IE) {
          computedProps2.preventIEMenuCloseRef.current = true;
          setTimeout(function() {
            computedProps2.preventIEMenuCloseRef.current = false;
          }, 100);
        }
        computedProps2.initialProps.columns.forEach(function(col) {
          var computedCol = computedProps2.getColumnBy(col);
          if (computedCol) {
            var visible = computedCol.id in selection;
            computedProps2.setColumnVisible(col, visible);
          }
        });
        if (computedProps2.updateMenuPositionOnColumnsChange) {
          requestAnimationFrame(function() {
            var menuTools = Array.prototype.slice.call(computedProps2.domRef.current.querySelectorAll(".InovuaReactDataGrid__column-header__menu-tool"));
            var mainMenu = computedProps2.domRef.current.querySelector(".InovuaReactDataGrid > .inovua-react-toolkit-menu");
            var cellInstance = computedProps2.columnContextMenuInstanceProps;
            var columnIndex = cellInstance.computedVisibleIndex;
            var alignTo = getAlignTo(selection, menuTools, columnIndex);
            if (alignTo) {
              computedProps2.updateMainMenuPosition(alignTo);
              if (mainMenu) {
                mainMenu.style.transition = "transform 200ms";
                setTimeout(function() {
                  mainMenu.style.transition = "";
                }, 200);
              }
            }
          });
        }
      };
      var currentColumn = computedProps.getColumnBy(cellProps.id);
      var colSortInfo = currentColumn.computedSortInfo;
      var lockLimit = !cellProps.computedLocked && computedProps.unlockedColumns.length <= 1;
      var isAutoLock = cellProps.autoLock && computedProps.lockedStartColumns && !!computedProps.lockedStartColumns.filter(function(c) {
        return !c.autoLock;
      }).length;
      var showColumnMenuLockOptions = cellProps.showColumnMenuLockOptions !== void 0 ? cellProps.showColumnMenuLockOptions : computedProps.initialProps.showColumnMenuLockOptions;
      if (cellProps.lockable === false) {
        showColumnMenuLockOptions = false;
      }
      var showColumnMenuGroupOptions = cellProps.showColumnMenuGroupOptions !== void 0 ? cellProps.showColumnMenuGroupOptions : computedProps.initialProps.showColumnMenuGroupOptions;
      var showColumnMenuFilterOptions = cellProps.showColumnMenuFilterOptions !== void 0 ? cellProps.showColumnMenuFilterOptions : computedProps.initialProps.showColumnMenuFilterOptions;
      var showColumnMenuSortOptions = cellProps.showColumnMenuSortOptions !== void 0 ? cellProps.showColumnMenuSortOptions : computedProps.initialProps.showColumnMenuSortOptions;
      var enableColumnAutosize = computedProps.enableColumnAutosize ? computedProps.enableColumnAutosize : computedProps.initialProps.enableColumnAutosize;
      var columnsItem = {
        label: computedProps.i18n("columns"),
        itemId: "columns",
        menuProps: {
          dismissOnClick: false
        },
        items: computedProps.getColumnsInOrder().filter(function(c) {
          return c.showInContextMenu !== false;
        }).map(function(c) {
          var value = c.id || c.name || "";
          return {
            label: (0, _Header.getCellHeader)(c, c, null, {
              currentColumn
            }),
            itemId: "column-".concat(c.id),
            value,
            disabled: c.hideable === false || visibleCountWithColumnMenu === 1 && visibleMap[value],
            name: value
          };
        })
      };
      if (computedProps.computedPivot) {
        columnsItem = null;
      }
      var items = [showColumnMenuSortOptions === false ? null : {
        label: computedProps.i18n("sortAsc"),
        itemId: "sortAsc",
        disabled: !cellProps.computedSortable || colSortInfo && colSortInfo.dir === 1,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.setColumnSortInfo(cellProps.id, 1);
          computedProps2.hideColumnContextMenu();
        }
      }, showColumnMenuSortOptions === false ? null : {
        label: computedProps.i18n("sortDesc"),
        itemId: "sortDesc",
        disabled: !cellProps.computedSortable || colSortInfo && colSortInfo.dir === -1,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.setColumnSortInfo(cellProps.id, -1);
          computedProps2.hideColumnContextMenu();
        }
      }, (computedProps.initialProps.allowUnsort || computedProps.computedIsMultiSort) && showColumnMenuSortOptions !== false ? {
        label: computedProps.i18n("unsort"),
        itemId: "unsort",
        disabled: !colSortInfo,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.unsortColumn(cellProps.id);
          computedProps2.hideColumnContextMenu();
        }
      } : null, showColumnMenuGroupOptions === false ? null : "-", showColumnMenuGroupOptions === false ? null : {
        label: computedProps.i18n("group"),
        itemId: "group",
        disabled: !groupBy || groupBy.indexOf(cellProps.id) !== -1 || currentColumn.groupBy === false,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.addGroupByColumn(cellProps.id);
          computedProps2.hideColumnContextMenu();
        }
      }, showColumnMenuGroupOptions === false ? null : {
        label: computedProps.i18n("ungroup"),
        itemId: "ungroup",
        disabled: !groupBy || groupBy.indexOf(cellProps.id) === -1 || currentColumn.groupBy === false,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.removeGroupByColumn(cellProps.id);
          computedProps2.hideColumnContextMenu();
        }
      }, showColumnMenuLockOptions === false ? null : "-", showColumnMenuLockOptions === false ? null : {
        label: computedProps.i18n("lockStart"),
        itemId: "lockStart",
        disabled: cellProps.computedLocked === "start" || lockLimit,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.setColumnLocked(cellProps.id, "start");
          computedProps2.hideColumnContextMenu();
        }
      }, showColumnMenuLockOptions === false ? null : {
        label: computedProps.i18n("lockEnd"),
        itemId: "lockEnd",
        disabled: cellProps.computedLocked === "end" || lockLimit || isAutoLock,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.setColumnLocked(cellProps.id, "end");
          computedProps2.hideColumnContextMenu();
        }
      }, showColumnMenuLockOptions === false ? null : {
        label: computedProps.i18n("unlock"),
        itemId: "unlock",
        disabled: !cellProps.computedLocked || isAutoLock,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.setColumnLocked(cellProps.id, false);
          computedProps2.hideColumnContextMenu();
        }
      }, computedProps.enableColumnAutosize ? "-" : null, computedProps.enableColumnAutosize === false ? null : {
        label: computedProps.i18n("autoSizeToFit"),
        itemId: "autoSizeToFit",
        menuProps: {
          dismissOnClick: true
        },
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          if (computedProps2.setColumnSizesToFit) {
            computedProps2.setColumnSizesToFit();
            computedProps2.hideColumnContextMenu();
          }
        }
      }, computedProps.enableColumnAutosize === false ? null : {
        label: computedProps.i18n("autoresizeThisColumn"),
        itemId: "autoresizeThisColumn",
        menuProps: {
          dismissOnClick: true
        },
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          var columnId = cellProps.id;
          if (computedProps2.setColumnSizeAuto) {
            computedProps2.setColumnSizeAuto(columnId);
            computedProps2.hideColumnContextMenu();
          }
        }
      }, enableColumnAutosize === false ? null : {
        label: computedProps.i18n("autoresizeAllColumns"),
        itemId: "autoresizeAllColumns",
        menuProps: {
          dismissOnClick: true
        },
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          if (computedProps2.setColumnsSizesAuto) {
            computedProps2.setColumnsSizesAuto();
            computedProps2.hideColumnContextMenu();
          }
        }
      }, columnsItem ? "-" : null, columnsItem].filter(notEmpty);
      if (items[0] === "-") {
        items = items.slice(1);
      }
      if (computedProps.initialProps.enableFiltering !== false && showColumnMenuFilterOptions !== false) {
        var isFilterable = computedProps.computedFilterable;
        var showFilteringMenuItems = computedProps.shouldShowFilteringMenuItems ? computedProps.shouldShowFilteringMenuItems() : false;
        if (showFilteringMenuItems) {
          items.push("-");
          items.push({
            label: computedProps.i18n("showFilteringRow", "Show Filtering Row"),
            itemId: "showFilteringRow",
            disabled: isFilterable,
            onClick: function onClick() {
              var computedProps2 = computedPropsRef.current;
              if (!computedProps2) {
                return;
              }
              computedProps2.setEnableFiltering(true);
              computedProps2.hideColumnContextMenu();
            }
          });
          items.push({
            label: computedProps.i18n("hideFilteringRow", "Hide Filtering Row"),
            itemId: "hideFilteringRow",
            disabled: !isFilterable,
            onClick: function onClick() {
              var computedProps2 = computedPropsRef.current;
              if (!computedProps2) {
                return;
              }
              computedProps2.setEnableFiltering(false);
              computedProps2.hideColumnContextMenu();
            }
          });
        }
      }
      items.forEach(function(item) {
        var onClick = item.onClick;
        if (onClick && _detectUa.IS_MS_BROWSER) {
          item.onClick = function() {
            requestAnimationFrame(onClick);
          };
        }
      });
      var constrainToComputedProps = getTopComputedProps(computedProps);
      var constrainTo = true;
      var menuProps = {
        updatePositionOnScroll: computedProps.updateMenuPositionOnScroll,
        stopBlurPropagation: false,
        maxHeight: constrainToComputedProps.initialProps.columnContextMenuConstrainTo ? null : constrainTo === true ? null : computedProps.getMenuAvailableHeight(),
        nativeScroll: !_detectUa.IS_MS_BROWSER,
        autoFocus: true,
        enableSelection: true,
        defaultSelected: visibleMap,
        onDismiss: function onDismiss() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.hideColumnContextMenu();
        },
        onSelectionChange,
        style: {
          zIndex: 11e4,
          position: computedProps.initialProps.columnContextMenuPosition || "absolute"
        },
        items,
        theme: computedProps.theme,
        constrainTo,
        alignPositions: computedProps.initialProps.columnContextMenuAlignPositions || computedProps.rtl ? COLUMN_MENU_ALIGN_POSITIONS_RTL : COLUMN_MENU_ALIGN_POSITIONS,
        alignTo: computedProps.columnContextMenuInfoRef.current.menuAlignTo
      };
      var result;
      if (computedProps.initialProps.renderColumnContextMenu) {
        result = computedProps.initialProps.renderColumnContextMenu(menuProps, {
          cellProps,
          grid: computedProps.publicAPI,
          computedProps,
          computedPropsRef
        });
      }
      if (result === void 0) {
        result = _react.default.createElement(_Menu.default, _objectSpread({}, menuProps));
      }
      if (computedProps.initialProps.renderGridMenu) {
        return computedProps.initialProps.renderGridMenu(result, computedProps);
      }
      return (0, _renderGridMenu.default)(result, computedProps);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/menus/useMenus/renderRowContextMenu.js
var require_renderRowContextMenu = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/menus/useMenus/renderRowContextMenu.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _react = _interopRequireDefault(require_react());
    var _detectUa = require_detect_ua();
    var _Menu = _interopRequireDefault(require_Menu2());
    var _renderGridMenu = _interopRequireDefault(require_renderGridMenu());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var ROW_MENU_ALIGN_POSITIONS = ["tl-bl", "tr-br", "tl-tr", "tr-tl", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
    var ROW_MENU_ALIGN_POSITIONS_RTL = ["tr-br", "tl-bl", "tr-tl", "tl-tr", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
    var getTopComputedProps = function getTopComputedProps2(computedProps) {
      while (computedProps.initialProps.parentComputedProps) {
        computedProps = computedProps.initialProps.parentComputedProps;
      }
      return computedProps;
    };
    var _default = function _default2(computedProps, computedPropsRef) {
      var rowProps = computedProps.rowContextMenuProps;
      if (!rowProps) {
        return null;
      }
      var rowContextMenuInfo = computedProps.rowContextMenuInfoRef;
      if (!rowProps || !rowContextMenuInfo.current) {
        return null;
      }
      var cellProps = rowContextMenuInfo.current.cellProps;
      var constrainToComputedProps = getTopComputedProps(computedProps);
      var items = [];
      var menuProps = {
        updatePositionOnScroll: computedProps.updateMenuPositionOnScroll,
        stopBlurPropagation: false,
        maxHeight: constrainToComputedProps.initialProps.columnContextMenuConstrainTo ? null : computedProps.getMenuAvailableHeight(),
        autoFocus: true,
        theme: computedProps.theme,
        onDismiss: computedProps.hideRowContextMenu,
        nativeScroll: !_detectUa.IS_MS_BROWSER,
        style: {
          zIndex: 11e4,
          position: computedProps.initialProps.rowContextMenuPosition || "absolute"
        },
        items,
        constrainTo: constrainToComputedProps.columnContextMenuInfoRef.current.getMenuConstrainTo(),
        alignPositions: computedProps.initialProps.rowContextMenuAlignPositions || computedProps.rtl ? ROW_MENU_ALIGN_POSITIONS_RTL : ROW_MENU_ALIGN_POSITIONS,
        alignTo: computedProps.rowContextMenuInfoRef.current.menuAlignTo
      };
      var result;
      if (computedProps.initialProps.renderRowContextMenu) {
        result = computedProps.initialProps.renderRowContextMenu(menuProps, {
          rowProps,
          cellProps,
          grid: computedProps.publicAPI,
          computedProps,
          computedPropsRef
        });
      }
      if (result === void 0) {
        result = _react.default.createElement(_Menu.default, _objectSpread({}, menuProps));
      }
      if (computedProps.initialProps.renderGridMenu) {
        return computedProps.initialProps.renderGridMenu(result, computedProps);
      }
      return (0, _renderGridMenu.default)(result, computedProps);
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/menus/useMenus/index.js
var require_useMenus = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/menus/useMenus/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "renderColumnContextMenu", {
      enumerable: true,
      get: function get() {
        return _renderColumnContextMenu.default;
      }
    });
    Object.defineProperty(exports, "renderRowContextMenu", {
      enumerable: true,
      get: function get() {
        return _renderRowContextMenu.default;
      }
    });
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = require_react();
    var _detectUa = require_detect_ua();
    var _region = _interopRequireDefault(require_region());
    var _getGlobal = require_getGlobal();
    var _renderColumnContextMenu = _interopRequireDefault(require_renderColumnContextMenu());
    var _renderRowContextMenu = _interopRequireDefault(require_renderRowContextMenu());
    var globalObject = (0, _getGlobal.getGlobal)();
    var _default = function _default2(props2, computedProps, computedPropsRef) {
      var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), columnContextMenuProps = _useState2[0], setColumnContextMenuProps = _useState2[1];
      var _useState3 = (0, _react.useState)(null), _useState4 = (0, _slicedToArray2.default)(_useState3, 2), rowContextMenuProps = _useState4[0], setRowContextMenuProps = _useState4[1];
      var _useState5 = (0, _react.useState)(null), _useState6 = (0, _slicedToArray2.default)(_useState5, 2), columnContextMenuInstanceProps = _useState6[0], setColumnContextMenuInstanceProps = _useState6[1];
      var getConstrainRegion = function getConstrainRegion2(computedProps2) {
        if (!computedProps2.parentComputedProps) {
          return document.documentElement;
        }
        var node = computedProps2.getDOMNode();
        node = node ? node.querySelector(".InovuaReactDataGrid__virtual-list") || node : node;
        return node;
      };
      var getColumnMenuConstrainTo = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        return computedProps2.initialProps.columnContextMenuConstrainTo || getConstrainRegion(computedProps2);
      }, []);
      var getRowMenuConstrainTo = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        return computedProps2.initialProps.rowContextMenuConstrainTo || getConstrainRegion(computedProps2);
      }, []);
      var columnContextMenuIndex = (0, _react.useRef)(-1);
      var preventIEMenuCloseRef = (0, _react.useRef)(false);
      var columnContextMenuInfoRef = (0, _react.useRef)({
        menuAlignTo: null,
        getMenuConstrainTo: getColumnMenuConstrainTo,
        menuOnHide: function menuOnHide() {
        }
      });
      var rowContextMenuInfoRef = (0, _react.useRef)({
        menuAlignTo: null,
        getMenuConstrainTo: getRowMenuConstrainTo,
        menuOnHide: function menuOnHide() {
        }
      });
      var hideColumnContextMenu = (0, _react.useCallback)(function() {
        if (_detectUa.IS_IE && preventIEMenuCloseRef.current) {
          return;
        }
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.columnContextMenuProps) {
          var columnContextMenuOnHide = columnContextMenuInfoRef.current.menuOnHide;
          if (typeof columnContextMenuOnHide == "function") {
            columnContextMenuOnHide();
          }
          computedProps2.setColumnContextMenuProps(null);
        }
      }, []);
      var hideRowContextMenu = (0, _react.useCallback)(function() {
        if (_detectUa.IS_IE && preventIEMenuCloseRef.current) {
          return;
        }
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.preventBlurOnContextMenuOpen && computedProps2.preventBlurOnContextMenuOpen.current) {
          computedProps2.preventBlurOnContextMenuOpen.current = false;
        }
        if (computedProps2.rowContextMenuProps) {
          var rowContextMenuOnHide = rowContextMenuInfoRef.current.menuOnHide;
          if (typeof rowContextMenuOnHide == "function") {
            rowContextMenuOnHide();
          }
          computedProps2.setRowContextMenuProps(null);
        }
      }, []);
      var showColumnContextMenu = (0, _react.useCallback)(function(alignTo, cellProps, _ref, onHide) {
        var computedVisibleIndex = _ref.computedVisibleIndex;
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.columnContextMenuProps) {
          computedProps2.hideColumnContextMenu();
          return;
        }
        columnContextMenuIndex.current = cellProps.columnIndex;
        columnContextMenuInfoRef.current = {
          menuAlignTo: alignTo,
          getMenuConstrainTo: getColumnMenuConstrainTo,
          menuOnHide: onHide
        };
        if (computedProps2.hideColumnFilterContextMenu) {
          computedProps2.hideColumnFilterContextMenu();
        }
        computedProps2.setColumnContextMenuProps(cellProps);
        if (computedProps2.setColumnContextMenuInstanceProps) {
          computedProps2.setColumnContextMenuInstanceProps({
            computedVisibleIndex
          });
        }
      }, []);
      var getMenuAvailableHeight = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return 0;
        }
        var filtersHeight = 0;
        if (computedProps2.computedIsFilterable) {
          var filterNode = computedProps2.getDOMNode().querySelector(".InovuaReactDataGrid__column-header__filter-wrapper");
          if (filterNode) {
            filtersHeight = filterNode.offsetHeight;
          }
        }
        var size = computedProps2.initialProps.parentComputedProps ? computedProps2.initialProps.parentComputedProps.size : computedProps2.size;
        var result = size ? size.height - 5 + filtersHeight : 0;
        return result;
      }, []);
      var onRowContextMenu = (0, _react.useCallback)(function(rowProps, event2) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var initialProps = computedProps2.initialProps;
        if (initialProps.onRowContextMenu) {
          initialProps.onRowContextMenu(rowProps, event2);
        }
        if (!initialProps.renderRowContextMenu) {
          return;
        }
        if (computedProps2.preventBlurOnContextMenuOpen) {
          computedProps2.preventBlurOnContextMenuOpen.current = true;
        }
        event2.preventDefault();
        var cellProps = event2.nativeEvent ? event2.nativeEvent.__cellProps : void 0;
        var alignTo = _region.default.from(event2);
        alignTo.shift({
          top: -globalObject.scrollY,
          left: -globalObject.scrollX
        });
        showRowContextMenu(alignTo, rowProps, cellProps, function() {
        });
      }, []);
      var showRowContextMenu = (0, _react.useCallback)(function(alignTo, rowProps, cellProps, onHide) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.rowContextMenuProps) {
          computedProps2.hideRowContextMenu();
          return;
        }
        rowContextMenuInfoRef.current = {
          menuAlignTo: alignTo,
          getMenuConstrainTo: getRowMenuConstrainTo,
          cellProps,
          menuOnHide: onHide
        };
        if (computedProps2.hideRowFilterContextMenu) {
          computedProps2.hideRowFilterContextMenu();
        }
        computedProps2.setRowContextMenuProps(rowProps);
      }, []);
      return {
        onRowContextMenu,
        getMenuAvailableHeight,
        showRowContextMenu,
        showColumnContextMenu,
        hideColumnContextMenu,
        hideRowContextMenu,
        columnContextMenuProps,
        columnContextMenuInstanceProps,
        rowContextMenuProps,
        columnContextMenuInfoRef,
        rowContextMenuInfoRef,
        setColumnContextMenuProps,
        setColumnContextMenuInstanceProps,
        setRowContextMenuProps,
        preventIEMenuCloseRef,
        columnContextMenuIndex
      };
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/menus/index.js
var require_menus = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/menus/index.js"(exports) {
    "use strict";
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _useMenus = _interopRequireWildcard(require_useMenus());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = {
      name: "menus",
      hook: _useMenus.default,
      renderColumnContextMenu: _useMenus.renderColumnContextMenu,
      renderRowContextMenu: _useMenus.renderRowContextMenu,
      defaultProps: function defaultProps() {
        return {
          showColumnMenuTool: true
        };
      }
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/cell-selection/useActiveCell.js
var require_useActiveCell = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/cell-selection/useActiveCell.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _useProperty3 = _interopRequireDefault(require_useProperty());
    var _react = require_react();
    var _clamp = _interopRequireDefault(require_clamp());
    var _usePrevious = _interopRequireDefault(require_usePrevious());
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var _throttle = _interopRequireDefault(require_throttle2());
    var useActiveCell = function useActiveCell2(props2, computedPropsRef) {
      var _useProperty = (0, _useProperty3.default)(props2, "activeCell"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), computedActiveCell = _useProperty2[0], doSetActiveCell = _useProperty2[1];
      if (!props2.enableKeyboardNavigation) {
        computedActiveCell = void 0;
      }
      var setActiveCell = (0, _react.useCallback)(function(activeCell, queue) {
        var computedProps = computedPropsRef.current;
        if (!computedProps || !computedProps.computedCellNavigationEnabled) {
          return;
        }
        var computedActiveCell2 = computedProps.computedActiveCell, data = computedProps.data, visibleColumns = computedProps.visibleColumns;
        var shouldCommit = !queue;
        queue = queue || (0, _batchUpdate.default)();
        if (activeCell) {
          var _activeCell = activeCell, _activeCell2 = (0, _slicedToArray2.default)(_activeCell, 2), activeCellRowIndex = _activeCell2[0], activeCellColumnIndex = _activeCell2[1];
          activeCellRowIndex = (0, _clamp.default)(activeCellRowIndex, 0, data.length - 1);
          activeCellColumnIndex = (0, _clamp.default)(activeCellColumnIndex, 0, visibleColumns.length - 1);
          var col = computedProps.getColumnBy(activeCellColumnIndex);
          if (col && col.cellSelectable === false) {
            return;
          }
          if (!data || data.__group || activeCellRowIndex == null || activeCellColumnIndex == null) {
            queue(function() {
              doSetActiveCell(null);
              computedProps.setLastCellInRange("");
            });
            if (shouldCommit) {
              queue.commit();
            }
            return;
          }
          activeCell = [activeCellRowIndex, activeCellColumnIndex];
          if (activeCell === computedActiveCell2 || computedActiveCell2 && activeCell && computedActiveCell2[0] === activeCell[0] && computedActiveCell2[1] === activeCell[1]) {
            return;
          }
        }
        queue(function() {
          doSetActiveCell(activeCell);
          computedProps.setLastCellInRange("");
        });
        if (shouldCommit) {
          queue.commit();
        }
      }, []);
      var oldActiveCell = (0, _usePrevious.default)(computedActiveCell, null);
      (0, _react.useLayoutEffect)(function() {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        if (oldActiveCell !== computedActiveCell && computedActiveCell) {
          var _computedActiveCell = computedActiveCell, _computedActiveCell2 = (0, _slicedToArray2.default)(_computedActiveCell, 2), rowIndex = _computedActiveCell2[0], columnIndex = _computedActiveCell2[1];
          if (rowIndex == null || columnIndex == null) {
            return;
          }
          var top = !oldActiveCell || rowIndex < oldActiveCell[0];
          var right = !oldActiveCell || columnIndex > oldActiveCell[1];
          var scrollToColumnIndex = (0, _clamp.default)(columnIndex + (right ? 0 : -0), 0, computedProps.visibleColumns.length - 1);
          computedProps.scrollToCell({
            rowIndex,
            columnIndex: scrollToColumnIndex
          }, {
            top,
            right
          });
        }
      }, [computedActiveCell, oldActiveCell]);
      var getCellSelectionBetween = (0, _react.useCallback)(function(start, end) {
        var computedProps = computedPropsRef.current;
        if (!start || !end || !computedProps) {
          return {};
        }
        var startRow = Math.min(start[0], end[0]);
        var startCol = Math.min(start[1], end[1]);
        var endRow = Math.max(start[0], end[0]);
        var endCol = Math.max(start[1], end[1]);
        var range = {};
        var groupBy = computedProps.computedGroupBy;
        var dataSource = groupBy ? computedProps.data : [];
        var current;
        for (var row = startRow; row <= endRow; row++) {
          if (groupBy) {
            current = dataSource[row];
            if (!current) {
              break;
            }
            if (current.__group) {
              continue;
            }
          }
          for (var col = startCol; col <= endCol; col++) {
            range[getCellSelectionKey(row, col)] = true;
          }
        }
        return range;
      }, []);
      var getCellSelectionKey = (0, _react.useCallback)(function(cellProps, col) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return -1;
        }
        var rowKey;
        var colKey;
        if (typeof cellProps === "string") {
          return cellProps;
        }
        if (typeof cellProps === "number" && typeof col === "number") {
          rowKey = cellProps;
          colKey = col;
        } else {
          if (cellProps) {
            rowKey = cellProps.rowIndex;
            colKey = cellProps.columnIndex;
          }
        }
        if (!computedProps.cellSelectionByIndex) {
          return computedProps.getCellSelectionIdKey(rowKey, colKey);
        }
        return "".concat([rowKey, colKey]);
      }, [computedPropsRef, props2.columns]);
      var getCellSelectionIdKey = (0, _react.useCallback)(function(rowIndex, columnIndex) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return -1;
        }
        var col = computedProps.getColumnBy(columnIndex);
        if (!col) {
          return -1;
        }
        var colId = col.id || col.name;
        var item = computedProps.getItemAt(rowIndex);
        if (!item) {
          return "";
        }
        var rowId = computedProps.getItemId(item);
        return "".concat([rowId, colId]);
      }, []);
      var incrementActiveCell = (0, _react.useCallback)(function(direction) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var computedActiveCell2 = computedProps.computedActiveCell;
        if (!computedActiveCell2) {
          computedActiveCell2 = [0, 0];
        }
        var _direction = (0, _slicedToArray2.default)(direction, 2), row = _direction[0], col = _direction[1];
        var data = computedProps.data, visibleColumns = computedProps.visibleColumns, computedGroupBy = computedProps.computedGroupBy, groupColumn = computedProps.groupColumn;
        var maxRow = data.length - 1;
        var columns = visibleColumns;
        var maxCol = columns.length - 1;
        var groupBy = computedGroupBy;
        var minCol = groupBy && !groupColumn ? groupBy.length : 0;
        var rowIndex = computedActiveCell2[0];
        var colIndex = computedActiveCell2[1];
        if (row) {
          var rowSign = row < 0 ? -1 : 1;
          var rowAdd = row;
          while (data[rowIndex + rowAdd] && data[rowIndex + rowAdd].__group) {
            rowIndex += rowAdd;
            rowAdd = rowSign;
          }
          rowIndex += rowAdd;
        }
        if (col) {
          var colSign = col < 0 ? -1 : 1;
          var colAdd = col;
          while (columns[colIndex + colAdd] && columns[colIndex + colAdd].cellSelectable === false) {
            colIndex += colSign;
            colAdd = colSign;
          }
          colIndex += colAdd;
        }
        rowIndex = (0, _clamp.default)(rowIndex, 0, maxRow);
        colIndex = (0, _clamp.default)(colIndex, minCol, maxCol);
        if (computedProps.activeCellThrottle) {
          (0, _throttle.default)(function() {
            return computedProps.setActiveCell([rowIndex, colIndex]);
          }, computedProps.activeCellThrottle, {
            trailing: true,
            leading: false
          });
        } else {
          computedProps.setActiveCell([rowIndex, colIndex]);
        }
      }, []);
      return {
        getCellSelectionBetween,
        getCellSelectionIdKey,
        computedActiveCell,
        setActiveCell,
        getCellSelectionKey,
        incrementActiveCell
      };
    };
    var _default = useActiveCell;
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/cell-selection/useCellSelection.js
var require_useCellSelection = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/cell-selection/useCellSelection.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useCellSelection = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _react = require_react();
    var _useProperty3 = _interopRequireDefault(require_useProperty());
    var _batchUpdate = _interopRequireDefault(require_batchUpdate());
    var _clamp = _interopRequireDefault(require_clamp());
    var _useActiveCell2 = _interopRequireDefault(require_useActiveCell());
    var _usePrevious = _interopRequireDefault(require_usePrevious());
    var _useNamedState3 = _interopRequireDefault(require_useNamedState());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var getFirstSelectedCell = function getFirstSelectedCell2(cellSelection) {
      return cellSelection.sort(function(cell1, cell2) {
        if (cell1[0] < cell2[0]) {
          return -1;
        } else if (cell1[0] > cell2[0]) {
          return 1;
        }
        return cell1[1] < cell2[1] ? -1 : 1;
      })[0];
    };
    var useCellSelection = function useCellSelection2(props2, _ref, computedPropsRef) {
      var rowSelectionEnabled = _ref.rowSelectionEnabled, hasRowNavigation = _ref.hasRowNavigation, listenOnCellEnter = _ref.listenOnCellEnter;
      var _useProperty = (0, _useProperty3.default)(props2, "cellSelection"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), cellSelection = _useProperty2[0], setCellSelection = _useProperty2[1];
      var _useNamedState = (0, _useNamedState3.default)(false, props2.context, "bulkUpdateMouseDown"), _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2), bulkUpdateMouseDown = _useNamedState2[0], setBulkUpdateMouseDown = _useNamedState2[1];
      var _useActiveCell = (0, _useActiveCell2.default)(props2, computedPropsRef), computedActiveCell = _useActiveCell.computedActiveCell, getCellSelectionIdKey = _useActiveCell.getCellSelectionIdKey, getCellSelectionBetween = _useActiveCell.getCellSelectionBetween, setActiveCell = _useActiveCell.setActiveCell, getCellSelectionKey = _useActiveCell.getCellSelectionKey, incrementActiveCell = _useActiveCell.incrementActiveCell;
      var cellSelectionEnabled = !rowSelectionEnabled ? !!cellSelection : false;
      if (rowSelectionEnabled || hasRowNavigation) {
        computedActiveCell = void 0;
      }
      var cellNavigationEnabled = computedActiveCell !== void 0;
      if (cellSelection) {
        cellNavigationEnabled = props2.enableKeyboardNavigation !== false && !hasRowNavigation ? true : computedActiveCell !== void 0 || !!cellSelection;
      }
      if (props2.enableKeyboardNavigation === false) {
        cellNavigationEnabled = false;
      }
      var cellMultiSelectionEnabledRef = (0, _react.useRef)(false);
      cellMultiSelectionEnabledRef.current = cellSelectionEnabled && props2.multiSelect !== false;
      var cellMultiSelectionEnabled = cellMultiSelectionEnabledRef.current;
      var prevMultiSelectionEnabled = (0, _usePrevious.default)(cellMultiSelectionEnabled, cellMultiSelectionEnabled);
      (0, _react.useEffect)(function() {
        if (prevMultiSelectionEnabled && !cellMultiSelectionEnabled) {
          setCellSelection({});
        }
      }, [cellMultiSelectionEnabled, prevMultiSelectionEnabled]);
      var onCellEnter = (0, _react.useMemo)(function() {
        return listenOnCellEnter ? function(event2, _ref2) {
          var columnIndex = _ref2.columnIndex, rowIndex = _ref2.rowIndex;
          var computedProps = computedPropsRef.current;
          if (!computedProps) {
            return;
          }
          var data = computedProps.getItemAt(rowIndex);
          if (!data || data.__group) {
            return;
          }
          var col = computedProps.getColumnBy(columnIndex);
          if (col && col.cellSelectable === false) {
            return;
          }
          var groupBy = computedProps.computedGroupBy;
          var minCol = groupBy ? groupBy.length : 0;
          if (columnIndex < minCol) {
            return;
          }
          var range = computedProps.getCellSelectionBetween(computedProps.selectionFixedCell || computedProps.computedActiveCell || computedProps.lastSelectedCell, [rowIndex, columnIndex]);
          var queue = (0, _batchUpdate.default)();
          queue(function() {
            computedProps.setCellSelection(range);
            computedProps.setLastCellInRange(Object.keys(range).pop() || "");
          });
          var direction = computedProps.cellDragStartRowIndex != null ? rowIndex - computedProps.cellDragStartRowIndex : rowIndex;
          var sign = direction < 0 ? -1 : direction > 0 ? 1 : 0;
          var scrollToRowIndex = (0, _clamp.default)(rowIndex + sign, 0, computedProps.count - 1);
          var visible = computedProps.isCellVisible({
            columnIndex,
            rowIndex: scrollToRowIndex
          });
          if (visible !== true) {
            visible = visible;
            var left = visible.leftDiff < 0;
            var top = visible.topDiff < 0;
            computedProps.scrollToCell({
              columnIndex,
              rowIndex: scrollToRowIndex
            }, {
              top,
              left
            });
          }
          queue.commit();
        } : null;
      }, [listenOnCellEnter]);
      var getContinuousSelectedRangeFor = function getContinuousSelectedRangeFor2(selectionMap, cell) {
        if (!cell) {
          return [];
        }
        selectionMap = selectionMap || {};
        var _cell = (0, _slicedToArray2.default)(cell, 2), row = _cell[0], col = _cell[1];
        var key = getCellSelectionKey(row, col);
        var range = [];
        while (selectionMap[key]) {
          range.push([row, col]);
          key = getCellSelectionKey(row - 1, col - 1);
          if (selectionMap[key]) {
            row -= 1;
            col -= 1;
            continue;
          }
          if (!selectionMap[key]) {
            key = getCellSelectionKey(row - 1, col);
          }
          if (selectionMap[key]) {
            row -= 1;
            continue;
          }
          if (!selectionMap[key]) {
            key = getCellSelectionKey(row, col - 1);
            col -= 1;
          }
        }
        return range;
      };
      var toggleActiveCellSelection = (0, _react.useCallback)(function(fakeEvent) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var computedActiveCell2 = computedProps.computedActiveCell;
        if (!computedActiveCell2) {
          return;
        }
        var _computedActiveCell = (0, _slicedToArray2.default)(computedActiveCell2, 2), rowIndex = _computedActiveCell[0], columnIndex = _computedActiveCell[1];
        var column = computedProps.getColumnBy(columnIndex);
        if (column && column.cellSelectable === false) {
          return;
        }
        var selected = isCellSelected(rowIndex, columnIndex);
        var event2 = fakeEvent || {
          ctrlKey: selected
        };
        computedProps.onCellClickAction(event2, {
          rowIndex,
          columnIndex
        });
      }, []);
      var isCellSelected = (0, _react.useCallback)(function(row, col) {
        if (row && (0, _typeof2.default)(row) === "object") {
          col = row.columnIndex;
          row = row.rowIndex;
        }
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        if (computedProps.computedCellSelection) {
          var key = computedProps.getCellSelectionKey(row, col);
          return !!computedProps.computedCellSelection[key];
        }
        return false;
      }, []);
      var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), cellDragStartRowIndex = _useState2[0], setCellDragStartRowIndex = _useState2[1];
      var cellSelectionRef = (0, _react.useRef)(cellSelection);
      cellSelectionRef.current = cellSelection;
      var onCellSelectionDraggerMouseDown = (0, _react.useMemo)(function() {
        if (cellMultiSelectionEnabled && cellSelectionRef.current) {
          var _onCellSelectionDraggerMouseDown = function _onCellSelectionDraggerMouseDown2(event2, _ref3, selectionFixedCell) {
            var columnIndex = _ref3.columnIndex, rowIndex = _ref3.rowIndex;
            var computedProps = computedPropsRef.current;
            if (!computedProps) {
              return;
            }
            var column = computedProps.getColumnBy(columnIndex);
            if (column && column.cellSelectable === false) {
              return;
            }
            if (!selectionFixedCell) {
              var currentCell = [rowIndex, columnIndex];
              var groupBy = computedProps.computedGroupBy;
              var hasGroupBy = groupBy && groupBy.length;
              var currentRange = !hasGroupBy ? getContinuousSelectedRangeFor(computedProps.computedCellSelection, currentCell) : [];
              selectionFixedCell = !hasGroupBy ? getFirstSelectedCell(currentRange.length ? currentRange : [currentCell]) : computedProps.computedActiveCell || computedProps.lastSelectedCell;
            }
            var fn = function fn2() {
              computedProps.setListenOnCellEnter(false, fn2);
              setCellDragStartRowIndex(null);
              computedProps.setSelectionFixedCell(null);
            };
            var queue = (0, _batchUpdate.default)();
            queue(function() {
              setCellDragStartRowIndex(rowIndex);
              if (selectionFixedCell === void 0) {
                selectionFixedCell = null;
              }
              computedProps.setSelectionFixedCell(selectionFixedCell);
              computedProps.setListenOnCellEnter(true, fn);
            });
            queue.commit();
          };
          return _onCellSelectionDraggerMouseDown;
        }
        return null;
      }, [cellMultiSelectionEnabled]);
      var cellContentRef = (0, _react.useRef)(null);
      var computedCellBulkUpdateMouseDown = (0, _react.useCallback)(function(_event, _cellProps) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        if (!computedProps.enableCellBulkUpdate) {
          return;
        }
        var computedActiveCell2 = computedProps.computedActiveCell, data = computedProps.data;
        if (!computedActiveCell2) {
          return;
        }
        setBulkUpdateMouseDown(true);
        var _computedActiveCell2 = (0, _slicedToArray2.default)(computedActiveCell2, 2), activeRow = _computedActiveCell2[0], activeColumn = _computedActiveCell2[1];
        var row = data[activeRow];
        var column = computedProps.getColumnBy(activeColumn);
        var columnName = column.name;
        var cellContent = columnName ? row[columnName] : null;
        cellContentRef.current = cellContent;
      }, []);
      var computedCellBulkUpdateMouseUp = (0, _react.useCallback)(function(_event) {
        setBulkUpdateMouseDown(false);
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var cellContent = cellContentRef.current;
        if (!cellContent) {
          return;
        }
        if (!computedProps.enableCellBulkUpdate) {
          return;
        }
        var cellSelectionMap = computedProps.computedCellSelection;
        if (!cellSelectionMap) {
          return;
        }
        var dataMap = {};
        Object.keys(cellSelectionMap).map(function(key) {
          var _key$split = key.split(","), _key$split2 = (0, _slicedToArray2.default)(_key$split, 2), rowId = _key$split2[0], columnName = _key$split2[1];
          if (!dataMap[rowId]) {
            dataMap[rowId] = (0, _defineProperty2.default)({}, columnName, cellContent);
          }
          {
            dataMap[rowId] = _objectSpread(_objectSpread({}, dataMap[rowId]), {}, (0, _defineProperty2.default)({}, columnName, cellContent));
          }
        });
        var dataArray = Object.keys(dataMap).map(function(key) {
          var index2 = -1;
          index2 = computedProps.getItemIndexById(key);
          if (index2 === -1) {
            index2 = computedProps.getItemIndexById(Number(key));
          }
          if (index2 > -1) {
            var item = computedProps.getItemAt(index2);
            var itemId = computedProps.getItemId(item);
            return _objectSpread({
              id: itemId
            }, dataMap[key]);
          }
        });
        computedProps.setItemsAt(dataArray, {
          replace: false
        });
        cellContentRef.current = null;
      }, []);
      return {
        onCellEnter,
        toggleActiveCellSelection,
        cellDragStartRowIndex,
        setCellDragStartRowIndex,
        onCellSelectionDraggerMouseDown,
        computedCellBulkUpdateMouseDown,
        bulkUpdateMouseDown,
        computedCellBulkUpdateMouseUp,
        getCellSelectionBetween,
        computedActiveCell,
        incrementActiveCell,
        getCellSelectionIdKey,
        setActiveCell,
        getCellSelectionKey,
        cellSelectionEnabled,
        cellNavigationEnabled,
        cellMultiSelectionEnabled,
        computedCellSelection: cellSelection,
        setCellSelection
      };
    };
    exports.useCellSelection = useCellSelection;
  }
});

// node_modules/@inovua/reactdatagrid-community/plugins/cell-selection/index.js
var require_cell_selection = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/plugins/cell-selection/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _useCellSelection = require_useCellSelection();
    var _default = {
      name: "cell-selection",
      hook: _useCellSelection.useCellSelection,
      defaultProps: function defaultProps() {
        return {};
      }
    };
    exports.default = _default;
  }
});

// node_modules/@inovua/reactdatagrid-community/index.js
var require_reactdatagrid_community = __commonJS({
  "node_modules/@inovua/reactdatagrid-community/index.js"(exports) {
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.plugins = exports.default = void 0;
    var _factory = _interopRequireDefault(require_factory());
    var _sortableColumns = _interopRequireDefault(require_sortable_columns());
    var _filters = _interopRequireDefault(require_filters());
    var _menus = _interopRequireDefault(require_menus());
    var _cellSelection = _interopRequireDefault(require_cell_selection());
    var plugins = [_sortableColumns.default, _filters.default, _menus.default, _cellSelection.default];
    exports.plugins = plugins;
    var ReactDataGrid = (0, _factory.default)({
      plugins
    }, "community");
    var _default = ReactDataGrid;
    exports.default = _default;
  }
});
export default require_reactdatagrid_community();
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=@inovua_reactdatagrid-community.js.map
