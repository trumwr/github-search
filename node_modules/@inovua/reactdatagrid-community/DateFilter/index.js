/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _Calendar = require("../packages/Calendar");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DateFilter = function (_Component) {
  (0, _inherits2.default)(DateFilter, _Component);
  var _super = _createSuper(DateFilter);
  function DateFilter(props) {
    var _this;
    (0, _classCallCheck2.default)(this, DateFilter);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "input", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getInputRef", function () {
      return _this.input.current;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onStartTextChange", function (start) {
      var text = _this.state.text;
      if (text && text.start && start === text.start) {
        return;
      }
      var newText = typeof text === 'string' ? {} : _objectSpread({}, text);
      newText.start = start;
      _this.setState({
        text: newText
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEndTextChange", function (end) {
      var text = _this.state.text;
      if (text && text.end && end === text.end) {
        return;
      }
      var newText = typeof text === 'string' ? {} : _objectSpread({}, text);
      newText.end = end;
      _this.setState({
        text: newText
      });
    });
    var filterValue = props.filterValue;
    _this.input = (0, _react.createRef)();
    _this.state = {
      value: filterValue ? filterValue.value || '' : '',
      text: ''
    };
    _this.onChange = _this.onChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.onStartChange = _this.onStartChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.onEndChange = _this.onEndChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.onValueChange = _this.onValueChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.onTextChange = _this.onTextChange.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  (0, _createClass2.default)(DateFilter, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.filterValue && prevProps.filterValue && this.props.filterValue.value !== prevProps.filterValue.value) {
        this.setValue(this.props.filterValue.value);
      }
    }
  }, {
    key: "onChange",
    value: function onChange(value) {
      if (value === this.state.value) {
        return;
      }
      this.onValueChange(value);
      this.setValue(value);
    }
  }, {
    key: "onStartChange",
    value: function onStartChange(start) {
      if (this.state.value) {
        if (this.state.value.start && start === this.state.value.start) {
          return;
        }
      }
      var newValue = typeof this.state.value === 'string' ? {} : _objectSpread({}, this.state.value);
      newValue.start = start;
      this.onValueChange(newValue);
      this.setValue(newValue);
    }
  }, {
    key: "onEndChange",
    value: function onEndChange(end) {
      if (this.state.value) {
        if (this.state.value.end && end === this.state.value.end) {
          return;
        }
      }
      var newValue = typeof this.state.value === 'string' ? {} : _objectSpread({}, this.state.value);
      newValue.end = end;
      this.onValueChange(newValue);
      this.setValue(newValue);
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: value
      });
      if (typeof value === 'string') {
        this.onTextChange(value);
      }
    }
  }, {
    key: "onValueChange",
    value: function onValueChange(value) {
      this.props.onChange && this.props.onChange(_objectSpread(_objectSpread({}, this.props.filterValue), {}, {
        value: value
      }));
    }
  }, {
    key: "onTextChange",
    value: function onTextChange(value) {
      this.setState({
        text: value
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        filterValue = _this$props.filterValue,
        readOnly = _this$props.readOnly,
        disabled = _this$props.disabled,
        rtl = _this$props.rtl,
        style = _this$props.style,
        cell = _this$props.cell,
        renderInPortal = _this$props.renderInPortal,
        i18n = _this$props.i18n,
        theme = _this$props.theme;
      var _this$props2 = this.props,
        filterEditorProps = _this$props2.filterEditorProps,
        dateFormat = _this$props2.cellProps.dateFormat;
      if (filterEditorProps === undefined) {
        filterEditorProps = filterValue && filterValue.filterEditorProps;
      }
      if (dateFormat === undefined) {
        if (typeof filterEditorProps === 'function') {
          dateFormat = filterEditorProps(this.props, {
            value: this.state.value,
            index: 0
          }).dateFormat;
        } else {
          dateFormat = filterEditorProps && filterEditorProps.dateFormat || '';
        }
      }
      var calendarLabels = {
        todayButtonText: i18n && i18n('calendar.todayButtonText'),
        clearButtonText: i18n && i18n('calendar.clearButtonText'),
        okButtonText: i18n && i18n('calendar.okButtonText'),
        cancelButtonText: i18n && i18n('calendar.cancelButtonText')
      };
      var startTarget = function startTarget() {
        return cell && cell.getDOMNode().querySelectorAll('.InovuaReactDataGrid__column-header__filter')[0] || cell && cell.getDOMNode();
      };
      var inputProps = {
        ref: this.input,
        calendarProps: _objectSpread({}, calendarLabels),
        readOnly: readOnly,
        disabled: disabled,
        dateFormat: dateFormat,
        forceValidDate: false,
        relativeToViewport: true,
        okButton: false,
        cancelButton: false,
        overlayProps: {
          zIndex: null,
          positions: ['tl-bl', 'bl-tl', 'tr-br', 'br-tr'],
          target: startTarget
        },
        style: _objectSpread({
          minWidth: 0
        }, style),
        theme: theme,
        rtl: rtl
      };
      if (filterValue) {
        inputProps.value = this.state.value;
        if (!inputProps.value) {
          inputProps.text = '';
        }
      }
      var renderPicker = renderInPortal;
      var editorClassName = 'InovuaReactDataGrid__column-header__filter InovuaReactDataGrid__column-header__filter--date';
      switch (filterValue && filterValue.operator) {
        case 'inrange':
        case 'notinrange':
          var _this$state = this.state,
            value = _this$state.value,
            text = _this$state.text;
          var start = value.start,
            end = value.end;
          var startText = text.start,
            endText = text.end,
            startInputProps = _objectSpread(_objectSpread({}, inputProps), {}, {
              value: start,
              text: startText
            }),
            endInputProps = _objectSpread(_objectSpread({}, inputProps), {}, {
              value: end,
              text: endText,
              overlayProps: {
                target: function target() {
                  var filterNodes = cell && cell.getDOMNode().querySelectorAll('.InovuaReactDataGrid__column-header__filter');
                  return filterNodes[filterNodes.length - 1];
                }
              }
            });
          var startFilterEditorProps = typeof filterEditorProps === 'function' ? filterEditorProps(this.props, {
            value: start,
            index: 0
          }) : filterEditorProps;
          var endFilterEditorProps = typeof filterEditorProps === 'function' ? filterEditorProps(this.props, {
            value: end,
            index: 1
          }) : filterEditorProps;
          var startProps = _objectSpread(_objectSpread(_objectSpread({
            okButton: true,
            placeholder: i18n && i18n('start')
          }, startFilterEditorProps), {}, {
            onChange: this.onStartChange,
            onTextChange: this.onStartTextChange,
            className: editorClassName
          }, startInputProps), {}, {
            renderPicker: renderPicker
          });
          var startEditor = _react.default.createElement(_Calendar.DateInput, _objectSpread({}, startProps));
          var endProps = _objectSpread(_objectSpread(_objectSpread({
            okButton: true,
            placeholder: i18n && i18n('end')
          }, endFilterEditorProps), {}, {
            onChange: this.onEndChange,
            onTextChange: this.onEndTextChange,
            className: editorClassName
          }, endInputProps), {}, {
            renderPicker: renderPicker,
            endInput: true
          });
          var endEditor = _react.default.createElement(_Calendar.DateInput, _objectSpread({}, endProps));
          return this.props.render(_react.default.createElement("div", {
            style: {
              display: 'flex'
            }
          }, startEditor, _react.default.createElement("div", {
            className: "InovuaReactDataGrid__column-header__filter__binary_operator_separator"
          }), endEditor));
        default:
          var finalEditorProps = typeof filterEditorProps === 'function' ? filterEditorProps(this.props, {
            value: this.state.value
          }) : filterEditorProps;
          if (finalEditorProps !== null && finalEditorProps !== void 0 && finalEditorProps.inputRef) {
            finalEditorProps.inputRef.current = this.getInputRef();
          }
          var finalProps = _objectSpread(_objectSpread(_objectSpread({}, finalEditorProps), {}, {
            onChange: this.onChange,
            onTextChange: this.onTextChange,
            className: editorClassName
          }, inputProps), {}, {
            renderPicker: renderPicker
          });
          return this.props.render(_react.default.createElement(_Calendar.DateInput, _objectSpread({}, finalProps)));
      }
    }
  }]);
  return DateFilter;
}(_react.Component);
var _default = DateFilter;
exports.default = _default;