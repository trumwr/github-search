/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="react" />
import { TypePlugin } from './types';
export declare const plugins: (TypePlugin | {
    name: string;
    hook: (props: {
        sortInfo?: import("./types").TypeSortInfo | undefined;
        defaultSortInfo?: import("./types").TypeSortInfo | undefined;
        allowUnsort: boolean;
    }, _: any, computedPropsRef: import("react").MutableRefObject<import("./types").TypeComputedProps | null>) => {
        computedIsMultiSort: boolean;
        computedSortInfo: import("./types").TypeSortInfo;
        setSortInfo: (sortInfo: import("./types").TypeSortInfo) => void;
        toggleColumnSort: (colId: any, defaultSortingDirection?: "desc" | "asc" | undefined) => void;
        setColumnSortInfo: (column: string | number | {
            id: string | number;
            name?: string | number | undefined;
        } | {
            name: string | number;
            id?: string | number | undefined;
        }, dir: 0 | 1 | -1) => void;
        unsortColumn: (column: string | number | {
            id: string | number;
            name?: string | number | undefined;
        } | {
            name: string | number;
            id?: string | number | undefined;
        }) => void;
    };
    defaultProps: () => {
        sorty: ((sortInfo: import("./packages/sorty").TypeSortInfo, data: any[]) => void) & {
            types?: any;
            _getSortFunctions?: ((sortInfo: import("./packages/sorty").TypeSingleSortInfo[]) => void) | undefined;
            getFunction?: ((sortinfo: import("./packages/sorty").TypeSingleSortInfo[]) => void) | undefined;
        };
        sortable: boolean;
    };
} | {
    name: string;
    hook: (props: import("./types").TypeDataGridProps, computedProps: import("./types").TypeComputedProps, computedPropsRef: import("react").MutableRefObject<import("./types").TypeComputedProps | null>) => {};
    renderColumnFilterContextMenu: (computedProps: import("./types").TypeComputedProps, computedPropsRef: import("react").MutableRefObject<import("./types").TypeComputedProps | null>) => void | {} | null;
    defaultProps: () => {
        columnFilterContextMenuConstrainTo: boolean;
        columnFilterContextMenuPosition: string;
    };
} | {
    name: string;
    hook: (props: {}, computedProps: import("./types").TypeComputedProps, computedPropsRef: import("react").MutableRefObject<import("./types").TypeComputedProps | null>) => {
        onRowContextMenu: (rowProps: import("./types").TypeRowProps, event: import("react").SyntheticEvent<Element, Event>) => void;
        getMenuAvailableHeight: () => number;
        showRowContextMenu: (alignTo: any, rowProps: import("./types").TypeRowProps, cellProps: import("./types").TypeCellProps, onHide: (...args: any[]) => void) => void;
        showColumnContextMenu: (alignTo: any, cellProps: import("./types").TypeCellProps, { computedVisibleIndex }: {
            computedVisibleIndex: number;
        }, onHide: (...args: any[]) => void) => void;
        hideColumnContextMenu: () => void;
        hideRowContextMenu: () => void;
        columnContextMenuProps: any;
        columnContextMenuInstanceProps: any;
        rowContextMenuProps: any;
        columnContextMenuInfoRef: import("react").MutableRefObject<{
            menuAlignTo: any;
            getMenuConstrainTo: () => any;
            menuOnHide: (...args: any[]) => void;
        }>;
        rowContextMenuInfoRef: import("react").MutableRefObject<{
            menuAlignTo: any;
            getMenuConstrainTo: () => any;
            cellProps?: any;
            menuOnHide: (...args: any[]) => void;
        }>;
        setColumnContextMenuProps: import("react").Dispatch<any>;
        setColumnContextMenuInstanceProps: import("react").Dispatch<any>;
        setRowContextMenuProps: import("react").Dispatch<any>;
        preventIEMenuCloseRef: import("react").MutableRefObject<boolean>;
        columnContextMenuIndex: import("react").MutableRefObject<number>;
    };
    renderColumnContextMenu: (computedProps: import("./types").TypeComputedProps, computedPropsRef: import("react").MutableRefObject<import("./types").TypeComputedProps | null>) => void | {} | null;
    renderRowContextMenu: (computedProps: import("./types").TypeComputedProps, computedPropsRef: import("react").MutableRefObject<import("./types").TypeComputedProps | null>) => void | {} | null;
    defaultProps: () => {
        showColumnMenuTool: boolean;
    };
})[];
declare const ReactDataGrid: {
    (props: import("./types").TypeDataGridProps): JSX.Element;
    defaultProps: {
        idProperty: string;
        rowHeight: number;
        headerHeight: number;
        filterRowHeight: number;
        minRowHeight: number;
        nativeScroll: boolean;
        autoCheckboxColumn: boolean;
        activateRowOnFocus: boolean;
        checkboxOnlyRowSelect: boolean;
        checkboxSelectEnableShiftKey: boolean;
        renderScroller: (domProps: any) => void;
        stickyHeader: boolean;
        enableCellBulkUpdate: boolean;
        enableKeyboardNavigation: boolean;
        scrollTopOnFilter: boolean;
        scrollTopOnSort: boolean;
        scrollTopOnGroupBy: boolean;
        defaultShowHeader: boolean;
        defaultShowEmptyRows: boolean;
        defaultShowHoverRows: boolean;
        defaultShowZebraRows: boolean;
        defaultShowCellBorders: boolean;
        allowRowTabNavigation: boolean;
        cellSelectionByIndex: boolean;
        columnResizeHandleWidth: number;
        columnResizeProxyWidth: number;
        virtualizeColumnsThreshold: number;
        shareSpaceOnResize: boolean;
        enableColumnFilterContextMenu: boolean;
        copySpreadsheetCompatibleString: boolean;
        clipboardSeparator: string;
        resizable: boolean;
        virtualized: boolean;
        allowUnsort: boolean;
        rtl: boolean;
        theme: string;
        filterTypes: import("./types").TypeFilterTypes;
        keyPageStep: number;
        expandGroupTitle: boolean;
        allowGroupSplitOnReorder: boolean;
        defaultCollapsedGroups: {};
        groupPathSeparator: string;
        nodePathSeparator: string;
        idPropertySeparator: string;
        groupNestingSize: number;
        treeNestingSize: number;
        columnMinWidth: number;
        enableTreeRowReorderNestingChange: boolean;
        enableTreeRowReorderParentChange: boolean;
        columnReorderScrollByAmount: number;
        rowReorderScrollByAmount: number;
        rowReorderAutoScroll: boolean;
        rowReorderAutoScrollSpeed: number;
        allowRowReorderBetweenGroups: boolean;
        reorderProxySize: number;
        expandOnMouseDown: boolean;
        columnMaxWidth: null;
        editStartEvent: string;
        hideGroupByColumns: boolean;
        defaultColumnOrder: undefined;
        columnUserSelect: boolean;
        columnHeaderUserSelect: boolean;
        stickyGroupRows: boolean;
        showWarnings: boolean;
        toggleRowSelectOnClick: boolean;
        toggleCellSelectOnClick: boolean;
        clearNodeCacheOnDataSourceChange: boolean;
        clearDataSourceCacheOnChange: boolean;
        preventDefaultTextSelectionOnShiftMouseDown: boolean;
        preventRowSelectionOnClickWithMouseMove: boolean;
        showColumnMenuSortOptions: boolean;
        showColumnMenuLockOptions: boolean;
        showColumnMenuFilterOptions: boolean;
        showColumnMenuGroupOptions: boolean;
        autoFocusOnEditComplete: boolean;
        autoFocusOnEditEscape: boolean;
        showActiveRowIndicator: boolean;
        showPivotSummaryColumns: boolean;
        showColumnMenuToolOnHover: boolean;
        columnFilterContextMenuConstrainTo: boolean;
        columnFilterContextMenuPosition: string;
        generateIdFromPath: boolean;
        collapseChildrenOnAsyncNodeCollapse: boolean;
        collapseChildrenRecursive: boolean;
        selectNodesRecursive: boolean;
        isExpandKeyPressed: ({ event }: {
            event: any;
        }) => any;
        isCollapseKeyPressed: ({ event }: {
            event: any;
        }) => any;
        isStartEditKeyPressed: ({ event }: {
            event: any;
        }) => any;
        rowExpandHeight: number;
        growExpandHeightWithDetails: boolean;
        livePaginationLoadNextDelay: boolean;
        livePaginationLoadMaskHideDelay: number;
        checkResizeDelay: number;
        multiRowExpand: boolean;
        useNativeFlex: boolean;
        disableGroupByToolbar: boolean;
        updateMenuPositionOnScroll: boolean;
        updateMenuPositionOnColumnsChange: boolean;
        useRowHeightForLockedRows: boolean;
        nodesProperty: string;
        rowDetailsWidth: string;
        contain: string;
        rowContain: string;
        groupToString: (obj: any) => string;
        scrollProps: {
            autoHide: boolean;
            scrollThumbMargin: number;
            scrollThumbWidth: number;
            scrollThumbOverWidth: number;
        };
        detailsGridCacheKey: boolean;
        sortFunctions: {
            date: (v1: any, v2: any, column: any) => number;
        };
        i18n: {
            pageText: string;
            ofText: string;
            perPageText: string;
            showingText: string;
            clearAll: string;
            clear: string;
            showFilteringRow: string;
            hideFilteringRow: string;
            enable: string;
            disable: string;
            sortAsc: string;
            sortDesc: string;
            unsort: string;
            group: string;
            ungroup: string;
            lockStart: string;
            lockEnd: string;
            unlock: string;
            columns: string;
            autoresizeThisColumn: string;
            autoresizeAllColumns: string;
            autoSizeToFit: string;
            contains: string;
            startsWith: string;
            endsWith: string;
            notContains: string;
            inlist: string;
            notinlist: string;
            neq: string;
            inrange: string;
            notinrange: string;
            eq: string;
            notEmpty: string;
            empty: string;
            lt: string;
            lte: string;
            gt: string;
            gte: string;
            before: string;
            beforeOrOn: string;
            afterOrOn: string;
            after: string;
            start: string;
            end: string;
            dragHeaderToGroup: string;
            noRecords: string;
            'calendar.todayButtonText': string;
            'calendar.clearButtonText': string;
            'calendar.okButtonText': string;
            'calendar.cancelButtonText': string;
        };
        emptyText: string;
        isBinaryOperator: (operator: any) => boolean;
        skipHeaderOnAutoSize: boolean;
        enableColumnAutosize: boolean;
    };
};
export default ReactDataGrid;
