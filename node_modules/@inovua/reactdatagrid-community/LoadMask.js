/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _LoadMask = _interopRequireDefault(require("./packages/LoadMask"));
var _reactCleanProps = _interopRequireDefault(require("./packages/react-clean-props"));
var _join = _interopRequireDefault(require("./packages/join"));
var _renderEmptyContent = _interopRequireDefault(require("./renderEmptyContent"));
var _getGlobal = require("./getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var stop = function stop(e) {
  if (e.cancelable === false) {
    return;
  }
  e.preventDefault();
};
var DEFAULT_CLASSNAME = 'InovuaReactDataGrid__load-mask';
var DataGridLoadMask = function (_React$Component) {
  (0, _inherits2.default)(DataGridLoadMask, _React$Component);
  var _super = _createSuper(DataGridLoadMask);
  function DataGridLoadMask(props) {
    var _this;
    (0, _classCallCheck2.default)(this, DataGridLoadMask);
    _this = _super.call(this, props);
    _this.visible = props.visible;
    _this.maskRef = (0, _react.createRef)();
    return _this;
  }
  (0, _createClass2.default)(DataGridLoadMask, [{
    key: "setVisible",
    value: function setVisible(visible) {
      var _this2 = this;
      if (this.props.livePagination) {
        this.visible = visible;
        var fn = function fn() {
          var node = _this2.maskRef.current;
          if (!node || !_this2.scroller) {
            return;
          }
          node.style.visibility = visible ? 'visible' : 'hidden';
          if (visible === false) {
            _this2.scroller.scrollTop = 0;
          }
        };
        if (!visible) {
          globalObject.requestAnimationFrame(fn);
        } else {
          fn();
        }
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setVisible(this.props.visible);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var livePagination = props.livePagination,
        loadingText = props.loadingText,
        visible = props.visible;
      var style = props.style;
      var cleanProps = (0, _reactCleanProps.default)(props, DataGridLoadMask.propTypes);
      var className = (0, _join.default)(DEFAULT_CLASSNAME, props.className, livePagination && "".concat(DEFAULT_CLASSNAME, "--live-pagination"));
      return _react.default.createElement(_LoadMask.default, _objectSpread(_objectSpread({}, cleanProps), {}, {
        ref: this.maskRef,
        style: style,
        visible: visible,
        className: className,
        onWheel: livePagination ? stop : null
      }), (0, _renderEmptyContent.default)(loadingText, 'loading'));
    }
  }]);
  return DataGridLoadMask;
}(_react.default.Component);
exports.default = DataGridLoadMask;
DataGridLoadMask.defaultProps = {
  livePagination: false,
  visible: false
};
DataGridLoadMask.propTypes = {
  visible: _propTypes.default.bool,
  loadingText: _propTypes.default.node,
  livePagination: _propTypes.default.bool
};