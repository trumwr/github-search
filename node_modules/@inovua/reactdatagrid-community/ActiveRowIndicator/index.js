/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _join = _interopRequireDefault(require("../packages/join"));
var _usePrevious = _interopRequireDefault(require("../hooks/usePrevious"));
var _getScrollbarWidth = _interopRequireDefault(require("../packages/getScrollbarWidth"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var CLASS_NAME = 'InovuaReactDataGrid__row';
var SCROLLBAR_WIDTH = (0, _getScrollbarWidth.default)();
var RTL_OFFSET = SCROLLBAR_WIDTH || 17;
var ActiveRowIndicator = function ActiveRowIndicator(props) {
  var _style;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    offset = _useState2[0],
    setOffset = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    _scrollLeft = _useState4[0],
    setScrollLeft = _useState4[1];
  var activeIndex = props.activeIndex,
    rtl = props.rtl,
    rtlOffset = props.rtlOffset,
    activeRowIndicatorClassName = props.activeRowIndicatorClassName;
  var oldActiveIndex = (0, _usePrevious.default)(activeIndex, -1);
  var _ref = props.activeRowRef.current || {},
    _ref$instance = _ref.instance,
    row = _ref$instance === void 0 ? {} : _ref$instance;
  var hasBorderBottom = row.hasBorderBottom,
    hasBorderTop = row.hasBorderTop;
  var rowProps = row.props || {};
  var groupColumn = rowProps.groupColumn,
    data = rowProps.data,
    depth = rowProps.depth,
    groupNestingSize = rowProps.groupNestingSize;
  var deps = [activeIndex, rtlOffset, oldActiveIndex, props.dataSourceCount, props.computedExpandedRows, props.computedExpandedNodes, props.computedRowHeights, row];
  var updateLayout = function updateLayout(config) {
    var node = (props.activeRowRef.current || {
      node: null
    }).node;
    var instance = (props.activeRowRef.current || {
      instance: null
    }).instance;
    if (!node || !node.parentNode || props.dataSourceCount < activeIndex) {
      return setOffset('');
    }
    if (instance && instance.props.rowIndex !== props.activeIndex && props.activeIndex >= 0) {
      requestAnimationFrame(function () {
        return updateLayout({
          raf: false
        });
      });
      return;
    }
    var doSetOffset = function doSetOffset(left, top) {
      top = Number.parseFloat(top) || 0;
      setOffset("translate3d(".concat(left || 0, "px, ").concat(top, "px, 0px)"));
    };
    if (config && config.raf === false) {
      doSetOffset(rtl ? -RTL_OFFSET : 0, node.style.top);
    } else {
      requestAnimationFrame(function () {
        if (node && node.parentNode) {
          doSetOffset(rtl ? -RTL_OFFSET : 0, node.style.top);
        }
      });
    }
  };
  (0, _react.useLayoutEffect)(updateLayout, deps);
  (0, _react.useEffect)(function () {
    if (props.handle) {
      props.handle({
        setScrollLeft: setScrollLeft
      });
    }
    return function () {
      if (props.handle) {
        props.handle(null);
      }
    };
  }, [props.handle]);
  var groupDepth = groupColumn ? 0 : data && data.__group ? data.depth - 1 : data && data.__summary ? rowProps.summaryProps.depth : depth || 0;
  var scrollbarOffset = props.rtl ? RTL_OFFSET : 0;
  var left = (groupNestingSize || 0) * groupDepth;
  var style = (_style = {}, (0, _defineProperty2.default)(_style, rtl ? 'right' : 'left', left - scrollbarOffset), (0, _defineProperty2.default)(_style, "width", props.width - left), _style);
  var transform;
  if (!offset) {
    style.opacity = 0;
  } else {
    style.willChange = 'transform';
    transform = offset;
    style.height = props.activeRowHeight;
  }
  if (transform) {
    style.transform = transform;
  }
  var innerClassName = (0, _join.default)("".concat(CLASS_NAME, "-active-borders-inner"), activeRowIndicatorClassName ? activeRowIndicatorClassName : '');
  return _react.default.createElement("div", {
    key: "active-row-borders",
    className: (0, _join.default)("".concat(CLASS_NAME, "-active-borders"), offset != '' ? "".concat(CLASS_NAME, "-active-borders--active") : '', hasBorderTop && "".concat(CLASS_NAME, "-active-borders--has-border-top"), hasBorderBottom && "".concat(CLASS_NAME, "-active-borders--has-border-bottom")),
    style: style
  }, _react.default.createElement("div", {
    className: innerClassName
  }));
};
var _default = ActiveRowIndicator;
exports.default = _default;