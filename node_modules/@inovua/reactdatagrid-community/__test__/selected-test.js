/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _ = _interopRequireDefault(require(".."));
var _DataGrid$prototype = _.default.prototype,
  isSelectionControlled = _DataGrid$prototype.isSelectionControlled,
  initialIsSelectionEnabled = _DataGrid$prototype.isSelectionEnabled,
  initialIsMultiSelect = _DataGrid$prototype.isMultiSelect,
  initialIsSelectionEmpty = _DataGrid$prototype.isSelectionEmpty,
  initialGetSelected = _DataGrid$prototype.getSelected;
var SELF = {
  state: {},
  isSelectionControlled: isSelectionControlled
};
var isSelectionEnabled = function isSelectionEnabled(props) {
  return initialIsSelectionEnabled.call(SELF, props);
};
SELF.isSelectionEnabled = isSelectionEnabled;
var getSelected = function getSelected(props) {
  return initialGetSelected.call(SELF, props);
};
SELF.getSelected = getSelected;
var isMultiSelect = function isMultiSelect(props) {
  return initialIsMultiSelect.call(SELF, props);
};
SELF.isMultiSelect = isMultiSelect;
var isSelectionEmpty = function isSelectionEmpty(props) {
  return initialIsSelectionEmpty.call(SELF, props);
};
SELF.isSelectionEmpty = isSelectionEmpty;
describe('selection', function () {
  describe('isSelectionControlled', function () {
    it('to be correct', function () {
      expect(isSelectionControlled({
        selected: null
      })).to.equal(true);
      expect(isSelectionControlled({
        selected: 1
      })).to.equal(true);
      expect(isSelectionControlled({
        selected: undefined
      })).to.equal(false);
      expect(isSelectionControlled({
        defaultSelected: {}
      })).to.equal(false);
    });
  });
  describe('isSelectionEnabled', function () {
    it('to be correct', function () {
      expect(isSelectionEnabled({
        enableSelection: true
      })).to.equal(true);
      expect(isSelectionEnabled({
        selected: null
      })).to.equal(true);
      expect(isSelectionEnabled({
        defaultSelected: null
      })).to.equal(true);
      expect(isSelectionEnabled({
        defaultSelected: undefined
      })).to.equal(false);
      expect(isSelectionEnabled({
        selected: undefined,
        defaultSelected: undefined
      })).to.equal(false);
    });
  });
  describe('isSelectionControlled', function () {
    it('to be correct', function () {
      expect(isSelectionControlled({
        selected: true
      })).to.equal(true);
      expect(isSelectionControlled({
        selected: false
      })).to.equal(true);
      expect(isSelectionControlled({
        enableSelection: true
      })).to.equal(false);
      expect(isSelectionControlled({
        defaultSelected: {},
        selected: {}
      })).to.equal(true);
      expect(isSelectionControlled({
        selected: null,
        defaultSelected: {}
      })).to.equal(true);
      expect(isSelectionControlled({
        defaultSelected: null
      })).to.equal(false);
    });
  });
  describe('isMultiSelect', function () {
    it('to be correct', function () {
      expect(isMultiSelect({
        defaultSelected: {}
      })).to.equal(true);
      expect(isMultiSelect({
        defaultSelected: 1,
        selected: {}
      })).to.equal(true);
      expect(isMultiSelect({
        selected: null
      })).to.equal(false);
      expect(isMultiSelect({
        defaultSelected: null
      })).to.equal(false);
      expect(isMultiSelect({
        defaultSelected: {}
      })).to.equal(true);
    });
  });
});