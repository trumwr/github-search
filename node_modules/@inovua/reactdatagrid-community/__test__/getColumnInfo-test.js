/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _getColumnInfo3 = _interopRequireDefault(require("../getColumnInfo"));
describe('getColumnInfo', function () {
  it('should inject columns for groupBy', function () {
    var _getColumnInfo = (0, _getColumnInfo3.default)({
        columns: [{
          name: 'firstName',
          width: 200
        }],
        groupNestingSize: 15
      }, {
        groupBy: ['firstName']
      }),
      visibleColumns = _getColumnInfo.visibleColumns;
    expect(visibleColumns.map(function (c) {
      return {
        name: c.name,
        width: c.computedWidth
      };
    })).to.deep.equal([{
      name: '__col_generated-groupBy-0',
      width: 15
    }, {
      name: 'firstName',
      width: 200
    }]);
  });
  it('should only inject missing columns for groupBy', function () {
    var _getColumnInfo2 = (0, _getColumnInfo3.default)({
        columns: [{
          name: 'generated',
          width: 15,
          groupColumn: true,
          locked: true
        }, {
          name: 'firstName',
          width: 200,
          locked: true
        }, {
          name: 'lastName',
          width: 200
        }],
        groupNestingSize: 15
      }, {
        groupBy: ['firstName', 'x']
      }),
      visibleColumns = _getColumnInfo2.visibleColumns,
      lockedStartColumns = _getColumnInfo2.lockedStartColumns;
    var visible = visibleColumns.map(function (c) {
      return {
        name: c.name,
        width: c.computedWidth,
        locked: c.computedLocked
      };
    });
    expect(visible).to.deep.equal([{
      name: '__col_generated-groupBy-1',
      width: 15,
      locked: 'start'
    }, {
      name: 'generated',
      width: 15,
      locked: 'start'
    }, {
      name: 'firstName',
      width: 200,
      locked: 'start'
    }, {
      name: 'lastName',
      width: 200,
      locked: undefined
    }]);
    expect(lockedStartColumns.map(function (c) {
      return {
        name: c.name,
        width: c.computedWidth,
        locked: c.computedLocked
      };
    })).to.deep.equal([{
      name: '__col_generated-groupBy-1',
      width: 15,
      locked: 'start'
    }, {
      name: 'generated',
      width: 15,
      locked: 'start'
    }, {
      name: 'firstName',
      width: 200,
      locked: 'start'
    }]);
  });
});