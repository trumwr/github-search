/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _reactAddonsTestUtils = _interopRequireDefault(require("react-addons-test-utils"));
var _2 = _interopRequireDefault(require(".."));
var _testUtils = require("../testUtils");
require("../../style/index.scss");
var _Cell = _interopRequireDefault(require("../Layout/ColumnLayout/Cell"));
var _Row = _interopRequireDefault(require("../Layout/ColumnLayout/Content/Row"));
var findCellsInRow = function findCellsInRow(row) {
  return _reactAddonsTestUtils.default.findAllInRenderedTree(row, function (cmp) {
    return cmp.constructor === _Cell.default;
  });
};
var findRowAt = function findRowAt(tree, index) {
  var rows = _reactAddonsTestUtils.default.findAllInRenderedTree(tree, function (cmp) {
    return cmp.constructor === _Row.default && cmp.props.rowIndex == index;
  });
  return rows[0];
};
describe('computedColspan', function () {
  it('should set computedColspan, last, lastInSection correctly when groupBy is used with expandGroupTitle', function (done) {
    var columns = [{
      name: 'country',
      defaultWidth: 100,
      locked: true
    }, {
      name: 'firstName',
      defaultWidth: 100
    }, {
      name: 'lastName',
      defaultWidth: 100,
      locked: true
    }, {
      name: 'lastName1',
      defaultWidth: 100
    }, {
      name: 'email',
      defaultWidth: 100,
      locked: 'end'
    }, {
      name: 'x',
      defaultWidth: 100,
      locked: 'end'
    }];
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_2.default, {
      columns: columns,
      hideGroupByColumns: false,
      virtualizeColumns: false,
      idProperty: "id",
      groupBy: ['country', 'email', 'firstName'],
      expandGroupTitle: true,
      dataSource: [{
        lastName: 'a last name',
        firstName: 'john is a very long name so it better be ellipsed in a ',
        email: 'john@gmail.com',
        id: 1,
        country: 'uk'
      }, {
        firstName: 'john2',
        email: 'john@gmail.com',
        id: 11,
        country: 'uk'
      }, {
        firstName: 'john is a very long name so it better be ellipsed in a ',
        email: 'john@gmail.com',
        id: 12,
        country: 'uk'
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2,
        country: 'uk'
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 122,
        country: 'uk'
      }]
    }));
    setTimeout(function () {
      var rows = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__row'));
      expect(rows.length).to.equal(11);
      var rowIndexes = (0, _toConsumableArray2.default)(Array(11)).map(function (_, i) {
        return i;
      });
      rows = rowIndexes.map(function (i) {
        return findRowAt(gridInstance, i);
      });
      var cellProps = rows.map(function (row) {
        var cells = findCellsInRow(row);
        return cells.map(function (cell) {
          var props = cell.getProps();
          return {
            hidden: props.hidden,
            computedColspan: props.computedColspan,
            last: props.last,
            lastInSection: props.lastInSection
          };
        });
      });
      var totalColumns = columns.length + 3;
      expect(cellProps.length).to.equal(11);
      expect(cellProps[0].length).to.equal(totalColumns);
      var hiddenCell = {
        hidden: true,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      };
      expect(cellProps[0]).to.deep.equal([{
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: totalColumns - 1,
        last: true,
        lastInSection: true
      }, hiddenCell, hiddenCell, hiddenCell, hiddenCell, hiddenCell, hiddenCell, hiddenCell]);
      expect(cellProps[1]).to.deep.equal([{
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: totalColumns - 2,
        last: true,
        lastInSection: true
      }, hiddenCell, hiddenCell, hiddenCell, hiddenCell, hiddenCell, hiddenCell]);
      expect(cellProps[2]).to.deep.equal([{
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: totalColumns - 3,
        last: true,
        lastInSection: true
      }, hiddenCell, hiddenCell, hiddenCell, hiddenCell, hiddenCell]);
      expect(cellProps[3]).to.deep.equal([{
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: true
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: true
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: true,
        lastInSection: true
      }]);
      expect(cellProps[4]).to.deep.equal(cellProps[3]);
      expect(cellProps[5]).to.deep.equal(cellProps[2]);
      expect(cellProps[6]).to.deep.equal(cellProps[3]);
      expect(cellProps[7]).to.deep.equal(cellProps[1]);
      expect(cellProps[8]).to.deep.equal(cellProps[2]);
      expect(cellProps[9]).to.deep.equal(cellProps[3]);
      expect(cellProps[10]).to.deep.equal(cellProps[3]);
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should set computedColspan, last, lastInSection correctly when groupBy is used with expandGroupTitle=false', function (done) {
    var columns = [{
      name: 'country',
      defaultWidth: 100,
      locked: true
    }, {
      name: 'firstName',
      defaultWidth: 100
    }, {
      name: 'lastName',
      defaultWidth: 100,
      locked: true
    }, {
      name: 'lastName1',
      defaultWidth: 100
    }, {
      name: 'email',
      defaultWidth: 100,
      locked: 'end'
    }, {
      name: 'x',
      defaultWidth: 100,
      locked: 'end'
    }];
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_2.default, {
      columns: columns,
      hideGroupByColumns: false,
      virtualizeColumns: false,
      idProperty: "id",
      groupBy: ['country', 'email', 'firstName'],
      expandGroupTitle: false,
      dataSource: [{
        lastName: 'a last name',
        firstName: 'john is a very long name so it better be ellipsed in a ',
        email: 'john@gmail.com',
        id: 1,
        country: 'uk'
      }, {
        firstName: 'john2',
        email: 'john@gmail.com',
        id: 11,
        country: 'uk'
      }, {
        firstName: 'john is a very long name so it better be ellipsed in a ',
        email: 'john@gmail.com',
        id: 12,
        country: 'uk'
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2,
        country: 'uk'
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 122,
        country: 'uk'
      }]
    }));
    setTimeout(function () {
      var rows = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__row'));
      expect(rows.length).to.equal(11);
      var rowIndexes = (0, _toConsumableArray2.default)(Array(11)).map(function (_, i) {
        return i;
      });
      rows = rowIndexes.map(function (i) {
        return findRowAt(gridInstance, i);
      });
      var cellProps = rows.map(function (row) {
        var cells = findCellsInRow(row);
        return cells.map(function (cell) {
          var props = cell.getProps();
          return {
            hidden: props.hidden,
            computedColspan: props.computedColspan,
            last: props.last,
            lastInSection: props.lastInSection
          };
        });
      });
      var totalColumns = columns.length + 3;
      expect(cellProps.length).to.equal(11);
      expect(cellProps[0].length).to.equal(totalColumns);
      var hiddenCell = {
        hidden: true,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      };
      expect(cellProps[0]).to.deep.equal([{
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: 4,
        last: false,
        lastInSection: true
      }, hiddenCell, hiddenCell, hiddenCell, {
        hidden: false,
        computedColspan: 2,
        last: false,
        lastInSection: true
      }, hiddenCell, {
        hidden: false,
        computedColspan: 2,
        last: true,
        lastInSection: true
      }, hiddenCell]);
      expect(cellProps[1]).to.deep.equal([{
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: 3,
        last: false,
        lastInSection: true
      }, hiddenCell, hiddenCell, {
        hidden: false,
        computedColspan: 2,
        last: false,
        lastInSection: true
      }, hiddenCell, {
        hidden: false,
        computedColspan: 2,
        last: true,
        lastInSection: true
      }, hiddenCell]);
      expect(cellProps[2]).to.deep.equal([{
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: 2,
        last: false,
        lastInSection: true
      }, hiddenCell, {
        hidden: false,
        computedColspan: 2,
        last: false,
        lastInSection: true
      }, hiddenCell, {
        hidden: false,
        computedColspan: 2,
        last: true,
        lastInSection: true
      }, hiddenCell]);
      expect(cellProps[3]).to.deep.equal([{
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: true
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: true
      }, {
        hidden: false,
        computedColspan: undefined,
        last: false,
        lastInSection: false
      }, {
        hidden: false,
        computedColspan: undefined,
        last: true,
        lastInSection: true
      }]);
      expect(cellProps[4]).to.deep.equal(cellProps[3]);
      expect(cellProps[5]).to.deep.equal(cellProps[2]);
      expect(cellProps[6]).to.deep.equal(cellProps[3]);
      expect(cellProps[7]).to.deep.equal(cellProps[1]);
      expect(cellProps[8]).to.deep.equal(cellProps[2]);
      expect(cellProps[9]).to.deep.equal(cellProps[3]);
      expect(cellProps[10]).to.deep.equal(cellProps[3]);
      gridInstance.unmount();
      done();
    }, 20);
  });
});