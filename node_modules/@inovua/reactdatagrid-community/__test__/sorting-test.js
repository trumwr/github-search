/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _reactAddonsTestUtils = _interopRequireDefault(require("react-addons-test-utils"));
var _ = _interopRequireDefault(require(".."));
var _testUtils = require("../testUtils");
require("../../style/index.scss");
var _sorty = _interopRequireDefault(require("@inovua/sorty"));
var _findRows = _interopRequireDefault(require("./utils/findRows"));
var _findCells = _interopRequireDefault(require("./utils/findCells"));
var _findHeaderCells = _interopRequireDefault(require("./utils/findHeaderCells"));
var _getSortIcons = _interopRequireDefault(require("./utils/getSortIcons"));
var _wait = _interopRequireDefault(require("./utils/wait"));
var getTextContent = function getTextContent(grid) {
  return (0, _findRows.default)(grid).map(function (r) {
    return (0, _findCells.default)(r).map(_reactDom.findDOMNode).map(function (c) {
      return c.textContent;
    });
  });
};
describe('sort behavior', function () {
  describe('defaultSortInfo', function () {
    it('should render sorted grid when dataSource is array', function () {
      var columns = [{
        name: 'id',
        type: 'number'
      }, {
        name: 'name',
        width: 200
      }, {
        name: 'city',
        width: 200
      }];
      var data = [{
        name: 'marry',
        id: 2,
        city: 'paris'
      }, {
        name: 'john',
        id: 1,
        city: 'london'
      }, {
        name: 'bob',
        id: 3,
        city: 'liverpool'
      }];
      var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
        dataSource: data,
        defaultSortInfo: {
          name: 'id',
          dir: -1
        },
        columns: columns,
        idProperty: "id"
      }));
      return (0, _wait.default)().then(function () {
        var texts = getTextContent(gridInstance);
        expect(texts).to.deep.equal([['3', 'bob', 'liverpool'], ['2', 'marry', 'paris'], ['1', 'john', 'london']]);
        expect([-1, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        gridInstance.unmount();
      });
    });
    it('should render sorted grid and then unsort on header click', function () {
      var columns = [{
        name: 'id',
        type: 'number'
      }, {
        name: 'name',
        width: 200
      }, {
        name: 'city',
        width: 200
      }];
      var data = [{
        name: 'marry',
        id: 2,
        city: 'paris'
      }, {
        name: 'john',
        id: 1,
        city: 'london'
      }, {
        name: 'bob',
        id: 3,
        city: 'liverpool'
      }];
      var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
        dataSource: data,
        defaultSortInfo: {
          name: 'id',
          dir: -1
        },
        columns: columns,
        idProperty: "id"
      }));
      return (0, _wait.default)().then(function () {
        var texts = getTextContent(gridInstance);
        expect(texts).to.deep.equal([['3', 'bob', 'liverpool'], ['2', 'marry', 'paris'], ['1', 'john', 'london']]);
        expect([-1, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        var idHeader = (0, _findHeaderCells.default)(gridInstance).map(_reactDom.findDOMNode)[0];
        (0, _testUtils.simulateMouseEvent)('click', idHeader.firstChild);
        gridInstance.setProps({});
        return (0, _wait.default)();
      }).then(function () {
        expect(getTextContent(gridInstance)).to.deep.equal([['2', 'marry', 'paris'], ['1', 'john', 'london'], ['3', 'bob', 'liverpool']]);
        expect([0, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        gridInstance.unmount();
      });
    });
    it('should render sorted grid - when allowUnsort is false, it should not allow unsorted state', function () {
      var columns = [{
        name: 'id',
        type: 'number'
      }, {
        name: 'name',
        width: 200
      }, {
        name: 'city',
        width: 200
      }];
      var data = [{
        name: 'marry',
        id: 2,
        city: 'paris'
      }, {
        name: 'john',
        id: 1,
        city: 'london'
      }, {
        name: 'bob',
        id: 3,
        city: 'liverpool'
      }];
      var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
        dataSource: data,
        defaultSortInfo: {
          name: 'id',
          dir: -1
        },
        columns: columns,
        allowUnsort: false,
        idProperty: "id"
      }));
      return (0, _wait.default)().then(function () {
        var texts = getTextContent(gridInstance);
        expect(texts).to.deep.equal([['3', 'bob', 'liverpool'], ['2', 'marry', 'paris'], ['1', 'john', 'london']]);
        expect([-1, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        var idHeader = (0, _findHeaderCells.default)(gridInstance).map(_reactDom.findDOMNode)[0];
        (0, _testUtils.simulateMouseEvent)('click', idHeader.firstChild);
        gridInstance.setProps({});
        return (0, _wait.default)();
      }).then(function () {
        expect(getTextContent(gridInstance)).to.deep.equal([['1', 'john', 'london'], ['2', 'marry', 'paris'], ['3', 'bob', 'liverpool']]);
        expect([1, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        gridInstance.unmount();
      });
    });
    it('should render sorted grid - when allowUnsort is false, it should not allow unsorted state when dataSource is Fn->Promise', function () {
      var columns = [{
        name: 'id',
        type: 'number'
      }, {
        name: 'name',
        width: 200
      }, {
        name: 'city',
        width: 200
      }];
      var data = [{
        name: 'marry',
        id: 2,
        city: 'paris'
      }, {
        name: 'john',
        id: 1,
        city: 'london'
      }, {
        name: 'bob',
        id: 3,
        city: 'liverpool'
      }];
      var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
        dataSource: function dataSource(_ref) {
          var sortInfo = _ref.sortInfo;
          return new Promise(function (resolve) {
            setTimeout(function () {
              return resolve((0, _sorty.default)(sortInfo, data));
            }, 10);
          });
        },
        defaultSortInfo: {
          name: 'id',
          dir: -1
        },
        columns: columns,
        allowUnsort: false,
        idProperty: "id"
      }));
      return (0, _wait.default)().then(function () {
        var texts = getTextContent(gridInstance);
        expect(texts).to.deep.equal([['3', 'bob', 'liverpool'], ['2', 'marry', 'paris'], ['1', 'john', 'london']]);
        expect([-1, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        var idHeader = (0, _findHeaderCells.default)(gridInstance).map(_reactDom.findDOMNode)[0];
        (0, _testUtils.simulateMouseEvent)('click', idHeader.firstChild);
        gridInstance.setProps({});
        return (0, _wait.default)();
      }).then(function () {
        expect(getTextContent(gridInstance)).to.deep.equal([['1', 'john', 'london'], ['2', 'marry', 'paris'], ['3', 'bob', 'liverpool']]);
        expect([1, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        gridInstance.unmount();
      });
    });
  });
  describe('sortInfo', function () {
    it('should NOT render sorted grid when dataSource is array', function () {
      var columns = [{
        name: 'id',
        type: 'number'
      }, {
        name: 'name',
        width: 200
      }, {
        name: 'city',
        width: 200
      }];
      var data = [{
        name: 'marry',
        id: 2,
        city: 'paris'
      }, {
        name: 'john',
        id: 1,
        city: 'london'
      }, {
        name: 'bob',
        id: 3,
        city: 'liverpool'
      }];
      var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
        dataSource: data,
        sortInfo: {
          name: 'id',
          dir: -1
        },
        columns: columns,
        idProperty: "id"
      }));
      return (0, _wait.default)().then(function () {
        var texts = getTextContent(gridInstance);
        expect(texts).to.deep.equal([['2', 'marry', 'paris'], ['1', 'john', 'london'], ['3', 'bob', 'liverpool']]);
        expect([-1, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        gridInstance.unmount();
      });
    });
    it('should render sorted grid when dataSource is function that returns an array', function () {
      var columns = [{
        name: 'id',
        type: 'number'
      }, {
        name: 'name',
        width: 200
      }, {
        name: 'city',
        width: 200
      }];
      var data = [{
        name: 'marry',
        id: 2,
        city: 'paris'
      }, {
        name: 'john',
        id: 1,
        city: 'london'
      }, {
        name: 'bob',
        id: 3,
        city: 'liverpool'
      }];
      var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
        dataSource: function dataSource(_ref2) {
          var sortInfo = _ref2.sortInfo;
          return (0, _sorty.default)(sortInfo, data);
        },
        sortInfo: {
          name: 'id',
          dir: -1
        },
        columns: columns,
        idProperty: "id"
      }));
      return (0, _wait.default)().then(function () {
        expect(getTextContent(gridInstance)).to.deep.equal([['3', 'bob', 'liverpool'], ['2', 'marry', 'paris'], ['1', 'john', 'london']]);
        expect([-1, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        gridInstance.setProps({
          sortInfo: {
            name: 'name',
            dir: 1
          }
        });
        return (0, _wait.default)();
      }).then(function () {
        expect(getTextContent(gridInstance)).to.deep.equal([['3', 'bob', 'liverpool'], ['1', 'john', 'london'], ['2', 'marry', 'paris']]);
        expect([0, 1, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        gridInstance.unmount();
      });
    });
    it('should render sorted grid when dataSource is function that returns a Promise', function () {
      var columns = [{
        name: 'id',
        type: 'number'
      }, {
        name: 'name',
        width: 200
      }, {
        name: 'city',
        width: 200
      }];
      var data = [{
        name: 'marry',
        id: 2,
        city: 'paris'
      }, {
        name: 'john',
        id: 1,
        city: 'london'
      }, {
        name: 'bob',
        id: 3,
        city: 'liverpool'
      }];
      var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
        dataSource: function dataSource(_ref3) {
          var sortInfo = _ref3.sortInfo;
          return new Promise(function (resolve) {
            resolve((0, _sorty.default)(sortInfo, data));
          });
        },
        sortInfo: {
          name: 'id',
          dir: -1
        },
        columns: columns,
        idProperty: "id"
      }));
      return (0, _wait.default)().then(function () {
        expect(getTextContent(gridInstance)).to.deep.equal([['3', 'bob', 'liverpool'], ['2', 'marry', 'paris'], ['1', 'john', 'london']]);
        expect([-1, 0, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        gridInstance.setProps({
          sortInfo: {
            name: 'name',
            dir: 1
          }
        });
        return (0, _wait.default)();
      }).then(function () {
        expect(getTextContent(gridInstance)).to.deep.equal([['3', 'bob', 'liverpool'], ['1', 'john', 'london'], ['2', 'marry', 'paris']]);
        expect([0, 1, 0]).to.deep.equal((0, _getSortIcons.default)(gridInstance));
        gridInstance.unmount();
      });
    });
  });
});