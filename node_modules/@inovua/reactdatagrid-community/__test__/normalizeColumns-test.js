/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _normalizeColumns15 = _interopRequireDefault(require("../normalizeColumns"));
var _uuid = _interopRequireDefault(require("uuid"));
describe('normalizeColumns', function () {
  describe('ids', function () {
    it('should use name as id', function () {
      var v4 = _uuid.default.v4;
      _uuid.default.v4 = function () {
        return 'generated_id';
      };
      var _normalizeColumns = (0, _normalizeColumns15.default)({
          columns: [{
            name: 'name'
          }, {
            id: 'xx'
          }, {}]
        }),
        allColumns = _normalizeColumns.allColumns;
      _uuid.default.v4 = v4;
      expect(allColumns[0].id).to.equal('name');
      expect(allColumns[1].id).to.equal('xx');
      expect(allColumns[2].id).to.equal('generated_id');
    });
  });
  describe('width', function () {
    it('should set col.width to be  >= col.minWidth & <= col.maxWidth', function () {
      var _normalizeColumns2 = (0, _normalizeColumns15.default)({
          columns: [{
            minWidth: 100,
            width: 60
          }, {
            maxWidth: 10,
            width: 60
          }]
        }),
        allColumns = _normalizeColumns2.allColumns;
      expect(allColumns[0].width).to.equal(100);
      expect(allColumns[1].width).to.equal(10);
    });
  });
  describe('header', function () {
    it('should set col.header', function () {
      var _normalizeColumns3 = (0, _normalizeColumns15.default)({
          columns: [{
            name: 'colName'
          }]
        }),
        allColumns = _normalizeColumns3.allColumns;
      expect(allColumns[0].header).to.equal('Col name');
    });
  });
  describe('offset', function () {
    it('should be set on visible columns', function () {
      var _normalizeColumns4 = (0, _normalizeColumns15.default)({
          columns: [{
            width: 200
          }, {
            width: 300
          }, {
            width: 400
          }]
        }),
        visibleColumns = _normalizeColumns4.visibleColumns;
      expect(visibleColumns.map(function (c) {
        return c.offset;
      })).to.eql([0, 200, 500]);
    });
  });
  it('should return columnWidthPrefixSums & columnsSize', function () {
    var _normalizeColumns5 = (0, _normalizeColumns15.default)({
        columns: [{
          width: 250
        }, {
          width: 450
        }, {
          flex: 1
        }, {
          flex: 2
        }],
        availableSize: 1000
      }),
      visibleColumns = _normalizeColumns5.visibleColumns,
      columnWidthPrefixSums = _normalizeColumns5.columnWidthPrefixSums,
      totalComputedWidth = _normalizeColumns5.totalComputedWidth;
    expect(visibleColumns.map(function (c) {
      return c.computedWidth;
    })).to.eql([250, 450, 100, 200]);
    expect(visibleColumns.map(function (c) {
      return c.offset;
    })).to.eql([0, 250, 700, 800]);
    expect(columnWidthPrefixSums).to.eql([0, 250, 700, 800]);
    expect(totalComputedWidth).to.eql(1000);
  });
  it('should compute minColumnsSize & columnsSize correctly', function () {
    var _normalizeColumns6 = (0, _normalizeColumns15.default)({
        columns: [{
          flex: 1,
          minWidth: 200
        }, {
          flex: 2,
          minWidth: 200,
          visible: false
        }, {
          minWidth: 300
        }, {
          width: 400
        }],
        availableSize: 1000
      }),
      minColumnsSize = _normalizeColumns6.minColumnsSize,
      totalComputedWidth = _normalizeColumns6.totalComputedWidth;
    expect(minColumnsSize).to.equal(900);
    expect(totalComputedWidth).to.equal(1000);
  });
  it('should return [] for lockedStartColumns if there are no locked columns', function () {
    var _normalizeColumns7 = (0, _normalizeColumns15.default)({
        columns: [{
          name: 'x'
        }]
      }),
      lockedStartColumns = _normalizeColumns7.lockedStartColumns;
    expect(lockedStartColumns).to.eql([]);
  });
  describe('computedWidth', function () {
    it('should be correct when 3 x flex 1 for 300px space', function () {
      var _normalizeColumns8 = (0, _normalizeColumns15.default)({
          columns: [{
            name: 'first',
            flex: 1
          }, {
            name: 'second',
            flex: 1
          }, {
            name: 'third',
            flex: 1
          }],
          availableSize: 300
        }),
        allColumns = _normalizeColumns8.allColumns;
      var computedWidths = allColumns.map(function (c) {
        return c.computedWidth;
      });
      expect(computedWidths).to.eql([100, 100, 100]);
    });
    it('should be correct when 3 x flex 1 for 300px space minWidth: 250', function () {
      var _normalizeColumns9 = (0, _normalizeColumns15.default)({
          columns: [{
            name: 'first',
            flex: 1
          }, {
            name: 'second',
            flex: 1,
            minWidth: 250
          }, {
            name: 'third',
            flex: 1
          }],
          availableSize: 300
        }),
        allColumns = _normalizeColumns9.allColumns;
      var computedWidths = allColumns.map(function (c) {
        return c.computedWidth;
      });
      expect(computedWidths).to.eql([25, 250, 25]);
    });
    it('should be correct for flexes [1,2,3] for 300px space minWidth: 250', function () {
      var _normalizeColumns10 = (0, _normalizeColumns15.default)({
          columns: [{
            name: 'first',
            flex: 1,
            minWidth: 250
          }, {
            name: 'second',
            flex: 2
          }, {
            name: 'third',
            flex: 3
          }],
          availableSize: 300
        }),
        allColumns = _normalizeColumns10.allColumns;
      var computedWidths = allColumns.map(function (c) {
        return c.computedWidth;
      });
      expect(computedWidths).to.eql([250, 20, 30]);
    });
    it('should be correct when 3 x flex 1 for 300px space maxWidth: 50', function () {
      var _normalizeColumns11 = (0, _normalizeColumns15.default)({
          columns: [{
            name: 'first',
            flex: 1
          }, {
            name: 'second',
            flex: 1,
            maxWidth: 50
          }, {
            name: 'third',
            flex: 1
          }],
          availableSize: 300
        }),
        allColumns = _normalizeColumns11.allColumns;
      var computedWidths = allColumns.map(function (c) {
        return c.computedWidth;
      });
      expect(computedWidths).to.eql([125, 50, 125]);
    });
    it('should be correct when 3 x flex 1 for 300px space maxWidth: 50 and we have other columns as well, one with defaultWidth', function () {
      var _normalizeColumns12 = (0, _normalizeColumns15.default)({
          columns: [{
            name: 'first',
            flex: 1
          }, {
            name: 'second',
            flex: 1,
            maxWidth: 50
          }, {
            name: 'third',
            flex: 1
          }, {
            name: 'sized',
            width: 200
          }, {
            name: 'defaultSized',
            defaultWidth: 100
          }],
          availableSize: 600
        }),
        allColumns = _normalizeColumns12.allColumns;
      var computedWidths = allColumns.map(function (c) {
        return c.computedWidth;
      });
      expect(computedWidths).to.eql([125, 50, 125, 200, 100]);
    });
    it('should be correct when 3 x flex 1 for 300px space maxWidth: 50 and there is a invisible col', function () {
      var _normalizeColumns13 = (0, _normalizeColumns15.default)({
          columns: [{
            name: 'invisible',
            flex: 2,
            visible: false
          }, {
            name: 'first',
            flex: 1
          }, {
            name: 'second',
            flex: 1,
            maxWidth: 50
          }, {
            name: 'third',
            flex: 1
          }],
          availableSize: 300
        }),
        visibleColumns = _normalizeColumns13.visibleColumns;
      var computedWidths = visibleColumns.map(function (c) {
        return c.computedWidth;
      });
      expect(computedWidths).to.eql([125, 50, 125]);
    });
    it('should return totalLockedStartWidth, totalLockedEndWidth, totalUnlockedWidth correctly', function () {
      var _normalizeColumns14 = (0, _normalizeColumns15.default)({
          columns: [{
            name: 'a',
            width: 100,
            locked: true
          }, {
            name: 'first',
            width: 200,
            locked: 'start'
          }, {
            name: 'second',
            flex: 1,
            locked: 'end'
          }, {
            name: 'third',
            flex: 3
          }],
          availableSize: 400
        }),
        totalLockedStartWidth = _normalizeColumns14.totalLockedStartWidth,
        totalLockedEndWidth = _normalizeColumns14.totalLockedEndWidth,
        totalUnlockedWidth = _normalizeColumns14.totalUnlockedWidth;
      expect(totalLockedStartWidth).to.equal(300);
      expect(totalLockedEndWidth).to.equal(25);
      expect(totalUnlockedWidth).to.equal(75);
    });
  });
});