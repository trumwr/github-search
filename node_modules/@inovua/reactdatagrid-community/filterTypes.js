/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringTypes = exports.string = exports.selectTypes = exports.select = exports.numberTypes = exports.number = exports.default = exports.dateTypes = exports.date = exports.booleanTypes = exports.boolean = exports.boolTypes = exports.bool = void 0;
var emptyObject = {};
var stringTypes = {
  type: 'string',
  emptyValue: '',
  operators: [{
    name: 'contains',
    fn: function fn(_ref) {
      var value = _ref.value,
        filterValue = _ref.filterValue;
      value = value || '';
      return !filterValue ? true : value.toLowerCase().indexOf(filterValue.toLowerCase()) != -1;
    }
  }, {
    name: 'notContains',
    fn: function fn(_ref2) {
      var value = _ref2.value,
        filterValue = _ref2.filterValue;
      return !filterValue ? true : (value || '').toLowerCase().indexOf(filterValue.toLowerCase()) === -1;
    }
  }, {
    name: 'eq',
    fn: function fn(_ref3) {
      var value = _ref3.value,
        filterValue = _ref3.filterValue;
      return !filterValue ? true : (value || '').toLowerCase() === filterValue.toLowerCase();
    }
  }, {
    name: 'neq',
    fn: function fn(_ref4) {
      var value = _ref4.value,
        filterValue = _ref4.filterValue;
      return !filterValue ? true : (value || '').toLowerCase() !== filterValue.toLowerCase();
    }
  }, {
    name: 'empty',
    fn: function fn(_ref5) {
      var value = _ref5.value;
      return value === '';
    },
    filterOnEmptyValue: true,
    valueOnOperatorSelect: '',
    disableFilterEditor: true
  }, {
    name: 'notEmpty',
    fn: function fn(_ref6) {
      var value = _ref6.value;
      return value !== '';
    },
    filterOnEmptyValue: true,
    valueOnOperatorSelect: '',
    disableFilterEditor: true
  }, {
    name: 'startsWith',
    fn: function fn(_ref7) {
      var value = _ref7.value,
        filterValue = _ref7.filterValue;
      return !filterValue ? true : (value || '').toLowerCase().startsWith(filterValue.toLowerCase());
    }
  }, {
    name: 'endsWith',
    fn: function fn(_ref8) {
      var value = _ref8.value,
        filterValue = _ref8.filterValue;
      return !filterValue ? true : (value || '').toLowerCase().endsWith(filterValue.toLowerCase());
    }
  }]
};
exports.string = exports.stringTypes = stringTypes;
var boolTypes = {
  type: 'bool',
  emptyValue: null,
  operators: [{
    name: 'eq',
    fn: function fn(_ref9) {
      var value = _ref9.value,
        filterValue = _ref9.filterValue;
      return filterValue != null ? filterValue === value : true;
    }
  }, {
    name: 'neq',
    fn: function fn(_ref10) {
      var value = _ref10.value,
        filterValue = _ref10.filterValue;
      return filterValue != null ? filterValue !== value : true;
    }
  }]
};
exports.boolean = exports.bool = exports.boolTypes = boolTypes;
var selectTypes = {
  type: 'select',
  emptyValue: null,
  operators: [{
    name: 'inlist',
    fn: function fn(_ref11) {
      var value = _ref11.value,
        filterValue = _ref11.filterValue;
      return !filterValue || !filterValue.length ? true : filterValue.indexOf(value) !== -1;
    }
  }, {
    name: 'notinlist',
    fn: function fn(_ref12) {
      var value = _ref12.value,
        filterValue = _ref12.filterValue;
      return !filterValue || !filterValue.length ? true : filterValue.indexOf(value) === -1;
    }
  }, {
    name: 'eq',
    fn: function fn(_ref13) {
      var value = _ref13.value,
        filterValue = _ref13.filterValue,
        emptyValue = _ref13.emptyValue;
      return filterValue !== emptyValue ? filterValue === value : true;
    }
  }, {
    name: 'neq',
    fn: function fn(_ref14) {
      var value = _ref14.value,
        filterValue = _ref14.filterValue,
        emptyValue = _ref14.emptyValue;
      return filterValue !== emptyValue ? filterValue !== value : true;
    }
  }]
};
exports.select = exports.selectTypes = selectTypes;
var booleanTypes = {
  type: 'boolean',
  emptyValue: null,
  operators: boolTypes.operators
};
exports.booleanTypes = booleanTypes;
var numberTypes = {
  type: 'number',
  emptyValue: null,
  operators: [{
    name: 'gt',
    fn: function fn(_ref15) {
      var value = _ref15.value,
        filterValue = _ref15.filterValue;
      return filterValue != null ? value > filterValue : true;
    }
  }, {
    name: 'gte',
    fn: function fn(_ref16) {
      var value = _ref16.value,
        filterValue = _ref16.filterValue;
      return filterValue != null ? value >= filterValue : true;
    }
  }, {
    name: 'lt',
    fn: function fn(_ref17) {
      var value = _ref17.value,
        filterValue = _ref17.filterValue;
      return filterValue != null ? value < filterValue : true;
    }
  }, {
    name: 'lte',
    fn: function fn(_ref18) {
      var value = _ref18.value,
        filterValue = _ref18.filterValue;
      return filterValue != null ? value <= filterValue : true;
    }
  }, {
    name: 'eq',
    fn: function fn(_ref19) {
      var value = _ref19.value,
        filterValue = _ref19.filterValue;
      return filterValue != null ? value === filterValue : true;
    }
  }, {
    name: 'neq',
    fn: function fn(_ref20) {
      var value = _ref20.value,
        filterValue = _ref20.filterValue;
      return filterValue != null ? value !== filterValue : true;
    }
  }, {
    name: 'inrange',
    fn: function fn(_ref21) {
      var value = _ref21.value,
        filterValue = _ref21.filterValue;
      var _ref22 = filterValue || emptyObject,
        start = _ref22.start,
        end = _ref22.end;
      if (start != null && end != null) {
        return value >= start && value <= end;
      }
      if (start != null) {
        return value >= start;
      }
      if (end != null) {
        return value <= end;
      }
      return true;
    }
  }, {
    name: 'notinrange',
    fn: function fn(_ref23) {
      var value = _ref23.value,
        filterValue = _ref23.filterValue;
      var _ref24 = filterValue || emptyObject,
        start = _ref24.start,
        end = _ref24.end;
      if (start != null && end != null) {
        return value < start || value > end;
      }
      if (start != null) {
        return value < start;
      }
      if (end != null) {
        return value > end;
      }
      return true;
    }
  }]
};
exports.number = exports.numberTypes = numberTypes;
var dateTypes = {
  type: 'date',
  emptyValue: '',
  operators: [{
    name: 'after',
    fn: function fn(_ref25) {
      var value = _ref25.value,
        filterValue = _ref25.filterValue,
        dateFormat = _ref25.column.dateFormat;
      return filterValue ? window.moment(window.moment(value).format(dateFormat), dateFormat).isAfter(window.moment(filterValue, dateFormat)) : true;
    }
  }, {
    name: 'afterOrOn',
    fn: function fn(_ref26) {
      var value = _ref26.value,
        filterValue = _ref26.filterValue,
        dateFormat = _ref26.column.dateFormat;
      return filterValue != null ? window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrAfter(window.moment(filterValue, dateFormat)) : true;
    }
  }, {
    name: 'before',
    fn: function fn(_ref27) {
      var value = _ref27.value,
        filterValue = _ref27.filterValue,
        dateFormat = _ref27.column.dateFormat;
      return filterValue != null ? window.moment(window.moment(value).format(dateFormat), dateFormat).isBefore(window.moment(filterValue, dateFormat)) : true;
    }
  }, {
    name: 'beforeOrOn',
    fn: function fn(_ref28) {
      var value = _ref28.value,
        filterValue = _ref28.filterValue,
        dateFormat = _ref28.column.dateFormat;
      return filterValue != null ? window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrBefore(window.moment(filterValue, dateFormat)) : true;
    }
  }, {
    name: 'eq',
    fn: function fn(_ref29) {
      var value = _ref29.value,
        filterValue = _ref29.filterValue,
        dateFormat = _ref29.column.dateFormat;
      return filterValue ? window.moment(window.moment(value).format(dateFormat), dateFormat).isSame(window.moment(filterValue, dateFormat)) : true;
    }
  }, {
    name: 'neq',
    fn: function fn(_ref30) {
      var value = _ref30.value,
        filterValue = _ref30.filterValue,
        dateFormat = _ref30.column.dateFormat;
      return filterValue ? !window.moment(window.moment(value).format(dateFormat), dateFormat).isSame(window.moment(filterValue, dateFormat)) : true;
    }
  }, {
    name: 'inrange',
    fn: function fn(_ref31) {
      var value = _ref31.value,
        filterValue = _ref31.filterValue,
        dateFormat = _ref31.column.dateFormat;
      var _ref32 = filterValue || emptyObject,
        start = _ref32.start,
        end = _ref32.end;
      if (start && end) {
        return window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrAfter(window.moment(start, dateFormat)) && window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrBefore(window.moment(end, dateFormat));
      }
      if (start) {
        return window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrAfter(window.moment(start, dateFormat));
      }
      if (end) {
        return window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrBefore(window.moment(end, dateFormat));
      }
      return true;
    }
  }, {
    name: 'notinrange',
    fn: function fn(_ref33) {
      var value = _ref33.value,
        filterValue = _ref33.filterValue,
        dateFormat = _ref33.column.dateFormat;
      var _ref34 = filterValue || emptyObject,
        start = _ref34.start,
        end = _ref34.end;
      if (start && end) {
        return window.moment(window.moment(value).format(dateFormat), dateFormat).isBefore(window.moment(start, dateFormat)) || window.moment(window.moment(value).format(dateFormat), dateFormat).isAfter(window.moment(end, dateFormat));
      }
      if (start) {
        return window.moment(window.moment(value).format(dateFormat), dateFormat).isBefore(window.moment(start, dateFormat));
      }
      if (end) {
        return window.moment(window.moment(value).format(dateFormat), dateFormat).isAfter(window.moment(end, dateFormat));
      }
      return true;
    }
  }]
};
exports.date = exports.dateTypes = dateTypes;
var defaultFilterTypes = {
  select: selectTypes,
  string: stringTypes,
  number: numberTypes,
  bool: boolTypes,
  boolean: booleanTypes,
  date: dateTypes
};
var _default = defaultFilterTypes;
exports.default = _default;