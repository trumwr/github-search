/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var emptyObject = Object.freeze ? Object.freeze({}) : {};
var DEFAULT_WIDTH = 150;
var computeColumnWidths = function computeColumnWidths(col, _ref) {
  var columnMinWidth = _ref.columnMinWidth,
    columnWidth = _ref.columnWidth,
    columnMaxWidth = _ref.columnMaxWidth,
    _ref$columnDefaultWid = _ref.columnDefaultWidth,
    columnDefaultWidth = _ref$columnDefaultWid === void 0 ? DEFAULT_WIDTH : _ref$columnDefaultWid,
    _ref$columnSizes = _ref.columnSizes,
    columnSizes = _ref$columnSizes === void 0 ? emptyObject : _ref$columnSizes,
    _ref$columnFlexes = _ref.columnFlexes,
    columnFlexes = _ref$columnFlexes === void 0 ? emptyObject : _ref$columnFlexes;
  if (columnMinWidth && columnMaxWidth && columnMinWidth > columnMaxWidth) {
    var _ref2 = [columnMaxWidth, columnMinWidth];
    columnMinWidth = _ref2[0];
    columnMaxWidth = _ref2[1];
  }
  var computedDefaultWidth = col.defaultWidth;
  var computedWidth = col.width;
  var computedFlex = col.defaultFlex;
  var computedMinWidth = col.minWidth;
  var computedMaxWidth = col.maxWidth;
  if (col.defaultWidth == null && columnDefaultWidth != null) {
    computedDefaultWidth = columnDefaultWidth;
  }
  if (columnFlexes[col.id]) {
    computedFlex = columnFlexes[col.id];
  }
  if (col.flex) {
    computedFlex = col.flex;
  }
  if (!computedFlex && computedWidth === undefined && columnSizes[col.id] !== undefined) {
    computedFlex = null;
    computedWidth = columnSizes[col.id];
  }
  if (!computedFlex) {
    computedFlex = null;
  }
  if (computedFlex != null && computedWidth == null && columnWidth != null) {
    computedWidth = columnWidth;
  }
  if (computedMinWidth == null && columnMinWidth != null) {
    computedMinWidth = columnMinWidth;
  }
  if (computedMaxWidth == null && columnMaxWidth != null) {
    computedMaxWidth = columnMaxWidth;
  }
  if (computedDefaultWidth != null && computedMinWidth != null && computedDefaultWidth < computedMinWidth) {
    computedDefaultWidth = computedMinWidth;
  }
  if (computedDefaultWidth != null && computedMaxWidth != null && computedDefaultWidth > computedMaxWidth) {
    computedDefaultWidth = computedMaxWidth;
  }
  if (computedWidth != null && computedMinWidth != null && computedWidth < computedMinWidth) {
    computedWidth = computedMinWidth;
  }
  if (computedWidth != null && computedMaxWidth != null && computedWidth > computedMaxWidth) {
    computedWidth = computedMaxWidth;
  }
  if (computedFlex == null) {
    computedWidth = computedWidth || computedDefaultWidth || computedMinWidth;
  }
  col.computedMinWidth = computedMinWidth;
  col.computedMaxWidth = computedMaxWidth;
  col.computedWidth = computedWidth;
  col.computedFlex = computedFlex;
  return col;
};
var _default = computeColumnWidths;
exports.default = _default;