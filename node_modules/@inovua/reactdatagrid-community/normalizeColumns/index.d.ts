/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { TypeSortInfo, TypeComputedColumnsMap, TypeSingleFilterValue, TypePivotColumnSummaryReducer, TypePivotItem, TypeRowReorderFn } from '../types';
import { TypeColumn, TypeComputedColumn } from './types';
import { TypeSummaryReducer, IColumn, TypeColumnGroup } from '../types/TypeColumn';
import { TypePivotUniqueValuesDescriptor } from '../types/TypeDataGridProps';
export type TypeParam = {
    sortInfo?: TypeSortInfo;
    rtl: boolean;
    computedPivotUniqueValuesPerColumn?: TypePivotUniqueValuesDescriptor;
    computedGroups?: TypeColumnGroup[];
    editable?: boolean;
    sortable?: boolean;
    filterable?: boolean;
    resizable?: boolean;
    lockable?: boolean;
    availableWidth?: number;
    generatedColumnsLength?: number;
    filterValueMap: null | {
        [key: string]: TypeSingleFilterValue;
    };
    pivot?: TypePivotItem[];
    columns: TypeColumn[];
    groups?: TypeColumnGroup[];
    columnMinWidth?: number;
    columnMaxWidth?: number;
    columnDefaultWidth?: number;
    columnWidth?: number;
    columnOrder?: string[];
    columnSizes?: {
        [key: string]: number;
    };
    columnVisibilityMap?: {
        [key: string]: boolean;
    };
    columnFlexes?: {
        [key: string]: number;
    };
    lockedColumnsState?: {
        [key: string]: any;
    };
    checkboxColumn?: boolean | IColumn;
    rowIndexColumn?: boolean | IColumn;
    pivotGrandSummaryColumn?: boolean | IColumn;
    groupColumn?: boolean | IColumn;
    filter?: ((c: TypeColumn) => boolean) | null;
    filterValue?: TypeFilterValue;
    showPivotSummaryColumns?: boolean;
    onRowReorder?: TypeRowReorderFn | boolean;
    rowReorderColumn?: IColumn;
    hasValueSetter?: boolean;
};
type TypeFilterValue = {
    name: string;
}[];
declare const _default: ({ generatedColumnsLength, columns, columnMinWidth, columnMaxWidth, columnDefaultWidth, columnWidth, columnSizes, columnVisibilityMap, columnFlexes, lockedColumnsState, columnOrder, computedPivotUniqueValuesPerColumn, editable, pivot, sortable, filterable, resizable, pivotGrandSummaryColumn, lockable, checkboxColumn, rowIndexColumn, filter, rtl, filterValueMap, sortInfo, showPivotSummaryColumns, availableWidth, onRowReorder, rowReorderColumn, groupColumn: computedGroupColumn, }: TypeParam) => {
    pivotColumnSummaryReducers: {
        [key: string]: TypePivotColumnSummaryReducer;
    };
    minColumnsSize: number;
    totalFlexColumnCount: number;
    groupColumnSummaryReducers: {
        [key: string]: TypeSummaryReducer<any>;
    } | undefined;
    totalComputedWidth: number;
    totalLockedStartWidth: number;
    totalLockedEndWidth: number;
    totalUnlockedWidth: number;
    lockedStartColumns: TypeComputedColumn[];
    lockedEndColumns: TypeComputedColumn[];
    unlockedColumns: TypeComputedColumn[];
    columnWidthPrefixSums: number[];
    columnVisibilityMap: {
        [key: string]: boolean;
    };
    computedEnableRowspan: boolean;
    computedHasColSpan: boolean;
    visibleColumns: TypeComputedColumn[];
    allColumns: TypeComputedColumn[];
    columnsMap: TypeComputedColumnsMap;
    visibleColumnsMap: TypeComputedColumnsMap;
    hasValueSetter: boolean;
};
export default _default;
