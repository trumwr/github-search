/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _2 = _interopRequireDefault(require("."));
var _shallowequal = require("../packages/shallowequal");
var _useBuildColumns = _interopRequireDefault(require("./useBuildColumns"));
var _useMemoWithObject = _interopRequireDefault(require("../hooks/useMemoWithObject"));
var includeAll = function includeAll() {
  return true;
};
var useGroupByColumns = function useGroupByColumns(args) {
  var generatedColumnsLength = 0;
  var columns = args.columns;
  var groupBy = args.groupBy,
    groupColumn = args.groupColumn,
    filter = args.filter,
    groupForGroupColumns = args.groupForGroupColumns,
    checkboxColumn = args.checkboxColumn,
    lockedColumnsState = args.lockedColumnsState,
    groupNestingSize = args.groupNestingSize,
    inTransition = args.inTransition;
  if (groupBy && groupBy.length && !groupColumn) {
    var lockedStartCount = 0;
    var groupColumnCount = 0;
    columns.filter(filter || includeAll).forEach(function (col) {
      if (col.groupSpacerColumn) {
        groupColumnCount++;
      }
      var locked = col.locked === undefined ? col.defaultLocked : col.locked;
      var colInLocked = lockedColumnsState[col.id] || lockedColumnsState[col.name];
      if (colInLocked !== undefined) {
        locked = colInLocked;
      }
      if (locked === 'start' || locked === true) {
        lockedStartCount++;
      }
    });
    if (lockedStartCount && checkboxColumn) {
      lockedStartCount++;
    }
    var generatedColumns = (0, _toConsumableArray2.default)(Array(groupBy.length - groupColumnCount)).map(function (_, i) {
      return {
        name: "__col_generated-groupBy-".concat(groupColumnCount + i),
        header: null,
        inTransition: inTransition,
        visibilityTransitionDuration: !!inTransition,
        groupSpacerColumn: true,
        group: groupForGroupColumns,
        locked: !!lockedStartCount,
        defaultWidth: groupNestingSize,
        width: groupNestingSize,
        minWidth: groupNestingSize,
        maxWidth: groupNestingSize,
        showInContextMenu: false,
        cellSelectable: false,
        draggable: false,
        resizable: false,
        sortable: false
      };
    });
    generatedColumnsLength = generatedColumns.length;
    columns = generatedColumnsLength ? [].concat((0, _toConsumableArray2.default)(generatedColumns), (0, _toConsumableArray2.default)(columns)) : columns;
  }
  return {
    columns: columns,
    generatedColumnsLength: generatedColumnsLength
  };
};
var useColumnInfo = function useColumnInfo(params) {
  return (0, _useMemoWithObject.default)(function () {
    var columns = params.columns,
      columnMinWidth = params.columnMinWidth,
      columnMaxWidth = params.columnMaxWidth,
      columnDefaultWidth = params.columnDefaultWidth,
      columnWidth = params.columnWidth,
      groupNestingSize = params.groupNestingSize,
      columnOrder = params.columnOrder,
      onRowReorder = params.onRowReorder,
      columnVisibilityMap = params.columnVisibilityMap,
      columnSizes = params.columnSizes,
      columnFlexes = params.columnFlexes,
      _params$lockedColumns = params.lockedColumnsState,
      lockedColumnsState = _params$lockedColumns === void 0 ? {} : _params$lockedColumns,
      groupBy = params.groupBy,
      maybeAddColumns = params.maybeAddColumns,
      editable = params.editable,
      computedPivotUniqueValuesPerColumn = params.computedPivotUniqueValuesPerColumn,
      checkboxColumn = params.checkboxColumn,
      rowIndexColumn = params.rowIndexColumn,
      groupColumn = params.groupColumn,
      pivot = params.pivot,
      groupForGroupColumns = params.groupForGroupColumns,
      inTransition = params.inTransition,
      rtl = params.rtl,
      hideGroupByColumns = params.hideGroupByColumns,
      availableWidth = params.availableWidth,
      sortInfo = params.sortInfo,
      filterValueMap = params.filterValueMap,
      sortable = params.sortable,
      filterable = params.filterable,
      resizable = params.resizable,
      pivotGrandSummaryColumn = params.pivotGrandSummaryColumn,
      lockable = params.lockable,
      groups = params.groups,
      enableRowExpand = params.enableRowExpand,
      showPivotSummaryColumns = params.showPivotSummaryColumns,
      expandedRows = params.expandedRows,
      defaultExpandedRows = params.defaultExpandedRows,
      renderRowDetails = params.renderRowDetails,
      renderDetailsGrid = params.renderDetailsGrid,
      rowExpandColumn = params.rowExpandColumn,
      rowReorderColumn = params.rowReorderColumn,
      renderRowDetailsExpandIcon = params.renderRowDetailsExpandIcon,
      renderRowDetailsCollapsedIcon = params.renderRowDetailsCollapsedIcon;
    if (pivot) {
      groupColumn = groupColumn || true;
    }
    columns = (0, _useBuildColumns.default)(columns, {
      groups: groups,
      checkboxColumn: checkboxColumn,
      groupBy: groupBy,
      groupColumn: groupColumn,
      rowIndexColumn: rowIndexColumn,
      enableRowExpand: enableRowExpand,
      expandedRows: expandedRows,
      maybeAddColumns: maybeAddColumns,
      defaultExpandedRows: defaultExpandedRows,
      renderRowDetails: renderRowDetails,
      renderDetailsGrid: renderDetailsGrid,
      rowExpandColumn: rowExpandColumn,
      onRowReorder: onRowReorder,
      rowReorderColumn: rowReorderColumn,
      renderRowDetailsExpandIcon: renderRowDetailsExpandIcon,
      renderRowDetailsCollapsedIcon: renderRowDetailsCollapsedIcon
    });
    var filter = !hideGroupByColumns || !groupBy || !groupBy.length ? null : function (col) {
      return groupBy.indexOf(col.id || col.name) == -1;
    };
    var generatedColumnsLength;
    var res = useGroupByColumns({
      groupBy: groupBy,
      groupColumn: groupColumn,
      columns: columns,
      filter: filter,
      groupForGroupColumns: groupForGroupColumns,
      checkboxColumn: checkboxColumn,
      lockedColumnsState: lockedColumnsState,
      groupNestingSize: groupNestingSize,
      inTransition: inTransition
    });
    columns = res.columns;
    generatedColumnsLength = res.generatedColumnsLength;
    return (0, _2.default)({
      pivotGrandSummaryColumn: pivotGrandSummaryColumn,
      generatedColumnsLength: generatedColumnsLength,
      columns: columns,
      columnMinWidth: columnMinWidth,
      columnMaxWidth: columnMaxWidth,
      columnDefaultWidth: columnDefaultWidth,
      columnWidth: columnWidth,
      columnSizes: columnSizes,
      columnFlexes: columnFlexes,
      columnOrder: columnOrder,
      showPivotSummaryColumns: showPivotSummaryColumns,
      computedPivotUniqueValuesPerColumn: computedPivotUniqueValuesPerColumn,
      rtl: rtl,
      filterValueMap: filterValueMap,
      pivot: pivot,
      checkboxColumn: checkboxColumn,
      rowIndexColumn: rowIndexColumn,
      columnVisibilityMap: columnVisibilityMap,
      lockedColumnsState: lockedColumnsState,
      sortable: sortable,
      filterable: filterable,
      resizable: resizable,
      lockable: lockable,
      filter: filter,
      sortInfo: sortInfo,
      editable: editable,
      availableWidth: availableWidth,
      onRowReorder: onRowReorder,
      rowReorderColumn: rowReorderColumn,
      groupColumn: groupColumn
    });
  }, params, function (a, b) {
    var _equalReturnKey = (0, _shallowequal.equalReturnKey)(a, b),
      result = _equalReturnKey.result,
      key = _equalReturnKey.key;
    return result;
  });
};
var _default = useColumnInfo;
exports.default = _default;