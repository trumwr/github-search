/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _setColumnId = _interopRequireDefault(require("../setColumnId"));
var _computeFlexWidths = _interopRequireDefault(require("../utils/flex/computeFlexWidths"));
var _mapColumns = _interopRequireDefault(require("../mapColumns"));
var _defaultCheckColumnId = require("./defaultCheckColumnId");
var _defaultRowExpandColumnId = require("./defaultRowExpandColumnId");
var _defaultRowIndexColumnId = require("./defaultRowIndexColumnId");
var _defaultGroupColumnId = require("./defaultGroupColumnId");
var _defaultRowReorderColumnId = require("./defaultRowReorderColumnId");
var _setComputedColumnWidths = _interopRequireDefault(require("./setComputedColumnWidths"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DEFAULT_COLUMN_PROPS = {
  isColumn: true,
  keepFlex: true
};
var defaultPivotGrandSummaryColumn = {
  sortable: false,
  draggable: false,
  filterable: false
};
var defaultPivotSummaryColumn = defaultPivotGrandSummaryColumn;
var emptyArray = [];
var emptyObject = Object.freeze ? Object.freeze({}) : {};
var _default = function _default(_ref) {
  var _ref$generatedColumns = _ref.generatedColumnsLength,
    generatedColumnsLength = _ref$generatedColumns === void 0 ? 0 : _ref$generatedColumns,
    columns = _ref.columns,
    columnMinWidth = _ref.columnMinWidth,
    columnMaxWidth = _ref.columnMaxWidth,
    columnDefaultWidth = _ref.columnDefaultWidth,
    columnWidth = _ref.columnWidth,
    _ref$columnSizes = _ref.columnSizes,
    columnSizes = _ref$columnSizes === void 0 ? emptyObject : _ref$columnSizes,
    _ref$columnVisibility = _ref.columnVisibilityMap,
    columnVisibilityMap = _ref$columnVisibility === void 0 ? emptyObject : _ref$columnVisibility,
    _ref$columnFlexes = _ref.columnFlexes,
    columnFlexes = _ref$columnFlexes === void 0 ? emptyObject : _ref$columnFlexes,
    _ref$lockedColumnsSta = _ref.lockedColumnsState,
    lockedColumnsState = _ref$lockedColumnsSta === void 0 ? emptyObject : _ref$lockedColumnsSta,
    columnOrder = _ref.columnOrder,
    computedPivotUniqueValuesPerColumn = _ref.computedPivotUniqueValuesPerColumn,
    editable = _ref.editable,
    pivot = _ref.pivot,
    sortable = _ref.sortable,
    filterable = _ref.filterable,
    resizable = _ref.resizable,
    pivotGrandSummaryColumn = _ref.pivotGrandSummaryColumn,
    lockable = _ref.lockable,
    checkboxColumn = _ref.checkboxColumn,
    rowIndexColumn = _ref.rowIndexColumn,
    filter = _ref.filter,
    rtl = _ref.rtl,
    filterValueMap = _ref.filterValueMap,
    sortInfo = _ref.sortInfo,
    showPivotSummaryColumns = _ref.showPivotSummaryColumns,
    _ref$availableWidth = _ref.availableWidth,
    availableWidth = _ref$availableWidth === void 0 ? 0 : _ref$availableWidth,
    onRowReorder = _ref.onRowReorder,
    rowReorderColumn = _ref.rowReorderColumn,
    computedGroupColumn = _ref.groupColumn;
  if (columnVisibilityMap) {
    columnVisibilityMap = _objectSpread({}, columnVisibilityMap);
  }
  var groupColumnSummaryReducers = {};
  var pivotColumnSummaryReducers = {};
  var addSortInfo = function addSortInfo(col) {
    col.computedSortable = (typeof col.sortable === 'boolean' ? col.sortable : sortable) || false;
    col.computedSortInfo = null;
    if (col.computedSortable && sortInfo) {
      col.computedSortInfo = Array.isArray(sortInfo) ? sortInfo.filter(function (info) {
        return info.name === col.id || info.id === col.id || info.name === col.sortName;
      })[0] : sortInfo.name === col.id || sortInfo.id === col.id || sortInfo.name === col.sortName ? sortInfo : null;
    }
  };
  var addFilterValue = function addFilterValue(col) {
    col.computedFilterable = (typeof col.filterable === 'boolean' ? col.filterable : filterable) || undefined;
    col.computedFilterValue = null;
    if (col.computedFilterable && filterValueMap) {
      col.computedFilterValue = filterValueMap[col.id];
    }
    if (col.computedFilterable === undefined && col.computedFilterValue) {
      col.computedFilterable = true;
    }
    col.computedFilterable = !!col.computedFilterable;
  };
  var hasLockedStart = false;
  var hasLockedEnd = false;
  var hasValueSetter = false;
  var rowExpandColumn;
  var setComputedColumnWidthsParam = {
    columnFlexes: columnFlexes,
    columnSizes: columnSizes,
    columnDefaultWidth: columnDefaultWidth,
    columnWidth: columnWidth,
    columnMinWidth: columnMinWidth,
    columnMaxWidth: columnMaxWidth
  };
  var hasDedicatedGroupColumn = false;
  var normalizedColumns = columns.map(function (column) {
    return _objectSpread(_objectSpread({}, DEFAULT_COLUMN_PROPS), column);
  }).map(_setColumnId.default).map(function (col, i) {
    col.computedInitialIndex = i - generatedColumnsLength;
    (0, _setComputedColumnWidths.default)(col, setComputedColumnWidthsParam);
    col.computedVisible = col.visible !== undefined ? !!col.visible : columnVisibilityMap[col.id] === false ? false : true;
    if (col.computedVisible && pivot && !col.groupSummaryReducer && col.id !== _defaultGroupColumnId.id) {
      col.computedVisible = false;
    }
    if (col.computedVisible === false) {
      columnVisibilityMap[col.id] = false;
    } else {
      delete columnVisibilityMap[col.id];
      if (col.id === _defaultGroupColumnId.id) {
        hasDedicatedGroupColumn = true;
      }
    }
    col.computedHeader = col.header === undefined ? col.name || '' : col.header;
    col.computedLocked = col.locked;
    if (col.computedLocked === undefined && lockedColumnsState[col.id] !== undefined) {
      col.computedLocked = lockedColumnsState[col.id];
    }
    if (col.computedLocked === undefined && col.defaultLocked !== undefined) {
      col.computedLocked = col.defaultLocked;
    }
    if (!filter || filter(col)) {
      if (col.computedLocked === true || col.computedLocked === 'start') {
        col.computedLocked = 'start';
        hasLockedStart = true;
      }
      if (col.computedLocked === 'end') {
        hasLockedEnd = true;
      }
    }
    col.computedLocked = col.computedLocked || false;
    if (col.id === _defaultRowExpandColumnId.id) {
      rowExpandColumn = col;
    }
    if (col.enableColumnHover != null) {
      col.computedEnableColumnHover = col.enableColumnHover;
      delete col.enableColumnHover;
    }
    if (col.setValue) {
      hasValueSetter = true;
    }
    return col;
  });
  if (hasLockedStart) {
    if (rowExpandColumn != null) {
      rowExpandColumn.computedLocked = 'start';
    }
    if (checkboxColumn) {
      var normalizedCheckboxColumn = normalizedColumns.filter(function (c) {
        return c.checkboxColumn && c.id == _defaultCheckColumnId.id;
      })[0];
      if (normalizedCheckboxColumn) {
        normalizedCheckboxColumn.computedLocked = 'start';
      }
    }
    if (hasDedicatedGroupColumn) {
      var normalizedGroupColumn = normalizedColumns.filter(function (c) {
        return c.groupColumn && c.id == _defaultGroupColumnId.id;
      })[0];
      if (normalizedGroupColumn) {
        normalizedGroupColumn.computedLocked = 'start';
      }
    }
    var autoLockColumns = normalizedColumns.filter(function (c) {
      return !!c.autoLock;
    });
    if (autoLockColumns.length) {
      autoLockColumns.forEach(function (c) {
        c.computedLocked = 'start';
      });
    }
    if (rowReorderColumn || onRowReorder && (typeof onRowReorder === 'function' || typeof onRowReorder === 'boolean')) {
      var normalizedRowReorderColumn = normalizedColumns.filter(function (c) {
        return c.id === _defaultRowReorderColumnId.id;
      })[0];
      if (normalizedRowReorderColumn) {
        normalizedRowReorderColumn.computedLocked = 'start';
      }
    }
  }
  var computedEnableRowspan = false;
  normalizedColumns.forEach(function (col, index) {
    col.computedAbsoluteIndex = index;
    addSortInfo(col);
    addFilterValue(col);
    if (typeof col.rowspan === 'function') {
      computedEnableRowspan = true;
    }
    col.computedResizable = (typeof col.resizable !== 'boolean' ? resizable : col.resizable) || false;
    col.computedLockable = (typeof col.lockable !== 'boolean' ? lockable : col.lockable) || false;
  });
  var columnsMap = (0, _mapColumns.default)(normalizedColumns, {
    showWarnings: true
  });
  var visibleColumns = normalizedColumns.filter(function (c) {
    return c.computedVisible !== false;
  });
  if (columnOrder) {
    if (checkboxColumn) {
      var checkboxColumnIndex = columnOrder.indexOf(_defaultCheckColumnId.id);
      if (checkboxColumnIndex == -1) {
        columnOrder = [_defaultCheckColumnId.id].concat((0, _toConsumableArray2.default)(columnOrder));
      }
    }
  }
  if (rowExpandColumn) {
    if (!columnOrder) {
      columnOrder = visibleColumns.map(function (c) {
        return c.id;
      });
    }
    var rowExpandColumnIndex = columnOrder.indexOf(_defaultRowExpandColumnId.id);
    if (rowExpandColumnIndex !== 0) {
      columnOrder = [_defaultRowExpandColumnId.id].concat((0, _toConsumableArray2.default)(columnOrder.filter(function (id) {
        return id != _defaultRowExpandColumnId.id;
      })));
    }
  }
  if (rowReorderColumn || onRowReorder && (typeof onRowReorder === 'function' || typeof onRowReorder === 'boolean')) {
    if (!columnOrder) {
      columnOrder = visibleColumns.map(function (c) {
        return c.id;
      });
    }
    var rowReorderColumnIndex = columnOrder.indexOf(_defaultRowReorderColumnId.id);
    if (rowReorderColumnIndex !== 0) {
      columnOrder = [_defaultRowReorderColumnId.id].concat((0, _toConsumableArray2.default)(columnOrder.filter(function (id) {
        return id !== _defaultRowReorderColumnId.id;
      })));
    }
  }
  if (rowIndexColumn) {
    if (!columnOrder) {
      columnOrder = visibleColumns.map(function (c) {
        return c.id;
      });
    }
    var rowIndexColumnIndex = columnOrder.indexOf(_defaultRowIndexColumnId.id);
    if (rowIndexColumnIndex != 0) {
      columnOrder = [].concat((0, _toConsumableArray2.default)(columnOrder.filter(function (id) {
        var col = columnsMap[id];
        return col && col.groupSpacerColumn;
      })), [_defaultRowIndexColumnId.id], (0, _toConsumableArray2.default)(columnOrder.filter(function (id) {
        var col = columnsMap[id];
        if (!col) {
          return false;
        }
        return id != _defaultRowIndexColumnId.id && !col.groupSpacerColumn;
      })));
    }
  }
  if (generatedColumnsLength) {
    if (!columnOrder) {
      columnOrder = visibleColumns.map(function (c) {
        return c.id;
      });
    }
    var generatedColumns = visibleColumns.filter(function (c) {
      return c.groupSpacerColumn;
    });
    var generatedColumnIds = generatedColumns.reduce(function (acc, col) {
      acc[col.id] = true;
      return acc;
    }, {});
    columnOrder = [].concat((0, _toConsumableArray2.default)(generatedColumns.map(function (c) {
      return c.id;
    })), (0, _toConsumableArray2.default)(columnOrder.filter(function (id) {
      return !generatedColumnIds[id];
    })));
  }
  if (columnOrder) {
    var groupSpacerColumns = visibleColumns.filter(function (col) {
      return col.groupSpacerColumn;
    });
    var _checkboxColumn = visibleColumns.filter(function (col) {
      return col.checkboxColumn;
    });
    var groupColumns = visibleColumns.filter(function (col) {
      return col.groupColumn && !col.groupSpacerColumn;
    });
    var ungroupColumns = visibleColumns.filter(function (col) {
      if (computedGroupColumn) {
        return !col.groupColumn && !col.groupSpacerColumn && !col.checkboxColumn;
      } else {
        return !col.groupColumn && !col.groupSpacerColumn;
      }
    });
    visibleColumns = columnOrder.map(function (colId) {
      return ungroupColumns.find(function (col) {
        return col.id == colId;
      });
    }).filter(function (x) {
      return !!x;
    });
    if (computedGroupColumn) {
      visibleColumns = [].concat((0, _toConsumableArray2.default)(_checkboxColumn), (0, _toConsumableArray2.default)(groupSpacerColumns), (0, _toConsumableArray2.default)(groupColumns), (0, _toConsumableArray2.default)(visibleColumns));
    } else {
      visibleColumns = [].concat((0, _toConsumableArray2.default)(groupSpacerColumns), (0, _toConsumableArray2.default)(groupColumns), (0, _toConsumableArray2.default)(visibleColumns));
    }
  }
  if (typeof filter == 'function') {
    visibleColumns = visibleColumns.filter(filter);
  }
  normalizedColumns.forEach(function (col) {
    if (col.groupSummaryReducer) {
      groupColumnSummaryReducers[col.id] = col.groupSummaryReducer;
      if (!col.groupSummaryReducer.reducer && col.groupSummaryReducer.reduce) {
        groupColumnSummaryReducers[col.id].reducer = col.groupSummaryReducer.reduce;
      }
    }
  });
  var groupColumn = visibleColumns.filter(function (col) {
    return !!col.groupColumn;
  })[0];
  if (pivot && computedPivotUniqueValuesPerColumn && groupColumn) {
    var aggregateColumns = visibleColumns.filter(function (col) {
      return !!col.groupSummaryReducer;
    });
    var newColumns = [groupColumn].concat((0, _toConsumableArray2.default)(getPivotColumns(aggregateColumns, computedPivotUniqueValuesPerColumn, columnSizes, pivot, pivotGrandSummaryColumn, showPivotSummaryColumns))).map(function (col) {
      (0, _setComputedColumnWidths.default)(col, setComputedColumnWidthsParam);
      col.computedResizable = (typeof col.resizable !== 'boolean' ? resizable : col.resizable) || false;
      return col;
    });
    visibleColumns = newColumns;
    columnsMap = _objectSpread(_objectSpread({}, columnsMap), (0, _mapColumns.default)(newColumns, {
      showWarnings: true
    }));
  }
  var flexes = [];
  var maxWidths = [];
  var minWidths = [];
  var minColumnsSize = 0;
  var availableWidthForFlex = availableWidth;
  visibleColumns.forEach(function (col) {
    if (col.computedFlex == null) {
      availableWidthForFlex -= col.computedWidth || col.computedDefaultWidth || col.computedMinWidth || 0;
    }
    flexes.push(col.computedFlex || 0);
    maxWidths.push(col.computedMaxWidth || null);
    minWidths.push(col.computedMinWidth || null);
  });
  availableWidthForFlex = Math.max(availableWidthForFlex, 0);
  var flexWidths = (0, _computeFlexWidths.default)({
    flexes: flexes,
    availableSize: availableWidthForFlex,
    maxWidths: maxWidths,
    minWidths: minWidths
  });
  var totalFlexColumnCount = 0;
  visibleColumns.forEach(function (col, index) {
    if (col.computedFlex != null) {
      col.computedWidth = flexWidths[index] || 0;
      totalFlexColumnCount++;
      minColumnsSize += col.minWidth || 0;
    } else {
      minColumnsSize += col.computedWidth || 0;
    }
  });
  var unlockedColumns = visibleColumns;
  var lockedStartColumns = [];
  var lockedEndColumns = [];
  if (hasLockedStart || hasLockedEnd) {
    unlockedColumns = groupColumn && hasLockedStart ? visibleColumns.filter(function (col) {
      return !col.computedLocked && !col.groupColumn;
    }) : visibleColumns.filter(function (col) {
      return !col.computedLocked;
    });
    lockedStartColumns = hasLockedStart ? visibleColumns.filter(function (col) {
      return col.computedLocked === 'start' || col.groupColumn;
    }) : emptyArray;
    lockedEndColumns = hasLockedEnd ? groupColumn && hasLockedStart ? visibleColumns.filter(function (col) {
      return col.computedLocked === 'end' && !col.groupColumn;
    }) : visibleColumns.filter(function (col) {
      return col.computedLocked === 'end';
    }) : emptyArray;
    visibleColumns = [].concat((0, _toConsumableArray2.default)(lockedStartColumns), (0, _toConsumableArray2.default)(unlockedColumns), (0, _toConsumableArray2.default)(lockedEndColumns));
  }
  var visibleColumnsMap = (0, _mapColumns.default)(visibleColumns, {
    showWarnings: true
  });
  var sumPrefixWidth = 0;
  var totalLockedStartWidth = 0;
  var totalLockedEndWidth = 0;
  var totalUnlockedWidth = 0;
  var columnWidthPrefixSums = [];
  var computedHasColSpan = false;
  visibleColumns.forEach(function (col, index, arr) {
    col.computedVisibleIndex = index;
    col.computedVisibleCount = arr.length;
    if (col.colspan) {
      computedHasColSpan = true;
    }
    col.computedOffset = sumPrefixWidth;
    var computedLocked = col.computedLocked,
      computedWidth = col.computedWidth;
    if (computedLocked === 'start') {
      totalLockedStartWidth += computedWidth || 0;
    } else if (computedLocked === 'end') {
      totalLockedEndWidth += computedWidth || 0;
    } else {
      totalUnlockedWidth += computedWidth || 0;
    }
    addSortInfo(col);
    if (editable && col.editable === undefined) {
      col.computedEditable = true;
    }
    if (col.editable !== undefined) {
      col.computedEditable = col.editable;
    }
    columnWidthPrefixSums.push(col.computedOffset || 0);
    sumPrefixWidth += computedWidth || 0;
  });
  if (pivot) {
    pivot.forEach(function (pivotCol) {
      if (typeof pivotCol !== 'string' && pivotCol.summaryReducer) {
        pivotColumnSummaryReducers[pivotCol.name] = pivotCol.summaryReducer;
      }
    });
  }
  return {
    pivotColumnSummaryReducers: pivotColumnSummaryReducers,
    minColumnsSize: minColumnsSize,
    totalFlexColumnCount: totalFlexColumnCount,
    groupColumnSummaryReducers: Object.keys(groupColumnSummaryReducers).length ? groupColumnSummaryReducers : undefined,
    totalComputedWidth: sumPrefixWidth,
    totalLockedStartWidth: totalLockedStartWidth,
    totalLockedEndWidth: totalLockedEndWidth,
    totalUnlockedWidth: totalUnlockedWidth,
    lockedStartColumns: lockedStartColumns,
    lockedEndColumns: lockedEndColumns,
    unlockedColumns: unlockedColumns,
    columnWidthPrefixSums: columnWidthPrefixSums,
    columnVisibilityMap: columnVisibilityMap,
    computedEnableRowspan: computedEnableRowspan,
    computedHasColSpan: computedHasColSpan,
    visibleColumns: visibleColumns,
    allColumns: normalizedColumns,
    columnsMap: columnsMap,
    visibleColumnsMap: visibleColumnsMap,
    hasValueSetter: hasValueSetter
  };
};
exports.default = _default;
var getPivotGroupColumnForPath = function getPivotGroupColumnForPath(columnConfig, _ref2) {
  var pivot = _ref2.pivot,
    pivotGrandSummaryColumn = _ref2.pivotGrandSummaryColumn;
  var pivotMap = pivot.reduce(function (acc, p) {
    if (!p.summaryReducer) {
      return acc;
    }
    var col = p ? p.summaryColumn || {} : {};
    acc[p.name || p] = col;
    return acc;
  }, {});
  if (pivotGrandSummaryColumn === true) {
    pivotGrandSummaryColumn = {};
  }
  if (pivotGrandSummaryColumn) {
    pivotGrandSummaryColumn.pivotGrandSummaryColumn = true;
    pivotGrandSummaryColumn = _objectSpread(_objectSpread({}, defaultPivotGrandSummaryColumn), pivotGrandSummaryColumn);
  }
  columnConfig = _objectSpread(_objectSpread({}, defaultPivotSummaryColumn), columnConfig);
  var _columnConfig = columnConfig,
    pivotSummaryPath = _columnConfig.pivotSummaryPath;
  var lastItem = pivotSummaryPath[pivotSummaryPath.length - 1];
  var name = lastItem ? lastItem.field : null;
  var col = !lastItem ? pivotGrandSummaryColumn : pivotMap[name] || {};
  var result = columnConfig;
  if (lastItem) {
    columnConfig.header = "Summary for ".concat(lastItem.field, " ").concat(lastItem.value);
  }
  if (!pivotGrandSummaryColumn && !pivotMap[name]) {
    return null;
  }
  if (col) {
    if (typeof col === 'function') {
      result = _objectSpread(_objectSpread({}, columnConfig), col(columnConfig));
    } else {
      result = _objectSpread(_objectSpread({}, columnConfig), col);
    }
  }
  return result;
};
var getPivotColumns = function getPivotColumns(aggregateColumns, uniqueValuesRoot, columnSizes, pivot, pivotGrandSummaryColumn, showPivotSummaryColumns) {
  var parentGroups = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
  var pivotColumnPath = arguments.length > 7 ? arguments[7] : undefined;
  var newColumns = [];
  var field = uniqueValuesRoot.field,
    values = uniqueValuesRoot.values;
  var parentGroup = parentGroups[parentGroups.length - 1];
  if (field && values) {
    Object.keys(values).forEach(function (value) {
      var groupId = "".concat(parentGroup ? parentGroup.name + '_' : '').concat(field, ":").concat(value);
      var group = {
        name: groupId,
        header: "".concat(field, "-").concat(value),
        pivotPath: [{
          value: value,
          field: field
        }]
      };
      if (parentGroup) {
        group.group = parentGroup.name;
        group.pivotPath = [].concat((0, _toConsumableArray2.default)(parentGroup.pivotPath || []), (0, _toConsumableArray2.default)(group.pivotPath));
      }
      var nextRoot = values[value];
      pivotColumnPath = pivotColumnPath || [];
      newColumns.push.apply(newColumns, (0, _toConsumableArray2.default)(getPivotColumns(aggregateColumns, nextRoot, columnSizes, pivot, pivotGrandSummaryColumn, showPivotSummaryColumns, [].concat((0, _toConsumableArray2.default)(parentGroups), [{
        name: groupId,
        pivotPath: group.pivotPath,
        depth: parentGroup ? parentGroup.depth + 1 : 0
      }]), [].concat((0, _toConsumableArray2.default)(pivotColumnPath), [value]))));
      if (!parentGroup && showPivotSummaryColumns) {
        var summaryCol = getPivotGroupColumnForPath({
          header: "Summary for ".concat(group.header),
          id: "__summary_".concat(group.name),
          pivotSummaryColumn: true,
          pivotSummaryPath: group.pivotPath
        }, {
          pivot: pivot
        });
        if (summaryCol) {
          newColumns.push(summaryCol);
        }
      }
    });
  } else {
    newColumns.push.apply(newColumns, (0, _toConsumableArray2.default)(aggregateColumns.map(function (col) {
      var result = _objectSpread(_objectSpread({}, col), {}, {
        sortable: false,
        showInContextMenu: false,
        draggable: false,
        pivotColumn: true,
        pivotColumnPath: [].concat((0, _toConsumableArray2.default)(pivotColumnPath || []), [col.pivotName || col.name || col.id]),
        id: "".concat(parentGroup.name, "-").concat(col.id),
        group: parentGroup.name
      });
      if (columnSizes[result.id]) {
        result.computedWidth = columnSizes[result.id];
      }
      return result;
    })));
    var prevParentGroup = parentGroups[parentGroups.length - 2];
    if (showPivotSummaryColumns && prevParentGroup) {
      var summaryCol = getPivotGroupColumnForPath({
        group: prevParentGroup ? prevParentGroup.name : undefined,
        header: "Summary for ".concat(parentGroup.name, " - ").concat(prevParentGroup ? prevParentGroup.name : ''),
        id: "__summary__".concat(parentGroup.name),
        pivotSummaryPath: parentGroup.pivotPath,
        pivotSummaryColumn: true
      }, {
        pivot: pivot
      });
      if (summaryCol) {
        newColumns.push(summaryCol);
      }
    }
  }
  if (!parentGroup && pivotGrandSummaryColumn && showPivotSummaryColumns) {
    newColumns.push(getPivotGroupColumnForPath({
      header: "Grand summary",
      id: "__summary__grand",
      pivotSummaryColumn: true,
      pivotSummaryPath: []
    }, {
      pivot: pivot,
      pivotGrandSummaryColumn: pivotGrandSummaryColumn
    }));
  }
  return newColumns;
};