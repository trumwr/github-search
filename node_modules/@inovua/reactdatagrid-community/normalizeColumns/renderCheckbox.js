/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = _interopRequireDefault(require("react"));
var _CheckBox = _interopRequireDefault(require("../packages/CheckBox"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var stopPropagation = function stopPropagation(e) {
  e.stopPropagation();
};
var emptyObject = {};
var _default = function _default(cellProps) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject,
    headerProps = _ref.headerProps;
  var selectAll = cellProps.selectAll,
    deselectAll = cellProps.deselectAll,
    selectedCount = cellProps.selectedCount,
    unselectedCount = cellProps.unselectedCount,
    totalCount = cellProps.totalCount,
    headerCell = cellProps.headerCell,
    empty = cellProps.empty,
    rowIndex = cellProps.rowIndex,
    rowSelected = cellProps.rowSelected,
    setRowSelected = cellProps.setRowSelected,
    renderCheckbox = cellProps.renderCheckbox,
    hideIntermediateState = cellProps.hideIntermediateState;
  if (empty && !renderCheckbox) {
    return null;
  }
  var checkboxProps = {
    disabled: empty,
    tabIndex: cellProps.checkboxTabIndex,
    onClick: stopPropagation,
    supportIndeterminate: false,
    theme: cellProps.theme,
    className: 'InovuaReactDataGrid__checkbox'
  };
  if (headerCell) {
    var selected = headerProps.selected,
      unselected = headerProps.unselected;
    checkboxProps.supportIndeterminate = !hideIntermediateState;
    var checked;
    if (selected === true) {
      checked = unselected && (0, _typeof2.default)(unselected) == 'object' && Object.keys(unselected).length != 0 ? checkboxProps.supportIndeterminate ? null : false : true;
    } else {
      checked = selectedCount == 0 || !totalCount ? false : totalCount <= selectedCount && unselectedCount === 0 ? true : checkboxProps.supportIndeterminate ? null : false;
    }
    checkboxProps.checked = checked;
    checkboxProps.onChange = checked === false ? selectAll : deselectAll;
  } else {
    checkboxProps.onChange = setRowSelected ? setRowSelected.bind(null, rowIndex) : null;
    checkboxProps.checked = rowSelected;
  }
  if (renderCheckbox) {
    if (checkboxProps.checked === null && checkboxProps.supportIndeterminate) {
      checkboxProps.isIndeterminate = true;
    }
    var result = renderCheckbox(checkboxProps, cellProps);
    if (result !== undefined) {
      return result;
    }
  }
  delete checkboxProps.isIndeterminate;
  return _react.default.createElement(_CheckBox.default, _objectSpread({}, checkboxProps));
};
exports.default = _default;