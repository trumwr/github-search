/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _NumericInput = _interopRequireDefault(require("../packages/NumericInput"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var NumericEditor = function NumericEditor(props) {
  var editorProps = props.editorProps;
  var editorPropsStyle = editorProps ? editorProps.style : null;
  return _react.default.createElement("div", {
    className: 'InovuaReactDataGrid__cell__editor InovuaReactDataGrid__cell__editor--number'
  }, _react.default.createElement(_NumericInput.default, _objectSpread(_objectSpread({}, editorProps), {}, {
    autoFocus: props.autoFocus,
    defaultValue: props.value,
    onChange: props.onChange,
    theme: props.theme,
    style: _objectSpread(_objectSpread({}, editorPropsStyle), {}, {
      minWidth: Math.max(0, props.cellProps.computedWidth - 30)
    }),
    onBlur: props.onComplete,
    onKeyDown: function onKeyDown(e) {
      if (e.key === 'Escape') {
        props.onCancel && props.onCancel(e);
      }
      if (e.key === 'Enter') {
        props.onComplete && props.onComplete(e);
      }
      if (e.key == 'Tab') {
        props.onTabNavigation && props.onTabNavigation(true, e.shiftKey ? -1 : 1);
      }
    }
  })));
};
var _default = NumericEditor;
exports.default = _default;