/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderColumnFilterContextMenu = exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _useProperty5 = _interopRequireDefault(require("../../../hooks/useProperty"));
var _getFilterValueForColumns = _interopRequireDefault(require("../../../hooks/useDataSource/getFilterValueForColumns"));
var _batchUpdate = _interopRequireDefault(require("../../../utils/batchUpdate"));
var _mapColumns = _interopRequireDefault(require("../../../mapColumns"));
var _ua = require("../../../common/ua");
var _Menu = _interopRequireDefault(require("../../../packages/Menu"));
var _renderGridMenu = _interopRequireDefault(require("../../../renderGridMenu"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var emptyArray = [];
var COLUMN_MENU_ALIGN_POSITIONS = ['tl-bl', 'tr-br', 'tl-tr', 'tr-tl', 'br-tr', 'bl-tl', 'br-tl', 'bl-tr', 'lc-tr', 'rc-tl'];
var COLUMN_MENU_ALIGN_POSITIONS_RTL = ['tr-br', 'tl-bl', 'tr-tl', 'tl-tr', 'br-tr', 'bl-tl', 'br-tl', 'bl-tr', 'lc-tr', 'rc-tl'];
var renderColumnFilterContextMenu = function renderColumnFilterContextMenu(computedProps, computedPropsRef) {
  if (!computedProps) {
    return null;
  }
  var cellProps = computedProps.columnFilterContextMenuProps;
  if (!cellProps) {
    return null;
  }
  var filterValue = computedProps.computedFilterValueMap ? computedProps.computedFilterValueMap[cellProps.id] : null;
  if (!filterValue) {
    return null;
  }
  var columnOperators = computedProps.initialProps.filterTypes[filterValue.type].operators || emptyArray;
  var selected = {
    operator: filterValue.operator
  };
  var showEnableButton = filterValue.active === false;
  var filterType = computedProps.initialProps.filterTypes[filterValue.type];
  var isFiltered = computedProps.computedFiltered;
  var items = function () {
    var activationItems = ['-', {
      label: computedProps.i18n('enable', 'Enable'),
      itemId: 'enableFilter',
      disabled: !showEnableButton,
      onClick: function onClick() {
        var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
          active: true
        });
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        computedProps.computedOnColumnFilterValueChange({
          columnId: cellProps.id,
          columnIndex: cellProps.computedVisibleIndex,
          cellProps: cellProps,
          filterValue: newFilterValue
        });
        computedProps.hideColumnFilterContextMenu();
      }
    }, {
      label: computedProps.i18n('disable', 'Disable'),
      disabled: showEnableButton,
      itemId: 'disableFilter',
      onClick: function onClick() {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
          active: false
        });
        computedProps.computedOnColumnFilterValueChange({
          columnId: cellProps.id,
          cellProps: cellProps,
          columnIndex: cellProps.computedVisibleIndex,
          filterValue: newFilterValue
        });
        computedProps.hideColumnFilterContextMenu();
      }
    }, '-', {
      label: computedProps.i18n('clear', 'Clear'),
      itemId: 'clearFilter',
      disabled: filterValue.value === filterType.emptyValue,
      onClick: function onClick() {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        computedProps.clearColumnFilter(cellProps.id);
        computedProps.hideColumnFilterContextMenu();
      }
    }, {
      label: computedProps.i18n('clearAll', 'Clear All'),
      itemId: 'clearAllFilters',
      disabled: !isFiltered,
      onClick: function onClick() {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        computedProps.clearAllFilters();
        computedProps.hideColumnFilterContextMenu();
      }
    }];
    var items = columnOperators.map(function (operator) {
      return {
        label: computedProps.i18n(operator.label, operator.label) || computedProps.i18n(operator.name, operator.name),
        name: 'operator',
        itemId: "operator-".concat(operator.name),
        value: operator.name
      };
    });
    items.push.apply(items, activationItems);
    return items;
  }();
  var onSelectionChange = function onSelectionChange(selected) {
    var operator = selected.operator;
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var filterTypes = computedProps.initialProps.filterTypes;
    var filterTypeDescription = filterTypes[filterType.type] || {
      operators: []
    };
    var operatorDescriptor = filterTypeDescription.operators.filter(function (op) {
      return op.name === operator;
    })[0];
    var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
      operator: operator
    });
    if (operatorDescriptor && operatorDescriptor.valueOnOperatorSelect !== undefined) {
      newFilterValue.value = operatorDescriptor.valueOnOperatorSelect;
    }
    computedProps.computedOnColumnFilterValueChange({
      columnId: cellProps.id,
      cellProps: cellProps,
      columnIndex: cellProps.computedVisibleIndex,
      filterValue: newFilterValue
    });
    computedProps.hideColumnFilterContextMenu();
  };
  var rtl = computedProps.rtl;
  var menuProps = {
    autoFocus: true,
    dismissWithEscape: true,
    items: items,
    theme: computedProps.theme,
    updatePositionOnScroll: computedProps.updateMenuPositionOnScroll,
    nativeScroll: !_ua.IS_MS_BROWSER,
    enableSelection: true,
    maxHeight: computedProps.columnFilterContextMenuConstrainTo ? null : computedProps.getMenuAvailableHeight(),
    style: {
      zIndex: 10000,
      position: computedProps.columnFilterContextMenuPosition || 'absolute'
    },
    selected: selected,
    onSelectionChange: onSelectionChange,
    onDismiss: computedProps.hideColumnFilterContextMenu,
    constrainTo: computedProps.columnFilterContextMenuConstrainTo,
    alignPositions: computedProps.columnFilterContextMenuAlignPositions || rtl ? COLUMN_MENU_ALIGN_POSITIONS_RTL : COLUMN_MENU_ALIGN_POSITIONS,
    alignTo: computedProps.columnFilterContextMenuAlignToRef.current
  };
  var result;
  if (computedProps.initialProps.renderColumnFilterContextMenu) {
    result = computedProps.initialProps.renderColumnFilterContextMenu(menuProps, {
      cellProps: cellProps,
      grid: computedPropsRef,
      props: computedProps
    });
  }
  if (result === undefined) {
    result = _react.default.createElement(_Menu.default, _objectSpread({}, menuProps));
  }
  if (computedProps.initialProps.renderGridMenu) {
    return computedProps.initialProps.renderGridMenu(result, computedProps);
  }
  return (0, _renderGridMenu.default)(result, computedProps);
};
exports.renderColumnFilterContextMenu = renderColumnFilterContextMenu;
var useFilterValue = function useFilterValue(props, _ref, computedPropsRef) {
  var columnsMap = _ref.columnsMap,
    enableFiltering = _ref.enableFiltering;
  var _useProperty = (0, _useProperty5.default)(props, 'filterValue'),
    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),
    filterValue = _useProperty2[0],
    doSetFilterValue = _useProperty2[1];
  filterValue = (0, _react.useMemo)(function () {
    return (0, _getFilterValueForColumns.default)(filterValue || [], columnsMap);
  }, [filterValue || [], columnsMap]);
  if (!filterValue.length) {
    filterValue = null;
  }
  var setFilterValue = (0, _react.useCallback)(function (filterValue) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    filterValue = (0, _getFilterValueForColumns.default)(filterValue, computedProps.columnsMap);
    var queue = (0, _batchUpdate.default)();
    queue.commit(function () {
      computedProps.setLoadDataTrigger(function (loadDataTrigger) {
        return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ['filterValue']);
      });
      doSetFilterValue(filterValue);
    });
  }, [doSetFilterValue]);
  return [filterValue, setFilterValue];
};
var isFilterable = function isFilterable(_ref2) {
  var enableFiltering = _ref2.enableFiltering,
    filterValue = _ref2.filterValue;
  if (enableFiltering !== undefined) {
    return enableFiltering;
  }
  if (!Array.isArray(filterValue) || !filterValue.length) {
    return false;
  }
  return true;
};
var useFilters = function useFilters(props, computedProps, computedPropsRef) {
  var _useProperty3 = (0, _useProperty5.default)(props, 'enableFiltering'),
    _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),
    enableFiltering = _useProperty4[0],
    setEnableFiltering = _useProperty4[1];
  var isColumnFiltered = (0, _react.useCallback)(function (col) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return false;
    }
    var filterValue = computedProps.getColumnFilterValue(col.id);
    if (!filterValue) {
      return false;
    }
    var filterType = computedProps.initialProps.filterTypes[filterValue.type];
    return filterValue.value !== filterType.emptyValue;
  }, []);
  var columnsMap = (0, _react.useMemo)(function () {
    return (0, _mapColumns.default)(props.columns, {
      showWarnings: false
    });
  }, [props.columns]);
  var _useFilterValue = useFilterValue(props, {
      enableFiltering: enableFiltering,
      columnsMap: columnsMap
    }, computedPropsRef),
    _useFilterValue2 = (0, _slicedToArray2.default)(_useFilterValue, 2),
    computedFilterValue = _useFilterValue2[0],
    setFilterValue = _useFilterValue2[1];
  var getMenuAvailableHeight = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return undefined;
    }
    var filtersHeight = 0;
    if (computedProps.computedFilterable) {
      var filterNode = computedProps.getDOMNode().querySelector('.InovuaReactDataGrid__column-header__filter-wrapper');
      if (filterNode) {
        filtersHeight = filterNode.offsetHeight;
      }
    }
    return computedProps.size ? computedProps.size.height - 5 + filtersHeight : undefined;
  }, []);
  var clearAllFilters = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (!computedProps.computedFilterValueMap) {
      return;
    }
    var allFiltersValue = [];
    var headerCells = computedProps.getColumnLayout().getHeaderCells();
    computedProps.allColumns.forEach(function (column) {
      var filterValue = computedProps.computedFilterValueMap[column.id];
      if (!filterValue) {
        return;
      }
      var filterType = computedProps.initialProps.filterTypes[filterValue.type];
      var headerCell = headerCells[column.computedVisibleIndex];
      var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
        value: filterType.emptyValue
      });
      if (headerCell && headerCell.filter) {
        headerCell.filter.setValue(newFilterValue.value);
      }
      allFiltersValue.push(newFilterValue);
    });
    setFilterValue(allFiltersValue);
  }, [setFilterValue]);
  var columnFilterContextMenuAlignToRef = (0, _react.useRef)(null);
  var columnFilterContextMenuConstrainToRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    columnFilterContextMenuProps = _useState2[0],
    setColumnFilterContextMenuProps = _useState2[1];
  var showColumnFilterContextMenu = (0, _react.useCallback)(function (alignTo, cellProps) {
    var computedProps = computedPropsRef.current;
    if (columnFilterContextMenuProps || !computedProps) {
      return;
    }
    columnFilterContextMenuAlignToRef.current = alignTo;
    columnFilterContextMenuConstrainToRef.current = computedProps.columnFilterContextMenuConstrainTo || computedProps.getDOMNode();
    if (computedProps.hideColumnContextMenu) {
      computedProps.hideColumnContextMenu();
    }
    setColumnFilterContextMenuProps(cellProps);
    computedProps.notifyColumnFilterVisibleStateChange(true);
  }, [setColumnFilterContextMenuProps]);
  var hideColumnFilterContextMenu = (0, _react.useCallback)(function (node) {
    var computedProps = computedPropsRef.current;
    if (columnFilterContextMenuProps && computedProps) {
      setColumnFilterContextMenuProps(null);
      computedProps.notifyColumnFilterVisibleStateChange(false);
    }
    if (node && !node.type) {
      var filterIcon = node.querySelector('.InovuaReactDataGrid__column-header__filter-settings-icon');
      filterIcon.focus();
    }
  }, [columnFilterContextMenuProps]);
  var shouldShowFilteringMenuItems = (0, _react.useCallback)(function () {
    if (props.showFilteringMenuItems) {
      return true;
    }
    if (computedFilterValue) {
      return true;
    }
    if (enableFiltering) {
      return true;
    }
    return false;
  }, [computedFilterValue, enableFiltering, props.showFilteringMenuItems]);
  var computedFilterValueMap = (0, _react.useMemo)(function () {
    return computedFilterValue ? computedFilterValue.reduce(function (acc, columnFilterValue) {
      acc[columnFilterValue.name] = columnFilterValue;
      return acc;
    }, {}) : null;
  }, [computedFilterValue]);
  var computedOnColumnFilterValueChange = (0, _react.useCallback)(function (columnFilterValue) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var isBinaryOperator = computedProps.isBinaryOperator;
    if (computedProps.onColumnFilterValueChange) {
      computedProps.onColumnFilterValueChange(columnFilterValue);
    }
    var computedFilterValue = computedProps.computedFilterValue;
    var newFilterValue = (computedFilterValue || []).map(function (oldFilterValue) {
      if (oldFilterValue.name === columnFilterValue.columnId) {
        var emptyValue = getColumnFilterEmptyValue(columnFilterValue.columnId);
        if (columnFilterValue.filterValue.type === 'date' || columnFilterValue.filterValue.type === 'number') {
          if (isBinaryOperator(oldFilterValue.operator) && !isBinaryOperator(columnFilterValue.filterValue.operator)) {
            return _objectSpread(_objectSpread({}, columnFilterValue.filterValue), {}, {
              value: emptyValue
            });
          }
          if (!isBinaryOperator(oldFilterValue.operator) && isBinaryOperator(columnFilterValue.filterValue.operator)) {
            return _objectSpread(_objectSpread({}, columnFilterValue.filterValue), {}, {
              value: columnFilterValue.filterValue && columnFilterValue.filterValue.value != null && columnFilterValue.filterValue.value.start != null ? columnFilterValue.filterValue.value : {
                start: emptyValue,
                end: emptyValue
              }
            });
          }
        }
        return columnFilterValue.filterValue;
      }
      return oldFilterValue;
    }).filter(function (f) {
      return !!f;
    });
    setFilterValue(newFilterValue);
  }, [setFilterValue]);
  var getColumnFilterValue = (0, _react.useCallback)(function (column) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return null;
    }
    var col = computedProps.getColumnBy(column);
    if (!col) {
      return null;
    }
    if (!computedProps.computedFilterValueMap) {
      return null;
    }
    return computedProps.computedFilterValueMap[col.id];
  }, []);
  var setColumnFilterValue = (0, _react.useCallback)(function (column, value, operator) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return null;
    }
    var filterValue = getColumnFilterValue(column);
    if (!filterValue) {
      return;
    }
    var newFilterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
      value: value
    });
    if (operator) {
      newFilterValue.operator = operator;
    }
    var col = computedProps.getColumnBy(column);
    var headerCells = computedProps.getColumnLayout().getHeaderCells();
    var headerCell = headerCells[col.computedVisibleIndex];
    if (!headerCell || !headerCell.filter) {
      return;
    }
    computedProps.computedOnColumnFilterValueChange({
      columnId: col.id,
      columnIndex: col.computedVisibleIndex,
      filterValue: newFilterValue
    });
    headerCell.filter.setValue(value);
  }, []);
  var getColumnFilterEmptyValue = (0, _react.useCallback)(function (idNameOrIndex) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var col = computedProps.getColumnBy(idNameOrIndex);
    if (!col) {
      return;
    }
    if (!computedProps.computedFilterValueMap) {
      return;
    }
    var filterValue = computedProps.computedFilterValueMap[col.id];
    if (!filterValue) {
      return;
    }
    var filterType = computedProps.initialProps.filterTypes[filterValue.type];
    return filterType.emptyValue;
  }, []);
  var clearColumnFilter = (0, _react.useCallback)(function (idNameOrIndex) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var col = computedProps.getColumnBy(idNameOrIndex);
    if (!col) {
      return;
    }
    computedProps.setColumnFilterValue(idNameOrIndex, getColumnFilterEmptyValue(idNameOrIndex));
  }, []);
  var isFiltered = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return false;
    }
    return (computedProps.computedFilterValue || []).reduce(function (result, filterValue) {
      if (result) {
        return true;
      }
      var col = computedProps.getColumnBy(filterValue.name);
      if (col && isColumnFiltered(col)) {
        return true;
      }
      return false;
    }, false);
  }, []);
  var computedFiltered = isFiltered();
  return {
    clearColumnFilter: clearColumnFilter,
    computedOnColumnFilterValueChange: computedOnColumnFilterValueChange,
    computedFilterValueMap: computedFilterValueMap,
    computedFilterValue: computedFilterValue,
    computedFiltered: computedFiltered,
    computedFilterable: isFilterable({
      enableFiltering: enableFiltering,
      filterValue: computedFilterValue
    }),
    setEnableFiltering: setEnableFiltering,
    setFilterValue: setFilterValue,
    getMenuAvailableHeight: getMenuAvailableHeight,
    showColumnFilterContextMenu: showColumnFilterContextMenu,
    hideColumnFilterContextMenu: hideColumnFilterContextMenu,
    shouldShowFilteringMenuItems: shouldShowFilteringMenuItems,
    renderColumnFilterContextMenu: renderColumnFilterContextMenu,
    columnFilterContextMenuProps: columnFilterContextMenuProps,
    columnFilterContextMenuAlignToRef: columnFilterContextMenuAlignToRef,
    clearAllFilters: clearAllFilters,
    getColumnFilterValue: getColumnFilterValue,
    setColumnFilterValue: setColumnFilterValue,
    isColumnFiltered: isColumnFiltered
  };
};
var _default = useFilters;
exports.default = _default;