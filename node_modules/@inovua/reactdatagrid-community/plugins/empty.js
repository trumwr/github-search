/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _warn = require("../warn");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var emptyPlugin = {
  name: '',
  hook: function hook(props, computedProps, computedPropsRef) {}
};
var _default = [_objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'sortable-columns',
  defaultProps: function defaultProps() {
    return {
      sortable: false
    };
  }
}), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'license',
  defaultProps: function defaultProps() {
    return {};
  },
  renderLicenseNotice: function renderLicenseNotice() {
    return null;
  }
}), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'menus',
  defaultProps: function defaultProps() {
    return {
      showColumnMenuTool: false
    };
  }
}), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'group-and-pivot',
  hook: function hook() {
    return {
      computeDataStep: function computeDataStep(_ref) {
        var config = _ref.config;
        (0, _warn.warnOnce)('You are trying to use the grouping or pivot functionality, but are currently using the community edition. Please use the enterprise edition for this functionality to be available.');
        return config;
      }
    };
  },
  defaultProps: function defaultProps() {
    return {};
  }
}), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'tree',
  hook: function hook() {
    return {
      computeTreeData: function computeTreeData(data, arg) {
        (0, _warn.warnOnce)('You are trying to use the tree functionality, but are currently using the community edition. Please use the enterprise edition for this functionality to be available.');
        return data;
      }
    };
  },
  defaultProps: function defaultProps() {
    return {};
  }
}), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'filters',
  defaultProps: function defaultProps() {
    return {
      columnFilterContextMenuConstrainTo: true,
      columnFilterContextMenuPosition: 'fixed'
    };
  }
}), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'cell-selection',
  hook: function hook() {
    return {};
  },
  defaultProps: function defaultProps() {
    return {};
  }
}), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'live-pagination',
  hook: function hook() {
    return {};
  },
  defaultProps: function defaultProps() {
    return {};
  }
}), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'row-index-column',
  renderRowResizeIndicator: function renderRowResizeIndicator() {
    return null;
  },
  defaultProps: function defaultProps() {
    return {};
  }
}), _objectSpread(_objectSpread({}, emptyPlugin), {}, {
  name: 'clipboard',
  hook: function hook() {
    return {};
  },
  defaultProps: function defaultProps() {
    return {};
  }
})];
exports.default = _default;