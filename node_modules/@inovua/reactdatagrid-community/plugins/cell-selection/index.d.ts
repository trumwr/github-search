/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="react" />
declare const _default: {
    name: string;
    hook: (props: import("../../types").TypeDataGridProps, { rowSelectionEnabled, hasRowNavigation, listenOnCellEnter, }: {
        listenOnCellEnter: boolean;
        rowSelectionEnabled: boolean;
        hasRowNavigation: boolean;
    }, computedPropsRef: import("react").MutableRefObject<import("../../types").TypeComputedProps | null>) => {
        computedActiveCell: [number, number] | null | undefined;
        getCellSelectionIdKey: (rowIndex: number, columnIndex: number) => string | number;
        getCellSelectionKey?: ((cellProps: string | number | import("../../types").TypeCellProps, col: import("../../types").TypeGetColumnByParam) => string | number) | undefined;
        cellDragStartRowIndex: number | null;
        setCellDragStartRowIndex: import("react").Dispatch<import("react").SetStateAction<number | null>>;
        setActiveCell: (activeCell: [number, number] | null) => void;
        incrementActiveCell: (direction: [number, number]) => void;
        computedCellSelection: import("../../types").TypeCellSelection;
        setCellSelection: (cellSelection: import("../../types").TypeCellSelection) => void;
        cellSelectionEnabled: boolean;
        cellMultiSelectionEnabled: boolean;
        cellNavigationEnabled: boolean;
        computedCellBulkUpdateMouseDown: (event: MouseEvent, cellProps: import("../../types").CellProps) => void;
        bulkUpdateMouseDown: boolean;
        computedCellBulkUpdateMouseUp: (event: MouseEvent) => void;
        onCellSelectionDraggerMouseDown: ((event: any, { columnIndex, rowIndex }: {
            columnIndex: number;
            rowIndex: number;
        }, selectionFixedCell?: [number, number] | null | undefined) => void) | null;
        toggleActiveCellSelection: (fakeEvent?: {
            metaKey: boolean;
            ctrlKey: boolean;
            shiftKey: boolean;
        } | undefined) => void;
        getCellSelectionBetween: (start?: [number, number] | undefined, end?: [number, number] | undefined) => {
            [key: string]: boolean;
        };
        onCellEnter: ((event: any, { columnIndex, rowIndex }: {
            columnIndex: number;
            rowIndex: number;
        }) => void) | null;
    };
    defaultProps: () => {};
};
export default _default;
