/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _detectUa = require("../../../detect-ua");
var _Header = require("../../../Layout/ColumnLayout/HeaderLayout/Header");
var _Menu = _interopRequireDefault(require("../../../packages/Menu"));
var _renderGridMenu = _interopRequireDefault(require("../../../renderGridMenu"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var COLUMN_MENU_ALIGN_POSITIONS = ['tl-bl', 'tr-br', 'tl-tr', 'tr-tl', 'br-tr', 'bl-tl', 'br-tl', 'bl-tr', 'lc-tr', 'rc-tl'];
var COLUMN_MENU_ALIGN_POSITIONS_RTL = ['tr-br', 'tl-bl', 'tr-tl', 'tl-tr', 'br-tr', 'bl-tl', 'br-tl', 'bl-tr', 'lc-tr', 'rc-tl'];
var notEmpty = function notEmpty(x) {
  return !!x;
};
var getTopComputedProps = function getTopComputedProps(computedProps) {
  while (computedProps.initialProps.parentComputedProps) {
    computedProps = computedProps.initialProps.parentComputedProps;
  }
  return computedProps;
};
var getAlignTo = function getAlignTo(selection, menuTools, index) {
  var filteredTools = menuTools.filter(function (_, i) {
    return i !== Object.keys(selection).length;
  });
  var length = filteredTools.length;
  var alignTo;
  if (index > length) {
    alignTo = filteredTools[length - 1];
  } else if (index <= length) {
    alignTo = filteredTools[index - 1];
  }
  if (!alignTo) {
    alignTo = filteredTools[0];
  }
  return alignTo;
};
var _default = function _default(computedProps, computedPropsRef) {
  var cellProps = computedProps.columnContextMenuProps;
  if (!cellProps) {
    return null;
  }
  var groupBy = computedProps.computedGroupBy;
  var visibleCountWithColumnMenu = 0;
  var visibleMap = computedProps.initialProps.columns.reduce(function (acc, col) {
    var column = computedProps.getColumnBy(col.name || col.id);
    if (column && computedProps.isColumnVisible(column)) {
      var value = column.id || column.name;
      acc[value] = column.id || column.name;
      if (column.showColumnMenuTool !== false) {
        visibleCountWithColumnMenu++;
      }
    }
    return acc;
  }, {});
  var onSelectionChange = function onSelectionChange(selection) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (_detectUa.IS_IE) {
      computedProps.preventIEMenuCloseRef.current = true;
      setTimeout(function () {
        computedProps.preventIEMenuCloseRef.current = false;
      }, 100);
    }
    computedProps.initialProps.columns.forEach(function (col) {
      var computedCol = computedProps.getColumnBy(col);
      if (computedCol) {
        var visible = (computedCol.id in selection);
        computedProps.setColumnVisible(col, visible);
      }
    });
    if (computedProps.updateMenuPositionOnColumnsChange) {
      requestAnimationFrame(function () {
        var menuTools = Array.prototype.slice.call(computedProps.domRef.current.querySelectorAll('.InovuaReactDataGrid__column-header__menu-tool'));
        var mainMenu = computedProps.domRef.current.querySelector('.InovuaReactDataGrid > .inovua-react-toolkit-menu');
        var cellInstance = computedProps.columnContextMenuInstanceProps;
        var columnIndex = cellInstance.computedVisibleIndex;
        var alignTo = getAlignTo(selection, menuTools, columnIndex);
        if (alignTo) {
          computedProps.updateMainMenuPosition(alignTo);
          if (mainMenu) {
            mainMenu.style.transition = 'transform 200ms';
            setTimeout(function () {
              mainMenu.style.transition = '';
            }, 200);
          }
        }
      });
    }
  };
  var currentColumn = computedProps.getColumnBy(cellProps.id);
  var colSortInfo = currentColumn.computedSortInfo;
  var lockLimit = !cellProps.computedLocked && computedProps.unlockedColumns.length <= 1;
  var isAutoLock = cellProps.autoLock && computedProps.lockedStartColumns && !!computedProps.lockedStartColumns.filter(function (c) {
    return !c.autoLock;
  }).length;
  var showColumnMenuLockOptions = cellProps.showColumnMenuLockOptions !== undefined ? cellProps.showColumnMenuLockOptions : computedProps.initialProps.showColumnMenuLockOptions;
  if (cellProps.lockable === false) {
    showColumnMenuLockOptions = false;
  }
  var showColumnMenuGroupOptions = cellProps.showColumnMenuGroupOptions !== undefined ? cellProps.showColumnMenuGroupOptions : computedProps.initialProps.showColumnMenuGroupOptions;
  var showColumnMenuFilterOptions = cellProps.showColumnMenuFilterOptions !== undefined ? cellProps.showColumnMenuFilterOptions : computedProps.initialProps.showColumnMenuFilterOptions;
  var showColumnMenuSortOptions = cellProps.showColumnMenuSortOptions !== undefined ? cellProps.showColumnMenuSortOptions : computedProps.initialProps.showColumnMenuSortOptions;
  var enableColumnAutosize = computedProps.enableColumnAutosize ? computedProps.enableColumnAutosize : computedProps.initialProps.enableColumnAutosize;
  var columnsItem = {
    label: computedProps.i18n('columns'),
    itemId: 'columns',
    menuProps: {
      dismissOnClick: false
    },
    items: computedProps.getColumnsInOrder().filter(function (c) {
      return c.showInContextMenu !== false;
    }).map(function (c) {
      var value = c.id || c.name || '';
      return {
        label: (0, _Header.getCellHeader)(c, c, null, {
          currentColumn: currentColumn
        }),
        itemId: "column-".concat(c.id),
        value: value,
        disabled: c.hideable === false || visibleCountWithColumnMenu === 1 && visibleMap[value],
        name: value
      };
    })
  };
  if (computedProps.computedPivot) {
    columnsItem = null;
  }
  var items = [showColumnMenuSortOptions === false ? null : {
    label: computedProps.i18n('sortAsc'),
    itemId: 'sortAsc',
    disabled: !cellProps.computedSortable || colSortInfo && colSortInfo.dir === 1,
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      computedProps.setColumnSortInfo(cellProps.id, 1);
      computedProps.hideColumnContextMenu();
    }
  }, showColumnMenuSortOptions === false ? null : {
    label: computedProps.i18n('sortDesc'),
    itemId: 'sortDesc',
    disabled: !cellProps.computedSortable || colSortInfo && colSortInfo.dir === -1,
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      computedProps.setColumnSortInfo(cellProps.id, -1);
      computedProps.hideColumnContextMenu();
    }
  }, (computedProps.initialProps.allowUnsort || computedProps.computedIsMultiSort) && showColumnMenuSortOptions !== false ? {
    label: computedProps.i18n('unsort'),
    itemId: 'unsort',
    disabled: !colSortInfo,
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      computedProps.unsortColumn(cellProps.id);
      computedProps.hideColumnContextMenu();
    }
  } : null, showColumnMenuGroupOptions === false ? null : '-', showColumnMenuGroupOptions === false ? null : {
    label: computedProps.i18n('group'),
    itemId: 'group',
    disabled: !groupBy || groupBy.indexOf(cellProps.id) !== -1 || currentColumn.groupBy === false,
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      computedProps.addGroupByColumn(cellProps.id);
      computedProps.hideColumnContextMenu();
    }
  }, showColumnMenuGroupOptions === false ? null : {
    label: computedProps.i18n('ungroup'),
    itemId: 'ungroup',
    disabled: !groupBy || groupBy.indexOf(cellProps.id) === -1 || currentColumn.groupBy === false,
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      computedProps.removeGroupByColumn(cellProps.id);
      computedProps.hideColumnContextMenu();
    }
  }, showColumnMenuLockOptions === false ? null : '-', showColumnMenuLockOptions === false ? null : {
    label: computedProps.i18n('lockStart'),
    itemId: 'lockStart',
    disabled: cellProps.computedLocked === 'start' || lockLimit,
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      computedProps.setColumnLocked(cellProps.id, 'start');
      computedProps.hideColumnContextMenu();
    }
  }, showColumnMenuLockOptions === false ? null : {
    label: computedProps.i18n('lockEnd'),
    itemId: 'lockEnd',
    disabled: cellProps.computedLocked === 'end' || lockLimit || isAutoLock,
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      computedProps.setColumnLocked(cellProps.id, 'end');
      computedProps.hideColumnContextMenu();
    }
  }, showColumnMenuLockOptions === false ? null : {
    label: computedProps.i18n('unlock'),
    itemId: 'unlock',
    disabled: !cellProps.computedLocked || isAutoLock,
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      computedProps.setColumnLocked(cellProps.id, false);
      computedProps.hideColumnContextMenu();
    }
  }, computedProps.enableColumnAutosize ? '-' : null, computedProps.enableColumnAutosize === false ? null : {
    label: computedProps.i18n('autoSizeToFit'),
    itemId: 'autoSizeToFit',
    menuProps: {
      dismissOnClick: true
    },
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (computedProps.setColumnSizesToFit) {
        computedProps.setColumnSizesToFit();
        computedProps.hideColumnContextMenu();
      }
    }
  }, computedProps.enableColumnAutosize === false ? null : {
    label: computedProps.i18n('autoresizeThisColumn'),
    itemId: 'autoresizeThisColumn',
    menuProps: {
      dismissOnClick: true
    },
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var columnId = cellProps.id;
      if (computedProps.setColumnSizeAuto) {
        computedProps.setColumnSizeAuto(columnId);
        computedProps.hideColumnContextMenu();
      }
    }
  }, enableColumnAutosize === false ? null : {
    label: computedProps.i18n('autoresizeAllColumns'),
    itemId: 'autoresizeAllColumns',
    menuProps: {
      dismissOnClick: true
    },
    onClick: function onClick() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (computedProps.setColumnsSizesAuto) {
        computedProps.setColumnsSizesAuto();
        computedProps.hideColumnContextMenu();
      }
    }
  }, columnsItem ? '-' : null, columnsItem].filter(notEmpty);
  if (items[0] === '-') {
    items = items.slice(1);
  }
  if (computedProps.initialProps.enableFiltering !== false && showColumnMenuFilterOptions !== false) {
    var isFilterable = computedProps.computedFilterable;
    var showFilteringMenuItems = computedProps.shouldShowFilteringMenuItems ? computedProps.shouldShowFilteringMenuItems() : false;
    if (showFilteringMenuItems) {
      items.push('-');
      items.push({
        label: computedProps.i18n('showFilteringRow', 'Show Filtering Row'),
        itemId: 'showFilteringRow',
        disabled: isFilterable,
        onClick: function onClick() {
          var computedProps = computedPropsRef.current;
          if (!computedProps) {
            return;
          }
          computedProps.setEnableFiltering(true);
          computedProps.hideColumnContextMenu();
        }
      });
      items.push({
        label: computedProps.i18n('hideFilteringRow', 'Hide Filtering Row'),
        itemId: 'hideFilteringRow',
        disabled: !isFilterable,
        onClick: function onClick() {
          var computedProps = computedPropsRef.current;
          if (!computedProps) {
            return;
          }
          computedProps.setEnableFiltering(false);
          computedProps.hideColumnContextMenu();
        }
      });
    }
  }
  items.forEach(function (item) {
    var onClick = item.onClick;
    if (onClick && _detectUa.IS_MS_BROWSER) {
      item.onClick = function () {
        requestAnimationFrame(onClick);
      };
    }
  });
  var constrainToComputedProps = getTopComputedProps(computedProps);
  var constrainTo = true;
  var menuProps = {
    updatePositionOnScroll: computedProps.updateMenuPositionOnScroll,
    stopBlurPropagation: false,
    maxHeight: constrainToComputedProps.initialProps.columnContextMenuConstrainTo ? null : constrainTo === true ? null : computedProps.getMenuAvailableHeight(),
    nativeScroll: !_detectUa.IS_MS_BROWSER,
    autoFocus: true,
    enableSelection: true,
    defaultSelected: visibleMap,
    onDismiss: function onDismiss() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      computedProps.hideColumnContextMenu();
    },
    onSelectionChange: onSelectionChange,
    style: {
      zIndex: 110000,
      position: computedProps.initialProps.columnContextMenuPosition || 'absolute'
    },
    items: items,
    theme: computedProps.theme,
    constrainTo: constrainTo,
    alignPositions: computedProps.initialProps.columnContextMenuAlignPositions || computedProps.rtl ? COLUMN_MENU_ALIGN_POSITIONS_RTL : COLUMN_MENU_ALIGN_POSITIONS,
    alignTo: computedProps.columnContextMenuInfoRef.current.menuAlignTo
  };
  var result;
  if (computedProps.initialProps.renderColumnContextMenu) {
    result = computedProps.initialProps.renderColumnContextMenu(menuProps, {
      cellProps: cellProps,
      grid: computedProps.publicAPI,
      computedProps: computedProps,
      computedPropsRef: computedPropsRef
    });
  }
  if (result === undefined) {
    result = _react.default.createElement(_Menu.default, _objectSpread({}, menuProps));
  }
  if (computedProps.initialProps.renderGridMenu) {
    return computedProps.initialProps.renderGridMenu(result, computedProps);
  }
  return (0, _renderGridMenu.default)(result, computedProps);
};
exports.default = _default;