/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
Object.defineProperty(exports, "renderColumnContextMenu", {
  enumerable: true,
  get: function get() {
    return _renderColumnContextMenu.default;
  }
});
Object.defineProperty(exports, "renderRowContextMenu", {
  enumerable: true,
  get: function get() {
    return _renderRowContextMenu.default;
  }
});
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _detectUa = require("../../../detect-ua");
var _region = _interopRequireDefault(require("../../../packages/region"));
var _getGlobal = require("../../../getGlobal");
var _renderColumnContextMenu = _interopRequireDefault(require("./renderColumnContextMenu"));
var _renderRowContextMenu = _interopRequireDefault(require("./renderRowContextMenu"));
var globalObject = (0, _getGlobal.getGlobal)();
var _default = function _default(props, computedProps, computedPropsRef) {
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    columnContextMenuProps = _useState2[0],
    setColumnContextMenuProps = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    rowContextMenuProps = _useState4[0],
    setRowContextMenuProps = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    columnContextMenuInstanceProps = _useState6[0],
    setColumnContextMenuInstanceProps = _useState6[1];
  var getConstrainRegion = function getConstrainRegion(computedProps) {
    if (!computedProps.parentComputedProps) {
      return document.documentElement;
    }
    var node = computedProps.getDOMNode();
    node = node ? node.querySelector('.InovuaReactDataGrid__virtual-list') || node : node;
    return node;
  };
  var getColumnMenuConstrainTo = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    return computedProps.initialProps.columnContextMenuConstrainTo || getConstrainRegion(computedProps);
  }, []);
  var getRowMenuConstrainTo = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    return computedProps.initialProps.rowContextMenuConstrainTo || getConstrainRegion(computedProps);
  }, []);
  var columnContextMenuIndex = (0, _react.useRef)(-1);
  var preventIEMenuCloseRef = (0, _react.useRef)(false);
  var columnContextMenuInfoRef = (0, _react.useRef)({
    menuAlignTo: null,
    getMenuConstrainTo: getColumnMenuConstrainTo,
    menuOnHide: function menuOnHide() {}
  });
  var rowContextMenuInfoRef = (0, _react.useRef)({
    menuAlignTo: null,
    getMenuConstrainTo: getRowMenuConstrainTo,
    menuOnHide: function menuOnHide() {}
  });
  var hideColumnContextMenu = (0, _react.useCallback)(function () {
    if (_detectUa.IS_IE && preventIEMenuCloseRef.current) {
      return;
    }
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (computedProps.columnContextMenuProps) {
      var columnContextMenuOnHide = columnContextMenuInfoRef.current.menuOnHide;
      if (typeof columnContextMenuOnHide == 'function') {
        columnContextMenuOnHide();
      }
      computedProps.setColumnContextMenuProps(null);
    }
  }, []);
  var hideRowContextMenu = (0, _react.useCallback)(function () {
    if (_detectUa.IS_IE && preventIEMenuCloseRef.current) {
      return;
    }
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (computedProps.preventBlurOnContextMenuOpen && computedProps.preventBlurOnContextMenuOpen.current) {
      computedProps.preventBlurOnContextMenuOpen.current = false;
    }
    if (computedProps.rowContextMenuProps) {
      var rowContextMenuOnHide = rowContextMenuInfoRef.current.menuOnHide;
      if (typeof rowContextMenuOnHide == 'function') {
        rowContextMenuOnHide();
      }
      computedProps.setRowContextMenuProps(null);
    }
  }, []);
  var showColumnContextMenu = (0, _react.useCallback)(function (alignTo, cellProps, _ref, onHide) {
    var computedVisibleIndex = _ref.computedVisibleIndex;
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (computedProps.columnContextMenuProps) {
      computedProps.hideColumnContextMenu();
      return;
    }
    columnContextMenuIndex.current = cellProps.columnIndex;
    columnContextMenuInfoRef.current = {
      menuAlignTo: alignTo,
      getMenuConstrainTo: getColumnMenuConstrainTo,
      menuOnHide: onHide
    };
    if (computedProps.hideColumnFilterContextMenu) {
      computedProps.hideColumnFilterContextMenu();
    }
    computedProps.setColumnContextMenuProps(cellProps);
    if (computedProps.setColumnContextMenuInstanceProps) {
      computedProps.setColumnContextMenuInstanceProps({
        computedVisibleIndex: computedVisibleIndex
      });
    }
  }, []);
  var getMenuAvailableHeight = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return 0;
    }
    var filtersHeight = 0;
    if (computedProps.computedIsFilterable) {
      var filterNode = computedProps.getDOMNode().querySelector('.InovuaReactDataGrid__column-header__filter-wrapper');
      if (filterNode) {
        filtersHeight = filterNode.offsetHeight;
      }
    }
    var size = computedProps.initialProps.parentComputedProps ? computedProps.initialProps.parentComputedProps.size : computedProps.size;
    var result = size ? size.height - 5 + filtersHeight : 0;
    return result;
  }, []);
  var onRowContextMenu = (0, _react.useCallback)(function (rowProps, event) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var initialProps = computedProps.initialProps;
    if (initialProps.onRowContextMenu) {
      initialProps.onRowContextMenu(rowProps, event);
    }
    if (!initialProps.renderRowContextMenu) {
      return;
    }
    if (computedProps.preventBlurOnContextMenuOpen) {
      computedProps.preventBlurOnContextMenuOpen.current = true;
    }
    event.preventDefault();
    var cellProps = event.nativeEvent ? event.nativeEvent.__cellProps : undefined;
    var alignTo = _region.default.from(event);
    alignTo.shift({
      top: -globalObject.scrollY,
      left: -globalObject.scrollX
    });
    showRowContextMenu(alignTo, rowProps, cellProps, function () {});
  }, []);
  var showRowContextMenu = (0, _react.useCallback)(function (alignTo, rowProps, cellProps, onHide) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (computedProps.rowContextMenuProps) {
      computedProps.hideRowContextMenu();
      return;
    }
    rowContextMenuInfoRef.current = {
      menuAlignTo: alignTo,
      getMenuConstrainTo: getRowMenuConstrainTo,
      cellProps: cellProps,
      menuOnHide: onHide
    };
    if (computedProps.hideRowFilterContextMenu) {
      computedProps.hideRowFilterContextMenu();
    }
    computedProps.setRowContextMenuProps(rowProps);
  }, []);
  return {
    onRowContextMenu: onRowContextMenu,
    getMenuAvailableHeight: getMenuAvailableHeight,
    showRowContextMenu: showRowContextMenu,
    showColumnContextMenu: showColumnContextMenu,
    hideColumnContextMenu: hideColumnContextMenu,
    hideRowContextMenu: hideRowContextMenu,
    columnContextMenuProps: columnContextMenuProps,
    columnContextMenuInstanceProps: columnContextMenuInstanceProps,
    rowContextMenuProps: rowContextMenuProps,
    columnContextMenuInfoRef: columnContextMenuInfoRef,
    rowContextMenuInfoRef: rowContextMenuInfoRef,
    setColumnContextMenuProps: setColumnContextMenuProps,
    setColumnContextMenuInstanceProps: setColumnContextMenuInstanceProps,
    setRowContextMenuProps: setRowContextMenuProps,
    preventIEMenuCloseRef: preventIEMenuCloseRef,
    columnContextMenuIndex: columnContextMenuIndex
  };
};
exports.default = _default;