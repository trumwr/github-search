/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = require("react");
var _isControlledProperty = _interopRequireDefault(require("../../utils/isControlledProperty"));
var _useProperty3 = _interopRequireDefault(require("../../hooks/useProperty"));
var _batchUpdate = _interopRequireDefault(require("../../utils/batchUpdate"));
var getNextSortInfoForColumn = function getNextSortInfoForColumn(currentDir, column, _ref) {
  var allowUnsort = _ref.allowUnsort,
    multiSort = _ref.multiSort,
    forceDir = _ref.forceDir,
    defaultDir = _ref.defaultDir,
    sortFunctions = _ref.sortFunctions;
  var newSortInfo = {
    dir: 1,
    id: column.id,
    name: column.sortName || column.name || '',
    columnName: column.name || '',
    type: column.type
  };
  var sortName = newSortInfo.name;
  if (!sortName && !column.sort) {
    return null;
  }
  var sortFn = column.sort;
  if (!sortFn && sortFunctions && sortFunctions[column.type]) {
    sortFn = sortFunctions[column.type];
  }
  if (sortFn) {
    newSortInfo.fn = function (one, two) {
      return sortFn(one, two, column);
    };
  }
  if (forceDir !== undefined) {
    newSortInfo.dir = forceDir;
    return newSortInfo;
  }
  if (defaultDir === undefined) {
    defaultDir = 1;
  }
  if (defaultDir === 1) {
    if (!currentDir) {
      newSortInfo.dir = 1;
    } else if (currentDir === 1) {
      newSortInfo.dir = -1;
    } else if (currentDir === -1) {
      if (allowUnsort || multiSort) {
        return null;
      }
      newSortInfo.dir = 1;
    }
  } else if (defaultDir === -1) {
    if (!currentDir) {
      newSortInfo.dir = -1;
    } else if (currentDir === -1) {
      newSortInfo.dir = 1;
    } else if (currentDir === 1) {
      if (allowUnsort || multiSort) {
        return null;
      }
      newSortInfo.dir = 1;
    }
  }
  return newSortInfo;
};
var getNextSingleSortInfo = function getNextSingleSortInfo(column, currentSortInfo, _ref2) {
  var _ref2$allowUnsort = _ref2.allowUnsort,
    allowUnsort = _ref2$allowUnsort === void 0 ? false : _ref2$allowUnsort,
    multiSort = _ref2.multiSort,
    forceDir = _ref2.forceDir,
    defaultDir = _ref2.defaultDir,
    sortFunctions = _ref2.sortFunctions;
  if (Array.isArray(currentSortInfo)) {
    return null;
  }
  return getNextSortInfoForColumn(currentSortInfo && (currentSortInfo.name === column.id || currentSortInfo.id === column.id || currentSortInfo.name === column.sortName) ? currentSortInfo.dir : 0, column, {
    allowUnsort: allowUnsort,
    multiSort: multiSort,
    forceDir: forceDir,
    defaultDir: defaultDir,
    sortFunctions: sortFunctions
  });
};
var getNextMultipleSortInfo = function getNextMultipleSortInfo(column, currentSortInfo, _ref3) {
  var _ref3$allowUnsort = _ref3.allowUnsort,
    allowUnsort = _ref3$allowUnsort === void 0 ? false : _ref3$allowUnsort,
    forceDir = _ref3.forceDir,
    sortFunctions = _ref3.sortFunctions;
  var result;
  if (!Array.isArray(currentSortInfo)) {
    var info = getNextSingleSortInfo(column, currentSortInfo, {
      allowUnsort: allowUnsort,
      multiSort: true,
      forceDir: forceDir,
      sortFunctions: sortFunctions
    });
    result = [info].filter(function (x) {
      return x;
    });
  } else {
    var sortInfoIndex = currentSortInfo.findIndex(function (value) {
      return value.id ? value.id === column.id : value.name === column.name || value.name === column.sortName;
    });
    var currentSortInfoForColumn = currentSortInfo[sortInfoIndex];
    var nextSortInfoForColumn = getNextSingleSortInfo(column, currentSortInfo[sortInfoIndex], {
      allowUnsort: allowUnsort,
      multiSort: true,
      forceDir: forceDir,
      sortFunctions: sortFunctions
    });
    if (nextSortInfoForColumn && forceDir !== undefined) {
      nextSortInfoForColumn.dir = forceDir;
    }
    result = (currentSortInfoForColumn ? [].concat((0, _toConsumableArray2.default)(currentSortInfo.slice(0, sortInfoIndex)), [nextSortInfoForColumn], (0, _toConsumableArray2.default)(currentSortInfo.slice(sortInfoIndex + 1))) : [].concat((0, _toConsumableArray2.default)(currentSortInfo), [nextSortInfoForColumn])).filter(function (x) {
      return x;
    });
  }
  return result;
};
var useSortInfo = function useSortInfo(props, _, computedPropsRef) {
  var controlled = (0, _isControlledProperty.default)(props, 'sortInfo');
  var _useProperty = (0, _useProperty3.default)(props, 'sortInfo'),
    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),
    sortInfo = _useProperty2[0],
    silentSetSortInfo = _useProperty2[1];
  if (controlled) {}
  var setSortInfo = (0, _react.useCallback)(function (sortInfo) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var queue = (0, _batchUpdate.default)();
    var computedRemoteData = computedProps.computedRemoteData;
    queue.commit(function () {
      if (computedProps.computedPagination && computedProps.setSkip && computedProps.computedSkip) {
        computedProps.setSkip(0);
      }
      silentSetSortInfo(sortInfo);
      if (computedRemoteData) {
        computedProps.setLoadDataTrigger(function (loadDataTrigger) {
          return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ['sortInfo']);
        });
      }
    });
  }, [silentSetSortInfo]);
  var toggleColumnSort = (0, _react.useCallback)(function (colId, defaultSortingDirection) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var allowUnsort = computedProps.allowUnsort;
    var computedColumn = computedProps.getColumnBy(colId);
    if (!computedColumn) {
      return;
    }
    var sortInfo = computedProps.computedSortInfo === undefined ? null : computedProps.computedSortInfo;
    var sortingDirection;
    if (computedProps.defaultSortingDirection) {
      sortingDirection = computedProps.defaultSortingDirection === 'asc' ? 1 : -1;
    }
    if (defaultSortingDirection) {
      sortingDirection = defaultSortingDirection === 'asc' ? 1 : -1;
    }
    var computedIsMultiSort = computedProps.computedIsMultiSort;
    var nextSortInfo = computedIsMultiSort ? getNextMultipleSortInfo(computedColumn, sortInfo, {
      allowUnsort: allowUnsort,
      sortFunctions: computedProps.sortFunctions
    }) : getNextSingleSortInfo(computedColumn, sortInfo, {
      allowUnsort: allowUnsort,
      multiSort: false,
      forceDir: undefined,
      defaultDir: sortingDirection,
      sortFunctions: computedProps.sortFunctions
    });
    setSortInfo(nextSortInfo);
  }, [setSortInfo]);
  var setColumnSortInfo = (0, _react.useCallback)(function (column, dir) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var allowUnsort = computedProps.allowUnsort;
    var computedColumn = computedProps.getColumnBy(column);
    if (!computedColumn) {
      return;
    }
    var computedIsMultiSort = computedProps.computedIsMultiSort;
    var nextSortInfo = computedIsMultiSort ? getNextMultipleSortInfo(computedColumn, sortInfo, {
      allowUnsort: allowUnsort,
      forceDir: dir,
      sortFunctions: computedProps.sortFunctions
    }) : getNextSingleSortInfo(computedColumn, sortInfo, {
      allowUnsort: allowUnsort,
      multiSort: false,
      forceDir: dir,
      sortFunctions: computedProps.sortFunctions
    });
    setSortInfo(nextSortInfo);
  }, [setSortInfo]);
  var unsortColumn = function unsortColumn(column) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var computedColumn = computedProps.getColumnBy(column);
    if (!computedColumn) {
      return;
    }
    var columnSortInfo = computedColumn.computedSortInfo;
    if (!columnSortInfo) {
      return;
    }
    var sortInfo = computedProps.computedSortInfo;
    var newSortInfo = null;
    if (Array.isArray(sortInfo)) {
      newSortInfo = sortInfo.filter(function (sortInfo) {
        if (sortInfo && (sortInfo.id === columnSortInfo.id || sortInfo.name === columnSortInfo.name)) {
          return false;
        }
        return true;
      });
    }
    setSortInfo(newSortInfo);
  };
  return {
    computedSortInfo: sortInfo,
    unsortColumn: unsortColumn,
    setSortInfo: setSortInfo,
    computedIsMultiSort: Array.isArray(sortInfo),
    toggleColumnSort: toggleColumnSort,
    setColumnSortInfo: setColumnSortInfo
  };
};
var _default = useSortInfo;
exports.default = _default;