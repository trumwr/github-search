/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Dispatch, SetStateAction, MutableRefObject } from 'react';
import { TypeDataGridProps, TypeComputedProps, TypeRowSelection, TypeCellSelection, TypeRowUnselected, TypeBatchUpdateQueue, TypeCellProps, TypeGetColumnByParam, CellProps } from '../../types';
declare const _default: (props: TypeDataGridProps, computedProps: TypeComputedProps, computedPropsRef: MutableRefObject<TypeComputedProps | null>) => {
    selectAll: () => void;
    deselectAll: () => void;
    toggleActiveCellSelection: () => void;
    setSelectedById: (id: string, selected: boolean, queue?: TypeBatchUpdateQueue) => void;
    setRowSelected: (index: number, selected: boolean, event?: KeyboardEvent | MouseEvent) => void;
    setSelectedAt: (index: number, selected: boolean, queue?: TypeBatchUpdateQueue) => void;
    computedCellSelection: TypeCellSelection;
    setCellSelection: (cellSelection: TypeCellSelection) => void;
    incrementActiveCell: (direction: [number, number]) => void;
    computedCellSelectionEnabled: boolean;
    computedCellMultiSelectionEnabled: boolean;
    computedCellNavigationEnabled: boolean;
    computedActiveCell: [number, number] | null | undefined;
    cellDragStartRowIndex: number | null;
    onCellSelectionDraggerMouseDown: ((event: any, { columnIndex, rowIndex }: {
        columnIndex: number;
        rowIndex: number;
    }) => void) | null;
    onCellEnter: ((event: any, { columnIndex, rowIndex }: {
        columnIndex: number;
        rowIndex: number;
    }) => void) | null;
    setCellDragStartRowIndex: Dispatch<SetStateAction<number | null>>;
    computedHasRowNavigation: boolean;
    computedRowSelectionEnabled: boolean;
    computedRowMultiSelectionEnabled: boolean;
    computedSelected: TypeRowSelection;
    setSelected: Dispatch<SetStateAction<TypeRowSelection>>;
    computedUnselected: TypeRowUnselected;
    setUnselected: Dispatch<SetStateAction<TypeRowUnselected>>;
    isSelectionEmpty: () => boolean;
    getSelectedMap: () => true | {
        [key: string]: boolean;
    };
    isRowSelected: (data: object | number) => boolean;
    getUnselectedMap: () => {
        [key: string]: boolean;
    };
    getUnselectedCount: (unselected?: TypeRowUnselected) => number;
    getSelectedCount: (selected?: TypeRowSelection, unselected?: TypeRowUnselected) => number;
    computedUnselectedCount: number;
    computedSelectedCount: number;
    getCellSelectionBetween: (start?: [number, number], end?: [number, number]) => {
        [key: string]: boolean;
    };
    getCellSelectionIdKey: (rowIndex: number, columnIndex: number) => string | number;
    getCellSelectionKey?: ((cellProps: number | TypeCellProps | string, col: TypeGetColumnByParam) => string | number) | undefined;
    setActiveCell: (activeCell: [number, number] | null) => void;
    computedCellBulkUpdateMouseDown?: ((event: MouseEvent, cellProps: CellProps) => void) | undefined;
    computedCellBulkUpdateMouseUp?: ((event: MouseEvent, cellProps: CellProps) => void) | undefined;
    bulkUpdateMouseDown: boolean;
};
export default _default;
