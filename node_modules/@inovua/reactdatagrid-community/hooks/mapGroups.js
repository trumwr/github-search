/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _default = function _default(groups, props) {
  var map = groups.reduce(function (acc, group) {
    if (group.name) {
      acc[group.name] = _objectSpread({}, group);
    }
    return acc;
  }, {});
  if (props.showWarnings) {
    groups.forEach(function (group) {
      if (group.group && !map[group.group]) {
        console.error("You have referred group \"".concat(group.group, "\", but it is not defined in your groups prop."));
      }
    });
  }
  Object.keys(map).map(function (groupName) {
    var count = -1;
    var group;
    var itGroupName = groupName;
    while (group = map[itGroupName]) {
      count++;
      itGroupName = group.group;
      if (!itGroupName) {
        break;
      }
    }
    map[groupName].computedDepth = count;
  });
  return map;
};
exports.default = _default;