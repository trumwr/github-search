/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _getScrollbarWidth = _interopRequireDefault(require("../packages/getScrollbarWidth"));
var _defaultCheckColumnId = require("../normalizeColumns/defaultCheckColumnId");
var _defaultRowReorderColumnId = require("../normalizeColumns/defaultRowReorderColumnId");
var _defaultRowIndexColumnId = require("../normalizeColumns/defaultRowIndexColumnId");
var _defaultRowExpandColumnId = require("../normalizeColumns/defaultRowExpandColumnId");
var EMPTY_OBJECT = {};
var removeItemFromArray = function removeItemFromArray(array, obj) {
  var index = array.indexOf(obj);
  if (index >= 0) {
    array.splice(index, 1);
  }
};
var getColumnsWidths = function getColumnsWidths(columns) {
  return columns.reduce(function (width, column) {
    return width + column.computedWidth;
  }, 0);
};
var checkForSpecialColumns = function checkForSpecialColumns(id) {
  var specialColumns = [_defaultCheckColumnId.id, _defaultRowReorderColumnId.id, _defaultRowIndexColumnId.id, _defaultRowExpandColumnId.id];
  if (specialColumns.indexOf(id) === -1) {
    return false;
  }
  return true;
};
var useColumnsSizing = function useColumnsSizing(_props, _computedProps, computedPropsRef) {
  var computeColumnSizesToFit = function computeColumnSizesToFit(gridWidth) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var visibleColumns = computedProps.visibleColumns;
    if (gridWidth <= 0 || !visibleColumns.length) {
      return;
    }
    var columnsToSize = [];
    var columnsNotToSize = [];
    visibleColumns.forEach(function (column) {
      if (column.resizable === false) {
        columnsNotToSize.push(column);
      } else {
        columnsToSize.push(column);
      }
    });
    var columnsToResize = columnsToSize.slice(0);
    var finished = false;
    var updateColumnsNotToSize = function updateColumnsNotToSize(column) {
      removeItemFromArray(columnsToResize, column);
      columnsNotToSize.push(column);
    };
    var newColumnSizes = {};
    while (!finished) {
      finished = true;
      var availableSpace = gridWidth - getColumnsWidths(columnsNotToSize);
      var scale = availableSpace / getColumnsWidths(columnsToResize);
      var spaceForLastColumn = availableSpace;
      for (var i = columnsToResize.length - 1; i >= 0; i--) {
        var column = columnsToResize[i];
        var minWidth = column.computedMinWidth;
        var maxWidth = column.computedMaxWidth;
        var newWidth = Math.round(column.computedWidth * scale);
        if (minWidth && newWidth < minWidth) {
          newWidth = minWidth;
          updateColumnsNotToSize(column);
          finished = false;
        } else if (maxWidth && newWidth > maxWidth) {
          newWidth = maxWidth;
          updateColumnsNotToSize(column);
          finished = false;
        } else if (i === 0) {
          newWidth = spaceForLastColumn;
        }
        var columnId = column.id;
        Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));
        spaceForLastColumn -= newWidth;
      }
    }
    if (computedProps.virtualizeColumns) {
      var bodyRef = computedProps.bodyRef.current;
      var columnLayout = bodyRef.columnLayout;
      var headerLayout = columnLayout.headerLayout;
      var header = headerLayout.header;
      setTimeout(function () {
        header.updateColumns();
      }, 10);
    }
    var newReservedViewportWidth = computedProps.reservedViewportWidth;
    var columnFlexes = computedProps.columnFlexes;
    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {
      getColumnBy: computedProps.getColumnBy,
      onColumnResize: computedProps.initialProps.onColumnResize,
      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,
      columnSizes: computedProps.columnSizes,
      setColumnSizes: computedProps.setColumnSizes,
      setColumnFlexes: computedProps.setColumnFlexes
    });
  };
  var checkForAvaibleWidth = function checkForAvaibleWidth() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var scrollbars = computedProps.scrollbars;
    var hasVerticalScrollbar = scrollbars.vertical;
    var scrollbarWidth = hasVerticalScrollbar ? (0, _getScrollbarWidth.default)() : 0;
    var computedAvailableWidth = computedProps.availableWidth || 0;
    var availableWidth = computedAvailableWidth - scrollbarWidth;
    if (availableWidth > 0) {
      computeColumnSizesToFit(availableWidth);
    }
  };
  var computeColumnSizesAuto = function computeColumnSizesAuto(columns, callback) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (!columns.length) {
      return;
    }
    columns.forEach(function (column) {
      if (column.resizable === false || checkForSpecialColumns(column.id)) {} else {
        callback(column);
      }
    });
  };
  var getCellForColumn = function getCellForColumn(column, row) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var result;
    var columnId = column.id;
    var cells = row.getCells();
    if (!cells.length) {
      return;
    }
    cells.forEach(function (cell) {
      var cellProps = cell.props;
      var cellId = cellProps.id;
      if (columnId === cellId) {
        result = cell.domRef ? cell.domRef.current : cell.getDOMNode ? cell.getDOMNode() : null;
      }
    });
    return result;
  };
  var getCellsForColumn = function getCellsForColumn(column) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var result = [];
    if (computedProps.getRows) {
      computedProps.getRows().forEach(function (rowInstance) {
        var row = rowInstance.row;
        var cell = getCellForColumn(column, row);
        result.push(cell);
      });
    }
    return result;
  };
  var cloneIntoDummyContainer = function cloneIntoDummyContainer(cell, dummyContainer, skipSortTool) {
    var cellClone = cell && cell.cloneNode(true);
    if (!cellClone) {
      return;
    }
    cellClone.style.width = '';
    cellClone.style.minWidth = '';
    cellClone.style.maxWidth = '';
    cellClone.style.position = 'static';
    cellClone.style.left = '';
    var rowClassName = 'InovuaReactDataGrid__row';
    var headerClassName = 'InovuaReactDataGrid__header';
    var headerCellClassName = 'InovuaReactDataGrid__column-header';
    var sortToolClassName = 'InovuaReactDataGrid__sort-icon-wrapper';
    var isHeader = cellClone.classList.contains(headerCellClassName);
    var cellContent;
    cellContent = (0, _toConsumableArray2.default)(cellClone.children).find(function (cell) {
      var className = isHeader ? 'InovuaReactDataGrid__column-header__content' : 'InovuaReactDataGrid__cell__content';
      return cell.classList.contains(className);
    });
    if (isHeader && skipSortTool) {
      var sortTool = cellContent.querySelector(".".concat(sortToolClassName));
      if (sortTool) {
        cellContent = cellContent.removeChild(sortTool);
      }
    }
    if (cellContent) {
      cellContent.style.width = 'fit-content';
    } else {
      cellClone.style.width = 'fit-content';
    }
    var cloneRow = document.createElement('div');
    var cloneRowClassList = cloneRow.classList;
    if (isHeader) {
      cloneRowClassList.add(headerClassName);
      cloneRow.style.position = 'static';
    } else {
      cloneRowClassList.add(rowClassName);
    }
    var rowElement = cell.parentElement;
    while (rowElement) {
      var isRow = [rowClassName, headerClassName].some(function (cls) {
        return rowElement.classList.contains(cls);
      });
      if (isRow) {
        for (var i = 0; i < rowElement.classList.length; i++) {
          var item = rowElement.classList[i];
          cloneRowClassList.add(item);
        }
        break;
      }
      rowElement = rowElement.parentElement;
    }
    cloneRow.appendChild(cellClone);
    dummyContainer.appendChild(cloneRow);
  };
  var computeOptimizedWidth = function computeOptimizedWidth(column, skipHeader, skipSortTool) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return -1;
    }
    var cells = getCellsForColumn(column);
    if (!cells || !cells.length) {
      return -1;
    }
    if (!skipHeader) {
      var headerCell;
      var header = computedProps.getHeader();
      var headerCells = header.getCells();
      headerCells.find(function (cell) {
        var cellProps = cell.props;
        if (cellProps.id === column.id) {
          headerCell = cell.getDOMNode();
        }
      });
      if (headerCell && headerCell.classList.contains('InovuaReactDataGrid__column-header__resize-wrapper')) {
        headerCell = (0, _toConsumableArray2.default)(headerCell.children).find(function (cell) {
          return cell.classList.contains('InovuaReactDataGrid__column-header');
        });
      }
      cells.push(headerCell);
    }
    return addCellsToContainer(cells, skipHeader, skipSortTool);
  };
  var addCellsToContainer = function addCellsToContainer(cells, skipHeader, skipSortTool) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return -1;
    }
    var dummyContainer = document.createElement('span');
    dummyContainer.style.position = 'fixed';
    var vl = computedProps.getVirtualList();
    var container = vl.getContainerNode();
    container.appendChild(dummyContainer);
    (0, _toConsumableArray2.default)(cells).map(function (cell) {
      return cloneIntoDummyContainer(cell, dummyContainer, skipSortTool);
    });
    var dummyContainerWidth = dummyContainer.offsetWidth;
    if (!skipHeader) {
      dummyContainerWidth += 3;
    } else {
      dummyContainerWidth += 1;
    }
    container.removeChild(dummyContainer);
    return dummyContainerWidth;
  };
  var normaliseWidth = function normaliseWidth(column, width) {
    var minWidth = column.minWidth;
    var maxWidth = column.maxWidth;
    if (minWidth && width < minWidth) {
      width = minWidth;
    }
    if (maxWidth && width > maxWidth) {
      width = maxWidth;
    }
    return width;
  };
  var setColumnSizesToFit = function setColumnSizesToFit() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var enableColumnAutosize = computedProps.enableColumnAutosize;
    if (!enableColumnAutosize) {
      showWarning('setColumnSizesToFit');
      return;
    }
    checkForAvaibleWidth();
  };
  var setColumnsSizesAuto = function setColumnsSizesAuto() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_OBJECT,
      columnIds = _ref.columnIds,
      skipHeader = _ref.skipHeader,
      skipSortTool = _ref.skipSortTool;
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var enableColumnAutosize = computedProps.enableColumnAutosize;
    if (!enableColumnAutosize) {
      showWarning('setColumnsSizesAuto');
      return;
    }
    var shouldSkipHeader = skipHeader != null ? skipHeader : computedProps.skipHeaderOnAutoSize;
    var shouldSkipSortTool = skipSortTool != null ? skipSortTool : false;
    var allIds = [];
    var columns = [];
    if (columnIds !== undefined) {
      if (Array.isArray(columnIds)) {
        allIds = columnIds;
      }
    }
    for (var i = 0; i < allIds.length; i++) {
      var id = allIds[i];
      var column = computedProps.getColumnBy(id);
      columns.push(column);
    }
    if (columns && columns.length === 0) {
      columns = computedProps.visibleColumns;
    }
    if (!columns || columns.length === 0) {
      return;
    }
    var columnsToSize = [];
    var counter = -1;
    var newColumnSizes = {};
    while (counter !== 0) {
      counter = 0;
      computeColumnSizesAuto(columns, function (column) {
        if (columnsToSize.indexOf(column) >= 0) {
          return false;
        }
        var optimizedWidth = computeOptimizedWidth(column, shouldSkipHeader, shouldSkipSortTool);
        if (optimizedWidth > 0) {
          var newWidth = normaliseWidth(column, optimizedWidth);
          var columnId = column.id;
          columnsToSize.push(column);
          Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));
          counter++;
        }
        return true;
      });
    }
    if (computedProps.virtualizeColumns) {
      var bodyRef = computedProps.bodyRef.current;
      var columnLayout = bodyRef.columnLayout;
      var headerLayout = columnLayout.headerLayout;
      var header = headerLayout.header;
      setTimeout(function () {
        header.updateColumns();
      }, 10);
    }
    var newReservedViewportWidth = computedProps.reservedViewportWidth;
    var columnFlexes = computedProps.columnFlexes;
    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {
      getColumnBy: computedProps.getColumnBy,
      onColumnResize: computedProps.initialProps.onColumnResize,
      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,
      columnSizes: computedProps.columnSizes,
      setColumnSizes: computedProps.setColumnSizes,
      setColumnFlexes: computedProps.setColumnFlexes
    });
  };
  var setColumnSizeAuto = function setColumnSizeAuto(id, skipHeader) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var enableColumnAutosize = computedProps.enableColumnAutosize;
    if (!enableColumnAutosize) {
      showWarning('setColumnSizeAuto');
      return;
    }
    if (id) {
      setColumnsSizesAuto({
        columnIds: [id],
        skipHeader: skipHeader
      });
    }
    return;
  };
  var showWarning = function showWarning(method) {
    return console.error("In order for ".concat(method, " to work, the 'enableColumnAutosize' prop should be 'true'."));
  };
  return {
    setColumnSizesToFit: setColumnSizesToFit,
    setColumnsSizesAuto: setColumnsSizesAuto,
    setColumnSizeAuto: setColumnSizeAuto
  };
};
var _default = useColumnsSizing;
exports.default = _default;