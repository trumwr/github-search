/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _columnResize = _interopRequireDefault(require("../utils/columnResize"));
var _useColumnInfo2 = _interopRequireDefault(require("../normalizeColumns/useColumnInfo"));
var _getColumnRenderCount = _interopRequireDefault(require("../getColumnRenderCount"));
var _batchUpdate = _interopRequireDefault(require("../utils/batchUpdate"));
var _useProperty3 = _interopRequireDefault(require("./useProperty"));
var _useNamedState3 = _interopRequireDefault(require("./useNamedState"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var setColumnSizes = function setColumnSizes(newColumnSizes, columnFlexes, reservedViewportWidth, _ref) {
  var columnSizes = _ref.columnSizes,
    getColumnBy = _ref.getColumnBy,
    setColumnFlexes = _ref.setColumnFlexes,
    setColumnSizes = _ref.setColumnSizes,
    onBatchColumnResize = _ref.onBatchColumnResize,
    onColumnResize = _ref.onColumnResize;
  var reservedViewportWidthWrapper = {
    reservedViewportWidth: reservedViewportWidth
  };
  var batchColumns = onBatchColumnResize ? [] : null;
  Object.keys(newColumnSizes).forEach(function (colId) {
    var size = newColumnSizes[colId];
    var column = getColumnBy(colId, {
      initial: true
    });
    if (column != null) {
      if (batchColumns) {
        batchColumns.push({
          column: column,
          width: size,
          flex: undefined
        });
      }
      if (onColumnResize) {
        onColumnResize({
          column: column,
          width: size,
          flex: undefined
        }, reservedViewportWidthWrapper);
      }
    }
  });
  Object.keys(columnFlexes || {}).forEach(function (colId) {
    var size = columnFlexes[colId];
    var column = getColumnBy(colId, {
      initial: true
    });
    if (column) {
      if (batchColumns) {
        batchColumns.push({
          column: column,
          size: size,
          width: undefined,
          flex: size
        });
      }
      if (onColumnResize) {
        onColumnResize({
          column: column,
          size: size,
          width: undefined,
          flex: size
        }, reservedViewportWidthWrapper);
      }
    }
  });
  if (onBatchColumnResize) {
    onBatchColumnResize(batchColumns, reservedViewportWidthWrapper);
  }
  setColumnSizes(Object.assign({}, columnSizes, newColumnSizes));
  setColumnFlexes(columnFlexes);
};
var getColumnBy = function getColumnBy(propColumns, visibleColumns, columnsMap) {
  return function (idNameOrIndex, config) {
    var column;
    if ((0, _typeof2.default)(idNameOrIndex) === 'object') {
      idNameOrIndex = idNameOrIndex.id == null ? idNameOrIndex.name : idNameOrIndex.id;
    }
    if (typeof idNameOrIndex === 'number') {
      column = visibleColumns[idNameOrIndex];
    } else {
      column = columnsMap[idNameOrIndex];
    }
    if (!config || !config.initial || column && column.pivotColumn) {
      return column;
    }
    return propColumns.filter(function (c) {
      return c.id === column.id || c.name === column.id;
    })[0];
  };
};
var _default = function _default(props, _ref2, computedPropsRef) {
  var maxAvailableWidthForColumns = _ref2.maxAvailableWidthForColumns,
    lockedColumnsState = _ref2.lockedColumnsState,
    computedPivotUniqueValuesPerColumn = _ref2.computedPivotUniqueValuesPerColumn,
    computedGroups = _ref2.computedGroups,
    computedSortInfo = _ref2.computedSortInfo,
    computedFilterValueMap = _ref2.computedFilterValueMap,
    computedGroupBy = _ref2.computedGroupBy,
    computedFilterable = _ref2.computedFilterable,
    columnFlexes = _ref2.columnFlexes,
    columnSizes = _ref2.columnSizes,
    maybeAddColumns = _ref2.maybeAddColumns;
  var _useProperty = (0, _useProperty3.default)(props, 'columnOrder'),
    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),
    columnOrder = _useProperty2[0],
    setColumnOrder = _useProperty2[1];
  var _useNamedState = (0, _useNamedState3.default)(props.columns.reduce(function (acc, col) {
      if (col.defaultVisible === false || col.visible === false) {
        acc[col.id || col.name] = false;
      }
      return acc;
    }, {}), props.context, 'stateColumnVisibilityMap'),
    _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2),
    stateColumnVisibilityMap = _useNamedState2[0],
    setStateColumnVisibilityMap = _useNamedState2[1];
  var _useColumnInfo = (0, _useColumnInfo2.default)({
      showPivotSummaryColumns: props.showPivotSummaryColumns,
      lockedColumnsState: lockedColumnsState,
      columnOrder: columnOrder,
      columnFlexes: columnFlexes,
      columnSizes: columnSizes,
      pivotGrandSummaryColumn: props.pivotGrandSummaryColumn,
      columnVisibilityMap: stateColumnVisibilityMap,
      columnMinWidth: props.columnMinWidth,
      columnMaxWidth: props.columnMaxWidth,
      resizable: props.resizable,
      pivot: props.pivot,
      computedGroups: computedGroups,
      filterable: computedFilterable,
      filterValueMap: computedFilterValueMap,
      groupBy: computedGroupBy,
      groupColumn: props.groupColumn,
      rowIndexColumn: props.rowIndexColumn,
      checkboxColumn: props.checkboxColumn,
      computedPivotUniqueValuesPerColumn: computedPivotUniqueValuesPerColumn,
      editable: props.editable,
      sortable: props.sortable,
      columns: props.columns,
      rtl: props.rtl,
      sortInfo: computedSortInfo,
      availableWidth: maxAvailableWidthForColumns,
      columnDefaultWidth: props.columnDefaultWidth,
      inTransition: false,
      hideGroupByColumns: props.hideGroupByColumns,
      groupNestingSize: props.groupNestingSize,
      groupForGroupColumns: props.groupForGroupColumns || '__',
      enableRowExpand: props.enableRowExpand,
      expandedRows: props.expandedRows,
      defaultExpandedRows: props.defaultExpandedRows,
      renderRowDetails: props.renderRowDetails,
      renderDetailsGrid: props.renderDetailsGrid,
      maybeAddColumns: maybeAddColumns,
      rowExpandColumn: props.rowExpandColumn,
      onRowReorder: props.onRowReorder,
      rowReorderColumn: props.rowReorderColumn,
      renderRowDetailsExpandIcon: props.renderRowDetailsExpandIcon,
      renderRowDetailsCollapsedIcon: props.renderRowDetailsCollapsedIcon
    }),
    groupColumnSummaryReducers = _useColumnInfo.groupColumnSummaryReducers,
    pivotColumnSummaryReducers = _useColumnInfo.pivotColumnSummaryReducers,
    visibleColumns = _useColumnInfo.visibleColumns,
    lockedStartColumns = _useColumnInfo.lockedStartColumns,
    lockedEndColumns = _useColumnInfo.lockedEndColumns,
    unlockedColumns = _useColumnInfo.unlockedColumns,
    columnWidthPrefixSums = _useColumnInfo.columnWidthPrefixSums,
    columnsMap = _useColumnInfo.columnsMap,
    columnVisibilityMap = _useColumnInfo.columnVisibilityMap,
    allColumns = _useColumnInfo.allColumns,
    computedEnableRowspan = _useColumnInfo.computedEnableRowspan,
    totalComputedWidth = _useColumnInfo.totalComputedWidth,
    totalLockedStartWidth = _useColumnInfo.totalLockedStartWidth,
    totalFlexColumnCount = _useColumnInfo.totalFlexColumnCount,
    totalLockedEndWidth = _useColumnInfo.totalLockedEndWidth,
    totalUnlockedWidth = _useColumnInfo.totalUnlockedWidth,
    minColumnsSize = _useColumnInfo.minColumnsSize,
    computedHasColSpan = _useColumnInfo.computedHasColSpan,
    hasValueSetter = _useColumnInfo.hasValueSetter;
  var virtualizeColumns = props.virtualizeColumns !== undefined ? props.virtualizeColumns : visibleColumns.length >= props.virtualizeColumnsThreshold;
  if (typeof props.rowHeight !== 'number') {
    virtualizeColumns = false;
  }
  var columnRenderCount = (0, _getColumnRenderCount.default)({
    availableWidth: maxAvailableWidthForColumns,
    visibleColumns: visibleColumns,
    lockedStartColumns: lockedStartColumns,
    lockedEndColumns: lockedEndColumns,
    virtualizeColumns: virtualizeColumns
  });
  var hasLockedStart = !!lockedStartColumns.length;
  var hasLockedEnd = !!lockedEndColumns.length;
  var hasUnlocked = !!unlockedColumns.length;
  var firstUnlockedIndex = hasUnlocked ? unlockedColumns[0].computedVisibleIndex : -1;
  var firstLockedStartIndex = hasLockedStart ? lockedStartColumns[0].computedVisibleIndex : -1;
  var firstLockedEndIndex = hasLockedEnd ? lockedEndColumns[0].computedVisibleIndex : -1;
  var lastLockedEndIndex = hasLockedEnd ? lockedEndColumns[lockedEndColumns.length - 1].computedVisibleIndex : -1;
  var lastLockedStartIndex = hasLockedStart ? lockedStartColumns[lockedStartColumns.length - 1].computedVisibleIndex : -1;
  var lastUnlockedIndex = hasUnlocked ? unlockedColumns[unlockedColumns.length - 1].computedVisibleIndex : -1;
  var computedOnColumnResize = function computedOnColumnResize(_ref3) {
    var index = _ref3.index,
      groupColumns = _ref3.groupColumns,
      diff = _ref3.diff;
    var computedProps = computedPropsRef.current;
    if (computedProps == null) {
      return;
    }
    var maxAvailableWidthForColumns = computedProps.maxAvailableWidthForColumns,
      shareSpaceOnResize = computedProps.shareSpaceOnResize,
      totalComputedWidth = computedProps.totalComputedWidth;
    var result = (0, _columnResize.default)({
      columns: computedProps.visibleColumns,
      groupColumns: groupColumns,
      maxAvailableWidthForColumns: maxAvailableWidthForColumns,
      shareSpaceOnResize: shareSpaceOnResize,
      totalComputedWidth: totalComputedWidth,
      index: index,
      diff: diff
    });
    if (computedProps.rtl && diff) {
      var _totalComputedWidth = computedProps.totalComputedWidth;
      var oldScrollLeft = computedProps.getScrollLeft();
      computedProps.onNextRender(function () {
        var computedProps = computedPropsRef.current;
        if (computedProps == null) {
          return;
        }
        if (computedProps.totalComputedWidth === _totalComputedWidth + diff) {
          var newScrollLeft = oldScrollLeft + diff;
          computedProps.setScrollLeft(newScrollLeft);
        }
      });
    }
    (0, _batchUpdate.default)().commit(function () {
      var newReservedViewportWidth = computedProps.reservedViewportWidth;
      if (typeof result.maxAvailableWidthForColumns == 'number' && result.maxAvailableWidthForColumns !== maxAvailableWidthForColumns) {
        var widthDiff = result.maxAvailableWidthForColumns - maxAvailableWidthForColumns;
        newReservedViewportWidth = computedProps.reservedViewportWidth - widthDiff;
        computedProps.setReservedViewportWidth(newReservedViewportWidth);
      }
      setColumnSizes(result.newColumnSizes || {}, result.newColumnFlexes, newReservedViewportWidth, {
        getColumnBy: computedProps.getColumnBy,
        onColumnResize: computedProps.initialProps.onColumnResize,
        onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,
        columnSizes: computedProps.columnSizes,
        setColumnSizes: computedProps.setColumnSizes,
        setColumnFlexes: computedProps.setColumnFlexes
      });
    });
  };
  var getColumn = getColumnBy(props.columns, visibleColumns, columnsMap);
  var setColumnVisible = function setColumnVisible(indexOrColumn, visible) {
    var column = getColumn(indexOrColumn);
    if (!column) {
      return;
    }
    if (isColumnVisible(column) === visible) {
      return;
    }
    var col = getColumn(column, {
      initial: true
    });
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (typeof computedProps.initialProps.onColumnVisibleChange === 'function') {
      computedProps.initialProps.onColumnVisibleChange({
        column: col,
        visible: visible
      });
    }
    if (col.visible === undefined) {
      setStateColumnVisibilityMap(_objectSpread(_objectSpread({}, stateColumnVisibilityMap), {}, (0, _defineProperty2.default)({}, column.id, !!visible)));
    } else if (computedProps.showWarnings && !computedProps.initialProps.onColumnVisibleChange) {
      console.warn("Column \"".concat(column.id, "\" has controlled visible prop set to \"").concat(column.visible, "\" but you have no \"onColumnVisibleChange\" callback prop to update column.visible prop. Use uncontrolled \"defaultVisible\" instead."));
    }
  };
  var isColumnVisible = function isColumnVisible(nameOrId) {
    var column = getColumn(nameOrId);
    if (!column) {
      return false;
    }
    return column.computedVisible === true;
  };
  var setColumnLocked = function setColumnLocked(indexOrColumn, locked) {
    var column = getColumn(indexOrColumn);
    if (locked === null) {
      locked = false;
    }
    locked = locked === true ? 'start' : locked;
    if (column.lockable === false) {
      if (props.showWarnings) {
        console.error("You are trying to lock the \"".concat(column.id, "\" column, but it is lockable===false, so it cannot be locked."));
      }
      return;
    }
    var initialColumn = getColumn(column, {
      initial: true
    });
    if (props.onColumnLockedChange) {
      props.onColumnLockedChange({
        column: initialColumn,
        locked: locked
      });
    }
    if (initialColumn.locked !== undefined) {
      return;
    }
    var computedProps = computedPropsRef.current;
    if (computedProps == null) {
      return;
    }
    var setLockedColumnsState = computedProps.setLockedColumnsState;
    setLockedColumnsState(function (lockedColumnsState) {
      return _objectSpread(_objectSpread({}, lockedColumnsState), {}, (0, _defineProperty2.default)({}, column.id, locked));
    });
  };
  var getColumnsInOrder = function getColumnsInOrder() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return [];
    }
    var computedColumnOrder = computedProps.computedColumnOrder;
    if (!computedColumnOrder || !computedColumnOrder.length) {
      return computedProps.initialProps.columns.map(function (cId) {
        return computedProps.getColumnBy(cId);
      });
    }
    return computedColumnOrder.map(function (cId) {
      return computedProps.getColumnBy(cId);
    });
  };
  return {
    getColumnsInOrder: getColumnsInOrder,
    groupColumnSummaryReducers: groupColumnSummaryReducers,
    pivotColumnSummaryReducers: pivotColumnSummaryReducers,
    groupColumn: props.pivot ? props.groupColumn || true : props.groupColumn,
    firstLockedStartIndex: firstLockedStartIndex,
    firstLockedEndIndex: firstLockedEndIndex,
    firstUnlockedIndex: firstUnlockedIndex,
    lastLockedStartIndex: lastLockedStartIndex,
    lastUnlockedIndex: lastUnlockedIndex,
    lastLockedEndIndex: lastLockedEndIndex,
    visibleColumns: visibleColumns,
    columnWidthPrefixSums: columnWidthPrefixSums,
    lockedStartColumns: lockedStartColumns,
    lockedEndColumns: lockedEndColumns,
    unlockedColumns: unlockedColumns,
    columnVisibilityMap: columnVisibilityMap,
    computedHasColSpan: computedHasColSpan,
    setColumnLocked: setColumnLocked,
    computedColumnOrder: columnOrder,
    setColumnOrder: setColumnOrder,
    setColumnVisible: setColumnVisible,
    computeColumnSizes: setColumnSizes,
    computedPivot: props.pivot,
    totalFlexColumnCount: totalFlexColumnCount,
    showColumnMenuTool: props.pivot ? false : props.showColumnMenuTool,
    columnsMap: columnsMap,
    allColumns: allColumns,
    totalComputedWidth: totalComputedWidth,
    totalLockedStartWidth: totalLockedStartWidth,
    totalLockedEndWidth: totalLockedEndWidth,
    totalUnlockedWidth: totalUnlockedWidth,
    minColumnsSize: minColumnsSize,
    hasLockedStart: hasLockedStart,
    hasLockedEnd: hasLockedEnd,
    hasUnlocked: hasUnlocked,
    computedEnableRowspan: computedEnableRowspan,
    columnRenderCount: columnRenderCount,
    virtualizeColumns: virtualizeColumns,
    computedOnColumnResize: computedOnColumnResize,
    getColumnBy: getColumn,
    isColumnVisible: isColumnVisible,
    hasValueSetter: hasValueSetter
  };
};
exports.default = _default;