/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _isControlledValue = _interopRequireDefault(require("../utils/isControlledValue"));
var _toUpperFirst = _interopRequireDefault(require("../utils/toUpperFirst"));
var emptyFn = function emptyFn() {};
var useProperty = function useProperty(props, propName, defaultValue, config) {
  var context = (0, _react.useContext)(props.context);
  var PropName = (0, _toUpperFirst.default)(propName);
  var defaultValueFromProps = props["default".concat(PropName)];
  var defaultValueFromRestoredState = context.state[propName];
  if (defaultValueFromRestoredState !== undefined) {
    defaultValueFromProps = defaultValueFromRestoredState;
  }
  defaultValue = defaultValueFromProps === undefined ? defaultValue : defaultValueFromProps;
  var _useState = (0, _react.useState)(defaultValue),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    stateValue = _useState2[0],
    setStateProperty = _useState2[1];
  var value = props[propName];
  var controlled = (0, _isControlledValue.default)(value);
  var onChange = config && config.onChange ? config.onChange : props["on".concat(PropName, "Change")] || emptyFn;
  var setter = function setter(value) {
    context.state[propName] = value;
    if (!controlled) {
      setStateProperty(value);
    }
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    onChange.apply(void 0, [value].concat(args));
  };
  if (!controlled) {
    value = stateValue;
  }
  return [value, setter];
};
var _default = useProperty;
exports.default = _default;