/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { TypeDataGridProps, TypeSortInfo, TypeColumn, TypeComputedColumn, TypeComputedProps, TypeGroupBy, TypeGetColumnByParam, TypeSingleFilterValue } from '../types';
import { MutableRefObject, Dispatch } from 'react';
import { TypeColumnGroup } from '../types/TypeColumn';
import { TypePivotUniqueValuesDescriptor } from '../types/TypeDataGridProps';
type TypeNumberMap = {
    [key: string]: number;
};
declare const _default: (props: TypeDataGridProps, { maxAvailableWidthForColumns, lockedColumnsState, computedPivotUniqueValuesPerColumn, computedGroups, computedSortInfo, computedFilterValueMap, computedGroupBy, computedFilterable, columnFlexes, columnSizes, maybeAddColumns, }: {
    maxAvailableWidthForColumns: number;
    computedPivotUniqueValuesPerColumn: TypePivotUniqueValuesDescriptor;
    computedGroups?: TypeColumnGroup[] | undefined;
    computedSortInfo: TypeSortInfo;
    computedGroupBy: TypeGroupBy;
    columnFlexes: TypeNumberMap;
    computedFilterable: boolean;
    computedFilterValueMap: {
        [key: string]: TypeSingleFilterValue;
    } | null;
    lockedColumnsState: {
        [key: string]: false | "start" | "end";
    };
    maybeAddColumns: any;
    columnSizes: TypeNumberMap;
    hasValueSetter: boolean;
}, computedPropsRef: MutableRefObject<TypeComputedProps>) => {
    getColumnsInOrder: () => TypeComputedColumn[];
    groupColumnSummaryReducers: any;
    pivotColumnSummaryReducers: any;
    groupColumn: boolean | import("../types").IColumn | undefined;
    firstLockedStartIndex: number;
    firstLockedEndIndex: number;
    firstUnlockedIndex: number;
    lastLockedStartIndex: number;
    lastUnlockedIndex: number;
    lastLockedEndIndex: number;
    visibleColumns: any;
    columnWidthPrefixSums: any;
    lockedStartColumns: any;
    lockedEndColumns: any;
    unlockedColumns: any;
    columnVisibilityMap: any;
    computedHasColSpan: any;
    setColumnLocked: (indexOrColumn: TypeGetColumnByParam, locked: 'start' | 'end' | true | false | null) => void;
    computedColumnOrder: string[] | undefined;
    setColumnOrder: (...args: any[]) => any;
    setColumnVisible: (indexOrColumn: TypeGetColumnByParam, visible: boolean) => void;
    computeColumnSizes: (newColumnSizes: TypeNumberMap, columnFlexes: TypeNumberMap, reservedViewportWidth: number, { columnSizes, getColumnBy, setColumnFlexes, setColumnSizes, onBatchColumnResize, onColumnResize, }: {
        columnSizes: TypeNumberMap;
        getColumnBy: (idOrName: TypeGetColumnByParam, { initial }: {
            initial: boolean;
        }) => TypeColumn;
        setColumnFlexes: Dispatch<any>;
        setColumnSizes: Dispatch<any>;
        onBatchColumnResize?: ((...args: any[]) => void) | undefined;
        onColumnResize?: ((...args: any[]) => void) | undefined;
    }) => void;
    computedPivot: import("../types").TypePivotItem[] | undefined;
    totalFlexColumnCount: any;
    showColumnMenuTool: boolean | undefined;
    columnsMap: any;
    allColumns: any;
    totalComputedWidth: any;
    totalLockedStartWidth: any;
    totalLockedEndWidth: any;
    totalUnlockedWidth: any;
    minColumnsSize: any;
    hasLockedStart: boolean;
    hasLockedEnd: boolean;
    hasUnlocked: boolean;
    computedEnableRowspan: any;
    columnRenderCount: any;
    virtualizeColumns: boolean;
    computedOnColumnResize: ({ index, groupColumns, diff, }: {
        index: number;
        diff: number;
        groupColumns: TypeComputedColumn[];
    }) => void;
    getColumnBy: (idNameOrIndex: TypeGetColumnByParam, config?: {
        initial: boolean;
    } | undefined) => import("../types/TypeColumn").TypeColWithNameProperty;
    isColumnVisible: (nameOrId: TypeGetColumnByParam) => boolean;
    hasValueSetter: any;
};
export default _default;
