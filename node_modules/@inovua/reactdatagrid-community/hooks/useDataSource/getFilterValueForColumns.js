/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var getFilterValueForColumns = function getFilterValueForColumns(filterValue, columnsMap) {
  return (filterValue || []).map(function (filterValueObject) {
    if (filterValueObject) {
      var column = columnsMap[filterValueObject.name];
      if (column) {
        if (column.type && !filterValueObject.type) {
          filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {
            type: column.filterType || column.type
          });
        }
        if (typeof column.getFilterValue == 'function') {
          filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {
            getFilterValue: column.getFilterValue
          });
        }
        if (typeof column.filterName === 'string') {
          filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {
            name: column.filterName
          });
        }
      }
    }
    return filterValueObject;
  });
};
var _default = getFilterValueForColumns;
exports.default = _default;