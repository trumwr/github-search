/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLivePagination = exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _clamp = _interopRequireDefault(require("../../utils/clamp"));
var _getIndexBy = _interopRequireDefault(require("../../utils/getIndexBy"));
var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));
var _useLoadDataEffect = _interopRequireDefault(require("../useLoadDataEffect"));
var _useProperty7 = _interopRequireDefault(require("../useProperty"));
var _useNamedState9 = _interopRequireDefault(require("../useNamedState"));
var _computeData = _interopRequireDefault(require("./computeData"));
var _batchUpdate = _interopRequireDefault(require("../../utils/batchUpdate"));
var _usePrevious = _interopRequireDefault(require("../usePrevious"));
var _isControlledProperty = _interopRequireDefault(require("../../utils/isControlledProperty"));
var _getGlobal = require("../../getGlobal");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var globalObject = (0, _getGlobal.getGlobal)();
var raf = globalObject.requestAnimationFrame;
var isRemoteData = function isRemoteData(props) {
  if (props.dataSource == null) {
    return false;
  }
  return typeof props.dataSource.then === 'function' || typeof props.dataSource === 'function';
};
var isRemoteSort = function isRemoteSort(props) {
  var remoteSort = props.remoteSort;
  return remoteSort === true || remoteSort === undefined && isRemoteData(props);
};
var isRemoteFilter = function isRemoteFilter(props) {
  var remoteFilter = props.remoteFilter;
  return remoteFilter === true || remoteFilter === undefined && isRemoteData(props);
};
var isPagination = function isPagination(props) {
  return !!props.pagination;
};
var isLocalPagination = function isLocalPagination(props) {
  return isPagination(props) && !isRemotePagination(props);
};
var isLivePagination = function isLivePagination(props) {
  return !!props.livePagination && isRemotePagination(props);
};
exports.isLivePagination = isLivePagination;
var isRemotePagination = function isRemotePagination(props) {
  var remotePagination = props.remotePagination,
    pagination = props.pagination,
    livePagination = props.livePagination;
  if (pagination === false || pagination === 'local') {
    return false;
  }
  if (pagination === 'remote' || isRemoteData(props)) {
    return true;
  }
  if (remotePagination !== undefined) {
    return remotePagination;
  }
  return !!livePagination;
};
var loadDataSource = function loadDataSource(dataSource, _ref) {
  var skip = _ref.skip,
    limit = _ref.limit,
    currentData = _ref.currentData,
    sortInfo = _ref.sortInfo,
    filterValue = _ref.filterValue,
    groupBy = _ref.groupBy;
  if (typeof dataSource === 'function') {
    dataSource = loadDataSource(dataSource({
      skip: skip,
      limit: limit,
      sortInfo: sortInfo,
      currentData: currentData,
      filterValue: filterValue,
      groupBy: groupBy
    }), {
      skip: skip,
      limit: limit,
      sortInfo: sortInfo,
      groupBy: groupBy,
      filterValue: filterValue,
      currentData: currentData
    });
  }
  if (dataSource instanceof Promise) {
    return dataSource.then(function (result) {
      if (Array.isArray(result)) {
        return {
          data: result,
          count: result.length
        };
      }
      return {
        data: result.data,
        count: result.count
      };
    });
  }
  return Promise.resolve({
    data: dataSource,
    count: dataSource.length
  });
};
var useData = function useData(_ref2, context) {
  var dataSource = _ref2.dataSource,
    skip = _ref2.skip,
    limit = _ref2.limit,
    localPagination = _ref2.localPagination;
  var data;
  var silentSetData;
  var _useNamedState = (0, _useNamedState9.default)([], context, 'data');
  var _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2);
  data = _useNamedState2[0];
  silentSetData = _useNamedState2[1];
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    dataMap = _useState2[0],
    setDataMap = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    dataIndexMap = _useState4[0],
    setDataIndexMap = _useState4[1];
  var originalData;
  var setOriginalData;
  var _useNamedState3 = (0, _useNamedState9.default)(Array.isArray(dataSource) ? dataSource : [], context, 'originalData');
  var _useNamedState4 = (0, _slicedToArray2.default)(_useNamedState3, 2);
  originalData = _useNamedState4[0];
  setOriginalData = _useNamedState4[1];
  var _useNamedState5 = (0, _useNamedState9.default)(data.length, context, 'count'),
    _useNamedState6 = (0, _slicedToArray2.default)(_useNamedState5, 2),
    count = _useNamedState6[0],
    setCount = _useNamedState6[1];
  var _useNamedState7 = (0, _useNamedState9.default)(0, context, 'dataCountAfterFilter'),
    _useNamedState8 = (0, _slicedToArray2.default)(_useNamedState7, 2),
    dataCountAfterFilter = _useNamedState8[0],
    setDataCountAfterFilter = _useNamedState8[1];
  return {
    setDataMap: setDataMap,
    dataMap: dataMap,
    dataIndexMap: dataIndexMap,
    setDataIndexMap: setDataIndexMap,
    originalData: originalData,
    setOriginalData: setOriginalData,
    data: data,
    count: count,
    dataCountAfterFilter: dataCountAfterFilter,
    silentSetData: silentSetData,
    setDataCountAfterFilter: setDataCountAfterFilter,
    setCount: setCount
  };
};
var getDataCountForPagination = function getDataCountForPagination(props) {
  var paginationCount = props.remotePagination ? props.count : props.dataCountAfterFilter != null ? props.dataCountAfterFilter : props.originalData.length;
  return paginationCount;
};
var getCurrentPage = function getCurrentPage(props) {
  return Math.floor(props.skip / props.limit) + 1;
};
var getPageCount = function getPageCount(_ref3) {
  var count = _ref3.count,
    limit = _ref3.limit;
  return Math.ceil(count / limit);
};
var getSkipForPage = function getSkipForPage(_ref4) {
  var page = _ref4.page,
    limit = _ref4.limit;
  return Math.max(0, limit * (page - 1));
};
var hasNextPage = function hasNextPage(_ref5) {
  var skip = _ref5.skip,
    limit = _ref5.limit,
    count = _ref5.count;
  return getCurrentPage({
    skip: skip,
    limit: limit
  }) < getPageCount({
    count: count,
    limit: limit
  });
};
var hasPrevPage = function hasPrevPage(_ref6) {
  var skip = _ref6.skip,
    limit = _ref6.limit,
    count = _ref6.count;
  var currentPage = getCurrentPage({
    skip: skip,
    limit: limit
  });
  return currentPage > 1 && currentPage - 1 < getPageCount({
    count: count,
    limit: limit
  });
};
var usePagination = function usePagination(_ref7, computedPropsRef) {
  var append = _ref7.append,
    reload = _ref7.reload,
    setAppend = _ref7.setAppend,
    skip = _ref7.skip,
    limit = _ref7.limit,
    count = _ref7.count,
    silentSetSkip = _ref7.setSkip,
    silentSetLimit = _ref7.setLimit,
    remotePagination = _ref7.remotePagination,
    localPagination = _ref7.localPagination,
    pagination = _ref7.pagination,
    lastSkipRef = _ref7.lastSkipRef,
    lastLimitRef = _ref7.lastLimitRef,
    dataCountAfterFilter = _ref7.dataCountAfterFilter,
    livePagination = _ref7.livePagination,
    originalData = _ref7.originalData,
    data = _ref7.data;
  var paginationCount = getDataCountForPagination({
    originalData: originalData,
    remotePagination: remotePagination,
    count: count,
    dataCountAfterFilter: dataCountAfterFilter
  });
  var setLimitOrSkip = function setLimitOrSkip(computedProps, config, queue) {
    return (0, _computeData.default)(_objectSpread(_objectSpread({
      skip: skip,
      limit: limit
    }, config), {}, {
      localPagination: localPagination
    }), computedProps, queue);
  };
  var setSkip = function setSkip(skip, config) {
    var computedProps = computedPropsRef.current;
    var queue = (0, _batchUpdate.default)();
    var computedRemoteData = computedProps.computedRemoteData;
    queue.commit(function () {
      if (config && config.append !== undefined) {
        setAppend(config.append);
      }
      if (computedRemoteData) {
        computedProps.setLoadDataTrigger(function (loadDataTrigger) {
          return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ['skip']);
        });
      }
      silentSetSkip(skip);
    });
  };
  var setLimit = function setLimit(limit) {
    var computedProps = computedPropsRef.current;
    var queue = (0, _batchUpdate.default)();
    var computedRemoteData = computedProps.computedRemoteData;
    queue.commit(function () {
      if (computedRemoteData) {
        computedProps.setLoadDataTrigger(function (loadDataTrigger) {
          return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ['limit']);
        });
      }
      silentSetLimit(limit);
    });
  };
  var incrementSkip = function incrementSkip(amount, config) {
    setSkip(skip + amount, config);
  };
  var gotoNextPage = function gotoNextPage(config) {
    if (hasNextPage({
      skip: skip,
      limit: lastLimitRef.current,
      count: paginationCount
    })) {
      incrementSkip(lastLimitRef.current, config);
    }
  };
  var gotoPrevPage = function gotoPrevPage() {
    if (hasPrevPage({
      skip: skip,
      limit: limit,
      count: paginationCount
    })) {
      incrementSkip(-limit);
    }
  };
  var gotoPage = function gotoPage(page, config) {
    page = (0, _clamp.default)(page, 1, getPageCount({
      count: paginationCount,
      limit: limit
    }));
    var force = config ? config.force : false;
    if (page === getCurrentPage({
      skip: skip,
      limit: limit
    }) && !force) {
      return;
    }
    setSkip(getSkipForPage({
      page: page,
      limit: limit
    }));
  };
  var hasNext = function hasNext() {
    return hasNextPage({
      skip: skip,
      limit: limit,
      count: paginationCount
    });
  };
  var hasPrev = function hasPrev() {
    return hasPrevPage({
      skip: skip,
      limit: limit,
      count: paginationCount
    });
  };
  var gotoFirstPage = function gotoFirstPage() {
    return gotoPage(1);
  };
  var gotoLastPage = function gotoLastPage() {
    return gotoPage(getPageCount({
      count: paginationCount,
      limit: limit
    }));
  };
  var paginationProps;
  if ((localPagination || remotePagination) && !livePagination) {
    paginationProps = {
      onSkipChange: setSkip,
      onLimitChange: setLimit,
      reload: reload,
      onRefresh: reload,
      totalCount: paginationCount,
      count: count,
      skip: skip,
      limit: limit,
      remotePagination: remotePagination,
      localPagination: localPagination,
      livePagination: livePagination,
      pagination: pagination,
      gotoPage: gotoPage,
      gotoNextPage: gotoNextPage,
      gotoFirstPage: gotoFirstPage,
      gotoLastPage: gotoLastPage,
      gotoPrevPage: gotoPrevPage,
      hasNextPage: hasNext,
      hasPrevPage: hasPrev
    };
  }
  return {
    count: count,
    paginationCount: paginationCount,
    reload: reload,
    setSkip: setSkip,
    setLimit: setLimit,
    gotoNextPage: gotoNextPage,
    gotoPrevPage: gotoPrevPage,
    hasNextPage: hasNext,
    hasPrevPage: hasPrev,
    gotoFirstPage: gotoFirstPage,
    gotoLastPage: gotoLastPage,
    gotoPage: gotoPage,
    paginationProps: paginationProps
  };
};
var useDataSourceCache = function useDataSourceCache(props, computedProps, computedPropsRef) {
  var prevDataSource = (0, _usePrevious.default)(props.dataSource, props.dataSource);
  var _useProperty = (0, _useProperty7.default)(props, 'dataSourceCache', undefined, {
      onChange: function onChange(dataSourceCache, info) {
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        if (computedProps.initialProps.onDataSourceCacheChange) {
          computedProps.initialProps.onDataSourceCacheChange(dataSourceCache, info);
        }
      }
    }),
    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),
    dataSourceCache = _useProperty2[0],
    setDataSourceCache = _useProperty2[1];
  if (props.clearDataSourceCacheOnChange && prevDataSource !== props.dataSource) {
    dataSourceCache = undefined;
  }
  (0, _react.useLayoutEffect)(function () {
    if (props.clearDataSourceCacheOnChange) {
      setDataSourceCache(undefined);
    }
  }, [props.dataSource]);
  return [dataSourceCache, setDataSourceCache];
};
var _default = function _default(props, computedProps, computedPropsRef) {
  var computedRemoteData = isRemoteData(props);
  var computedRemoteFilter = isRemoteFilter(props);
  var computedRemoteSort = isRemoteSort(props);
  var computedLivePagination = isLivePagination(props);
  var computedRemotePagination = isRemotePagination(props);
  var computedLocalPagination = isLocalPagination(props);
  var computedPagination = computedRemotePagination || computedLocalPagination;
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    ungroupedData = _useState6[0],
    setUngroupedData = _useState6[1];
  var _useState7 = (0, _react.useState)([]),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    loadDataTrigger = _useState8[0],
    setLoadDataTrigger = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    append = _useState10[0],
    setAppend = _useState10[1];
  var _useProperty3 = (0, _useProperty7.default)(props, 'skip', 0),
    _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),
    computedSkip = _useProperty4[0],
    setSkip = _useProperty4[1];
  var _useProperty5 = (0, _useProperty7.default)(props, 'limit', 50),
    _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2),
    computedLimit = _useProperty6[0],
    setLimit = _useProperty6[1];
  var _useDataSourceCache = useDataSourceCache(props, computedProps, computedPropsRef),
    _useDataSourceCache2 = (0, _slicedToArray2.default)(_useDataSourceCache, 2),
    computedDataSourceCache = _useDataSourceCache2[0],
    setDataSourceCache = _useDataSourceCache2[1];
  var _useState11 = (0, _react.useState)(props.summaryReducer ? props.summaryReducer.initialValue : null),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    summary = _useState12[0],
    setSummary = _useState12[1];
  var setItemOnReorderingGroups = function setItemOnReorderingGroups(index, item, config) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    computedProps.setItemAt(index, item, config);
    computedProps.reload();
  };
  var setItemAt = function setItemAt(index, item, config) {
    var replace = config && config.replace;
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var newItem = computedProps.getItemAt(index);
    var oldId = computedProps.getItemId(newItem);
    if (!newItem) {
      return;
    }
    if (replace) {
      newItem = item;
    } else {
      if (config && config.property) {
        newItem = _objectSpread(_objectSpread({}, newItem), {}, (0, _defineProperty2.default)({}, config.property, config.value));
      } else {
        if (config && config.deepCloning && computedProps.compoundIdProperty) {
          var parts = computedProps.idProperty.split(computedProps.idPropertySeparator);
          for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (newItem[part]) {
              Object.assign(newItem[part], _objectSpread({}, item[part]));
            }
          }
        } else {
          newItem = _objectSpread(_objectSpread({}, newItem), item);
        }
      }
    }
    var newId = computedProps.getItemId(newItem);
    if (newId !== oldId) {
      if (computedProps.showWarnings) {
        console.error("Cannot replace the item with another one that has a different value for the idProperty!");
      }
      return;
    }
    setDataSourceCache(_objectSpread(_objectSpread({}, computedProps.computedDataSourceCache), {}, (0, _defineProperty2.default)({}, newId, newItem)));
  };
  var setItemsAt = function setItemsAt(items, config) {
    var replace = config && config.replace;
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var newIds = {};
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      var oldId = computedProps.getItemId(item);
      var index = computedProps.getItemIndex(item);
      var newItem = computedProps.getItemAt(index);
      if (!newItem) {
        continue;
      }
      if (replace) {
        newItem = item;
      } else {
        newItem = _objectSpread(_objectSpread({}, newItem), item);
      }
      var newId = computedProps.getItemId(newItem);
      if (newId !== oldId) {
        continue;
      }
      newIds[newId] = newItem;
    }
    if (!items.length) {
      return;
    }
    setDataSourceCache(_objectSpread(_objectSpread({}, computedProps.computedDataSourceCache), newIds));
  };
  var setItemPropertyAt = function setItemPropertyAt(index, property, value) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (property === computedProps.idProperty) {
      if (computedProps.showWarnings) {
        console.error("Cannot update the value of the \"idProperty\" property!");
      }
    }
    var item = computedProps.getItemAt(index);
    if (item) {
      item = _objectSpread({}, item);
      item[property] = value;
      setItemAt(index, item, {
        property: property,
        value: value
      });
    }
  };
  var setItemPropertyForId = function setItemPropertyForId(id, property, value) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var index = computedProps.getRowIndexById(id);
    setItemPropertyAt(index, property, value);
  };
  var _useData = useData({
      dataSource: props.dataSource,
      skip: computedSkip,
      limit: computedLimit,
      localPagination: computedLocalPagination
    }, props.context),
    data = _useData.data,
    dataMap = _useData.dataMap,
    dataIndexMap = _useData.dataIndexMap,
    setDataIndexMap = _useData.setDataIndexMap,
    setDataMap = _useData.setDataMap,
    count = _useData.count,
    silentSetData = _useData.silentSetData,
    setCount = _useData.setCount,
    originalData = _useData.originalData,
    setOriginalData = _useData.setOriginalData,
    dataCountAfterFilter = _useData.dataCountAfterFilter,
    setDataCountAfterFilter = _useData.setDataCountAfterFilter;
  var _useState13 = (0, _react.useState)(Date.now),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    reloadTimestamp = _useState14[0],
    setReloadTimestamp = _useState14[1];
  var reload = function reload() {
    setReloadTimestamp(Date.now());
  };
  var getFilteredRows = (0, _react.useCallback)(function (dataCount) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var filteredRowsCount = computedProps.filteredRowsCount;
    if (dataCount === undefined) {
      return;
    }
    if (filteredRowsCount) {
      filteredRowsCount(dataCount);
    }
  }, [dataCountAfterFilter]);
  if (computedProps.filteredRowsCount) {
    getFilteredRows(dataCountAfterFilter);
  }
  var lastSkipRef = (0, _react.useRef)(computedSkip);
  var lastFilterValueRef = (0, _react.useRef)(computedProps.computedFilterValue);
  var lastLimitRef = (0, _react.useRef)(computedLimit);
  var lastGroupBy = (0, _usePrevious.default)(computedProps.computedGroupBy, computedProps.computedGroupBy);
  var lastDataSource = (0, _usePrevious.default)(props.dataSource, props.dataSource);
  var dataPromiseRef = (0, _react.useRef)(null);
  dataPromiseRef.current = (0, _useLoadDataEffect.default)({
    getDataSource: function getDataSource(_ref8) {
      var shouldReload = _ref8.shouldReload;
      var computedProps = computedPropsRef.current;
      return shouldReload ? computedProps.dataSource : computedProps.originalData;
    }
  }, function (dataToLoad, _ref9) {
    var shouldReload = _ref9.shouldReload,
      intercept = _ref9.intercept;
    var _computedPropsRef$cur = computedPropsRef.current,
      computedSortInfo = _computedPropsRef$cur.computedSortInfo,
      computedRemoteData = _computedPropsRef$cur.computedRemoteData,
      computedFilterValue = _computedPropsRef$cur.computedFilterValue,
      computedGroupBy = _computedPropsRef$cur.computedGroupBy,
      prevOriginalData = _computedPropsRef$cur.originalData,
      skipLoadOnMount = _computedPropsRef$cur.skipLoadOnMount,
      wasMountedRef = _computedPropsRef$cur.wasMountedRef,
      initialState = _computedPropsRef$cur.initialState;
    if (!prevOriginalData.length && computedRemoteData) {
      computedPropsRef.current.setLoading(true);
    }
    var initialCount;
    if (skipLoadOnMount && !wasMountedRef.current && initialState && initialState.data) {
      dataToLoad = initialState.data;
      initialCount = initialState.count;
    }
    if (computedRemoteData && !Array.isArray(dataToLoad)) {
      computedPropsRef.current.setLoading(true);
    }
    var skipControlled = (0, _isControlledProperty.default)(computedProps.initialProps, 'skip');
    var shouldResetSkip = shouldReload && typeof props.dataSource === 'function' && props.dataSource !== lastDataSource && !skipControlled && computedPropsRef.current.computedSkip !== 0;
    if (!shouldResetSkip) {
      if (shouldReload && typeof props.dataSource === 'function' && computedPropsRef.current.computedSkip !== 0 && computedPropsRef.current.computedFilterable && (!(0, _fastDeepEqual.default)(computedPropsRef.current.computedFilterValue, lastFilterValueRef.current) || computedPropsRef.current.computedGroupBy !== lastGroupBy)) {
        shouldResetSkip = true;
      }
    }
    if (shouldResetSkip) {
      setSkip(0);
      return Promise.resolve(true);
    }
    return intercept(loadDataSource(dataToLoad, {
      sortInfo: computedSortInfo,
      currentData: computedPropsRef.current.data,
      skip: computedSkip,
      limit: computedLimit,
      filterValue: computedFilterValue,
      groupBy: computedGroupBy
    }), dataToLoad).then(function (_ref10) {
      var originalData = _ref10.data,
        count = _ref10.count;
      if (initialCount) {
        count = initialCount;
      }
      var computedProps = computedPropsRef.current;
      var queue = (0, _batchUpdate.default)();
      var data = originalData;
      var shouldAppend = computedLivePagination && !shouldReload ? computedSkip > lastSkipRef.current : append;
      if (shouldAppend) {
        originalData = prevOriginalData.concat(originalData);
        data = originalData;
      }
      var computeDataResult = (0, _computeData.default)({
        remoteData: false,
        originalData: originalData
      }, computedProps, queue);
      data = computeDataResult.data || originalData;
      var dataCountAfterFilter = computeDataResult.dataCountAfterFilter;
      var prevComputedSkip = lastSkipRef.current;
      lastSkipRef.current = computedSkip;
      lastFilterValueRef.current = computedFilterValue;
      lastLimitRef.current = computedLimit;
      var shouldIndexData = computedProps.computedRowSelectionEnabled || computedProps.computedRowExpandEnabled || computedProps.treeColumn || computedProps.treeEnabled || computedProps.rowIndexColumn || computedProps.computedRowHeights || computedProps.computedGroupBy && props.stickyGroupRows;
      var dataIndexMap = shouldIndexData && Array.isArray(data) ? {} : null;
      var stickyGroupsIndexes = props.stickyGroupRows === true || props.stickyTreeNodes === true ? {} : null;
      var dataMap = shouldIndexData && Array.isArray(data) ? data.reduce(function (acc, item, index) {
        var id = computedProps.getItemId(item);
        if (stickyGroupsIndexes) {
          if (item.__group) {
            stickyGroupsIndexes[index] = item.depth;
          }
          if (item.__nodeProps && !item.__nodeProps.leafNode) {
            stickyGroupsIndexes[index] = item.__nodeProps.depth + 1;
          }
        }
        acc[id] = item;
        dataIndexMap[id] = index;
        return acc;
      }, {}) : null;
      return queue.commit(function () {
        var computedProps = computedPropsRef.current;
        setOriginalData(originalData);
        if (computedProps.scrollTopOnSort === true && computedProps.loadDataTrigger.find(function (s) {
          return s == 'sortInfo';
        }) || computedProps.scrollTopOnSort === 'always') {
          raf(function () {
            computedProps.setScrollTop(0);
          });
        }
        if (computedSkip === 0 && prevComputedSkip > 0) {
          raf(function () {
            computedProps.setScrollTop(0);
          });
        }
        if (computedProps.scrollTopOnFilter && computedProps.loadDataTrigger.find(function (s) {
          return s == 'filterValue';
        })) {
          raf(function () {
            computedProps.setScrollTop(0);
          });
        }
        setLoadDataTrigger([]);
        if (append) {
          setAppend(false);
        }
        computedProps.setDataMap(dataMap);
        computedProps.setDataIndexMap(dataIndexMap);
        if (stickyGroupsIndexes && computedProps.setStickyGroupsIndexes) {
          computedProps.setStickyGroupsIndexes(stickyGroupsIndexes);
        }
        setDataCountAfterFilter(dataCountAfterFilter);
        if (dataCountAfterFilter != null && computedSkip >= dataCountAfterFilter && !computedRemoteData) {
          setSkip(0);
        }
        silentSetData(data || []);
        computedProps.setLoading(false);
        if (shouldReload) {
          setCount(count);
        }
      });
    }, function (_err) {});
  }, {
    reloadDeps: [props.dataSource, computedRemoteData ? computedSkip : null, computedRemoteData && !computedLivePagination ? computedLimit : null, reloadTimestamp, props.pagination, props.remotePagination, props.pivot, props.livePagination, computedRemoteData || props.groupBy ? computedProps.computedGroupBy : null, computedRemoteData ? JSON.stringify(computedProps.computedSortInfo) : null, computedRemoteData ? JSON.stringify(computedProps.computedFilterValue) : null, computedRemoteFilter ? JSON.stringify(computedProps.computedFilterValue) : null, JSON.stringify(computedProps.computedCollapsedGroups || ''), JSON.stringify(computedProps.computedExpandedGroups || '')],
    noReloadDeps: [originalData, computedProps.computedGroupBy, computedProps.groupColumn, computedProps.renderRowDetails, computedProps.treeColumn, computedProps.showGroupSummaryRow, !computedRemoteData ? computedSkip : null, !computedRemoteData ? computedLimit : null, !computedRemoteData ? JSON.stringify(computedProps.computedSortInfo) : null, !computedRemoteFilter ? JSON.stringify(computedProps.computedFilterValue) : null, computedProps.computedExpandedNodes ? JSON.stringify(computedProps.computedExpandedNodes) : null, computedProps.computedNodeCache ? JSON.stringify(computedProps.computedNodeCache) : null, computedProps.computedLoadingNodes ? JSON.stringify(computedProps.computedLoadingNodes) : null, computedDataSourceCache, computedProps.stickyGroupRows, computedProps.stickyTreeNodes]
  });
  var paginationProps = usePagination({
    append: append,
    reload: reload,
    setAppend: setAppend,
    lastSkipRef: lastSkipRef,
    lastLimitRef: lastLimitRef,
    skip: computedSkip,
    limit: computedLimit,
    count: count,
    setSkip: setSkip,
    setLimit: setLimit,
    pagination: computedPagination,
    livePagination: computedLivePagination,
    localPagination: computedLocalPagination,
    remotePagination: computedRemotePagination,
    dataCountAfterFilter: dataCountAfterFilter,
    originalData: originalData,
    data: data
  }, computedPropsRef);
  var getRowIndexById = (0, _react.useCallback)(function (rowId, data) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return -1;
    }
    var dataIndexMap = computedProps.dataIndexMap;
    if (dataIndexMap) {
      return dataIndexMap[rowId];
    }
    data = data || computedProps.data;
    return (0, _getIndexBy.default)(data, computedProps.idProperty, rowId, computedProps.getItemId, computedProps.compoundIdProperty);
  }, []);
  var getItemIndexById = (0, _react.useCallback)(function (id, data) {
    return getRowIndexById(id, data);
  }, []);
  var getData = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return [];
    }
    return computedProps.data;
  }, []);
  return _objectSpread({
    getData: getData,
    getRowIndexById: getRowIndexById,
    getItemIndexById: getItemIndexById,
    data: data,
    dataMap: dataMap,
    setDataMap: setDataMap,
    dataIndexMap: dataIndexMap,
    setDataIndexMap: setDataIndexMap,
    loadDataTrigger: loadDataTrigger,
    setLoadDataTrigger: setLoadDataTrigger,
    originalData: originalData,
    setOriginalData: setOriginalData,
    ungroupedData: ungroupedData,
    setUngroupedData: setUngroupedData,
    computedSkip: computedSkip,
    computedPagination: computedPagination,
    computedLimit: computedLimit,
    computedSummary: summary,
    setSummary: setSummary,
    dataPromiseRef: dataPromiseRef,
    silentSetData: silentSetData,
    computedLivePagination: computedLivePagination,
    computedLocalPagination: computedLocalPagination,
    computedRemotePagination: computedRemotePagination,
    computedRemoteData: computedRemoteData,
    computedRemoteFilter: computedRemoteFilter,
    computedRemoteSort: computedRemoteSort,
    computedDataSourceCache: computedDataSourceCache,
    setDataSourceCache: setDataSourceCache,
    setItemPropertyAt: setItemPropertyAt,
    setItemPropertyForId: setItemPropertyForId,
    setItemAt: setItemAt,
    setItemsAt: setItemsAt,
    setItemOnReorderingGroups: setItemOnReorderingGroups
  }, paginationProps);
};
exports.default = _default;