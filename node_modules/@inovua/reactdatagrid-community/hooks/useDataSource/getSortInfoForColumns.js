/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var getCol = function getCol(name, columnsMap) {
  var col = columnsMap[name];
  if (!col) {
    Object.keys(columnsMap).forEach(function (colId) {
      if (col) {
        return;
      }
      var theCol = columnsMap[colId];
      if (theCol.sortName === name) {
        col = theCol;
      }
    });
  }
  return col;
};
var getSortInfoForColumns = function getSortInfoForColumns(sortInfo, columnsMap) {
  if (!columnsMap) {
    return sortInfo;
  }
  if (!Array.isArray(sortInfo)) {
    if (sortInfo && sortInfo.name) {
      var col = getCol(sortInfo.name, columnsMap);
      sortInfo = _objectSpread({}, sortInfo);
      if (col) {
        if (typeof col.sortName === 'string') {
          sortInfo.name = col.sortName;
        }
        if (col.type) {
          sortInfo.type = col.type;
        }
        if (col.sort) {
          sortInfo.fn = function (one, two, data1, data2, sortInfo) {
            return col.sort ? col.sort(one, two, col, data1, data2, sortInfo) : 0;
          };
        }
      }
    }
    return sortInfo;
  } else {
    return sortInfo.map(function (sortInfo) {
      var col = getCol(sortInfo.name, columnsMap);
      sortInfo = _objectSpread({}, sortInfo);
      if (col && typeof col.sortName === 'string') {
        sortInfo.name = col.sortName;
      }
      if (col.type) {
        sortInfo.type = col.type;
      }
      if (col.sort) {
        sortInfo.fn = function (one, two, data1, data2, sortInfo) {
          return col.sort ? col.sort(one, two, col, data1, data2, sortInfo) : 0;
        };
      }
      return sortInfo;
    });
  }
};
var _default = getSortInfoForColumns;
exports.default = _default;