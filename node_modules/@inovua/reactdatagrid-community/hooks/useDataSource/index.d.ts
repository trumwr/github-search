/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Dispatch, SetStateAction, MutableRefObject } from 'react';
import { TypeDataGridProps, TypeDataSource, TypeComputedProps, TypeDataSourceCache } from '../../types';
export declare const isLivePagination: (props: {
    remotePagination?: boolean;
    pagination?: true | false | 'remote' | 'local';
    livePagination?: boolean;
    dataSource?: TypeDataSource;
}) => boolean;
declare const _default: (props: TypeDataGridProps, computedProps: TypeComputedProps, computedPropsRef: MutableRefObject<TypeComputedProps>) => {
    computedLivePagination: boolean;
    computedLocalPagination: boolean;
    computedPagination: boolean;
    computedRemotePagination: boolean;
    computedDataSourceCache?: TypeDataSourceCache;
    setDataSourceCache: Dispatch<SetStateAction<TypeDataSourceCache | undefined>>;
    getData: () => any[];
    getRowIndexById: (rowId: string | number, data?: any[]) => number;
    getItemIndexById: (rowId: string | number, data?: any[]) => number;
    setItemPropertyAt: (index: number, property: string, value: any) => void;
    setItemPropertyForId: (id: string | number, property: string, value: any) => void;
    setItemAt: (index: number, item: any, config?: {
        replace?: boolean;
        property?: string;
        value?: any;
    }) => void;
    setItemOnReorderingGroups: (index: number, item: any, config?: {
        replace?: boolean;
        newData?: any[];
    }) => void;
    setItemsAt: (items: any, config?: {
        replace: boolean;
    }) => void;
    data: any[];
    ungroupedData: any[];
    setUngroupedData: Dispatch<SetStateAction<any[]>>;
    originalData: any[];
    computedSkip: number;
    computedLimit: number;
    setSkip: (s: number) => any;
    setLimit: (limit: number) => any;
    silentSetData: (data: any[]) => any;
    setOriginalData: (data: any[]) => any;
    loadNextPage?: (() => void) | undefined;
    computedSummary: any;
    setSummary: Dispatch<SetStateAction<any>>;
    computedRemoteData: boolean;
    computedRemoteFilter: boolean;
    computedRemoteSort: boolean;
    loadDataTrigger: string[];
    setLoadDataTrigger: Dispatch<SetStateAction<string[]>>;
    dataMap: {
        [key: string]: any;
    } | null;
    dataIndexMap: {
        [key: string]: number;
    } | null;
    setDataMap: (dataMap: {
        [key: string]: any;
    } | null) => void;
    setDataIndexMap: (dataMap: {
        [key: string]: number;
    } | null) => void;
    dataPromiseRef: any;
};
export default _default;
