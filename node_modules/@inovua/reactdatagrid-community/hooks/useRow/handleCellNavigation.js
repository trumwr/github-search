/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lodash = _interopRequireDefault(require("lodash.throttle"));
var waitFn = _lodash.default;
var WAIT_TIME = 36;
var WAIT_PARAMS = {
  maxWait: 100,
  leading: true
};
var handleCellNavigation = function handleCellNavigation(event, computedProps) {
  var key = event.key;
  var cellNavigationRef = computedProps.cellNavigationRef;
  if (!cellNavigationRef.current) {
    cellNavigationRef.current = {
      onArrowUp: function onArrowUp() {
        var computedProps = cellNavigationRef.current.computedProps;
        if (computedProps.incrementActiveCell) {
          computedProps.incrementActiveCell([-1, 0]);
        }
      },
      onArrowDown: function onArrowDown() {
        var computedProps = cellNavigationRef.current.computedProps;
        if (computedProps.incrementActiveCell) {
          computedProps.incrementActiveCell([1, 0]);
        }
      },
      onArrowRight: function onArrowRight() {
        var computedProps = cellNavigationRef.current.computedProps;
        if (computedProps.incrementActiveCell) {
          computedProps.incrementActiveCell([0, 1]);
        }
      },
      onArrowLeft: function onArrowLeft() {
        var computedProps = cellNavigationRef.current.computedProps;
        if (computedProps.incrementActiveCell) {
          computedProps.incrementActiveCell([0, -1]);
        }
      },
      onHome: function onHome() {
        var computedProps = cellNavigationRef.current.computedProps;
        if (computedProps.setActiveCell && activeCell) {
          computedProps.setActiveCell([0, activeCell[1]]);
        }
      },
      onEnd: function onEnd() {
        var computedProps = cellNavigationRef.current.computedProps;
        if (computedProps.setActiveCell && activeCell) {
          computedProps.setActiveCell([computedProps.data.length - 1, activeCell[1]]);
        }
      },
      onPageUp: function onPageUp() {
        var computedProps = cellNavigationRef.current.computedProps;
        if (computedProps.incrementActiveCell) {
          computedProps.incrementActiveCell([-computedProps.keyPageStep, 0]);
        }
      },
      onPageDown: function onPageDown() {
        var computedProps = cellNavigationRef.current.computedProps;
        if (computedProps.incrementActiveCell) {
          computedProps.incrementActiveCell([computedProps.keyPageStep, 0]);
        }
      },
      onEnter: function onEnter() {
        var computedProps = cellNavigationRef.current.computedProps;
        if (computedProps.toggleActiveCellSelection) {
          computedProps.toggleActiveCellSelection(event);
        }
      }
    };
    Object.keys(cellNavigationRef.current).forEach(function (key) {
      var fn = cellNavigationRef.current[key];
      cellNavigationRef.current[key] = waitFn(fn, WAIT_TIME, WAIT_PARAMS);
    });
  }
  cellNavigationRef.current.computedProps = computedProps;
  var activeCell = computedProps.computedActiveCell;
  var options = {
    ArrowUp: cellNavigationRef.current.onArrowUp,
    ArrowDown: cellNavigationRef.current.onArrowDown,
    ArrowRight: cellNavigationRef.current.onArrowRight,
    ArrowLeft: cellNavigationRef.current.onArrowLeft,
    Home: cellNavigationRef.current.onHome,
    End: cellNavigationRef.current.onEnd,
    PageUp: cellNavigationRef.current.onPageUp,
    PageDown: cellNavigationRef.current.onPageDown,
    Enter: cellNavigationRef.current.onEnter
  };
  var fn = options[key];
  if (fn) {
    fn({
      shiftKey: event.shiftKey,
      ctrlKey: event.ctrlKey,
      metaKey: event.metaKey
    });
    return true;
  }
  return false;
};
var _default = handleCellNavigation;
exports.default = _default;