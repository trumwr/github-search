/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _batchUpdate = _interopRequireDefault(require("../../utils/batchUpdate"));
var _handleSelection = require("./handleSelection");
var _handleRowNavigation = _interopRequireDefault(require("./handleRowNavigation"));
var _handleCellNavigation = _interopRequireDefault(require("./handleCellNavigation"));
var _containsNode = _interopRequireDefault(require("../../common/containsNode"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _default = function _default(props, computedProps, computedPropsRef) {
  var computedOnKeyDown = function computedOnKeyDown(event) {
    if (props.onKeyDown) {
      props.onKeyDown(event);
    }
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (event.nativeEvent && event.nativeEvent.__handled_in_details) {
      return;
    }
    var sameElement = event.target === computedProps.getScrollingElement();
    var handled = false;
    if (event.key === 'Escape' && !sameElement && computedProps.autoFocusOnEditEscape) {
      handled = true;
      computedProps.focus();
    }
    if (!sameElement) {
      return;
    }
    if (computedProps.computedHasRowNavigation) {
      handled = (0, _handleRowNavigation.default)(event, computedProps);
    } else if (computedProps.computedCellNavigationEnabled) {
      handled = (0, _handleCellNavigation.default)(event, computedProps);
    }
    var activeItem = computedProps.computedActiveItem;
    var activeIndex = computedProps.computedActiveIndex;
    var isGroup = computedProps.isGroup(activeItem);
    var rowExpandEnabled = computedProps.computedRowExpandEnabled;
    var rowExpandable = activeItem && computedProps.isRowExpandableAt ? computedProps.isRowExpandableAt(activeIndex) : false;
    var rowExpanded = rowExpandable && activeItem ? computedProps.isRowExpanded(activeItem) : false;
    var treeEnabled = computedProps.computedTreeEnabled;
    var nodeExpandable = treeEnabled && activeItem && computedProps.isNodeExpandableAt ? computedProps.isNodeExpandableAt(activeIndex) : false;
    var nodeExpanded = treeEnabled && activeItem && computedProps.isNodeExpanded ? computedProps.isNodeExpanded(activeItem) : false;
    var rowSelectionEnabled = computedProps.computedRowSelectionEnabled;
    var keyShortcutArg = {
      event: event,
      data: activeItem,
      index: activeIndex,
      activeItem: activeItem,
      activeIndex: activeIndex,
      handle: computedPropsRef,
      isGroup: isGroup,
      treeEnabled: treeEnabled,
      rowSelectionEnabled: rowSelectionEnabled,
      nodeExpandable: nodeExpandable,
      nodeExpanded: nodeExpanded,
      rowExpandEnabled: rowExpandEnabled,
      rowExpandable: rowExpandable,
      rowExpanded: rowExpanded
    };
    var editKeyPressed = !!computedProps.isStartEditKeyPressed(keyShortcutArg);
    var expandKeyPressed = !!computedProps.isExpandKeyPressed(keyShortcutArg);
    var collapseKeyPressed = !expandKeyPressed ? computedProps.isCollapseKeyPressed(keyShortcutArg) : false;
    if (expandKeyPressed) {
      handled = true;
    }
    if (expandKeyPressed && activeItem) {
      if (rowExpandEnabled && rowExpandable && !rowExpanded) {
        computedProps.setRowExpandedAt(activeIndex, true);
      } else {
        if (isGroup) {
          computedProps.expandGroup(activeItem);
        } else if (treeEnabled && nodeExpandable && !nodeExpanded) {
          computedProps.setNodeExpandedAt(activeIndex, true);
        }
      }
    }
    if (collapseKeyPressed) {
      handled = true;
    }
    if (collapseKeyPressed && activeItem) {
      if (rowExpandEnabled && rowExpandable && rowExpanded) {
        computedProps.setRowExpandedAt(activeIndex, false);
      } else {
        if (isGroup) {
          computedProps.collapseGroup(activeItem);
        } else if (treeEnabled && nodeExpandable && nodeExpanded) {
          computedProps.setNodeExpandedAt(activeIndex, false);
        }
      }
    }
    if (editKeyPressed) {
      handled = true;
      if (computedProps.visibleColumns && computedProps.visibleColumns.length) {
        if (computedProps.tryStartEdit) {
          computedProps.tryStartEdit({
            rowIndex: activeItem ? activeIndex : 0,
            columnId: computedProps.visibleColumns[0].id,
            dir: 1
          });
        }
      }
    }
    if (activeItem && event.key === 'Enter') {
      if (rowExpandEnabled && rowExpandable) {
        if (!rowSelectionEnabled) {
          computedProps.toggleRowExpand(activeIndex);
          handled = true;
        }
      } else {
        if (isGroup) {
          computedProps.toggleGroup(activeItem);
          handled = true;
        } else if (nodeExpandable && !rowSelectionEnabled && computedProps.computedTreeEnabled) {
          computedProps.toggleNodeExpand(activeItem);
          handled = true;
        }
      }
    }
    if (handled) {
      event.preventDefault();
      if (event.nativeEvent) {
        event.nativeEvent.__handled_in_details = true;
      }
    }
    if (computedProps.enableClipboard) {
      var cellSelection = !!computedProps.computedCellSelection;
      var checkboxColumn = !!computedProps.checkboxColumn;
      var selected = !!computedProps.computedSelected;
      if ((event.ctrlKey || event.metaKey) && event.key == 'c') {
        if (checkboxColumn || selected) {
          computedProps.copySelectedRowsToClipboard && computedProps.copySelectedRowsToClipboard();
        } else if (cellSelection) {
          computedProps.copySelectedCellsToClipboard && computedProps.copySelectedCellsToClipboard();
        } else {
          computedProps.copyActiveRowToClipboard && computedProps.copyActiveRowToClipboard();
        }
      }
      if ((event.ctrlKey || event.metaKey) && event.key == 'v') {
        if (checkboxColumn || selected) {
          computedProps.pasteSelectedRowsFromClipboard && computedProps.pasteSelectedRowsFromClipboard();
        } else if (cellSelection) {
          computedProps.pasteSelectedCellsFromClipboard && computedProps.pasteSelectedCellsFromClipboard();
        } else {
          computedProps.pasteActiveRowFromClipboard && computedProps.pasteActiveRowFromClipboard();
        }
      }
    }
  };
  var onFullBlur = (0, _react.useCallback)(function (_event) {}, []);
  var isGroup = (0, _react.useCallback)(function (item) {
    return !!item && !!item.__group;
  }, []);
  var computedOnFocus = (0, _react.useCallback)(function (event) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    event.preventDefault();
    if (props.onFocus) {
      props.onFocus(event);
    }
    if (event.nativeEvent.preventParentFocus) {
      onFullBlur(event);
      return;
    }
    event.nativeEvent.preventParentFocus = true;
    if (computedProps.computedWillReceiveFocusRef.current) {
      computedProps.computedWillReceiveFocusRef.current = false;
      return;
    }
    if (!computedProps.computedFocused) {
      computedProps.computedSetFocused(true);
    }
  }, []);
  var computedOnBlur = (0, _react.useCallback)(function (event) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (computedProps.isInEdit.current) {
      return;
    }
    event.preventDefault();
    if (computedProps.preventBlurOnContextMenuOpen && computedProps.preventBlurOnContextMenuOpen.current) {
      return;
    }
    var domNode = computedProps.getDOMNode();
    if (event.relatedTarget && (0, _containsNode.default)(domNode, event.relatedTarget)) {
      return;
    }
    if (props.onBlur) {
      props.onBlur(event);
    }
    var computedActiveIndex = computedProps.computedActiveIndex;
    if (computedActiveIndex >= 0) {
      computedProps.doSetLastActiveIndex(computedActiveIndex);
    }
    computedProps.setActiveIndex(-1);
    computedProps.computedSetFocused(false);
  }, []);
  var onGroupRowClick = (0, _react.useCallback)(function (rowProps, _ref, queue) {
    var enableKeyboardNavigation = _ref.enableKeyboardNavigation,
      setActiveIndex = _ref.setActiveIndex;
    if (rowProps.groupProps || rowProps.data && rowProps.data.__group) {
      if (enableKeyboardNavigation) {
        queue(function () {
          setActiveIndex(rowProps.rowIndex);
        });
      }
      queue.commit();
      return true;
    }
    return false;
  }, []);
  var handleRowSelectionOnClick = function handleRowSelectionOnClick(event, rowProps, computedProps, queue) {
    if (event.nativeEvent.skipSelect) {
      if (computedProps.enableKeyboardNavigation) {
        queue(function () {
          computedProps.setActiveIndex(rowProps.rowIndex);
        });
      }
      queue.commit();
      return;
    }
    var shiftKey = event.shiftKey,
      metaKey = event.metaKey,
      ctrlKey = event.ctrlKey;
    var multiSelectKey = shiftKey || metaKey || ctrlKey;
    var autoCheckboxColumn = props.autoCheckboxColumn;
    if (autoCheckboxColumn && multiSelectKey) {
      return;
    }
    if ((0, _handleSelection.handleSelection)(rowProps, computedProps, event, queue) !== false) {
      queue(function () {
        computedProps.setActiveIndex(rowProps.rowIndex);
      });
    }
  };
  var computedOnRowMouseDown = (0, _react.useCallback)(function () {}, []);
  var computedOnRowClick = (0, _react.useCallback)(function (event, rowProps) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var preventRowSelectionOnClickWithMouseMove = computedProps.preventRowSelectionOnClickWithMouseMove,
      initialProps = computedProps.initialProps;
    if (initialProps.onRowClick) {
      initialProps.onRowClick({
        rowIndex: rowProps.rowIndex,
        remoteRowIndex: rowProps.remoteRowIndex,
        groupProps: rowProps.groupProps,
        empty: rowProps.empty,
        columns: rowProps.columns,
        dataSourceArray: rowProps.dataSourceArray,
        data: rowProps.data
      }, event);
    }
    var queue = (0, _batchUpdate.default)();
    var lastMouseDownEventProps = computedProps.lastMouseDownEventPropsRef.current;
    var mouseDidNotMove = event.type !== 'click';
    if (lastMouseDownEventProps && event.type === 'click') {
      var pageX = lastMouseDownEventProps.pageX,
        pageY = lastMouseDownEventProps.pageY,
        rowIndex = lastMouseDownEventProps.rowIndex;
      mouseDidNotMove = pageX === Math.floor(event.pageX) && pageY === Math.floor(event.pageY) && rowIndex === rowProps.rowIndex;
    }
    if (!computedProps.computedFocused) {
      queue(function () {
        computedProps.computedSetFocused(true);
      });
    }
    if (computedProps.computedCellSelectionEnabled) {
      queue.commit();
      return;
    }
    if (onGroupRowClick(rowProps, computedProps, queue)) {
      queue.commit();
      return;
    }
    var threshold = 20;
    var preventRowSelection = preventRowSelectionOnClickWithMouseMove ? mouseDidNotMove : true;
    if (preventRowSelection === false && Math.abs(lastMouseDownEventProps.pageX - event.pageX) < threshold || Math.abs(lastMouseDownEventProps.pageY - event.pageY) < threshold) {
      preventRowSelection = true;
    }
    if ((!props.checkboxOnlyRowSelect || event.type !== 'click') && preventRowSelection) {
      handleRowSelectionOnClick(event, rowProps, computedProps, queue);
    } else {
      if (computedProps.enableKeyboardNavigation && computedProps.computedHasRowNavigation) {
        queue(function () {
          computedProps.setActiveIndex(rowProps.rowIndex);
        });
      }
    }
    queue.commit();
  }, []);
  var computedRowDoubleClick = (0, _react.useCallback)(function (event, rowProps) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (computedProps.onRowDoubleClick) {
      computedProps.onRowDoubleClick(event, rowProps);
    }
  }, []);
  var computedCellDoubleClick = (0, _react.useCallback)(function (event, cellProps) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (computedProps.onCellDoubleClick) {
      computedProps.onCellDoubleClick(event, cellProps);
    }
  }, []);
  var onCellClickAction = (0, _react.useCallback)(function (event, cellProps) {
    if (cellProps.groupProps || cellProps.cellSelectable === false) {
      return;
    }
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var hasCellSelection = computedProps.computedCellSelectionEnabled;
    var cellMultiSelect = computedProps.computedCellMultiSelectionEnabled;
    var queue = (0, _batchUpdate.default)();
    if (hasCellSelection) {
      var ctrlKey = event.ctrlKey || event.metaKey;
      var append = cellMultiSelect && ctrlKey;
      var cellCoords = [cellProps.rowIndex, cellProps.columnIndex];
      var key = computedProps.getCellSelectionKey(cellProps);
      var shiftKey = event.shiftKey && (computedProps.computedActiveCell || computedProps.lastSelectedCell);
      if (shiftKey && cellMultiSelect) {
        var cellSelection = computedProps.getCellSelectionBetween(computedProps.computedActiveCell || computedProps.lastSelectedCell || undefined, cellCoords);
        queue(function () {
          computedProps.setLastCellInRange(Object.keys(cellSelection).pop() || '');
          computedProps.setCellSelection(cellSelection);
        });
      } else {
        var cellSelectionMap = computedProps.computedCellSelection;
        var isSelected = !!cellSelectionMap[key];
        var newCellSelectionMap = append ? Object.assign({}, cellSelectionMap) : {};
        if (isSelected && (cellMultiSelect || computedProps.initialProps.toggleCellSelectOnClick || ctrlKey)) {
          delete newCellSelectionMap[key];
        } else {
          if (!shiftKey) {
            queue(function () {
              computedProps.setLastSelectedCell(cellCoords);
            });
          }
          newCellSelectionMap[key] = true;
        }
        queue(function () {
          computedProps.setCellSelection(newCellSelectionMap);
        });
      }
    }
    var shouldSetActiveCell = computedProps.computedCellNavigationEnabled && (!event.shiftKey || !cellMultiSelect);
    queue(function () {
      if (shouldSetActiveCell) {
        computedProps.setActiveCell([cellProps.rowIndex, cellProps.columnIndex]);
      }
    });
    queue.commit();
  }, []);
  var setItemAtAsSelected = (0, _react.useCallback)(function (index, event) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var computedRowSelectionEnabled = computedProps.computedRowSelectionEnabled,
      getItemAt = computedProps.getItemAt,
      getItemId = computedProps.getItemId;
    var item = getItemAt(index);
    var itemId = item ? getItemId(item) : undefined;
    if (itemId === undefined) {
      return;
    }
    if (computedRowSelectionEnabled) {
      (0, _handleSelection.handleSelection)({
        rowIndex: index,
        data: item
      }, computedProps, event || {
        nativeEvent: null
      });
    }
  }, []);
  var selectionIndexRef = (0, _react.useRef)(null);
  var shiftKeyIndexRef = (0, _react.useRef)(null);
  var lastMouseDownEventPropsRef = (0, _react.useRef)({
    rowIndex: -1,
    pageX: -1,
    pageY: -1
  });
  var computedOnCellMouseDown = (0, _react.useCallback)(function (event, cellProps) {
    lastMouseDownEventPropsRef.current = {
      rowIndex: cellProps.rowIndex,
      pageX: Math.floor(event.pageX),
      pageY: Math.floor(event.pageY)
    };
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (computedProps.columnUserSelect && event.shiftKey && computedProps.preventDefaultTextSelectionOnShiftMouseDown) {
      event.preventDefault();
    }
    computedProps.onCellClickAction(event, cellProps);
    if (computedProps.onCellSelectionDraggerMouseDown) {
      computedProps.onCellSelectionDraggerMouseDown(event, cellProps);
    }
  }, []);
  var computedActiveIndex = computedProps.computedActiveIndex;
  return {
    selectionIndexRef: selectionIndexRef,
    shiftKeyIndexRef: shiftKeyIndexRef,
    onCellClickAction: onCellClickAction,
    computedCellDoubleClick: computedCellDoubleClick,
    computedOnKeyDown: computedOnKeyDown,
    computedOnFocus: computedOnFocus,
    computedOnBlur: computedOnBlur,
    computedOnRowClick: computedOnRowClick,
    computedRowDoubleClick: computedRowDoubleClick,
    computedOnRowMouseDown: computedOnRowMouseDown,
    computedOnCellMouseDown: computedOnCellMouseDown,
    isGroup: isGroup,
    computedActiveItem: computedActiveIndex !== -1 && computedProps.data ? computedProps.data[computedActiveIndex] : null,
    lastMouseDownEventPropsRef: lastMouseDownEventPropsRef,
    toggleActiveRowSelection: function toggleActiveRowSelection(event) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var computedActiveIndex = computedProps.computedActiveIndex;
      if (computedActiveIndex == -1) {
        return;
      }
      setItemAtAsSelected(computedActiveIndex, event);
    },
    rowProps: _objectSpread(_objectSpread({}, computedProps.initialProps.rowProps), {}, {
      onMouseDown: function onMouseDown(event) {
        if (computedProps.initialProps.rowProps && computedProps.initialProps.rowProps.onMouseDown) {
          computedProps.initialProps.rowProps.onMouseDown(event);
        }
        if (!computedProps.computedFocused && computedProps.enableKeyboardNavigation) {
          computedProps.computedWillReceiveFocusRef.current = true;
        }
      }
    })
  };
};
exports.default = _default;