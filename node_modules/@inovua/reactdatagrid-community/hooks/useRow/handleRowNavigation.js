/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _contains = _interopRequireDefault(require("../../packages/contains"));
var handleRowNavigation = function handleRowNavigation(event, computedProps) {
  var key = event.key;
  var activeItem = computedProps.computedActiveItem;
  var isGroup = computedProps.isGroup(activeItem);
  var options = {
    ArrowUp: function ArrowUp() {
      return computedProps.incrementActiveIndex(-1);
    },
    ArrowDown: function ArrowDown() {
      return computedProps.incrementActiveIndex(1);
    },
    Home: function Home() {
      return computedProps.setActiveIndex(0);
    },
    Enter: function Enter(event) {
      if (!activeItem) {
        return;
      }
      if (isGroup) {
        computedProps.toggleGroup(activeItem);
        return;
      }
      computedProps.toggleActiveRowSelection(event);
    },
    End: function End() {
      return computedProps.setActiveIndex(computedProps.data.length - 1);
    },
    PageUp: function PageUp() {
      return computedProps.incrementActiveIndex(-computedProps.keyPageStep);
    },
    PageDown: function PageDown() {
      return computedProps.incrementActiveIndex(computedProps.keyPageStep);
    }
  };
  var fn = options[key];
  if (fn) {
    fn(event);
    return true;
  }
  if (computedProps.allowRowTabNavigation) {
    if (key === 'Tab') {
      var dir = event.shiftKey ? -1 : 1;
      var rowNode = computedProps.getDOMNodeForRowIndex(computedProps.computedActiveIndex);
      if (document.activeElement && rowNode && (0, _contains.default)(rowNode, document.activeElement)) {
        return false;
      }
      var nextIndex = computedProps.computedActiveIndex + dir;
      var validNextIndex = nextIndex >= 0 && nextIndex < computedProps.count;
      if (validNextIndex) {
        computedProps.incrementActiveIndex(dir);
        return true;
      }
    }
  }
  return false;
};
var _default = handleRowNavigation;
exports.default = _default;