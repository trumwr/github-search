/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _getScrollbarWidth = _interopRequireDefault(require("../packages/getScrollbarWidth"));
var _react = require("react");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _default = function _default(props, computedProps) {
  var SCROLLBAR_WIDTH = (0, _react.useMemo)(function () {
    return (0, _getScrollbarWidth.default)();
  }, []);
  var scrollProps = _objectSpread({
    scrollMaxDelta: SCROLLBAR_WIDTH ? 1 : 1,
    scrollThreshold: computedProps.scrollThreshold,
    scrollDebounceDelay: 1
  }, props.scrollProps);
  if (computedProps.livePagination) {
    var loadNextPage = function loadNextPage() {
      if (!computedProps.computedLoading && computedProps.gotoNextPage) {
        computedProps.gotoNextPage({
          append: true
        });
      }
    };
    scrollProps.onContainerScrollVerticalMax = function () {
      if (props.scrollProps && props.scrollProps.onContainerScrollVerticalMax) {
        var _props$scrollProps;
        (_props$scrollProps = props.scrollProps).onContainerScrollVerticalMax.apply(_props$scrollProps, arguments);
      }
      loadNextPage();
    };
  }
  return scrollProps;
};
exports.default = _default;