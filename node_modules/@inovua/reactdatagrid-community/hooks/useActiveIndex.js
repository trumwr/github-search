/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _useProperty5 = _interopRequireDefault(require("./useProperty"));
var _react = require("react");
var _clamp = _interopRequireDefault(require("../utils/clamp"));
var _usePrevious = _interopRequireDefault(require("./usePrevious"));
var _throttle = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/throttle"));
var _getGlobal = require("../getGlobal");
var globalObject = (0, _getGlobal.getGlobal)();
var useActiveIndex = function useActiveIndex(props, computedProps, computedPropsRef) {
  var _useProperty = (0, _useProperty5.default)(props, 'activeIndex', -1),
    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),
    computedActiveIndex = _useProperty2[0],
    doSetActiveIndex = _useProperty2[1];
  var _useProperty3 = (0, _useProperty5.default)(props, 'lastActiveIndex', null),
    _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),
    computedLastActiveIndex = _useProperty4[0],
    doSetLastActiveIndex = _useProperty4[1];
  if (!props.enableKeyboardNavigation) {
    computedActiveIndex = -1;
  }
  var setActiveIndex = (0, _react.useCallback)(function (activeIndex) {
    var computedProps = computedPropsRef.current;
    if (!computedProps || !computedProps.computedHasRowNavigation || globalObject.isNaN(activeIndex)) {
      return;
    }
    var data = computedProps.data;
    if (activeIndex >= 0) {
      activeIndex = (0, _clamp.default)(activeIndex, 0, data.length - 1);
    } else {
      activeIndex = -1;
    }
    if (activeIndex === computedProps.computedActiveIndex) {
      return;
    }
    doSetActiveIndex(activeIndex);
  }, []);
  var incrementActiveIndex = (0, _react.useCallback)(function (inc) {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    var computedActiveIndex = computedProps.computedActiveIndex;
    if (computedProps.activeIndexThrottle) {
      (0, _throttle.default)(function () {
        return setActiveIndex(computedActiveIndex + inc);
      }, computedProps.activeIndexThrottle, {
        trailing: true,
        leading: false
      });
    } else {
      setActiveIndex(computedActiveIndex + inc);
    }
  }, []);
  var getActiveItem = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;
    return computedProps ? computedProps.data[computedProps.computedActiveIndex] : null;
  }, []);
  var getFirstVisibleIndex = (0, _react.useCallback)(function () {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return -1;
    }
    var scrollTop = computedProps.getScrollTop();
    var rowHeight = props.rowHeight;
    return Math.ceil(scrollTop / rowHeight);
  }, [props.rowHeight]);
  var oldActiveIndex = (0, _usePrevious.default)(computedActiveIndex, -1);
  (0, _react.useEffect)(function () {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return;
    }
    if (!computedProps.computedFocused) {
      return;
    }
    if (oldActiveIndex !== computedActiveIndex) {
      var top = computedActiveIndex < oldActiveIndex;
      computedProps.scrollToIndexIfNeeded(computedActiveIndex, {
        top: top
      });
    }
  }, [computedActiveIndex, oldActiveIndex]);
  computedProps.activeRowRef = (0, _react.useRef)(null);
  return {
    computedActiveIndex: computedActiveIndex,
    setActiveIndex: setActiveIndex,
    incrementActiveIndex: incrementActiveIndex,
    getActiveItem: getActiveItem,
    getFirstVisibleIndex: getFirstVisibleIndex,
    computedLastActiveIndex: computedLastActiveIndex,
    doSetLastActiveIndex: doSetLastActiveIndex
  };
};
var _default = useActiveIndex;
exports.default = _default;