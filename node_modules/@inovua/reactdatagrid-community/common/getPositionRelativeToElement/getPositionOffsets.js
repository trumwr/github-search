/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _positionsMap = _interopRequireDefault(require("./positionsMap"));
function createEmptyArray(length, fn) {
  return Array.apply(null, Array(length)).map(fn);
}
function handleNumericOffset(offset, offsetCorrection) {
  var normalizedOffset = {
    x: offset * offsetCorrection.x,
    y: offset * offsetCorrection.y
  };
  if (offsetCorrection.resetNumeric) {
    normalizedOffset[offsetCorrection.resetNumeric] = 0;
  }
  return normalizedOffset;
}
function handleObjectOffset(offset, offsetCorrection) {
  var normalizedOffset = {
    x: offset.x === undefined ? 0 : offset.x * offsetCorrection.x,
    y: offset.y === undefined ? 0 : offset.y * offsetCorrection.y
  };
  return normalizedOffset;
}
function normalizeOffset(offset, positionsLength) {
  var normalizedOffsets = null;
  if (typeof offset === 'number' || !Array.isArray(offset) && (0, _typeof2.default)(offset) === 'object') {
    normalizedOffsets = createEmptyArray(positionsLength, function () {
      return offset;
    });
  } else if (Array.isArray(offset)) {
    if (offset.length < positionsLength) {
      var lastOffsetItem = offset[offset.length - 1];
      var extraOffsets = createEmptyArray(positionsLength - offset.length, function () {
        return lastOffsetItem;
      });
      normalizedOffsets = [].concat((0, _toConsumableArray2.default)(offset), (0, _toConsumableArray2.default)(extraOffsets));
    } else {
      normalizedOffsets = offset;
    }
  }
  return normalizedOffsets;
}
function getPositionOffsets(positions, offset) {
  var normalizedOffsets = normalizeOffset(offset, positions.length);
  var positionOffsets = normalizedOffsets.map(function (normalizedOffset, index) {
    var position = positions[index];
    var positionMap = _positionsMap.default[position];
    var offsetCorrection = positionMap ? positionMap.offset : position.offset || {
      x: 0,
      y: 0
    };
    if (typeof normalizedOffset === 'number') {
      return handleNumericOffset(normalizedOffset, offsetCorrection);
    }
    return handleObjectOffset(normalizedOffset, offsetCorrection);
  });
  return positionOffsets;
}
var _default = getPositionOffsets;
exports.default = _default;