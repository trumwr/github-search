/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regionAlign = _interopRequireDefault(require("../../packages/region-align"));
var _assign = _interopRequireDefault(require("../assign"));
var _getPositionOffsets = _interopRequireDefault(require("./getPositionOffsets"));
var _positionsMap = _interopRequireDefault(require("./positionsMap"));
var _getArrowPosition = _interopRequireDefault(require("./getArrowPosition"));
var _getConstrainRegion = _interopRequireDefault(require("./getConstrainRegion"));
var _isPositionBottom = _interopRequireDefault(require("./isPositionBottom"));
var posiblePositions = Object.keys(_positionsMap.default);
function getPosition(_ref) {
  var _ref$constrainTo = _ref.constrainTo,
    constrainTo = _ref$constrainTo === void 0 ? true : _ref$constrainTo,
    targetNode = _ref.targetNode,
    overlayNode = _ref.overlayNode,
    _ref$offset = _ref.offset,
    offset = _ref$offset === void 0 ? 0 : _ref$offset,
    _ref$positions = _ref.positions,
    positions = _ref$positions === void 0 ? posiblePositions : _ref$positions,
    _ref$relativeToViewpo = _ref.relativeToViewport,
    relativeToViewport = _ref$relativeToViewpo === void 0 ? true : _ref$relativeToViewpo,
    _ref$arrowSize = _ref.arrowSize,
    arrowSize = _ref$arrowSize === void 0 ? 10 : _ref$arrowSize,
    _ref$adjustOnPosition = _ref.adjustOnPositionBottom,
    adjustOnPositionBottom = _ref$adjustOnPosition === void 0 ? true : _ref$adjustOnPosition,
    _ref$showArrow = _ref.showArrow,
    showArrow = _ref$showArrow === void 0 ? true : _ref$showArrow;
  if (!constrainTo || !overlayNode || !targetNode) {
    return null;
  }
  var constrain = (0, _getConstrainRegion.default)(constrainTo, targetNode);
  var overlayRegion = _regionAlign.default.from(overlayNode);
  var alignRegion = _regionAlign.default.from(targetNode);
  var newRegion = overlayRegion.clone();
  var positionsNormalized = positions.map(function (position) {
    var normalizedPosition;
    if (_positionsMap.default[position]) {
      normalizedPosition = _positionsMap.default[position].position;
    } else {
      normalizedPosition = position.position || position;
    }
    return normalizedPosition;
  });
  var positionsOffsets = (0, _getPositionOffsets.default)(positions, offset);
  var positionsOffsetsClone = positionsOffsets.map(function (offset) {
    return (0, _assign.default)({}, offset);
  });
  var succesfullPosition = newRegion.alignTo(alignRegion, positionsNormalized, {
    constrain: constrain,
    offset: positionsOffsetsClone
  });
  var constrainedWidth = newRegion.getWidth() != overlayRegion.getWidth();
  var constrainedHeight = newRegion.getHeight() != overlayRegion.getHeight();
  var arrowConfig = null;
  if (showArrow) {
    arrowConfig = (0, _getArrowPosition.default)({
      arrowSize: arrowSize,
      overlayRegion: newRegion,
      targetRegion: alignRegion,
      position: succesfullPosition
    });
  }
  var position = {
    top: newRegion.top,
    left: newRegion.left
  };
  if (!relativeToViewport && overlayNode.offsetParent) {
    var offsetParentRegion = _regionAlign.default.from(overlayNode.offsetParent);
    position.left -= offsetParentRegion.left;
    position.top -= offsetParentRegion.top;
  }
  if ((0, _isPositionBottom.default)(succesfullPosition) && adjustOnPositionBottom) {
    position.bottom = -(overlayRegion.height + (alignRegion.height - position.top));
    delete position.top;
  }
  return {
    alignRegion: alignRegion,
    constrainedHeight: constrainedHeight,
    constrainedWidth: constrainedWidth,
    constrained: constrainedHeight || constrainedWidth,
    positionRegion: newRegion,
    arrowConfig: arrowConfig,
    position: position,
    succesfullPosition: succesfullPosition
  };
}
var _default = getPosition;
exports.default = _default;