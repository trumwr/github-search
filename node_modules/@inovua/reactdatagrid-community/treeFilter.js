/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _filterTypes = _interopRequireDefault(require("./filterTypes"));
var _filter = require("./filter");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var doFilter = function doFilter(item, filterValueArray) {
  var filterTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _filterTypes.default;
  var columnsMap = arguments.length > 3 ? arguments[3] : undefined;
  var typeOperators = (0, _filter.buildTypeOperators)(filterTypes);
  for (var i = 0, len = filterValueArray.length; i < len; i++) {
    var fv = filterValueArray[i];
    var type = fv.type,
      operator = fv.operator,
      fn = fv.fn;
    var currentTypeOperators = typeOperators[type];
    if ((0, _filter.validateFilters)(fv, filterTypes, currentTypeOperators)) {
      continue;
    }
    var filterParam = (0, _filter.buildFilterParam)(item, fv, filterTypes, columnsMap);
    var filterFn = fn || currentTypeOperators[operator].fn;
    if (filterFn(filterParam) !== true) {
      return false;
    }
  }
  return true;
};
var filterData = function filterData(dataArray, filterFn, config) {
  var nodesName = config.nodesName;
  return dataArray.map(function (item) {
    return _objectSpread({}, item);
  }).filter(function (item) {
    var itemNodes = item[nodesName];
    if (!itemNodes) {
      return filterFn(item);
    }
    var filteredItemNodes = filterData(itemNodes, filterFn, config);
    if (filteredItemNodes.length) {
      item[nodesName] = filteredItemNodes;
      return true;
    }
    return filterFn(item);
  });
};
var treeFilter = function treeFilter(data, filterValueArray) {
  var filterTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _filterTypes.default;
  var columnsMap = arguments.length > 3 ? arguments[3] : undefined;
  var options = arguments.length > 4 ? arguments[4] : undefined;
  var computedProps = options && options.props || {};
  var nodesName = computedProps && computedProps.nodesProperty || 'nodes';
  var config = {
    nodesName: nodesName
  };
  var filterFn = function filterFn(item) {
    var filterItem = doFilter(item, filterValueArray, filterTypes, columnsMap);
    return filterItem;
  };
  return filterData(data, filterFn, config) || [];
};
var _default = treeFilter;
exports.default = _default;