/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));
var _NotifyResize = _interopRequireDefault(require("./packages/NotifyResize"));
var _autoBind = _interopRequireDefault(require("./packages/react-class/autoBind"));
var _getGlobal = require("./getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var ResizeObserver = globalObject.ResizeObserver || _resizeObserverPolyfill.default;
var useFragment = !!_react.default.Fragment;
var coverStyle = !useFragment ? {
  height: '100%',
  position: 'absolute',
  width: '100%',
  top: 0,
  left: 0
} : null;
var FLEX_1_STYLE = {
  flex: 1
};
var nativeFlexCoverStyle = {
  height: '100%',
  position: 'absolute',
  width: '100%',
  top: 0,
  left: 0,
  display: 'flex',
  flexFlow: 'column'
};
var FakeFlex = function (_Component) {
  (0, _inherits2.default)(FakeFlex, _Component);
  var _super = _createSuper(FakeFlex);
  function FakeFlex(props) {
    var _this;
    (0, _classCallCheck2.default)(this, FakeFlex);
    _this = _super.call(this, props);
    (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
    _this.state = {
      flexHeight: null
    };
    _this.flexRef = (0, _react.createRef)();
    return _this;
  }
  (0, _createClass2.default)(FakeFlex, [{
    key: "onResize",
    value: function onResize(size) {
      var _this2 = this;
      if (this.props.useNativeFlex) {
        return;
      }
      this.size = size;
      if (size.height === this.availableHeight) {
        return;
      }
      this.availableHeight = size.height;
      requestAnimationFrame(function () {
        _this2.computeSize();
        requestAnimationFrame(_this2.resync);
      });
    }
  }, {
    key: "resync",
    value: function resync() {
      var node = this.getNode();
      if (!node || this.unmounted) {
        return;
      }
      var _node$getBoundingClie = node.getBoundingClientRect(),
        width = _node$getBoundingClie.width,
        height = _node$getBoundingClie.height;
      this.onResize({
        width: width,
        height: height
      });
    }
  }, {
    key: "onChildResize",
    value: function onChildResize() {
      this.computeSize();
    }
  }, {
    key: "computeSize",
    value: function computeSize() {
      var _this3 = this;
      var availableHeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.availableHeight;
      var node = this.getNode();
      if (!node || this.unmounted) {
        return;
      }
      var flexIndex = this.props.flexIndex;
      var sum = [].slice.call(node.children).reduce(function (acc, child, index) {
        if (index >= _this3.length) {
          return acc;
        }
        if (index === flexIndex) {
          return acc;
        }
        return acc + child.offsetHeight;
      }, 0);
      var flexHeight = availableHeight - sum;
      if (flexHeight != this.state.flexHeight) {
        this.setState({
          flexHeight: flexHeight
        });
      }
    }
  }, {
    key: "getNode",
    value: function getNode() {
      if (this.node) {
        return this.node;
      }
      if (this.props.getNode) {
        this.node = this.props.getNode();
      } else {
        this.node = this.flexRef.current;
      }
      return this.node;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this4 = this;
      this.unmounted = false;
      requestAnimationFrame(function () {
        _this4.setupObservers();
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.prevLength && this.prevLength !== this.length) {
        this.clearObservers();
        this.setupObservers();
      }
      this.prevLength = this.length;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unmounted = true;
      this.clearObservers();
    }
  }, {
    key: "setupObservers",
    value: function setupObservers() {
      var _this5 = this;
      if (this.props.useNativeFlex) {
        return;
      }
      var node = this.getNode();
      if (!node) {
        return;
      }
      var flexIndex = this.props.flexIndex;
      this.observers = [].slice.call(node.children).map(function (child, index) {
        if (index >= _this5.length) {
          return null;
        }
        if (index === flexIndex) {
          return null;
        }
        if (child.__observer) {
          return child.__observer;
        }
        var observer = new ResizeObserver(function (entries) {
          var first = entries[0];
          if (first) {
            _this5.onChildResize(first.contentRect);
          }
        });
        observer.observe(child);
        observer.__obsTarget = child;
        child.__observer = observer;
        return observer;
      }).filter(Boolean);
    }
  }, {
    key: "clearObservers",
    value: function clearObservers() {
      var node = this.getNode();
      if (!node) {
        return;
      }
      [].slice.call(node.children).map(function (child) {
        if (child && child.__observer) {
          child.__observer.__obsTarget = null;
          child.__observer = null;
        }
      });
      if (this.observers) {
        this.observers.forEach(function (o) {
          if (o.unobserve && o.__obsTarget) {
            o.__obsTarget.__observer = null;
            o.unobserve(o.__obsTarget);
          }
          if (o.disconnect) {
            o.disconnect();
          }
        });
      }
      delete this.observers;
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var flexIndex = props.flexIndex,
        useNativeFlex = props.useNativeFlex;
      var flexHeight = this.state.flexHeight;
      var children = _react.default.Children.toArray(props.children).filter(Boolean).map(function (x, i) {
        if (i === flexIndex && (useNativeFlex || flexHeight)) {
          var additionalStyle = useNativeFlex ? FLEX_1_STYLE : {
            height: flexHeight
          };
          x = (0, _react.cloneElement)(x, {
            style: x.props.style ? _objectSpread(_objectSpread({}, x.props.style), additionalStyle) : additionalStyle
          });
        }
        return x;
      });
      this.length = children.length;
      var resizer = !useNativeFlex ? _react.default.createElement(_NotifyResize.default, {
        key: "fakeflexresizer",
        onResize: this.onResize,
        notifyOnMount: true,
        ResizeObserver: ResizeObserver
      }) : null;
      if (useFragment && !useNativeFlex) {
        return _react.default.createElement(_react.default.Fragment, {
          key: "fragment"
        }, children, resizer);
      }
      return _react.default.createElement("div", {
        ref: this.flexRef,
        style: useNativeFlex ? nativeFlexCoverStyle : coverStyle
      }, children, resizer);
    }
  }]);
  return FakeFlex;
}(_react.Component);
FakeFlex.propTypes = {
  flexIndex: _propTypes.default.number.isRequired,
  getNode: _propTypes.default.func.isRequired,
  useNativeFlex: _propTypes.default.bool
};
var _default = FakeFlex;
exports.default = _default;