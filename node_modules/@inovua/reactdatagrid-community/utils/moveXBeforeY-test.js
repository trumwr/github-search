/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _moveXBeforeY = _interopRequireDefault(require("./moveXBeforeY"));
describe('moveXBeforeY', function () {
  it('should work when from < to', function () {
    var from = 1;
    var to = 3;
    expect((0, _moveXBeforeY.default)([1, 2, 3, 4], from, to)).to.eql([1, 3, 2, 4]);
  });
  it('should work when from == to', function () {
    var from = 1;
    var to = 1;
    var arr = [1, 2, 3, 4];
    expect((0, _moveXBeforeY.default)(arr, from, to)).to.eql([1, 2, 3, 4]);
  });
  it('should work when from is an array', function () {
    var arr = [1, 2, 3, 4, 5, 6, 7];
    var from = [1, 2, 5];
    var to = 4;
    expect((0, _moveXBeforeY.default)(arr, from, to)).to.eql([1, 4, 2, 3, 6, 5, 7]);
  });
  it('should work when from is an array and to is the arr.length pos', function () {
    var arr = [1, 2, 3, 4, 5, 6, 7];
    var from = [1, 2, 5];
    var to = arr.length;
    expect((0, _moveXBeforeY.default)(arr, from, to)).to.eql([1, 4, 5, 7, 2, 3, 6]);
  });
  it('should work when from < to', function () {
    var from = 3;
    var to = 0;
    expect((0, _moveXBeforeY.default)([1, 2, 3, 4], from, to)).to.eql([4, 1, 2, 3]);
  });
  it('should work on empty array', function () {
    var arr = [];
    expect((0, _moveXBeforeY.default)(arr, 1, 1)).to.eql([]);
  });
  it('should work when index out of range', function () {
    expect((0, _moveXBeforeY.default)([1, 2, 3], 6, 2)).to.eql([1, 2, 3]);
  });
  it('should work when moving an item to the array length position', function () {
    expect((0, _moveXBeforeY.default)([1, 2, 3], 0, 3)).to.eql([2, 3, 1]);
  });
  it('should work when to is array length', function () {
    var from = 0;
    var to = 3;
    expect((0, _moveXBeforeY.default)([1, 2, 3], from, to)).to.eql([2, 3, 1]);
  });
});