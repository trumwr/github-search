/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _computeFlexWidths = _interopRequireDefault(require("./flex/computeFlexWidths"));
var _clamp = _interopRequireDefault(require("./clamp"));
var _default = function _default(space, columns) {
  var flexes = columns.map(function (_) {
    return 1;
  });
  var sign = Math.sign(space);
  var positiveSpace = Math.abs(space);
  var newWidths = (0, _computeFlexWidths.default)({
    flexes: flexes,
    availableSize: positiveSpace
  });
  if (sign == -1) {
    newWidths = newWidths.map(function (w) {
      return w != null ? -w : null;
    });
  }
  var reportedDiff = 0;
  var distributedSpace = 0;
  var distributedSum = 0;
  var fullColumnsCount = 0;
  var fullColumnsArray = columns.map(function (_) {
    return false;
  });
  var distributedWidths = columns.map(function (_) {
    return 0;
  });
  var columnWidths = columns.map(function (c) {
    return c.computedWidth || c.minWidth || 0;
  });
  while (fullColumnsCount < columns.length && Math.abs(distributedSum) < positiveSpace) {
    columns.forEach(function (col, i) {
      if (fullColumnsArray[i]) {
        return;
      }
      var sizeToAdd = Math.round((newWidths[i] || 0) + reportedDiff);
      newWidths[i] = 0;
      reportedDiff = 0;
      var currentSize = columnWidths[i];
      var newSize = Math.round(currentSize + sizeToAdd);
      var adjustedNewSize = (0, _clamp.default)(newSize, col.minWidth, col.maxWidth);
      if (newSize !== adjustedNewSize) {
        distributedSpace = sizeToAdd - (newSize - adjustedNewSize);
        distributedWidths[i] += distributedSpace;
        reportedDiff += sizeToAdd - distributedSpace;
        fullColumnsCount++;
        fullColumnsArray[i] = true;
      } else {
        distributedSpace = sizeToAdd;
        distributedWidths[i] += sizeToAdd;
      }
      columnWidths[i] = adjustedNewSize;
      distributedSum += distributedSpace;
    });
  }
  return {
    widths: distributedWidths,
    columnWidths: columnWidths,
    distributedSum: distributedSum,
    remaining: space - distributedSum
  };
};
exports.default = _default;