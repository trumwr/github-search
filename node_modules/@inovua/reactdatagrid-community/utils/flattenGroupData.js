/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.createGroupItem = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var emptyObject = Object.freeze ? Object.freeze({}) : {};
var createGroupItem = function createGroupItem(group, pivot) {
  pivot = [];
  return {
    __group: true,
    leaf: group.leaf,
    data: group.data,
    array: group.array,
    value: group.value,
    name: group.name,
    groupSummary: group.groupSummary,
    groupColumnSummaries: group.groupColumnSummaries,
    groupCount: group.groupCount,
    itemCount: group.itemCount,
    parentGroupCount: group.parentGroupCount,
    indexInGroup: group.indexInGroup,
    childrenCount: group.childrenCount,
    totalCount: group.totalCount,
    depth: pivot && pivot.length ? group.depth - pivot.length : group.depth,
    namePath: pivot && pivot.length ? group.namePath.slice(pivot.length) : group.namePath,
    valuePath: pivot && pivot.length ? group.valuePath.slice(pivot.length) : group.valuePath
  };
};
exports.createGroupItem = createGroupItem;
var returnFalse = function returnFalse() {
  return false;
};
var normalizeGroupSummary = function normalizeGroupSummary(showGroupSummaryRow, groupData) {
  if (!showGroupSummaryRow) {
    return false;
  }
  if (typeof showGroupSummaryRow === 'function') {
    showGroupSummaryRow = showGroupSummaryRow(groupData);
  }
  if (showGroupSummaryRow === true) {
    showGroupSummaryRow = 'end';
  }
  if (!showGroupSummaryRow) {
    showGroupSummaryRow = false;
  }
  return showGroupSummaryRow;
};
var flattenGroupData = function flattenGroupData(groupData, config) {
  var indexesInGroup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var groupArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var groupCounts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var pivotUniqueValuesMap = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
  var pivotSummaryValue = arguments.length > 6 ? arguments[6] : undefined;
  var currentPivotPath = arguments.length > 7 ? arguments[7] : undefined;
  var keys = groupData.keys;
  if (config.pivot && config.pivot.length) {
    pivotSummaryValue = pivotSummaryValue || {};
    currentPivotPath = currentPivotPath || [];
  }
  if (config.pivot && !Object.keys(pivotUniqueValuesMap).length) {
    config.pivot.forEach(function (key) {
      pivotUniqueValuesMap[key] = {};
    });
  }
  var _config$groupItemFact = config.groupItemFactory,
    groupItemFactory = _config$groupItemFact === void 0 ? createGroupItem : _config$groupItemFact,
    _config$isCollapsed = config.isCollapsed,
    isCollapsed = _config$isCollapsed === void 0 ? returnFalse : _config$isCollapsed;
  var result = [];
  var groupItem;
  keys.forEach(function (key) {
    var newRoot = groupData.data[key];
    if (currentPivotPath) {
      currentPivotPath.push(key);
      pivotSummaryValue[key] = pivotSummaryValue[key] || {
        data: {},
        key: key,
        value: newRoot.groupColumnSummaries
      };
    }
    var shouldInclude = !config.pivot ? true : true;
    if (shouldInclude && isCollapsed(newRoot)) {
      groupItem = groupItemFactory(newRoot, config.pivot);
      result.push(groupItem);
      groupArray.push(groupItem);
      indexesInGroup.push(-1);
      groupCounts.push(-1);
      return;
    }
    if (shouldInclude && Array.isArray(newRoot.data)) {
      groupItem = groupItemFactory(newRoot, config.pivot);
      if (pivotSummaryValue[key]) {
        pivotSummaryValue[key].value = groupItem.groupColumnSummaries;
      }
      result.push(groupItem);
      groupArray.push(groupItem);
      indexesInGroup.push(-1);
      groupCounts.push(-1);
      var arr = newRoot.data;
      var _showGroupSummaryRow = normalizeGroupSummary(config ? config.showGroupSummaryRow || false : false, newRoot);
      var initialLen = arr.length;
      if (_showGroupSummaryRow && newRoot.groupColumnSummaries) {
        var _summaryItem = _objectSpread(_objectSpread({}, newRoot.groupColumnSummaries), {}, {
          __parentGroup: groupItem,
          __summary: _showGroupSummaryRow
        });
        if (_showGroupSummaryRow === 'end') {
          arr.push(_summaryItem);
        } else {
          arr.splice(0, 0, _summaryItem);
        }
      }
      var len = arr.length;
      if (!config.pivot) {
        for (var i = 0; i < len; i++) {
          result.push(arr[i]);
          indexesInGroup.push(i);
          groupCounts.push(initialLen);
        }
      } else {
        var pivot = config.pivot;
        var pivotLen = pivot.length;
        for (var i = 0; i < len; i++) {
          for (var j = 0; j < pivotLen; j++) {
            var pivotColName = pivot[j];
            var currentItem = arr[i];
            var value = currentItem[pivotColName];
            pivotUniqueValuesMap[pivotColName][value] = true;
          }
        }
      }
      return;
    }
    groupItem = groupItemFactory(newRoot, config.pivot);
    if (shouldInclude) {
      result.push(groupItem);
      groupArray.push(groupItem);
      indexesInGroup.push(-1);
      groupCounts.push(-1);
    }
    var showGroupSummaryRow = normalizeGroupSummary(config.showGroupSummaryRow || false, newRoot);
    var summaryItem;
    if (shouldInclude && showGroupSummaryRow && newRoot.groupColumnSummaries) {
      summaryItem = _objectSpread(_objectSpread({}, newRoot.groupColumnSummaries), {}, {
        __parentGroup: groupItem,
        __summary: showGroupSummaryRow
      });
      if (showGroupSummaryRow === 'start') {
        result.push(summaryItem);
        indexesInGroup.push(-1);
        groupCounts.push(-1);
      }
    }
    var flattenResult = flattenGroupData(newRoot, config, indexesInGroup, groupArray, groupCounts, pivotUniqueValuesMap, pivotSummaryValue ? (pivotSummaryValue[key] || {}).data : {}, currentPivotPath);
    result.push.apply(result, flattenResult.data);
    if (shouldInclude && showGroupSummaryRow === 'end' && summaryItem) {
      result.push(summaryItem);
      indexesInGroup.push(-1);
      groupCounts.push(1);
    }
    if (currentPivotPath) {
      currentPivotPath.pop();
    }
  });
  return {
    pivotSummaryValue: pivotSummaryValue,
    groupArray: groupArray,
    data: result,
    groupCounts: groupCounts,
    indexes: indexesInGroup,
    pivotUniqueValuesMap: pivotUniqueValuesMap
  };
};
var _default = flattenGroupData;
exports.default = _default;