/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _distributeSpaceToColumns = _interopRequireDefault(require("./distributeSpaceToColumns"));
describe('positive distributeSpaceToColumns', function () {
  it('should distribute 100 to 2 cols when there are no restrictions', function () {
    var _distribute = (0, _distributeSpaceToColumns.default)(100, [{}, {}]),
      widths = _distribute.widths,
      remaining = _distribute.remaining,
      columnWidths = _distribute.columnWidths;
    expect(widths).toEqual([50, 50]);
    expect(columnWidths).toEqual([50, 50]);
    expect(remaining).toEqual(0);
  });
  it('should distribute 100 to 3 cols when there are no restrictions', function () {
    var _distribute2 = (0, _distributeSpaceToColumns.default)(100, [{}, {}, {}]),
      widths = _distribute2.widths,
      remaining = _distribute2.remaining,
      columnWidths = _distribute2.columnWidths;
    expect(widths).toEqual([33, 33, 34]);
    expect(columnWidths).toEqual([33, 33, 34]);
    expect(remaining).toEqual(0);
  });
  it('should distribute 100 to 3 cols when first col can only accept 10', function () {
    var _distribute3 = (0, _distributeSpaceToColumns.default)(100, [{
        computedWidth: 30,
        maxWidth: 40
      }, {}, {}]),
      widths = _distribute3.widths,
      remaining = _distribute3.remaining,
      columnWidths = _distribute3.columnWidths;
    expect(widths).toEqual([10, 56, 34]);
    expect(columnWidths).toEqual([40, 56, 34]);
    expect(remaining).toEqual(0);
  });
  it('should distribute 100 to 3 cols when first col can only accept 10, and lastColumn 20', function () {
    var _distribute4 = (0, _distributeSpaceToColumns.default)(100, [{
        computedWidth: 30,
        maxWidth: 40
      }, {}, {
        computedWidth: 100,
        maxWidth: 120
      }]),
      widths = _distribute4.widths,
      remaining = _distribute4.remaining,
      columnWidths = _distribute4.columnWidths;
    expect(widths).toEqual([10, 70, 20]);
    expect(columnWidths).toEqual([40, 70, 120]);
    expect(remaining).toEqual(0);
  });
  it('should distribute 100 to 3 cols when first col can only accept 10, second can accept 60, lastColumn 20', function () {
    var _distribute5 = (0, _distributeSpaceToColumns.default)(100, [{
        computedWidth: 30,
        maxWidth: 40
      }, {
        computedWidth: 40,
        maxWidth: 100
      }, {
        computedWidth: 100,
        maxWidth: 120
      }]),
      widths = _distribute5.widths,
      remaining = _distribute5.remaining,
      columnWidths = _distribute5.columnWidths;
    expect(widths).toEqual([10, 60, 20]);
    expect(columnWidths).toEqual([40, 100, 120]);
    expect(remaining).toEqual(10);
  });
});
describe('negative distributeSpaceToColumns', function () {
  it('should distribute -100 to 2 cols when there are no restrictions', function () {
    var _distribute6 = (0, _distributeSpaceToColumns.default)(-100, [{}, {}]),
      widths = _distribute6.widths,
      remaining = _distribute6.remaining,
      columnWidths = _distribute6.columnWidths;
    expect(widths).toEqual([-50, -50]);
    expect(columnWidths).toEqual([-50, -50]);
    expect(remaining).toEqual(0);
  });
  it('should distribute 100 to 3 cols when there are no restrictions', function () {
    var _distribute7 = (0, _distributeSpaceToColumns.default)(-100, [{}, {}, {}]),
      widths = _distribute7.widths,
      remaining = _distribute7.remaining,
      columnWidths = _distribute7.columnWidths;
    expect(widths).toEqual([-33, -33, -34]);
    expect(columnWidths).toEqual([-33, -33, -34]);
    expect(remaining).toEqual(0);
  });
  it('should distribute 100 to 3 cols when first col can only accept 10', function () {
    var _distribute8 = (0, _distributeSpaceToColumns.default)(-100, [{
        computedWidth: 30,
        minWidth: 20
      }, {}, {}]),
      widths = _distribute8.widths,
      remaining = _distribute8.remaining,
      columnWidths = _distribute8.columnWidths;
    expect(widths).toEqual([-10, -56, -34]);
    expect(columnWidths).toEqual([20, -56, -34]);
    expect(remaining).toEqual(0);
  });
  it('should distribute 100 to 3 cols when first col can only accept 10, and lastColumn 20', function () {
    var _distribute9 = (0, _distributeSpaceToColumns.default)(-100, [{
        computedWidth: 30,
        minWidth: 20
      }, {}, {
        computedWidth: 100,
        minWidth: 80
      }]),
      widths = _distribute9.widths,
      remaining = _distribute9.remaining,
      columnWidths = _distribute9.columnWidths;
    expect(widths).toEqual([-10, -70, -20]);
    expect(columnWidths).toEqual([20, -70, 80]);
    expect(remaining).toEqual(0);
  });
  it('should distribute 100 to 3 cols when first col can only accept 10, second can accept 60, lastColumn 20', function () {
    var _distribute10 = (0, _distributeSpaceToColumns.default)(-100, [{
        computedWidth: 30,
        minWidth: 20
      }, {
        computedWidth: 100,
        minWidth: 40
      }, {
        computedWidth: 100,
        minWidth: 80
      }]),
      widths = _distribute10.widths,
      remaining = _distribute10.remaining,
      columnWidths = _distribute10.columnWidths;
    expect(widths).toEqual([-10, -60, -20]);
    expect(columnWidths).toEqual([20, 40, 80]);
    expect(remaining).toEqual(-10);
  });
});