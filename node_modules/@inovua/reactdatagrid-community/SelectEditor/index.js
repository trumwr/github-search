/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _ComboBox = _interopRequireDefault(require("../packages/ComboBox"));
var _src = _interopRequireDefault(require("../packages/react-scroll-container-pro/src"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var stopPropagation = function stopPropagation(e) {
  return e.stopPropagation();
};
var styleWidth100 = {
  width: '100%'
};
var renderListScroller = function renderListScroller(props) {
  return _react.default.createElement(_src.default, _objectSpread(_objectSpread({}, props), {}, {
    applyCSSContainOnScroll: false,
    viewStyle: styleWidth100,
    onWheel: stopPropagation
  }));
};
var SelectEditor = function SelectEditor(props) {
  var editorProps = props.editorProps,
    rtl = props.rtl;
  var editorPropsStyle = editorProps ? editorProps.style : null;
  return _react.default.createElement("div", {
    className: 'InovuaReactDataGrid__cell__editor InovuaReactDataGrid__cell__editor--select'
  }, _react.default.createElement(_ComboBox.default, _objectSpread(_objectSpread({}, editorProps), {}, {
    collapseOnSelect: true,
    focusOnClick: false,
    autoFocus: false,
    theme: editorProps.theme ? editorProps.theme : props.theme,
    renderListScroller: props.nativeScroll ? undefined : renderListScroller,
    defaultValue: props.value,
    rtl: rtl,
    onChange: function onChange(value) {
      props.onChange && props.onChange(value);
    },
    constrainTo: ".inovua-react-scroll-container__wrapper",
    style: _objectSpread(_objectSpread({}, editorPropsStyle), {}, {
      minWidth: Math.max(0, props.cellProps.computedWidth - 30)
    }),
    onBlur: props.onComplete,
    onItemClick: function onItemClick(item) {
      var value = item.id;
      props.onChange && props.onChange(value);
      if (props.onComplete) {
        setTimeout(props.onComplete, 0);
      }
    },
    onKeyDown: function onKeyDown(e, combo) {
      var key = e.key;
      if (key === 'Escape') {
        if (!combo.getExpanded()) {
          props.onCancel && props.onCancel(e);
        }
      }
      if (key === 'Enter') {
        props.onComplete && props.onComplete(e);
      }
      if (key == 'Tab') {
        e.preventDefault();
        props.onTabNavigation && props.onTabNavigation(true, e.shiftKey ? -1 : 1);
      }
    }
  })));
};
var _default = SelectEditor;
exports.default = _default;