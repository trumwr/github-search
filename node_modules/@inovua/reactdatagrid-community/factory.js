/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
Object.defineProperty(exports, "filterTypes", {
  enumerable: true,
  get: function get() {
    return _filterTypes.default;
  }
});
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _src = _interopRequireDefault(require("./packages/react-notify-resize/src"));
var _uglified = _interopRequireDefault(require("./packages/uglified"));
var _useProperty13 = _interopRequireDefault(require("./hooks/useProperty"));
var _getScrollbarWidth = _interopRequireDefault(require("./packages/getScrollbarWidth"));
var _clamp = _interopRequireDefault(require("./utils/clamp"));
var _isMobile = _interopRequireDefault(require("./packages/isMobile"));
var _Layout = _interopRequireDefault(require("./Layout"));
var _LoadMask = _interopRequireDefault(require("./LoadMask"));
var _filterTypes = _interopRequireDefault(require("./filterTypes"));
var _useColumns = _interopRequireDefault(require("./hooks/useColumns"));
var _useSize3 = _interopRequireDefault(require("./hooks/useSize"));
var _useNamedState5 = _interopRequireDefault(require("./hooks/useNamedState"));
var _useHeader = _interopRequireDefault(require("./hooks/useHeader"));
var _useEditable = _interopRequireDefault(require("./hooks/useEditable"));
var _useDataSource = _interopRequireDefault(require("./hooks/useDataSource"));
var _useScrollProps = _interopRequireDefault(require("./hooks/useScrollProps"));
var _useColumnsSizing = _interopRequireDefault(require("./hooks/useColumnsSizing"));
var _useGroups = _interopRequireDefault(require("./hooks/useGroups"));
var _useSelection = _interopRequireDefault(require("./hooks/useSelection"));
var _useRow2 = _interopRequireDefault(require("./hooks/useRow"));
var _RowHeightManager = _interopRequireDefault(require("./packages/react-virtual-list-pro/src/RowHeightManager"));
var _ua = require("./common/ua");
var _prepareClassName = _interopRequireDefault(require("./utils/prepareClassName"));
var _context = require("./context");
var _Cover = _interopRequireDefault(require("./Cover"));
var _useActiveIndex = _interopRequireDefault(require("./hooks/useActiveIndex"));
var _batchUpdate = _interopRequireDefault(require("./utils/batchUpdate"));
var _empty = _interopRequireDefault(require("./plugins/empty"));
var _ActiveRowIndicator = _interopRequireDefault(require("./ActiveRowIndicator"));
var _warn = require("./warn");
var _StickyRowsContainer = require("./packages/react-virtual-list-pro/src/StickyRowsContainer");
var _getGlobal = require("./getGlobal");
var _useColumnHover = _interopRequireDefault(require("./hooks/useColumnHover"));
var _notifier = require("./utils/notifier");
var _excluded = ["computedOnKeyDown", "computedOnFocus", "computedOnBlur"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var GRID_ID = 0;
var globalObject = (0, _getGlobal.getGlobal)();
var DEFAULT_I18N = {
  pageText: 'Page ',
  ofText: ' of ',
  perPageText: 'Results per page',
  showingText: 'Showing ',
  clearAll: 'Clear all',
  clear: 'Clear',
  showFilteringRow: 'Show filtering row',
  hideFilteringRow: 'Hide filtering row',
  enable: 'Enable',
  disable: 'Disable',
  sortAsc: 'Sort ascending',
  sortDesc: 'Sort descending',
  unsort: 'Unsort',
  group: 'Group',
  ungroup: 'Ungroup',
  lockStart: 'Lock start',
  lockEnd: 'Lock end',
  unlock: 'Unlock',
  columns: 'Columns',
  autoresizeThisColumn: 'Autoresize this column',
  autoresizeAllColumns: 'Autoresize all columns',
  autoSizeToFit: 'Autosize to fit',
  contains: 'Contains',
  startsWith: 'Starts with',
  endsWith: 'Ends with',
  notContains: 'Does not contain',
  inlist: 'In list',
  notinlist: 'Not in list',
  neq: 'Does not equal',
  inrange: 'In range',
  notinrange: 'Not in range',
  eq: 'Equals',
  notEmpty: 'Not empty',
  empty: 'Empty',
  lt: 'Less than',
  lte: 'Less than or equal',
  gt: 'Greater than',
  gte: 'Greater than or equal',
  before: 'Before',
  beforeOrOn: 'Before or on',
  afterOrOn: 'After or on',
  after: 'After',
  start: 'Start',
  end: 'End',
  dragHeaderToGroup: 'Drag header to group',
  noRecords: 'No records available',
  'calendar.todayButtonText': 'Today',
  'calendar.clearButtonText': 'Clear',
  'calendar.okButtonText': 'OK',
  'calendar.cancelButtonText': 'Cancel'
};
var renderLoadMask = function renderLoadMask(props) {
  var loadMaskProps = {
    visible: props.computedLoading,
    livePagination: props.computedLivePagination,
    loadingText: props.loadingText || 'Loading',
    zIndex: 10000,
    theme: props.theme
  };
  var loadMask;
  if (props.renderLoadMask) {
    loadMask = props.renderLoadMask(loadMaskProps);
  }
  if (loadMask !== undefined) {
    return loadMask;
  }
  return _react.default.createElement(_LoadMask.default, _objectSpread({}, loadMaskProps));
};
var reducePlugins = function reducePlugins(acc, plugin) {
  if (!plugin.name || typeof plugin.hook !== 'function') {
    return acc;
  }
  acc[plugin.name] = plugin;
  return acc;
};
var GridFactory = function GridFactory() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    plugins = _ref.plugins;
  var edition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'community';
  plugins = plugins || [];
  var maybeAddColumns;
  var defaultSize = {
    width: 0,
    height: 0
  };
  var emptyCoverHandle = {
    setActive: function setActive() {},
    setCursor: function setCursor() {}
  };
  plugins = [].concat((0, _toConsumableArray2.default)(_empty.default), (0, _toConsumableArray2.default)(plugins));
  var pluginsMap = plugins.reduce(reducePlugins, {});
  var Grid = _react.default.memo(function (props) {
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      computedFocused = _useState2[0],
      computedSetFocused = _useState2[1];
    var computedPropsRef = (0, _react.useRef)(null);
    var warnRef = (0, _react.useMemo)(function () {
      return {};
    }, []);
    var context = (0, _react.useContext)(props.context);
    (0, _react.useEffect)(function () {
      if (computedFocused && props.activateRowOnFocus) {
        var _computedProps = computedPropsRef.current;
        if (!_computedProps) {
          return;
        }
        var count = _computedProps.count;
        if (!count) {
          return;
        }
        var _activeItem = _computedProps.getActiveItem();
        if (!_activeItem) {
          var index = _computedProps.computedLastActiveIndex || _computedProps.getFirstVisibleIndex();
          _computedProps.setActiveIndex(index);
        }
      }
    }, [computedFocused]);
    var bodyRef = (0, _react.useRef)(null);
    var domRef = (0, _react.useRef)(null);
    var portalRef = (0, _react.useRef)(null);
    var getDOMNode = function getDOMNode() {
      return domRef.current;
    };
    var getBodyDOMNode = function getBodyDOMNode() {
      var _bodyRef$current;
      return bodyRef === null || bodyRef === void 0 ? void 0 : (_bodyRef$current = bodyRef.current) === null || _bodyRef$current === void 0 ? void 0 : _bodyRef$current.getDOMNode();
    };
    var getVirtualList = function getVirtualList() {
      return bodyRef.current != null ? bodyRef.current.getVirtualList() : null;
    };
    var getColumnLayout = function getColumnLayout() {
      return bodyRef.current != null ? bodyRef.current.columnLayout : null;
    };
    var getDefaultSize = function getDefaultSize() {
      if (props.viewportSize) {
        return props.viewportSize;
      }
      return defaultSize;
    };
    var _useProperty = (0, _useProperty13.default)(props, 'loading'),
      _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),
      computedLoading = _useProperty2[0],
      doSetLoading = _useProperty2[1];
    var loadingTimeoutIdRef = (0, _react.useRef)();
    var setLoading = function setLoading(loading) {
      var computedProps = computedPropsRef.current;
      var isLoading = loading instanceof Function ? loading(computedProps ? computedProps.computedLoading : false) : loading;
      if (!computedProps) {
        doSetLoading(isLoading);
        return;
      }
      if (loadingTimeoutIdRef.current) {
        clearTimeout(loadingTimeoutIdRef.current);
      }
      if (computedProps.computedLivePagination && !isLoading && computedProps.livePaginationLoadMaskHideDelay) {
        loadingTimeoutIdRef.current = setTimeout(function () {
          doSetLoading(isLoading);
          loadingTimeoutIdRef.current = null;
        }, computedProps.livePaginationLoadMaskHideDelay);
      } else {
        doSetLoading(isLoading);
      }
    };
    var _useNamedState = (0, _useNamedState5.default)({}, props.context, 'columnSizes'),
      _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2),
      columnSizes = _useNamedState2[0],
      setColumnSizes = _useNamedState2[1];
    var _useNamedState3 = (0, _useNamedState5.default)({}, props.context, 'columnFlexes'),
      _useNamedState4 = (0, _slicedToArray2.default)(_useNamedState3, 2),
      columnFlexes = _useNamedState4[0],
      setColumnFlexes = _useNamedState4[1];
    var _useState3 = (0, _react.useState)({}),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      lockedColumnsState = _useState4[0],
      setLockedColumnsState = _useState4[1];
    var _useState5 = (0, _react.useState)({
        vertical: false,
        horizontal: false
      }),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      scrollbars = _useState6[0],
      setScrollbars = _useState6[1];
    var _useProperty3 = (0, _useProperty13.default)(props, 'reservedViewportWidth', 0),
      _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),
      reservedViewportWidth = _useProperty4[0],
      setReservedViewportWidth = _useProperty4[1];
    var _useSize = (0, _useSize3.default)(getDefaultSize()),
      _useSize2 = (0, _slicedToArray2.default)(_useSize, 2),
      size = _useSize2[0],
      setSize = _useSize2[1];
    var _useState7 = (0, _react.useState)(0),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      viewportAvailableWidth = _useState8[0],
      setViewportAvailableWidth = _useState8[1];
    (0, _react.useEffect)(function () {
      if (props.viewportSize) {
        setSize(props.viewportSize);
      }
    }, [props.viewportSize]);
    var onResize = function onResize(size) {
      (0, _batchUpdate.default)().commit(function () {
        if (_ua.IS_MS_BROWSER || _ua.IS_FF) {
          size.width -= 2;
        }
        setSize(size);
        updateViewportAvailableWidth(size.width);
        var rowHeight = typeof props.rowHeight !== 'number' ? props.minRowHeight : props.rowHeight;
        if (rowHeight) {
          setMaxVisibleRows(Math.ceil(size.height / rowHeight));
        }
      });
    };
    var updateViewportAvailableWidth = function updateViewportAvailableWidth(newViewportAvailableWidth) {
      var scrolls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scrollbars;
      if (props.nativeScroll && scrolls.vertical) {
        newViewportAvailableWidth -= (0, _getScrollbarWidth.default)();
      }
      setViewportAvailableWidth(Math.round(newViewportAvailableWidth));
    };
    var _useState9 = (0, _react.useState)({
        virtualListBorderLeft: 0,
        virtualListBorderRight: 0,
        virtualListExtraWidth: 0
      }),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      _useState10$ = _useState10[0],
      virtualListBorderLeft = _useState10$.virtualListBorderLeft,
      virtualListBorderRight = _useState10$.virtualListBorderRight,
      virtualListExtraWidth = _useState10$.virtualListExtraWidth,
      setVirtualListState = _useState10[1];
    var onScrollbarsChange = function onScrollbarsChange(scrollbars) {
      var onChange = function onChange() {
        var vl = getVirtualList();
        var computedStyle = vl && globalObject.getComputedStyle(vl.getDOMNode());
        if (!computedStyle) {
          return;
        }
        var virtualListBorderLeft = parseInt(computedStyle.borderLeftWidth, 10);
        var virtualListBorderRight = parseInt(computedStyle.borderRightWidth, 10);
        var virtualListExtraWidth = virtualListBorderLeft + virtualListBorderRight;
        (0, _batchUpdate.default)().commit(function () {
          setScrollbars(scrollbars);
          if (size.width) {
            updateViewportAvailableWidth(size.width, scrollbars);
          }
          setVirtualListState({
            virtualListBorderLeft: virtualListBorderLeft,
            virtualListBorderRight: virtualListBorderRight,
            virtualListExtraWidth: virtualListExtraWidth
          });
        });
      };
      if (!bodyRef.current) {
        requestAnimationFrame(onChange);
      } else {
        onChange();
      }
    };
    var _useProperty5 = (0, _useProperty13.default)(props, 'showCellBorders'),
      _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2),
      computedShowCellBorders = _useProperty6[0],
      setShowCellBorders = _useProperty6[1];
    var showHorizontalCellBorders = computedShowCellBorders === true || computedShowCellBorders === 'horizontal';
    var showVerticalCellBorders = computedShowCellBorders === true || computedShowCellBorders === 'vertical';
    var _useState11 = (0, _react.useState)(false),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      listenOnCellEnter = _useState12[0],
      updateListenOnCellEnter = _useState12[1];
    var _useState13 = (0, _react.useState)(null),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      selectionFixedCell = _useState14[0],
      setSelectionFixedCell = _useState14[1];
    var setListenOnCellEnter = function setListenOnCellEnter(value, callback) {
      if (value) {
        globalObject.addEventListener('mouseup', callback);
      } else {
        globalObject.removeEventListener('mouseup', callback);
      }
      updateListenOnCellEnter(value);
    };
    var renderCallbacks = (0, _react.useRef)([]);
    var onNextRender = function onNextRender(fn) {
      renderCallbacks.current.push(fn);
    };
    (0, _react.useEffect)(function () {
      renderCallbacks.current.forEach(function (fn) {
        return fn();
      });
      renderCallbacks.current.length = 0;
    });
    var _useState15 = (0, _react.useState)(''),
      _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
      lastCellInRange = _useState16[0],
      setLastCellInRange = _useState16[1];
    var _useState17 = (0, _react.useState)(null),
      _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
      lastSelectedCell = _useState18[0],
      setLastSelectedCell = _useState18[1];
    var renderInPortal = (0, _react.useMemo)(function () {
      return props.renderInPortal || function (el) {
        return portalRef.current ? (0, _reactDom.createPortal)(el, portalRef.current) : null;
      };
    }, [props.renderInPortal]);
    var cProps = _objectSpread(_objectSpread({}, props), {}, {
      initialProps: props,
      selectionFixedCell: selectionFixedCell,
      setSelectionFixedCell: setSelectionFixedCell,
      bodyRef: bodyRef,
      domRef: domRef,
      portalRef: portalRef,
      renderInPortal: renderInPortal,
      listenOnCellEnter: listenOnCellEnter,
      setListenOnCellEnter: setListenOnCellEnter,
      lastCellInRange: lastCellInRange,
      setLastCellInRange: setLastCellInRange,
      setLastSelectedCell: setLastSelectedCell,
      lastSelectedCell: lastSelectedCell,
      onScrollbarsChange: onScrollbarsChange,
      virtualListBorderLeft: virtualListBorderLeft,
      virtualListBorderRight: virtualListBorderRight,
      virtualListExtraWidth: virtualListExtraWidth,
      scrollbars: scrollbars,
      reservedViewportWidth: reservedViewportWidth,
      setReservedViewportWidth: setReservedViewportWidth,
      getColumnLayout: getColumnLayout,
      getDOMNode: getDOMNode,
      computedLoading: computedLoading,
      computedFocused: computedFocused,
      computedSetFocused: computedSetFocused,
      columnFlexes: columnFlexes,
      columnSizes: columnSizes,
      setColumnFlexes: setColumnFlexes,
      setColumnSizes: setColumnSizes,
      lockedColumnsState: lockedColumnsState,
      setLockedColumnsState: setLockedColumnsState,
      setLoading: setLoading,
      isLoading: function isLoading() {
        return computedProps.computedLoading;
      },
      size: size,
      setSize: setSize,
      viewportAvailableWidth: viewportAvailableWidth,
      availableWidth: viewportAvailableWidth,
      maxAvailableWidthForColumns: viewportAvailableWidth - reservedViewportWidth,
      showHorizontalCellBorders: showHorizontalCellBorders,
      showVerticalCellBorders: showVerticalCellBorders,
      shareSpaceOnResize: props.shareSpaceOnResize || false,
      onNextRender: onNextRender,
      computedEnableColumnHover: props.enableColumnHover || undefined
    });
    cProps.i18n = function (key, defaultLabel) {
      return props.i18n[key] || DEFAULT_I18N[key] || defaultLabel;
    };
    Object.assign(cProps, (0, _useActiveIndex.default)(props, cProps, computedPropsRef));
    Object.assign(cProps, pluginsMap['sortable-columns'].hook(props, cProps, computedPropsRef));
    if (pluginsMap['group-and-pivot'] && pluginsMap['group-and-pivot'].hook) {
      Object.assign(cProps, pluginsMap['group-and-pivot'].hook(props, cProps, computedPropsRef));
    }
    Object.assign(cProps, (0, _useGroups.default)(props, cProps, computedPropsRef));
    if (pluginsMap.tree && pluginsMap.tree.hook) {
      Object.assign(cProps, pluginsMap.tree.hook(props, cProps, computedPropsRef));
    }
    if (pluginsMap.filters && pluginsMap.filters.hook) {
      Object.assign(cProps, pluginsMap.filters.hook(props, cProps, computedPropsRef));
    }
    Object.assign(cProps, (0, _useEditable.default)(props, cProps, computedPropsRef));
    cProps.maybeAddColumns = maybeAddColumns;
    var columnInfo = (0, _useColumns.default)(props, cProps, computedPropsRef);
    Object.assign(cProps, columnInfo);
    if (edition === 'enterprise') {
      var columnsSizing = (0, _useColumnsSizing.default)(props, cProps, computedPropsRef);
      Object.assign(cProps, columnsSizing);
    }
    Object.assign(cProps, (0, _useColumnHover.default)(props, cProps, computedPropsRef));
    cProps.wasMountedRef = (0, _react.useRef)(false);
    cProps.wasUnmountedRef = (0, _react.useRef)(false);
    var dataInfo = (0, _useDataSource.default)(props, cProps, computedPropsRef);
    Object.assign(cProps, pluginsMap['live-pagination'].hook(props, cProps, computedPropsRef));
    var rowHeightManager = (0, _react.useMemo)(function () {
      return new _RowHeightManager.default({
        rowHeight: props.rowHeight || props.minRowHeight,
        minRowHeight: props.minRowHeight
      }, {}, {
        cache: !!props.rowHeight
      });
    }, []);
    var i18nFn = (0, _react.useCallback)(function (key, defaultLabel) {
      if (!props.i18n) {
        return defaultLabel;
      }
      return props.i18n[key] || DEFAULT_I18N[key] || defaultLabel;
    }, [props.i18n]);
    var getItemId = (0, _react.useCallback)(function (item) {
      if (!item) return;
      if (item.__group && Array.isArray(item.keyPath)) {
        return item.keyPath.join(props.groupPathSeparator);
      }
      var itemId = computeIdProperty() ? compoundItemId(item) : simpleItemId(item);
      return itemId;
    }, []);
    var simpleItemId = (0, _react.useCallback)(function (item) {
      return item[props.idProperty];
    }, []);
    var compoundItemId = (0, _react.useCallback)(function (item) {
      var parts = props.idProperty.split(props.idPropertySeparator);
      return parts.reduce(function (itemObj, id) {
        if (itemObj) {
          return itemObj[id] ? itemObj[id] : itemObj;
        }
      }, item);
    }, []);
    var getItemIndexBy = function getItemIndexBy(fn) {
      var data = computedProps.data;
      if (!data || typeof fn != 'function') {
        return -1;
      }
      if (data.findIndex) {
        return data.findIndex(fn);
      }
      for (var i = 0, len = data.length; i < len; i++) {
        if (fn(data[i]) === true) {
          return i;
        }
      }
      return -1;
    };
    var getItemAt = function getItemAt(index) {
      if (!computedPropsRef.current) {
        return undefined;
      }
      var item = computedPropsRef.current.data[index];
      if (!item) {
        return;
      }
      return getItemWithCache(item);
    };
    var getItemWithCache = function getItemWithCache(item) {
      if (item && computedPropsRef.current && computedPropsRef.current.computedDataSourceCache) {
        var itemId = getItemId(item);
        var cachedItem = computedPropsRef.current.computedDataSourceCache[itemId];
        if (cachedItem) {
          item = _objectSpread(_objectSpread({}, item), cachedItem);
        }
      }
      return item;
    };
    var getItemIndex = function getItemIndex(item) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return -1;
      }
      var data = computedProps.data;
      var itemId = getItemId(item);
      for (var i = 0; i < data.length; i++) {
        var dataItem = data[i];
        var dataItemId = getItemId(dataItem);
        if (dataItemId === itemId) {
          return i;
        }
      }
      return -1;
    };
    var getItemIdAt = function getItemIdAt(index) {
      if (index === -1) return;
      return getItemId(getItemAt(index));
    };
    var isRowExpandedById = function isRowExpandedById() {
      return false;
    };
    var isCellVisible = function isCellVisible(_ref2) {
      var rowIndex = _ref2.rowIndex,
        columnIndex = _ref2.columnIndex;
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return false;
      }
      var column = computedProps.visibleColumns[columnIndex];
      if (!computedProps.rowHeightManager) {
        throw 'You need fixed row height for this method to work';
      }
      var columnStart = column.computedOffset;
      var columnEnd = columnStart + column.computedWidth;
      var rowStart = computedProps.rowHeightManager.getRowOffset(rowIndex);
      var rowEnd = rowStart + computedProps.rowHeightManager.getRowHeight(rowIndex);
      var virtualList = getVirtualList();
      var visibleTop = virtualList.scrollTop;
      var visibleBottom = visibleTop + computedProps.size.height;
      var visibleLeft = virtualList.scrollLeft;
      var visibleRight = visibleLeft + computedProps.size.width;
      var leftDiff = columnStart - visibleLeft;
      var rightDiff = visibleRight - columnEnd;
      var topDiff = rowStart - visibleTop;
      var bottomDiff = visibleBottom - rowEnd;
      if (topDiff >= 0 && bottomDiff >= 0 && leftDiff >= 0 && rightDiff >= 0) {
        return true;
      }
      return {
        topDiff: topDiff,
        bottomDiff: bottomDiff,
        leftDiff: leftDiff,
        rightDiff: rightDiff
      };
    };
    var setScrollTop = function setScrollTop(scrollTop) {
      var virtualList = getVirtualList();
      if (virtualList) {
        virtualList.scrollTop = scrollTop;
      }
    };
    var incrementScrollTop = function incrementScrollTop(increment) {
      var virtualList = getVirtualList();
      if (virtualList) {
        virtualList.scrollTop += increment;
      }
    };
    var getScrollTop = function getScrollTop() {
      var body = bodyRef.current;
      if (body && body.columnLayout) {
        return body.columnLayout.scrollTop || 0;
      }
      return 0;
    };
    var getScrollLeft = function getScrollLeft() {
      var body = bodyRef.current;
      if (body && body.columnLayout) {
        return body.columnLayout.scrollLeft || 0;
      }
      return 0;
    };
    var getScrollLeftMax = function getScrollLeftMax() {
      var virtualList = getVirtualList();
      if (virtualList) {
        return virtualList.scrollLeftMax || 0;
      }
      return 0;
    };
    var setScrollLeft = function setScrollLeft(scrollLeft) {
      var virtualList = getVirtualList();
      if (virtualList) {
        virtualList.scrollLeft = scrollLeft;
      }
    };
    var incrementScrollLeft = function incrementScrollLeft(increment) {
      var virtualList = getVirtualList();
      if (virtualList) {
        virtualList.scrollLeft += increment;
      }
    };
    var getRows = function getRows() {
      var vl = getVirtualList();
      return vl.getRows();
    };
    var getDOMNodeForRowIndex = function getDOMNodeForRowIndex(index) {
      var rows = getRows();
      var row = rows.find(function (row) {
        return row.index === index;
      });
      var rowInstance = row.getInstance();
      return rowInstance.getDOMNode ? rowInstance.getDOMNode() : rowInstance.domRef ? rowInstance.domRef.current : null;
    };
    var getHeader = function getHeader() {
      var body = bodyRef.current;
      var columnLayout = body && body.getColumnLayout();
      var header = columnLayout.getHeader();
      return header;
    };
    var scrollToId = function scrollToId(id, config, callback) {
      var index = computedProps.getRowIndexById(id);
      scrollToIndex(index, config, callback);
    };
    var scrollToIndex = function scrollToIndex(index, config, callback) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      index = (0, _clamp.default)(index, 0, computedProps.data.length - 1);
      config = config || {};
      var top = config.top;
      var force = config.force;
      var direction = config.direction;
      var duration = config.duration;
      var offset = config.offset;
      top = !!top;
      force = !!force;
      direction = direction || (top ? 'top' : 'bottom');
      getVirtualList().scrollToIndex(index, {
        direction: direction,
        force: force,
        duration: duration,
        offset: offset
      }, callback);
    };
    var scrollToCell = function scrollToCell(_ref3) {
      var rowIndex = _ref3.rowIndex,
        columnIndex = _ref3.columnIndex;
      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        offset = _ref4.offset,
        left = _ref4.left,
        right = _ref4.right,
        top = _ref4.top;
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (offset === undefined) {
        offset = (computedProps.rowHeight || 50) / 2;
      }
      var columnDirection = left === true ? 'left' : left === false || right === true ? 'right' : undefined;
      var col = computedProps.visibleColumns[columnIndex];
      var scrollToRow = function scrollToRow() {
        var maxIndex = computedProps.computedTreeEnabled ? computedProps.data.length - 1 : computedProps.count - 1;
        computedProps.scrollToIndex((0, _clamp.default)(rowIndex + (top ? -0 : 0), 0, maxIndex), {
          top: top,
          offset: 0
        });
      };
      if (!col) {
        return;
      }
      if (col.computedLocked) {
        scrollToRow();
        return;
      }
      computedProps.scrollToColumn(columnIndex, {
        offset: offset,
        direction: columnDirection
      }, function () {
        scrollToRow();
      });
    };
    var smoothScrollTo = (0, _react.useCallback)(function (value, config) {
      var virtualList = getVirtualList();
      virtualList.smoothScrollTo(value, config);
    }, []);
    var scrollToColumn = (0, _react.useCallback)(function (index, config, callback) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (!computedProps.size.width) {
        return requestAnimationFrame(function () {
          scrollToColumn(index, config, callback);
        });
      }
      config = config || {};
      var _config = config,
        direction = _config.direction,
        force = _config.force,
        duration = _config.duration,
        offset = _config.offset;
      if (offset === undefined) {
        offset = (computedProps.rowHeight || 50) / 2;
      }
      var col = computedProps.getColumnBy(index);
      if (col.computedLocked) {
        if (callback) {
          callback();
        }
        return;
      }
      var virtualList = getVirtualList();
      var scrollLeft = virtualList.scrollLeft;
      var scrollWidth = computedProps.size.width;
      if (direction) {
        if (direction != 'left' && direction != 'right') {
          direction = null;
        }
      }
      if (force && !direction) {
        force = false;
      }
      if (typeof callback != 'function') {
        callback = function callback() {};
      }
      var getColumnOffset = function getColumnOffset() {
        return direction === 'left' || !direction ? col.computedOffset : col.computedOffset + col.computedWidth;
      };
      var getLeftDiff = function getLeftDiff() {
        return getColumnOffset() - scrollLeft - (computedProps.totalLockedStartWidth || 0);
      };
      var getRightDiff = function getRightDiff() {
        return scrollLeft + scrollWidth - getColumnOffset() - (computedProps.totalLockedEndWidth || 0);
      };
      var leftDiff = getLeftDiff();
      var rightDiff = getRightDiff();
      var toLeft = leftDiff < 0;
      var toRight = rightDiff < 0;
      var visible = !toLeft && !toRight;
      if (!visible) {
        if (!direction) {
          direction = leftDiff < 0 ? 'left' : 'right';
          force = true;
          leftDiff = getLeftDiff();
          rightDiff = getRightDiff();
        }
      }
      if (!visible || direction && force) {
        var newScrollLeft;
        if (direction == 'left' || leftDiff < 0) {
          newScrollLeft = scrollLeft + leftDiff - offset;
        } else if (direction == 'right' || rightDiff < 0) {
          newScrollLeft = scrollLeft - rightDiff + offset;
        }
        if (newScrollLeft != null) {
          if (duration) {
            virtualList.smoothScrollTo(newScrollLeft, {
              duration: duration,
              orientation: 'horizontal'
            }, callback);
            return;
          }
          virtualList.scrollLeft = newScrollLeft;
        }
      }
      callback();
    }, []);
    var getStickyContainerHeight = function getStickyContainerHeight() {
      var _getDOMNode, _stickyContainer$scro;
      var stickyContainer = (_getDOMNode = getDOMNode()) === null || _getDOMNode === void 0 ? void 0 : _getDOMNode.querySelector(".".concat(_StickyRowsContainer.StickyRowsContainerClassName));
      var stickyContainerHeight = (_stickyContainer$scro = stickyContainer === null || stickyContainer === void 0 ? void 0 : stickyContainer.scrollHeight) !== null && _stickyContainer$scro !== void 0 ? _stickyContainer$scro : 0;
      return stickyContainerHeight;
    };
    var scrollToIndexIfNeeded = (0, _react.useCallback)(function (index, config, callback) {
      var needed = !isRowFullyVisible(index);
      if (!needed) {
        var _computedProps2 = computedPropsRef.current;
        if (_computedProps2 !== null && _computedProps2 !== void 0 && _computedProps2.computedStickyRows) {
          if (_computedProps2.computedStickyRows[index]) {
            needed = false;
          } else {
            var stickyContainerHeight = getStickyContainerHeight();
            var scrollTop = getScrollTop();
            var relativeScrollTop = scrollTop + stickyContainerHeight;
            var rowOffset = _computedProps2.rowHeightManager.getRowOffset(index);
            if (relativeScrollTop > rowOffset) {
              needed = true;
              config = config || {
                direction: 'top'
              };
              config.offset = relativeScrollTop - rowOffset + rowHeightManager.getRowHeight(index);
            }
          }
        }
      } else {
        if (computedProps !== null && computedProps !== void 0 && computedProps.computedStickyRows) {
          config = config || {
            direction: 'top'
          };
          config.offset = config.offset || 0;
          if (config.direction === 'top' || config.top) {
            config.offset += getStickyContainerHeight();
          }
        }
      }
      if (needed) {
        scrollToIndex(index, config, callback);
      } else {
        if (callback) {
          callback();
        }
      }
      return needed;
    }, []);
    var isRowFullyVisible = function isRowFullyVisible(rowIndex) {
      var list = getVirtualList();
      if (!list) {
        return false;
      }
      return list.isRowVisible(rowIndex);
    };
    var getRenderRange = function getRenderRange() {
      return bodyRef.current != null ? bodyRef.current.getRenderRange() : {
        from: 0,
        to: 0
      };
    };
    var isRowRendered = function isRowRendered(index) {
      var _getRenderRange = getRenderRange(),
        from = _getRenderRange.from,
        to = _getRenderRange.to;
      return index >= from && index < to;
    };
    var focus = function focus() {
      var virtualList = getVirtualList();
      if (!virtualList) {
        return;
      }
      var scrollContainer = virtualList.scrollContainer;
      if (!scrollContainer) {
        return;
      }
      scrollContainer.focus();
    };
    var blur = function blur() {
      var virtualList = getVirtualList();
      if (!virtualList) {
        return;
      }
      var scrollContainer = virtualList.scrollContainer;
      if (!scrollContainer) {
        return;
      }
      scrollContainer.blur();
    };
    var computeIdProperty = (0, _react.useCallback)(function () {
      var idProperty = props.idProperty;
      if (idProperty.includes(props.idPropertySeparator)) {
        return true;
      }
      return false;
    }, []);
    var computedProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, cProps), {}, {
      gridId: (0, _react.useMemo)(function () {
        return ++GRID_ID;
      }, []),
      isRowFullyVisible: isRowFullyVisible,
      bodyRef: bodyRef,
      notifyColumnFilterVisibleStateChange: (0, _react.useMemo)(function () {
        return (0, _notifier.notifier)(false);
      }, []),
      getMenuPortalContainer: getDOMNode,
      scrollToIndexIfNeeded: scrollToIndexIfNeeded,
      scrollToIndex: scrollToIndex,
      scrollToId: scrollToId,
      scrollToColumn: scrollToColumn,
      scrollToCell: scrollToCell,
      setScrollTop: setScrollTop,
      setScrollLeft: setScrollLeft,
      smoothScrollTo: smoothScrollTo,
      incrementScrollLeft: incrementScrollLeft,
      incrementScrollTop: incrementScrollTop,
      getScrollTop: getScrollTop,
      getScrollLeft: getScrollLeft,
      getScrollLeftMax: getScrollLeftMax,
      getHeader: getHeader,
      isCellVisible: isCellVisible,
      naturalRowHeight: typeof props.rowHeight !== 'number',
      isRowRendered: isRowRendered,
      getRenderRange: getRenderRange,
      computedShowCellBorders: computedShowCellBorders,
      setShowCellBorders: setShowCellBorders,
      groupCounts: [],
      computedLoading: computedLoading,
      setLoading: setLoading
    }, dataInfo), columnInfo), {}, {
      rowHeightManager: rowHeightManager,
      isRowExpandedById: isRowExpandedById,
      getItemId: getItemId,
      getRowId: getItemIdAt,
      getItemIndexBy: getItemIndexBy,
      getItemIndex: getItemIndex,
      getItemAt: getItemAt,
      getItemIdAt: getItemIdAt,
      getRows: getRows,
      focus: focus,
      getDOMNodeForRowIndex: getDOMNodeForRowIndex,
      blur: blur,
      computedShowHeaderBorderRight: columnInfo.totalComputedWidth < viewportAvailableWidth || props.nativeScroll && (0, _getScrollbarWidth.default)() && scrollbars.vertical,
      i18n: i18nFn,
      totalColumnCount: columnInfo.allColumns.length,
      totalComputedWidth: columnInfo.totalComputedWidth,
      minRowWidth: columnInfo.totalComputedWidth,
      columnResizeHandleWidth: (0, _clamp.default)(props.columnResizeHandleWidth, 2, 25),
      compoundIdProperty: computeIdProperty()
    });
    computedProps.rtlOffset = props.rtl ? Math.min(computedProps.size.width - computedProps.totalComputedWidth, 0) : 0;
    computedPropsRef.current = computedProps;
    var menusRef = (0, _react.useRef)([]);
    computedProps.menusRef = menusRef;
    computedProps.updateMenuPositions = function () {
      menusRef.current.forEach(function (menu) {
        if (menu && menu.updatePosition) {
          menu.updatePosition();
        }
      });
    };
    computedProps.updateMainMenuPosition = function (alignTo) {
      menusRef.current.forEach(function (menu) {
        if (menu && menu.updatePosition && !menu.props.subMenu) {
          menu.updateAlignment(alignTo);
        }
      });
    };
    computedProps.onScroll = function () {
      if (computedProps.initialProps.onScroll) {
        computedProps.initialProps.onScroll();
      }
      if (computedProps.updateMenuPositionOnScroll) {
        computedProps.updateMenuPositions();
      }
    };
    if (pluginsMap['row-details'] && pluginsMap['row-details'].hook) {
      Object.assign(computedProps, pluginsMap['row-details'].hook(props, computedProps, computedPropsRef));
    }
    computedProps.useCellSelection = pluginsMap['cell-selection'].hook;
    Object.assign(computedProps, (0, _useSelection.default)(props, computedProps, computedPropsRef));
    Object.assign(computedProps, (0, _useHeader.default)(props, computedProps));
    computedProps.scrollProps = (0, _useScrollProps.default)(props, computedProps);
    var _useState19 = (0, _react.useState)(0),
      _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
      maxVisibleRows = _useState20[0],
      setMaxVisibleRows = _useState20[1];
    var _useProperty7 = (0, _useProperty13.default)(props, 'showZebraRows'),
      _useProperty8 = (0, _slicedToArray2.default)(_useProperty7, 2),
      computedShowZebraRows = _useProperty8[0],
      setShowZebraRows = _useProperty8[1];
    var _useProperty9 = (0, _useProperty13.default)(props, 'showHoverRows'),
      _useProperty10 = (0, _slicedToArray2.default)(_useProperty9, 2),
      computedShowHoverRows = _useProperty10[0],
      setShowHoverRows = _useProperty10[1];
    var _useProperty11 = (0, _useProperty13.default)(props, 'showEmptyRows'),
      _useProperty12 = (0, _slicedToArray2.default)(_useProperty11, 2),
      computedShowEmptyRows = _useProperty12[0],
      setShowEmptyRows = _useProperty12[1];
    computedProps.getVirtualList = getVirtualList;
    computedProps.computedShowZebraRows = computedShowZebraRows;
    computedProps.computedShowHoverRows = computedShowHoverRows;
    computedProps.computedShowEmptyRows = computedShowEmptyRows;
    computedProps.setShowZebraRows = setShowZebraRows;
    computedProps.setShowHoverRows = setShowHoverRows;
    computedProps.setShowEmptyRows = setShowEmptyRows;
    computedProps.maxVisibleRows = maxVisibleRows;
    var className = (0, _prepareClassName.default)(computedProps);
    var _useRow = (0, _useRow2.default)(props, computedProps, computedPropsRef),
      onKeyDown = _useRow.computedOnKeyDown,
      onFocus = _useRow.computedOnFocus,
      onBlur = _useRow.computedOnBlur,
      useRowProps = (0, _objectWithoutProperties2.default)(_useRow, _excluded);
    if (pluginsMap['locked-rows'] && pluginsMap['locked-rows'].hook) {
      Object.assign(computedProps, pluginsMap['locked-rows'].hook(props, computedProps, computedPropsRef));
    }
    if (pluginsMap['locked-columns'] && pluginsMap['locked-columns'].hook) {
      Object.assign(computedProps, pluginsMap['locked-columns'].hook(props, computedProps, computedPropsRef));
    } else if (computedProps.lockedEndColumns && computedProps.lockedEndColumns.length || computedProps.lockedStartColumns && computedProps.lockedStartColumns.length) {
      (0, _warn.communityFeatureWarn)("Locked columns", warnRef);
    }
    if (pluginsMap['footer-rows'] && pluginsMap['footer-rows'].hook) {
      Object.assign(computedProps, pluginsMap['footer-rows'].hook(props, computedProps, computedPropsRef));
    }
    if ((props.renderRowDetails || props.expandedRows || props.defaultExpandedRows) && !pluginsMap['row-details']) {
      (0, _warn.communityFeatureWarn)("Row Details and Master Details", warnRef);
    }
    if (props.lockedRows && !pluginsMap['locked-rows']) {
      (0, _warn.communityFeatureWarn)("Locked rows", warnRef);
    }
    if (props.footerRows && !pluginsMap['footer-rows']) {
      (0, _warn.communityFeatureWarn)("Footer rows", warnRef);
    }
    Object.assign(computedProps, useRowProps);
    Object.assign(computedProps, pluginsMap['menus'].hook(props, computedProps, computedPropsRef));
    var computedWillReceiveFocusRef = (0, _react.useRef)(false);
    computedProps.getState = function () {
      return context.state;
    };
    computedProps.setStateProperty = function (name, value) {
      context.state[name] = value;
    };
    computedProps.computedWillReceiveFocusRef = computedWillReceiveFocusRef;
    delete computedProps.style;
    var getScrollingElement = function getScrollingElement() {
      var scrollingElement = getVirtualList().getScrollingElement();
      if (!scrollingElement.scrollerNode) {
        scrollingElement = scrollingElement.scroller;
      }
      return scrollingElement.scrollerNode;
    };
    computedProps.getScrollingElement = getScrollingElement;
    var onGridScrollIntoView = function onGridScrollIntoView(event) {
      var gridNode = getBodyDOMNode();
      var eventTarget = event.target;
      if (event.target != gridNode) {
        return;
      }
      var scrollLeft = gridNode.scrollLeft,
        scrollTop = gridNode.scrollTop;
      if (scrollLeft) {
        gridNode.scrollLeft = computedProps.rtl ? getScrollLeftMax() : 0;
        requestAnimationFrame(function () {
          if (computedProps.wasUnmountedRef.current) {
            return;
          }
          incrementScrollLeft(scrollLeft);
        });
      }
      if (scrollTop && eventTarget) {
        eventTarget.scrollTop = 0;
        globalObject.requestAnimationFrame(function () {
          if (computedProps.wasUnmountedRef.current) {
            return;
          }
          incrementScrollTop(scrollTop);
        });
      }
    };
    var setupPassiveScrollListener = function setupPassiveScrollListener(node) {
      node.addEventListener('scroll', onGridScrollIntoView, {
        passive: true
      });
    };
    var removePassiveScrollListener = function removePassiveScrollListener(node) {
      if (node) {
        node.removeEventListener('scroll', onGridScrollIntoView, {
          passive: true
        });
      }
    };
    (0, _react.useEffect)(function () {
      computedProps.wasMountedRef.current = true;
      if (props.onDidMount) {
        props.onDidMount(computedPropsRef);
      }
      var initialScrollLeft = props.initialScrollLeft,
        initialScrollTop = props.initialScrollTop;
      if (props.skipLoadOnMount) {
        if (initialScrollTop) {
          setScrollTop(initialScrollTop);
        }
        if (initialScrollLeft) {
          setScrollLeft(initialScrollLeft);
        }
      }
      var bodyNode = getBodyDOMNode();
      setupPassiveScrollListener(bodyNode);
      return function () {
        removePassiveScrollListener(bodyNode);
        if (props.onWillUnmount) {
          props.onWillUnmount(computedPropsRef);
        }
        computedProps.wasUnmountedRef.current = true;
      };
    }, []);
    (0, _react.useEffect)(function () {
      if (props.handle) {
        props.handle(computedPropsRef);
      }
      return function () {
        if (props.handle) {
          props.handle(null);
        }
      };
    }, [props.handle]);
    (0, _react.useEffect)(function () {
      if (props.onReady && size.width) {
        props.onReady(computedPropsRef);
      }
    }, [size.width !== 0]);
    computedProps.cellNavigationRef = (0, _react.useRef)(null);
    Object.assign(computedProps, pluginsMap['row-index-column'].hook(props, computedProps, computedPropsRef));
    computedProps.coverHandleRef = (0, _react.useRef)(emptyCoverHandle);
    computedProps.rowResizeIndexRef = (0, _react.useRef)(null);
    var coverHandle = function coverHandle(_ref5) {
      var setActive = _ref5.setActive,
        setCursor = _ref5.setCursor;
      computedPropsRef.current.coverHandleRef.current = {
        setActive: setActive,
        setCursor: setCursor
      };
    };
    var activeItem = getItemAt(computedProps.computedActiveIndex);
    var activeRowHeight = computedProps.computedRowHeights && activeItem ? computedProps.computedRowHeights[getItemId(activeItem)] : computedProps.rowHeight == null ? rowHeightManager.getRowHeight(computedProps.computedActiveIndex) : computedPropsRef.rowHeight;
    computedProps.activeRowHeight = activeRowHeight || computedProps.rowHeight;
    var emptyData = computedProps.data && computedProps.data.length;
    if (computedFocused && computedProps.showActiveRowIndicator && emptyData) {
      computedProps.renderActiveRowIndicator = function (handle) {
        return _react.default.createElement(_ActiveRowIndicator.default, {
          handle: handle,
          rtl: computedProps.rtl,
          rtlOffset: computedProps.rtlOffset,
          getDOMNode: computedProps.getDOMNode,
          dataSourceCount: computedProps.data.length,
          width: computedProps.minRowWidth || 0,
          computedRowHeights: computedProps.computedRowHeights,
          computedExpandedRows: computedProps.computedExpandedRows,
          computedExpandedNodes: computedProps.computedExpandedNodes,
          activeRowHeight: computedProps.activeRowHeight,
          activeIndex: computedProps.computedActiveIndex,
          activeRowRef: computedProps.activeRowRef,
          activeRowIndicatorClassName: computedProps.activeRowIndicatorClassName
        });
      };
    }
    computedProps.computedLicenseValid = false;
    if (pluginsMap.license && pluginsMap.license.hook) {
      Object.assign(computedProps, pluginsMap.license.hook(props, computedProps, computedPropsRef));
    }
    Object.assign(computedProps, pluginsMap['clipboard'].hook(props, computedProps, computedPropsRef));
    if (edition !== 'enterprise') {
      if (props.rowIndexColumn) {
        (0, _warn.communityFeatureWarn)('Row resize (row index column)', warnRef);
      }
      if (props.livePagination) {
        (0, _warn.communityFeatureWarn)('Live pagination', warnRef);
      }
      if (props.onRowReorder != null || props.rowReorderColumn != null) {
        (0, _warn.communityFeatureWarn)('Row reorder', warnRef);
      }
      if (props.enableClipboard) {
        (0, _warn.communityFeatureWarn)('Clipboard', warnRef);
      }
    }
    delete computedProps.renderLockedStartCells;
    delete computedProps.renderLockedEndCells;
    if (pluginsMap['locked-columns']) {
      computedProps.renderLockedStartCells = pluginsMap['locked-columns'].renderLockedStartCells;
      computedProps.renderLockedEndCells = pluginsMap['locked-columns'].renderLockedEndCells;
    }
    Object.defineProperty(computedProps, 'scrollTop', {
      get: function get() {
        return getScrollTop();
      },
      set: function set(newValue) {
        setScrollTop(newValue);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(computedProps, 'scrollLeft', {
      get: function get() {
        return getScrollLeft();
      },
      set: function set(newValue) {
        setScrollLeft(newValue);
      },
      enumerable: true,
      configurable: true
    });
    computedProps.edition = edition;
    return _react.default.createElement("div", {
      style: props.style,
      className: className,
      onKeyDown: onKeyDown,
      onFocus: onFocus,
      onBlur: onBlur,
      ref: domRef
    }, _react.default.createElement(_context.Provider, {
      value: computedProps
    }, pluginsMap['row-index-column'].renderRowResizeIndicator(computedProps, computedPropsRef), _react.default.createElement(_Layout.default, {
      Footer: pluginsMap['footer-rows'] ? pluginsMap['footer-rows'].Footer : null,
      ref: bodyRef,
      renderInPortal: renderInPortal
    }), _react.default.createElement(_Cover.default, {
      handle: coverHandle
    })), computedProps.computedLicenseValid === false && edition === 'enterprise' ? pluginsMap['license'].renderLicenseNotice(computedProps, computedPropsRef) : null, _react.default.createElement(_src.default, {
      onResize: onResize,
      notifyOnMount: true
    }), renderLoadMask(computedProps), typeof pluginsMap['menus'].renderColumnContextMenu === 'function' ? pluginsMap['menus'].renderColumnContextMenu(computedProps, computedPropsRef) : null, typeof pluginsMap['menus'].renderRowContextMenu === 'function' ? pluginsMap['menus'].renderRowContextMenu(computedProps, computedPropsRef) : null, typeof pluginsMap['filters'].renderColumnFilterContextMenu === 'function' ? pluginsMap['filters'].renderColumnFilterContextMenu(computedProps, computedPropsRef) : null, _react.default.createElement("div", {
      ref: portalRef,
      className: "InovuaReactDataGrid__portal-host"
    }));
  });
  var defaultProps = {
    idProperty: 'id',
    rowHeight: 40,
    headerHeight: 40,
    filterRowHeight: 40,
    minRowHeight: 20,
    nativeScroll: false,
    autoCheckboxColumn: false,
    activateRowOnFocus: true,
    checkboxOnlyRowSelect: false,
    checkboxSelectEnableShiftKey: false,
    renderScroller: function renderScroller(domProps) {
      domProps.tabIndex = 0;
    },
    stickyHeader: false,
    enableCellBulkUpdate: false,
    enableKeyboardNavigation: true,
    scrollTopOnFilter: true,
    scrollTopOnSort: true,
    scrollTopOnGroupBy: true,
    defaultShowHeader: true,
    defaultShowEmptyRows: false,
    defaultShowHoverRows: true,
    defaultShowZebraRows: true,
    defaultShowCellBorders: true,
    allowRowTabNavigation: false,
    cellSelectionByIndex: false,
    columnResizeHandleWidth: _isMobile.default ? 15 : 5,
    columnResizeProxyWidth: 5,
    virtualizeColumnsThreshold: 15,
    shareSpaceOnResize: false,
    enableColumnFilterContextMenu: true,
    copySpreadsheetCompatibleString: false,
    clipboardSeparator: '\t',
    resizable: true,
    virtualized: true,
    allowUnsort: true,
    rtl: false,
    theme: 'default-light',
    filterTypes: _filterTypes.default,
    keyPageStep: 10,
    expandGroupTitle: true,
    allowGroupSplitOnReorder: true,
    defaultCollapsedGroups: {},
    groupPathSeparator: '/',
    nodePathSeparator: '/',
    idPropertySeparator: '.',
    groupNestingSize: 22,
    treeNestingSize: 22,
    columnMinWidth: 40,
    enableTreeRowReorderNestingChange: true,
    enableTreeRowReorderParentChange: true,
    columnReorderScrollByAmount: 20,
    rowReorderScrollByAmount: 20,
    rowReorderAutoScroll: false,
    rowReorderAutoScrollSpeed: 40,
    allowRowReorderBetweenGroups: false,
    reorderProxySize: 3,
    expandOnMouseDown: false,
    columnMaxWidth: null,
    editStartEvent: 'dblclick',
    hideGroupByColumns: true,
    defaultColumnOrder: undefined,
    columnUserSelect: false,
    columnHeaderUserSelect: false,
    stickyGroupRows: false,
    showWarnings: !_uglified.default,
    toggleRowSelectOnClick: false,
    toggleCellSelectOnClick: true,
    clearNodeCacheOnDataSourceChange: true,
    clearDataSourceCacheOnChange: true,
    preventDefaultTextSelectionOnShiftMouseDown: true,
    preventRowSelectionOnClickWithMouseMove: true,
    showColumnMenuSortOptions: true,
    showColumnMenuLockOptions: true,
    showColumnMenuFilterOptions: true,
    showColumnMenuGroupOptions: true,
    autoFocusOnEditComplete: true,
    autoFocusOnEditEscape: true,
    showActiveRowIndicator: true,
    showPivotSummaryColumns: true,
    showColumnMenuToolOnHover: !_isMobile.default,
    columnFilterContextMenuConstrainTo: true,
    columnFilterContextMenuPosition: 'absolute',
    generateIdFromPath: true,
    collapseChildrenOnAsyncNodeCollapse: true,
    collapseChildrenRecursive: true,
    selectNodesRecursive: true,
    isExpandKeyPressed: function isExpandKeyPressed(_ref6) {
      var event = _ref6.event;
      return event.key === 'ArrowRight' && event.altKey;
    },
    isCollapseKeyPressed: function isCollapseKeyPressed(_ref7) {
      var event = _ref7.event;
      return event.key === 'ArrowLeft' && event.altKey;
    },
    isStartEditKeyPressed: function isStartEditKeyPressed(_ref8) {
      var event = _ref8.event;
      return event.key === 'e' && event.ctrlKey;
    },
    rowExpandHeight: 80,
    growExpandHeightWithDetails: true,
    livePaginationLoadNextDelay: true,
    livePaginationLoadMaskHideDelay: 50,
    checkResizeDelay: 0,
    multiRowExpand: true,
    useNativeFlex: false,
    disableGroupByToolbar: false,
    updateMenuPositionOnScroll: true,
    updateMenuPositionOnColumnsChange: true,
    useRowHeightForLockedRows: true,
    nodesProperty: 'nodes',
    rowDetailsWidth: 'max-viewport-width',
    contain: 'style layout',
    rowContain: 'style layout',
    groupToString: function groupToString(obj) {
      var type = (0, _typeof2.default)(obj);
      return type == 'string' || type === 'number' || type === 'boolean' ? "".concat(obj) : JSON.stringify(obj);
    },
    scrollProps: {
      autoHide: true,
      scrollThumbMargin: 4,
      scrollThumbWidth: 6,
      scrollThumbOverWidth: 8
    },
    detailsGridCacheKey: true,
    sortFunctions: {
      date: function date(v1, v2, column) {
        if (window.moment && column.dateFormat) {
          return window.moment(v1, column.dateFormat) - window.moment(v2, column.dateFormat);
        }
        return v1 - v2;
      }
    },
    i18n: DEFAULT_I18N,
    emptyText: 'noRecords',
    isBinaryOperator: function isBinaryOperator(operator) {
      return operator === 'inrange' || operator === 'notinrange';
    },
    skipHeaderOnAutoSize: false,
    enableColumnAutosize: true
  };
  var maybeAddCols = [];
  plugins.forEach(function (plugin) {
    if (!plugin.name) {
      return;
    }
    if (typeof plugin.defaultProps === 'function') {
      var result = plugin.defaultProps(Grid.defaultProps);
      if (result != null) {
        Grid.defaultProps = _objectSpread(_objectSpread({}, Grid.defaultProps), result);
      }
    }
    if (typeof plugin.maybeAddColumns === 'function') {
      maybeAddCols.push(plugin.maybeAddColumns);
    }
  });
  if (maybeAddCols.length) {
    maybeAddColumns = function maybeAddColumns(columns, props) {
      var result = columns;
      maybeAddCols.forEach(function (fn) {
        result = fn(result, props);
      });
      return result;
    };
  }
  var TheGrid = function TheGrid(props) {
    var contextValue = (0, _react.useMemo)(function () {
      return {
        state: props.initialState || {}
      };
    }, []);
    var Context = (0, _react.useMemo)(function () {
      return _react.default.createContext(contextValue);
    }, []);
    return _react.default.createElement(Context.Provider, {
      value: contextValue
    }, _react.default.createElement(Grid, _objectSpread(_objectSpread({}, props), {}, {
      context: Context
    })));
  };
  TheGrid.defaultProps = defaultProps;
  return TheGrid;
};
var _default = GridFactory;
exports.default = _default;