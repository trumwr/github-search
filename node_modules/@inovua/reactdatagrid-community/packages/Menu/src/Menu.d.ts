/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="react" />
import Component from '../../../packages/react-class';
declare class InovuaMenu extends Component {
    constructor(props: any);
    shouldComponentUpdate(nextProps: any): any;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: any, prevState: any): void;
    componentDidMount(): void;
    updatePosition: () => void;
    updateAlignment: (alignTo: any) => void;
    handleDocumentScroll: () => void;
    render(): JSX.Element;
    renderTable(): JSX.Element;
    renderItems(): any;
    getSelectionProps(item: any): {
        name: any;
        value: any;
        checked: boolean;
        multiple: any;
        allowUnselect: any;
        enableSelection: boolean;
        browserNativeSelectInputs: any;
        renderCheckInput: any;
        renderRadioInput: any;
        selectionInputPosition: any;
    } | null | undefined;
    getCommonItemProps(): {
        style: any;
        overStyle: any;
        overClassName: any;
        activeStyle: any;
        activeClassName: any;
        disabledStyle: any;
        disabledClassName: any;
        expandedStyle: any;
        expandedClassName: any;
        focusedStyle: any;
        focusedClassName: any;
        overFocusedStyle: any;
        cellStyle: any;
        menuHasSubmenu: any;
        expanderStyle: any;
        expanderSize: any;
        globalCellStyle: any;
        itemDisabledStyle: any;
        itemDisabledClassName: any;
        itemOverStyle: any;
        itemActiveStyle: any;
        rootClassName: any;
        showWarnings: any;
        titleStyle: any;
        onClick: (event: {} | undefined, itemProps: any, index: any) => void;
        onMouseOver: ({ menuOffset, index, hasSubMenu }: {
            menuOffset: any;
            index: any;
            hasSubMenu: any;
        }) => void;
        onMouseOut: ({ leaveOffset, index, event }: {
            leaveOffset: any;
            index: any;
            event: any;
        }) => void;
        submenuWillUnmount: (instance: any, config: any) => void;
        onExpanderClick: (event: any) => void;
        onSelectChange: ({ name, value, checked, multiple }: {
            name: any;
            value: any;
            checked: any;
            multiple: any;
        }) => void;
        selectOnClick: any;
        expander: any;
        rtl: any;
        height: any;
        checkIconSize: any;
        radioIconSize: any;
        closeSubmenuRecursively: () => void;
        closeSubMenu: (options: any) => void;
        expandedIndex: any;
    };
    renderSubMenu(props: any, state: any): JSX.Element;
    hasItemSubMenu(index: any): any;
    getItemsByIndex(index: any): any;
    getSubMenuProps(): any;
    getAlignPositions(props: any): any;
    getDefaultAlignPositions(): string[];
    getScrollerProps(): any;
    prepareClassName(props: any, state: any): string;
    handleMouseEnter(event: any): void;
    handleMouseLeave(event: any): void;
    handleKeyDown(event: any): void;
    handleEscape(event: any): void;
    handleArrowUp(event: any): void;
    handleArrowDown(event: any): void;
    handleArrowLeft(event: any): void;
    handleArrowRight(event: any): void;
    handleEnterOnFocusedItem(event: any): void;
    handleSpaceOnFocusedItem(): void;
    handleOnBlur(event: any): void;
    dismiss(event: any): void;
    scrollItemIntoView(index: any): void;
    closeSubmenuRecursively(): void;
    closeSubMenuAction(): void;
    openSubMenuAction(focusedItemIndex: any): void;
    onActivate(): void;
    onInactivate(options: any): void;
    handleSubMenuMouseEnter(): void;
    handleSubMenuMouseLeave(): void;
    isSubMenuActive(): any;
    onSubMenuActivate(): void;
    onSubMenuInactivate(submenuConfig: any): void;
    onMenuItemMouseEnter({ menuOffset, index, hasSubMenu }: {
        menuOffset: any;
        index: any;
        hasSubMenu: any;
    }): void;
    onMenuItemMouseLeave({ leaveOffset, index, event }: {
        leaveOffset: any;
        index: any;
        event: any;
    }): void;
    delayCloseSubmenu(): void;
    removeMouseMoveListener(): void;
    setSubMenu({ menuOffset, index }: {
        menuOffset: any;
        index?: null | undefined;
    } | undefined, callback: any): void;
    setNextSubmenu({ menuOffset, index }?: {
        menuOffset?: null | undefined;
        index?: null | undefined;
    }): void;
    closeSubMenu(options: any): void;
    onMenuItemExpanderClick(event: any): void;
    onMenuItemClick(event: {} | undefined, itemProps: any, index: any): void;
    onChildClick(event: any, props: any): void;
    setupShowHideDelay(): void;
    setupEnterAnimation(): void;
    checkAlignment(props: any, skipReset: any, alignTo: any): void;
    setFocusedIndex(newFocusedItem: any): void;
    getItemDOMNodeByIndex(index: any): any;
    getItemByIndex(index: any): any;
    getItemPropsByIndex(index: any): any;
    getFocusedItemProps(): any;
    getFocusedItem(): any;
    focus(): void;
    hasSubMenuOpened(): boolean;
    isSubMenu(): boolean;
    doesAnyItemHasSubMenu(): any;
    dosAnyItemHaveSelectInput(): any;
    hasGeneralFocus(): any;
    hasSubMenuFocus(): any;
    hasFocus(): boolean;
    hasChildFocus(): boolean;
    onSubmenuWillUnmount(instance: any, config: any): void;
    focusFirstItem(): void;
    focusItem(index: any): void;
    getSubmenuNode(): any;
    getNode(): any;
    getSelected(): any;
    isSelectedControlled(): boolean;
    handleSelectionChange({ name, value, checked, multiple }: {
        name: any;
        value: any;
        checked: any;
        multiple: any;
    }): void;
    setSelected(newSelected: any, options?: {
        name?: string;
        value?: string;
        checked?: boolean;
        multiple?: boolean;
    }): void;
    handleSubmenuSelectionChange(selected: any, options: any): void;
    getExpandedIndex(): any;
    isSeparator(index: any): boolean;
}
export default InovuaMenu;
