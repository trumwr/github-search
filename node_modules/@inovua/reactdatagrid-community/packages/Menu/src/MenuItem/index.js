/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../../../packages/react-class"));
var _MenuItemCell = _interopRequireDefault(require("./MenuItemCell"));
var _Expander = _interopRequireDefault(require("../Expander"));
var _renderCell = _interopRequireDefault(require("./renderCell"));
var _CheckBox = _interopRequireDefault(require("../../../CheckBox"));
var _RadioButton = _interopRequireDefault(require("../../../RadioButton"));
var _assign = _interopRequireDefault(require("../../../../common/assign"));
var _join = _interopRequireDefault(require("../../../../common/join"));
var _cleanProps = _interopRequireDefault(require("../../../../common/cleanProps"));
var _getRegionRelativeToParent = _interopRequireDefault(require("../getRegionRelativeToParent"));
var _getGlobal = require("../../../../getGlobal");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var emptyFn = function emptyFn() {};
var MenuItem = function (_Component) {
  (0, _inherits2.default)(MenuItem, _Component);
  var _super = _createSuper(MenuItem);
  function MenuItem(props) {
    var _this;
    (0, _classCallCheck2.default)(this, MenuItem);
    _this = _super.call(this, props);
    _this.state = {};
    return _this;
  }
  (0, _createClass2.default)(MenuItem, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var props = this.preparedProps = this.prepareProps(this.props, this.state);
      var className = props.className;
      return _react.default.createElement("tr", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props, MenuItem.propTypes)), {}, {
        style: props.style,
        className: className,
        ref: function ref(node) {
          return _this2.node = node;
        }
      }), this.renderCells());
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.componentIsMounted = true;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.componentIsMounted = false;
    }
  }, {
    key: "prepareProps",
    value: function prepareProps(props, state) {
      var preparedProps = _objectSpread(_objectSpread({}, props), {}, {
        mouseOver: !!state.mouseOver,
        active: !!state.active,
        disabled: !!props.disabled,
        className: this.getClassName(),
        style: this.getStyle(),
        onClick: this.handleClick,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        onMouseDown: this.handleMouseDown,
        onTouchStart: this.handleTouchStart
      });
      if (props.item.isTitle) {
        delete preparedProps.mouseOver;
        delete preparedProps.active;
        delete preparedProps.onClick;
        delete preparedProps.onMouseEnter;
        delete preparedProps.onMouseLeave;
        delete preparedProps.onMouseDown;
        delete preparedProps.onTouchStart;
      }
      return preparedProps;
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      var props = this.props;
      if (props.disabled && event.stopPropagation) {
        event.stopPropagation();
        return;
      }
      if (this.props.onClick) {
        this.props.onClick(event, props, props.index);
      }
      if (this.props.item.onClick) {
        this.props.item.onClick(event, props, props.index);
      }
    }
  }, {
    key: "handleMouseDown",
    value: function handleMouseDown() {
      var _this3 = this;
      var mouseUpListener = function mouseUpListener() {
        if (_this3.componentIsMounted) {
          _this3.setState({
            active: false
          });
        }
        globalObject.removeEventListener('mouseup', mouseUpListener);
      };
      globalObject.addEventListener('mouseup', mouseUpListener);
      if (this.componentIsMounted) {
        this.setState({
          active: true
        });
      }
    }
  }, {
    key: "handleTouchStart",
    value: function handleTouchStart(event) {
      var _this4 = this;
      var props = this.props;
      var mouseUpListener = function mouseUpListener() {
        if (_this4.componentIsMounted) {
          _this4.setState({
            active: false
          });
        }
        globalObject.removeEventListener('touchend', mouseUpListener);
      };
      globalObject.addEventListener('touchend', mouseUpListener);
      if (this.componentIsMounted) {
        this.setState({
          active: true
        });
      }
      if (!this.props.item.items) {
        return;
      }
      if (this.state.mouseOver) {
        this.handleMouseLeave(event);
      } else {
        this.handleMouseEnter(event);
      }
    }
  }, {
    key: "showMenu",
    value: function showMenu(menu, props) {
      props.showMenu(menu, this.getOffset());
    }
  }, {
    key: "handleMouseEnter",
    value: function handleMouseEnter(event) {
      var props = this.props;
      if (props.disabled) {
        return;
      }
      this.mouseInside = true;
      this.setState({
        mouseOver: true
      });
      if (props.onMouseOver) {
        var menuOffset;
        if (props.hasSubMenu) {
          menuOffset = this.getOffset();
        }
        props.onMouseOver({
          event: event,
          menuOffset: menuOffset,
          itemProps: props,
          index: props.index,
          hasSubMenu: props.hasSubMenu
        });
      }
    }
  }, {
    key: "handleMouseLeave",
    value: function handleMouseLeave(event) {
      var props = this.props;
      if (props.disabled) {
        return;
      }
      var offset = {
        x: event.clientX,
        y: event.clientY
      };
      if (this.componentIsMounted) {
        this.setState({
          active: false,
          mouseOver: false
        });
      }
      if (props.onMouseOut) {
        props.onMouseOut({
          itemPorps: props,
          leaveOffset: offset,
          index: props.index,
          hasSubMenu: props.hasSubMenu
        });
      }
    }
  }, {
    key: "renderCells",
    value: function renderCells() {
      var props = this.props;
      var cells = props.columns.map(function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _renderCell.default.apply(void 0, [props].concat(args));
      });
      if (props.enableSelection && props.name) {
        var input = this.renderSelectInput();
        if (this.props.selectionInputPosition === 'end') {
          cells.push(input);
        } else {
          cells.unshift(input);
        }
      }
      if (props.hasSubMenu) {
        var expander = this.renderExpander();
        cells.push(expander);
      }
      return cells;
    }
  }, {
    key: "getCommonCellProps",
    value: function getCommonCellProps() {
      var props = this.props;
      return {
        rootClassName: props.rootClassName,
        rtl: props.rtl
      };
    }
  }, {
    key: "renderSelectInput",
    value: function renderSelectInput() {
      var _this5 = this;
      var props = this.props;
      var multiple = props.multiple;
      var className = (0, _join.default)("".concat(props.rootClassName, "__cell__input"), props.browserNativeSelectInputs && "".concat(props.rootClassName, "__cell__input--browser-native"), multiple && "".concat(props.rootClassName, "__cell__input--multiple"));
      var onChange = function onChange(checked) {
        if (checked === undefined) {
          checked = !props.checked;
        }
        if (typeof checked !== 'boolean' && _this5.props.showWarnings) {
          console.warn('"onChange" should be called with a boolean param!');
        }
        props.onSelectChange({
          name: props.name,
          value: props.value,
          multiple: multiple,
          checked: checked
        });
      };
      var inputProps = {
        className: className,
        onChange: props.selectOnClick ? emptyFn : onChange,
        iconSize: multiple ? props.checkIconSize : props.radioIconSize,
        name: props.name,
        disabled: props.disabled,
        checked: props.checked,
        focusable: false,
        supportIndeterminate: false,
        browserNative: props.browserNativeSelectInputs,
        theme: props.theme
      };
      var cellProps = _objectSpread({
        key: 'select'
      }, this.getCommonCellProps());
      cellProps.className = (0, _join.default)(cellProps.className, "".concat(props.rootClassName, "__cell--has-input"), props.multiple && "".concat(props.rootClassName, "__cell--checkbox"), !props.multiple && "".concat(props.rootClassName, "__cell--radio"));
      var Input = multiple ? _CheckBox.default : _RadioButton.default;
      var renderFunction = multiple ? this.props.renderCheckInput : this.props.renderRadioInput;
      var result;
      if (typeof renderFunction === 'function') {
        result = renderFunction({
          domProps: inputProps,
          onChange: onChange,
          disabled: props.disabled,
          checked: props.checked
        });
      }
      if (result === undefined) {
        result = _react.default.createElement(Input, _objectSpread({}, inputProps));
      }
      return _react.default.createElement(_MenuItemCell.default, _objectSpread({}, cellProps), result);
    }
  }, {
    key: "renderExpander",
    value: function renderExpander() {
      var props = this.props;
      var expander = props.expander;
      if (props.item && props.item.expander !== undefined) {
        expander = props.item.expander;
      }
      var style = _objectSpread(_objectSpread({}, props.expanderStyle), props.item && props.item.expanderStyle);
      var expanderProps = _objectSpread({
        style: style,
        size: props.expanderSize,
        onClick: props.onExpanderClick
      }, this.getCommonCellProps());
      if (typeof expander === 'function') {
        expander = expander(expanderProps, props.item);
      }
      if (expander === undefined || expander === true) {
        expander = _react.default.createElement(_Expander.default, _objectSpread({}, expanderProps));
      }
      return _react.default.createElement(_MenuItemCell.default, _objectSpread({
        key: "expander",
        className: "".concat(props.rootClassName, "__cell--has-expander"),
        expander: expander
      }, expanderProps));
    }
  }, {
    key: "getStyle",
    value: function getStyle() {
      var props = this.props,
        state = this.state;
      var style = (0, _assign.default)({}, props.style, props.item.style);
      if (props.item.isTitle && props.titleStyle) {
        (0, _assign.default)(style, props.titleStyle, props.item.titleStyle);
      }
      if (state.mouseOver) {
        (0, _assign.default)(style, props.itemOverStyle, props.overStyle, props.item.overStyle);
      }
      if (state.active) {
        (0, _assign.default)(style, props.itemActiveStyle, props.activeStyle, props.item.activeStyle);
      }
      if (props.expanded) {
        (0, _assign.default)(style, props.expandedStyle, props.item.expandedStyle);
      }
      if (props.focused) {
        (0, _assign.default)(style, props.focusedStyle, props.item.focusedStyle);
      }
      if (props.focused && state.mouseOver) {
        (0, _assign.default)(style, props.overFocusedStyle, props.item.overFocusedStyle);
      }
      if (props.height) {
        (0, _assign.default)(style, {
          height: props.height
        });
      }
      if (props.disabled) {
        (0, _assign.default)(style, props.itemDisabledStyle, props.disabledStyle, props.item.disabledStyle);
      }
      return style;
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      var props = this.props,
        state = this.state;
      var baseClassName = "".concat(props.rootClassName, "__row");
      var className = (0, _join.default)(props.className, props.item.className, baseClassName, state.mouseOver && "".concat(baseClassName, "--over"), state.mouseOver && props.item.overClassName, state.mouseOver && props.overClassName, state.active && "".concat(baseClassName, "--active"), state.active && props.item.activeClassName, state.active && props.activeClassName, props.expanded && "".concat(baseClassName, "--expanded"), props.expanded && props.item.expandedClassName, props.expanded && props.expandedClassName, props.focused && "".concat(baseClassName, "--focused"), props.focused && props.item.focusedClassName, props.focused && props.focusedClassName, props.item.isTitle && "".concat(baseClassName, "--title"), props.checked && "".concat(baseClassName, "--checked"));
      if (props.disabled) {
        className = (0, _join.default)(props.className, baseClassName, props.disabled && "".concat(baseClassName, "--disabled"), props.disabled && props.itemDisabledClassName, props.disabled && props.item.disabledClassName);
      }
      return className;
    }
  }, {
    key: "getOffset",
    value: function getOffset() {
      return (0, _getRegionRelativeToParent.default)(this.node, this.props.rootClassName);
    }
  }, {
    key: "getPreparedProps",
    value: function getPreparedProps() {
      return this.preparedProps;
    }
  }, {
    key: "hasSubmenu",
    value: function hasSubmenu() {
      return !!this.props.hasSubMenu;
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      return this.node;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var props = this.props;
      return props.item[props.valueProperty];
    }
  }, {
    key: "getName",
    value: function getName() {
      var props = this.props;
      return props.item[props.valueProperty];
    }
  }]);
  return MenuItem;
}(_reactClass.default);
MenuItem.defaultProps = {
  isMenuItem: true,
  item: {},
  columns: ['label'],
  enableSelection: false,
  allowUnselect: false
};
MenuItem.propTypes = {
  rootClassName: _propTypes.default.string,
  style: _propTypes.default.object,
  titleStyle: _propTypes.default.object,
  height: _propTypes.default.number,
  dismissOnClick: _propTypes.default.bool,
  siblingItemHasSubMenu: _propTypes.default.bool,
  overStyle: _propTypes.default.object,
  overClassName: _propTypes.default.string,
  activeStyle: _propTypes.default.object,
  activeClassName: _propTypes.default.string,
  disabledStyle: _propTypes.default.object,
  disabledClassName: _propTypes.default.string,
  expandedStyle: _propTypes.default.object,
  expandedClassName: _propTypes.default.string,
  focusedStyle: _propTypes.default.object,
  focusedClassName: _propTypes.default.string,
  cellStyle: _propTypes.default.object,
  expanderStyle: _propTypes.default.object,
  overFocusedStyle: _propTypes.default.object,
  columns: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object])),
  item: _propTypes.default.object,
  expanded: _propTypes.default.bool,
  globalCellStyle: _propTypes.default.object,
  itemDisabledStyle: _propTypes.default.object,
  itemDisabledClassName: _propTypes.default.string,
  itemOverStyle: _propTypes.default.object,
  itemActiveStyle: _propTypes.default.object,
  menuHasSubmenu: _propTypes.default.bool,
  hasSubMenu: _propTypes.default.bool,
  items: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string])),
  isMenuItem: _propTypes.default.bool,
  focused: _propTypes.default.bool,
  index: _propTypes.default.number,
  rtl: _propTypes.default.bool,
  expander: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool, _propTypes.default.func]),
  expanderSize: _propTypes.default.number,
  expandedIndex: _propTypes.default.number,
  onExpanderClick: _propTypes.default.func,
  closeSubMenu: _propTypes.default.func,
  closeSubmenuRecursively: _propTypes.default.func,
  submenuWillUnmount: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  mouseOver: _propTypes.default.bool,
  active: _propTypes.default.bool,
  menu: _propTypes.default.node,
  onSelectChange: _propTypes.default.func,
  enableSelection: _propTypes.default.bool,
  allowUnselect: _propTypes.default.bool,
  selectOnClick: _propTypes.default.bool,
  name: _propTypes.default.any,
  value: _propTypes.default.any,
  renderCheckInput: _propTypes.default.func,
  renderRadioInput: _propTypes.default.func,
  selectionInputPosition: _propTypes.default.oneOf(['start', 'end']),
  checkIconSize: _propTypes.default.number,
  radioIconSize: _propTypes.default.number,
  browserNativeSelectInputs: _propTypes.default.bool,
  showWarnings: _propTypes.default.bool
};
var _default = MenuItem;
exports.default = _default;