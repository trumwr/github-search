/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = _interopRequireDefault(require("react"));
var _assign = _interopRequireDefault(require("../../../../common/assign"));
var _join = _interopRequireDefault(require("../../../../common/join"));
var _MenuItemCell = _interopRequireDefault(require("./MenuItemCell"));
var _default = function _default(props, column, index, columns) {
  var hasSubmenu = props.hasSubmenu,
    rootClassName = props.rootClassName;
  var globalCellStyle = props.globalCellStyle;
  var item = props.items && props.items[index];
  if (typeof globalCellStyle == 'function') {
    globalCellStyle = globalCellStyle({
      index: index,
      columns: columns,
      items: props.items,
      item: item,
      hasSubmenu: hasSubmenu
    });
  }
  var style = (0, _assign.default)({}, globalCellStyle);
  var isLast = index === columns.length - 1;
  var cellProps = (0, _assign.default)({}, props.cellProps);
  if (isLast && props.siblingItemHasSubMenu && !props.item.items) {}
  var children;
  if (column && typeof column.render == 'function') {
    children = column.render(props.item, {
      column: column,
      columns: columns,
      index: index,
      items: props.items,
      item: item,
      hasSubmenu: hasSubmenu
    });
  } else {
    var columnName = typeof column == 'string' ? column : column.name;
    children = props.item[columnName];
  }
  if ((0, _typeof2.default)(column) === 'object') {
    if (column.colSpan) {
      cellProps.colSpan = column.colSpan;
    }
  }
  if (column.style) {
    var columnStyle;
    if (typeof column.style === 'function') {
      columnStyle = column.style({
        index: index,
        columns: columns,
        items: props.items,
        item: item,
        hasSubmenu: hasSubmenu
      });
    } else {
      columnStyle = column.style;
    }
    (0, _assign.default)(style, columnStyle);
  }
  var className = column.className;
  if (item) {
    if (item.cellStyle) {
      (0, _assign.default)(style, item.cellStyle);
    }
    if (item.className) {
      className = (0, _join.default)(className, item.cellClassName);
    }
  }
  if (props.style) {
    (0, _assign.default)(style, props.style);
  }
  return _react.default.createElement(_MenuItemCell.default, {
    style: style,
    className: className,
    key: index,
    rootClassName: rootClassName,
    cellProps: cellProps,
    isDescription: column.isDescription,
    isIcon: column.isIcon,
    align: column.align
  }, children);
};
exports.default = _default;