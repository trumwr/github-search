/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _assign = _interopRequireDefault(require("../../../../common/assign"));
var _getMinMaxSize = _interopRequireDefault(require("../../../../common/getMinMaxSize"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function prepareStyle(props, state) {
  var style = {};
  if (props.subMenu) {
    (0, _assign.default)(style, props.submenuStyle);
  } else {
    (0, _assign.default)(style, props.style);
  }
  if (props.at) {
    var isArray = Array.isArray(props.at);
    var coords = {
      left: isArray ? props.at[0] : props.at.left === undefined ? props.at.x || props.at.pageX : props.at.left,
      top: isArray ? props.at[1] : props.at.top === undefined ? props.at.y || props.at.pageY : props.at.top
    };
    (0, _assign.default)(style, coords);
  }
  if (state.positionStyle && props.visible !== false) {
    style = _objectSpread(_objectSpread({}, style), state.positionStyle);
  }
  var minMaxSize = (0, _getMinMaxSize.default)(props);
  (0, _assign.default)(style, minMaxSize);
  if (props.padding) {
    (0, _assign.default)(style, {
      padding: props.padding
    });
  }
  if (props.border) {
    (0, _assign.default)(style, {
      border: props.border
    });
  }
  if (typeof props.shadow === 'string') {
    (0, _assign.default)(style, {
      boxShadow: props.shadow
    });
  }
  if (props.borderRadius) {
    (0, _assign.default)(style, {
      borderRadius: props.borderRadius
    });
  }
  if (props.width) {
    (0, _assign.default)(style, {
      width: props.width
    });
  }
  if (props.enableAnimation && (state.transitionEnded || state.transitionStart)) {
    (0, _assign.default)(style, {
      transitionDuration: "".concat(props.fadeDuration, "ms"),
      transitionTimingFunction: props.transitionTimingFunction
    });
  }
  return style;
}
var _default = prepareStyle;
exports.default = _default;