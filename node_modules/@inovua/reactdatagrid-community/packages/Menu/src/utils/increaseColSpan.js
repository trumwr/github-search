/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.increaseFirstColumnColSpan = increaseFirstColumnColSpan;
exports.increaseLastColumnColSpan = increaseLastColumnColSpan;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function increaseColSpan(column) {
  var newColumn = column;
  if (typeof newColumn === 'string') {
    newColumn = {
      name: newColumn,
      colSpan: 2
    };
  } else {
    newColumn = _objectSpread(_objectSpread({}, column), {}, {
      colSpan: newColumn.colSpan ? newColumn.colSpan + 1 : 2
    });
  }
  return newColumn;
}
function increaseLastColumnColSpan(columns) {
  return [].concat((0, _toConsumableArray2.default)(columns.slice(0, -1)), [increaseColSpan(columns[columns.length - 1])]);
}
function increaseFirstColumnColSpan(columns) {
  return [increaseColSpan(columns[0])].concat((0, _toConsumableArray2.default)(columns.slice(1)));
}
var _default = increaseColSpan;
exports.default = _default;