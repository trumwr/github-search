/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Button = _interopRequireDefault(require("../../Button"));
var _join = _interopRequireDefault(require("../../../common/join"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var ICON_CLASS_NAME = 'inovua-react-pagination-toolbar__icon';
var PaginationIcon = function PaginationIcon(props) {
  var icon = props.icon,
    size = props.size,
    disabled = props.disabled,
    action = props.action,
    name = props.name,
    theme = props.theme;
  var className = (0, _join.default)(ICON_CLASS_NAME, "".concat(ICON_CLASS_NAME, "--named--").concat(name));
  return _react.default.createElement(_Button.default, {
    disabled: disabled,
    className: className,
    icon: (0, _react.cloneElement)(icon, {
      width: size,
      height: size
    }),
    onClick: action,
    theme: theme
  });
};
PaginationIcon.propTypes = {
  name: _propTypes.default.string,
  action: _propTypes.default.func,
  disabled: _propTypes.default.bool,
  icon: _propTypes.default.node,
  size: _propTypes.default.number
};
var _default = PaginationIcon;
exports.default = _default;