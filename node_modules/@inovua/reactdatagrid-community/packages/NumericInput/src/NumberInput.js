/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _autoBind = _interopRequireDefault(require("../../../packages/react-class/autoBind"));
var _hasTouch = _interopRequireDefault(require("../../../packages/hasTouch"));
var _raf = _interopRequireDefault(require("../../../common/raf"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _clamp = _interopRequireDefault(require("../../../common/clamp"));
var _debounce = _interopRequireDefault(require("../../../common/debounce"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _eventNames = _interopRequireDefault(require("../../../common/eventNames"));
var _getSelectionRange = _interopRequireDefault(require("./utils/get-selection-range"));
var _getSelectionStart2 = _interopRequireDefault(require("./utils/get-selection-start"));
var _setCaretPosition = _interopRequireDefault(require("./utils/set-caret-position"));
var _getDecimalDelimiter = _interopRequireDefault(require("./utils/get-decimal-delimiter"));
var _getTransformedStringValues2 = _interopRequireWildcard(require("./utils/get-transformed-string-values"));
var _getCurrencyForCountryCode = _interopRequireDefault(require("./utils/get-currency-for-country-code"));
var _getGlobal = require("../../../getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var preventDefault = function preventDefault(e) {
  return e.preventDefault();
};
var emptyObject = {};
var isNumeric = function isNumeric(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};
var isInt = function isInt(n) {
  return Number(n) === n && n % 1 === 0;
};
var getArrowClasses = function getArrowClasses(spinDirection, props) {
  var upArrowClass = (0, _join.default)("".concat(props.rootClassName, "__spinner-arrow"), "".concat(props.rootClassName, "__spinner-arrow--up"), spinDirection === 1 && "".concat(props.rootClassName, "__spinner-arrow--active"));
  var downArrowClass = (0, _join.default)("".concat(props.rootClassName, "__spinner-arrow"), "".concat(props.rootClassName, "__spinner-arrow--down"), spinDirection === -1 && "".concat(props.rootClassName, "__spinner-arrow--active"));
  return {
    upArrowClass: upArrowClass,
    downArrowClass: downArrowClass
  };
};
var getClearButtonClassNames = function getClearButtonClassNames(props) {
  var clearButtonClassName = (0, _join.default)("".concat(props.rootClassName, "__clear-button"), "".concat(props.rootClassName, "__clear-button--").concat(props.rtl ? 'rtl' : 'ltr'), props.clearButtonClassName);
  return {
    clearButtonClassName: clearButtonClassName
  };
};
var toUpperFirst = function toUpperFirst(str) {
  return str ? str.charAt(0).toUpperCase() + str.substring(1) : '';
};
var noDot = function noDot(value) {
  value += '';
  return value.indexOf('.') === -1;
};
var isMinValueRespected = function isMinValueRespected(value, props) {
  var minValue = props.minValue;
  if (minValue == null || value === '') {
    return true;
  }
  return value >= minValue;
};
var isMaxValueRespected = function isMaxValueRespected(value, props) {
  var maxValue = props.maxValue;
  if (maxValue == null || value === '') {
    return true;
  }
  return value <= maxValue;
};
var checkNumeric = function checkNumeric(value, _ref) {
  var numbersOnly = _ref.numbersOnly,
    allowNegative = _ref.allowNegative,
    allowFloat = _ref.allowFloat;
  if (value === '') {
    return true;
  }
  if (numbersOnly) {
    var numeric = isNumeric(value);
    return numeric || allowNegative && value === '-' || allowFloat && value === '.' || allowNegative && allowFloat && value == '-.';
  }
  return true;
};
var isPossibleNumericStart = function isPossibleNumericStart(value, _ref2) {
  var allowFloat = _ref2.allowFloat,
    allowNegative = _ref2.allowNegative;
  if (allowFloat && value === '.') {
    return true;
  }
  if (allowNegative && value === '-') {
    return true;
  }
  if (allowNegative && allowFloat && value === '-.') {
    return true;
  }
  return !isNaN(value);
};
var checkFloat = function checkFloat(value, _ref3) {
  var allowFloat = _ref3.allowFloat;
  if (allowFloat === false) {
    return noDot(value) && isNumeric(value) && isInt(value * 1);
  }
};
var isFloat = function isFloat(n) {
  return Number(n) === n && n % 1 !== 0;
};
var isFloatString = function isFloatString(n) {
  var str = "".concat(n);
  return isFloat(str) || isNumeric(str) && str.indexOf('.') !== -1;
};
var checkPositive = function checkPositive(value, _ref4) {
  var allowNegative = _ref4.allowNegative;
  if (allowNegative === false) {
    return isNumeric(value) && value * 1 >= 0;
  }
};
var getInitialStateValue = function getInitialStateValue(props) {
  var value = props.value,
    defaultValue = props.defaultValue;
  if (value) {
    return null;
  }
  if (defaultValue || defaultValue === 0) {
    return getFormatedValue(defaultValue, props);
  }
  return '';
};
var getFormatedValue = function getFormatedValue(value, props) {
  if (value || value === 0) {
    var locale = props.locale,
      prefix = props.prefix,
      suffix = props.suffix,
      minValue = props.minValue,
      maxValue = props.maxValue,
      precision = props.precision;
    return (0, _getTransformedStringValues2.default)(value, {
      locale: locale,
      precision: precision,
      min: minValue,
      max: maxValue,
      prefix: prefix,
      suffix: suffix
    })[0];
  }
};
var getCurrentValue = function getCurrentValue(props, state) {
  var value = props.value,
    defaultValue = props.defaultValue;
  var formattedValue = state.formattedValue;
  if (value != null) {
    return value;
  }
  if (formattedValue == null) {
    return getFormatedValue(defaultValue, props);
  }
  return formattedValue;
};
var isControlled = function isControlled(props) {
  return props.value !== undefined;
};
var getInitialStatePrecision = function getInitialStatePrecision(props) {
  if (isControlledPrecision(props)) {
    return null;
  }
  return 0;
};
var isControlledPrecision = function isControlledPrecision(props) {
  return props.precision === 0 || !!props.precision;
};
var getSuffix = function getSuffix(props) {
  var suffix = props.suffix,
    format = props.format,
    currencySymbol = props.currencySymbol,
    currencyPosition = props.currencyPosition,
    locale = props.locale;
  if (suffix) {
    return suffix;
  }
  if (format === 'currency' && currencyPosition === 'end') {
    if (currencySymbol) {
      return currencySymbol;
    }
    return (0, _getCurrencyForCountryCode.default)(locale || (globalObject.navigator ? globalObject.navigator.language : ''));
  }
  if (format === 'percentage') {
    return '%';
  }
};
var getPrefix = function getPrefix(props) {
  var prefix = props.prefix,
    format = props.format,
    currencySymbol = props.currencySymbol,
    currencyPosition = props.currencyPosition,
    locale = props.locale;
  if (prefix) {
    return prefix;
  }
  if (format === 'currency' && currencyPosition === 'start') {
    if (currencySymbol) {
      return currencySymbol;
    }
    return (0, _getCurrencyForCountryCode.default)(locale || (globalObject.navigator ? globalObject.navigator.language : ''));
  }
};
var selectionContainsPosition = function selectionContainsPosition(selection, position) {
  if (selection.start === selection.end) {
    return false;
  }
  return selection.start <= position && selection.end > position;
};
var InovuaNumericInput = function (_Component) {
  (0, _inherits2.default)(InovuaNumericInput, _Component);
  var _super = _createSuper(InovuaNumericInput);
  function InovuaNumericInput(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaNumericInput);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderClearIcon", function (svgProps) {
      var result;
      if (_this.props.renderClearIcon && typeof _this.props.renderClearIcon === 'function') {
        result = _this.props.renderClearIcon({
          width: svgProps.width,
          height: svgProps.height
        });
      }
      if (result === undefined) {
        result = _react.default.createElement("svg", {
          style: _objectSpread({}, svgProps),
          viewBox: "0 0 10 10"
        }, _react.default.createElement("path", {
          fill: "none",
          fillRule: "evenodd",
          strokeLinecap: "round",
          strokeWidth: "1.33",
          d: "M1 1l8 8m0-8L1 9"
        }));
      }
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderArrowUpIcon", function (svgProps) {
      var height = svgProps.height;
      var result;
      if (_this.props.renderArrowUpIcon && typeof _this.props.renderArrowUpIcon === 'function') {
        result = _this.props.renderArrowUpIcon(_objectSpread({}, svgProps));
      }
      if (result === undefined) {
        result = _react.default.createElement("svg", {
          style: _objectSpread(_objectSpread({}, svgProps), {}, {
            height: height / 2
          }),
          viewBox: "0 0 10 5"
        }, _react.default.createElement("path", {
          fillRule: "evenodd",
          d: "M5.262.262l4.106 4.106c.144.144.144.379 0 .524-.07.069-.164.108-.262.108H.894c-.204 0-.37-.166-.37-.37 0-.099.039-.193.108-.262L4.738.262c.145-.145.38-.145.524 0z"
        }));
      }
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderArrowDownIcon", function (svgProps) {
      var height = svgProps.height;
      var result;
      if (_this.props.renderArrowDownIcon && typeof _this.props.renderArrowDownIcon === 'function') {
        result = _this.props.renderArrowDownIcon(_objectSpread({}, svgProps));
      }
      if (result === undefined) {
        result = _react.default.createElement("svg", {
          style: _objectSpread(_objectSpread({}, svgProps), {}, {
            height: height / 2
          }),
          viewBox: "0 0 10 5"
        }, _react.default.createElement("path", {
          fillRule: "evenodd",
          d: "M4.738 4.738L.632.632C.488.488.488.253.632.108.702.04.796 0 .894 0h8.212c.204 0 .37.166.37.37 0 .099-.039.193-.108.262L5.262 4.738c-.145.145-.38.145-.524 0z"
        }));
      }
      return result;
    });
    (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
    var value = isControlled(props) ? props.value : props.defaultValue;
    if (props.triggerChangeOnSpinDelay > 0) {
      _this.setValueOnSpin = (0, _debounce.default)(_this.setValueOnSpin, props.triggerChangeOnSpinDelay);
    }
    _this.state = {
      value: value,
      focused: false,
      formattedValue: getFormatedValue(value, props),
      spinDirection: null,
      intermediateValue: null
    };
    return _this;
  }
  (0, _createClass2.default)(InovuaNumericInput, [{
    key: "setInputRef",
    value: function setInputRef(el) {
      this.input = el;
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props,
        state = this.state;
      var toolPosition = props.toolPosition;
      var _this$p = this.p = this.getProps(props, state),
        formattedValue = _this$p.formattedValue,
        enableSpinnerTools = _this$p.enableSpinnerTools,
        className = _this$p.className,
        style = _this$p.style,
        enableClearButton = _this$p.enableClearButton,
        wrapperProps = _this$p.wrapperProps;
      var min = props.mim;
      if (min === undefined && !props.allowNegative) {
        min = 0;
      }
      var currentValue = state.focused ? this.p.value : this.p.formattedValue;
      if (currentValue == null) {
        currentValue = '';
      }
      var inputProps = props.inputProps || emptyObject;
      var inputClassName = (0, _join.default)("".concat(props.rootClassName, "__input"), inputProps.className);
      var input = _react.default.createElement("input", _objectSpread(_objectSpread({
        size: Math.max(1, props.size || 0),
        placeholder: this.props.placeholder
      }, inputProps), {}, {
        ref: this.setInputRef,
        type: "text",
        key: "input",
        className: inputClassName,
        disabled: props.disabled,
        value: currentValue,
        onWheel: this.handleWheel,
        onKeyDown: this.handleKeyDown,
        onKeyUp: this.handleKeyUp,
        onChange: this.handleChange,
        min: min
      }));
      var clearButtonWrapper = this.renderClearButtonWrapper();
      var spinnerToolWrapper = this.renderSpinnerToolsWrapper();
      var inputDisplay = [input, clearButtonWrapper, spinnerToolWrapper];
      if (toolPosition === 'start') {
        inputDisplay = [spinnerToolWrapper, clearButtonWrapper, input];
      }
      if (enableSpinnerTools === false) {
        inputDisplay = [input, spinnerToolWrapper, clearButtonWrapper];
      }
      if (toolPosition === 'start' && enableSpinnerTools === false) {
        inputDisplay = [clearButtonWrapper, input, spinnerToolWrapper];
      }
      var propsToWrapper = (0, _cleanProps.default)(wrapperProps, InovuaNumericInput.propTypes);
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, propsToWrapper), {}, {
        className: (0, _join.default)(className, wrapperProps ? wrapperProps.className : null),
        style: wrapperProps && wrapperProps.style ? _objectSpread(_objectSpread({}, style), wrapperProps.style) : style,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      }), inputDisplay);
    }
  }, {
    key: "renderClearButtonWrapper",
    value: function renderClearButtonWrapper() {
      var props = this.props,
        state = this.state;
      var enableClearButton = this.props.enableClearButton;
      var _this$p2 = this.p,
        clearButtonColor = _this$p2.clearButtonColor,
        clearButtonStyle = _this$p2.clearButtonStyle,
        clearButtonSize = _this$p2.clearButtonSize;
      var value = isControlled(props) ? props.value : state.value;
      var hasValue = state.intermediateValue != null ? true : value !== '' && value != null;
      var clearButtonWrapperClassName = (0, _join.default)("".concat(props.rootClassName, "__clear-button-wrapper"), (!hasValue || !enableClearButton) && "".concat(props.rootClassName, "__clear-button-wrapper--hidden"));
      return _react.default.createElement("div", {
        key: "clearButton",
        className: clearButtonWrapperClassName
      }, this.renderClearButton(_objectSpread({
        clearButtonColor: clearButtonColor,
        clearButtonStyle: clearButtonStyle,
        clearButtonSize: clearButtonSize
      }, getClearButtonClassNames(props))));
    }
  }, {
    key: "renderClearButton",
    value: function renderClearButton(config) {
      var clearButtonColor = config.clearButtonColor,
        clearButtonStyle = config.clearButtonStyle,
        clearButtonClassName = config.clearButtonClassName,
        clearButtonSize = config.clearButtonSize;
      var svgProps = {};
      var tabIndex = this.props.acceptClearToolFocus ? 0 : -1;
      if (clearButtonColor) {
        svgProps.fill = clearButtonColor;
      }
      if (clearButtonSize) {
        if (Array.isArray(clearButtonSize)) {
          svgProps.width = clearButtonSize[0];
          svgProps.height = clearButtonSize[1];
        } else {
          svgProps.width = clearButtonSize;
          svgProps.height = clearButtonSize;
        }
      }
      return _react.default.createElement("button", {
        key: "clearButton",
        type: "button",
        onClick: this.handleClearButtonClick,
        onMouseDown: preventDefault,
        className: clearButtonClassName,
        style: _objectSpread({}, clearButtonStyle),
        tabIndex: tabIndex
      }, this.renderClearIcon(svgProps));
    }
  }, {
    key: "renderSpinnerToolsWrapper",
    value: function renderSpinnerToolsWrapper() {
      var props = this.props;
      var enableSpinnerTools = props.enableSpinnerTools,
        rtl = props.rtl;
      var _this$p3 = this.p,
        arrowColor = _this$p3.arrowColor,
        arrowStyle = _this$p3.arrowStyle,
        arrowUpStyle = _this$p3.arrowUpStyle,
        arrowDownStyle = _this$p3.arrowDownStyle,
        spinDirection = _this$p3.spinDirection,
        arrowSize = _this$p3.arrowSize;
      var spinnerToolsWrapperClassName = enableSpinnerTools ? "".concat(props.rootClassName, "__spinner-wrapper ").concat(props.rootClassName, "__spinner-wrapper--").concat(rtl ? 'rtl' : 'ltr') : "".concat(props.rootClassName, "__spinner-wrapper-hidden ").concat(props.rootClassName, "__spinner-wrapper-hidden--").concat(rtl ? 'rtl' : 'ltr');
      return _react.default.createElement("div", {
        key: "spinnerTool",
        className: spinnerToolsWrapperClassName
      }, this.renderSpinnerTools(_objectSpread({
        arrowColor: arrowColor,
        arrowStyle: arrowStyle,
        arrowUpStyle: arrowUpStyle,
        arrowDownStyle: arrowDownStyle,
        spinDirection: spinDirection,
        arrowSize: arrowSize
      }, getArrowClasses(spinDirection, props))));
    }
  }, {
    key: "renderSpinnerTools",
    value: function renderSpinnerTools(config) {
      var arrowColor = config.arrowColor,
        arrowStyle = config.arrowStyle,
        arrowUpStyle = config.arrowUpStyle,
        arrowDownStyle = config.arrowDownStyle,
        upArrowClass = config.upArrowClass,
        downArrowClass = config.downArrowClass,
        arrowSize = config.arrowSize;
      var svgProps = {};
      if (arrowColor) {
        svgProps.fill = arrowColor;
      }
      if (arrowSize) {
        if (Array.isArray(arrowSize)) {
          svgProps.width = arrowSize[0];
          svgProps.height = arrowSize[1];
        } else {
          svgProps.width = arrowSize;
          svgProps.height = arrowSize;
        }
      }
      var arrowEvents = this.getArrowEvents();
      return [_react.default.createElement("span", _objectSpread(_objectSpread({
        key: "up"
      }, arrowEvents.upEvents), {}, {
        className: upArrowClass,
        style: _objectSpread(_objectSpread({}, arrowStyle), arrowUpStyle)
      }), this.renderArrowUpIcon(svgProps)), _react.default.createElement("span", _objectSpread(_objectSpread({
        key: "down"
      }, arrowEvents.downEvents), {}, {
        className: downArrowClass,
        style: _objectSpread(_objectSpread({}, arrowStyle), arrowDownStyle)
      }), this.renderArrowDownIcon(svgProps))];
    }
  }, {
    key: "getArrowEvents",
    value: function getArrowEvents() {
      return {
        upEvents: (0, _defineProperty2.default)({}, _eventNames.default.onMouseDown, this.handleArrowDown.bind(this, 1)),
        downEvents: (0, _defineProperty2.default)({}, _eventNames.default.onMouseDown, this.handleArrowDown.bind(this, -1))
      };
    }
  }, {
    key: "handleClearButtonClick",
    value: function handleClearButtonClick(event) {
      this.setState({
        focused: true
      });
      this.setValue(null);
      this.focus();
    }
  }, {
    key: "handleArrowDown",
    value: function handleArrowDown(shiftStep, event) {
      var _this2 = this;
      event.preventDefault();
      var step = this.props.step;
      var target = _hasTouch.default ? event.target : window;
      var eventName = _hasTouch.default ? 'touchend' : 'click';
      var onUpEvent = function onUpEvent() {
        _this2.handleMouseUp();
        target.removeEventListener(eventName, onUpEvent, true);
      };
      target.addEventListener(eventName, onUpEvent, true);
      var shiftKey = event.shiftKey;
      var direction = shiftStep > 0 ? 1 : -1;
      var spinConfig = {
        step: Math.abs(step)
      };
      this.stepTo(direction, spinConfig);
      this.handleArrowDownTimeoutId = setTimeout(function () {
        _this2.setState({
          shiftKey: shiftKey,
          spinDirection: direction
        });
        _this2.startSpin(direction, spinConfig);
      }, 300);
    }
  }, {
    key: "handleMouseUp",
    value: function handleMouseUp() {
      this.stopSpin();
      this.setState({
        spinDirection: null,
        shiftKey: null
      });
    }
  }, {
    key: "getTransformedStringValues",
    value: function getTransformedStringValues(value) {
      var _this$p4 = this.p,
        suffix = _this$p4.suffix,
        prefix = _this$p4.prefix,
        locale = _this$p4.locale,
        precision = _this$p4.precision,
        isControlledPrecision = _this$p4.isControlledPrecision,
        minValue = _this$p4.minValue,
        maxValue = _this$p4.maxValue;
      return (0, _getTransformedStringValues2.default)(value, {
        locale: locale,
        precision: isControlledPrecision && precision,
        min: minValue,
        max: maxValue,
        suffix: suffix,
        prefix: prefix
      });
    }
  }, {
    key: "handleFocus",
    value: function handleFocus(event) {
      var onFocus = this.props.onFocus;
      if (event.target != this.input) {
        return;
      }
      this.setState({
        focused: true
      });
      if (this.props.inputProps && this.props.inputProps.onFocus) {
        this.props.inputProps.onFocus(event);
      }
      if (onFocus) {
        onFocus(event);
      }
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(event) {
      this.setState({
        focused: false
      });
      if (this.isSpinning()) {
        this.stopSpin();
      }
      if (this.state.intermediateValue != null) {
        var value = (0, _clamp.default)(parseFloat(this.state.intermediateValue), this.props.minValue, this.props.maxValue);
        if (!this.props.allowEmpty && (isNaN(value) || value == null)) {
          value = this.props.valueOnEmpty !== undefined ? this.props.valueOnEmpty : this.props.minValue || 0;
        }
        this.setValue(value);
      }
      if (this.props.inputProps && this.props.inputProps.onBlur) {
        this.props.inputProps.onBlur(event);
      }
      var onBlur = this.props.onBlur;
      if (onBlur) {
        onBlur(event);
      }
    }
  }, {
    key: "handleChange",
    value: function handleChange(event) {
      event.stopPropagation();
      if (this.props.inputProps && this.props.inputProps.onChange) {
        this.props.inputProps.onChange(event);
      }
      var value = event.target.value;
      this.setValue(value);
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        silent = _ref5.silent;
      if (this.props.allowNegative && value === '-') {
        this.setIntermediateValue(value);
        return;
      }
      if (this.props.allowFloat && value === '.') {
        this.setIntermediateValue(value);
        return;
      }
      if (this.props.allowFloat && this.props.allowNegative && value === '-.') {
        this.setIntermediateValue(value);
        return;
      }
      var parseResult = parseFloat(value);
      var parsedValue = isNaN(parseResult) ? null : (0, _clamp.default)(parseResult, this.props.minValue, this.props.maxValue);
      var isSameRepresentation = parsedValue === null || "".concat(value) === parsedValue.toString();
      if (!this.props.allowEmpty && parsedValue === null) {
        this.setIntermediateValue(value || '');
        return;
      }
      if (isSameRepresentation) {
        this.setIntermediateValue(null);
        this.onChange(parsedValue);
      } else {
        this.setIntermediateValue(value);
      }
    }
  }, {
    key: "setIntermediateValue",
    value: function setIntermediateValue(intermediateValue, callback) {
      if (intermediateValue === this.state.intermediateValue) {
        return;
      }
      this.setState({
        intermediateValue: intermediateValue
      });
    }
  }, {
    key: "onChange",
    value: function onChange(value) {
      if (!isControlled(this.props)) {
        this.setState({
          value: value
        });
      }
      var allowNegative = this.props.allowNegative;
      var isPositive = checkPositive(value, {
        allowNegative: allowNegative
      });
      if (!allowNegative && !isPositive) {
        return;
      }
      if (this.props.onChange) {
        this.props.onChange(value);
      }
    }
  }, {
    key: "handleBackspaceKeyDown",
    value: function handleBackspaceKeyDown(event) {
      var _this3 = this;
      var _this$p5 = this.p,
        isControlledPrecision = _this$p5.isControlledPrecision,
        currentValue = _this$p5.currentValue,
        decimalDelimiter = _this$p5.decimalDelimiter;
      if (isControlledPrecision) {
        var currentSelection = (0, _getSelectionRange.default)(this.input);
        var decimalPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
        if (currentSelection.end - 1 > decimalPosition) {
          this.backspaceOnControlledPrecision = true;
        }
        if (currentSelection.end - 1 === decimalPosition) {
          (0, _raf.default)(function () {
            (0, _setCaretPosition.default)(_this3.input, currentSelection.end - 1);
          });
          event.preventDefault();
          event.stopPropagation();
        }
      }
    }
  }, {
    key: "handleDigitKeyDown",
    value: function handleDigitKeyDown() {
      var _this$p6 = this.p,
        isControlledPrecision = _this$p6.isControlledPrecision,
        currentValue = _this$p6.currentValue,
        decimalDelimiter = _this$p6.decimalDelimiter;
      if (isControlledPrecision) {
        var currentSelection = (0, _getSelectionRange.default)(this.input);
        var decimalPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
        if (currentSelection.end > decimalPosition) {
          this.digitInputOnControlledPrecision = currentSelection.end > decimalPosition;
        }
      }
    }
  }, {
    key: "handleDecimalDelimiterKeyDown",
    value: function handleDecimalDelimiterKeyDown(event) {
      var _this$p7 = this.p,
        allowFloat = _this$p7.allowFloat,
        value = _this$p7.value;
      if (!allowFloat) {
        event.preventDefault();
        return;
      }
      var selectedText = this.getSelectedText();
      if (selectedText == '.') {
        return;
      }
      if (isFloatString(selectedText)) {
        return;
      }
      if (isFloatString(value)) {
        event.preventDefault();
        return;
      }
    }
  }, {
    key: "getSelectedText",
    value: function getSelectedText() {
      var _getSelectedRange = (0, _getSelectionRange.default)(this.input),
        start = _getSelectedRange.start,
        end = _getSelectedRange.end;
      var value = "".concat(this.getValue());
      return value.substring(start, end);
    }
  }, {
    key: "handleSelectionOverDecimalDelimiter",
    value: function handleSelectionOverDecimalDelimiter(event, currentSelection) {
      var _this$p8 = this.p,
        decimalDelimiter = _this$p8.decimalDelimiter,
        currentValue = _this$p8.currentValue,
        isControlledPrecision = _this$p8.isControlledPrecision,
        prefix = _this$p8.prefix,
        suffix = _this$p8.suffix;
      currentSelection = currentSelection || (0, _getSelectionRange.default)(this.input);
      var selectionStartsAtBeginningOfNumber = currentSelection.start === 0;
      if (prefix) {
        selectionStartsAtBeginningOfNumber = currentSelection.start <= prefix.length + 1;
      }
      var selectionEndsAtEndOfNumber = currentSelection.end === currentValue.length;
      if (suffix) {
        selectionEndsAtEndOfNumber = currentSelection.end >= suffix.length + 1;
      }
      if (selectionStartsAtBeginningOfNumber && selectionEndsAtEndOfNumber) {
        return;
      }
    }
  }, {
    key: "handleKeyUp",
    value: function handleKeyUp(event) {
      var key = event.key;
      if (this.props.inputProps && this.props.inputProps.onKeyUp) {
        this.props.inputProps.onKeyUp(event);
      }
      var name = "handle".concat(toUpperFirst(key), "KeyUp");
      if (this[name]) {
        this[name](event);
      }
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var key = event.key;
      var _this$p9 = this.p,
        decimalDelimiter = _this$p9.decimalDelimiter,
        decimalDelimiterPosition = _this$p9.decimalDelimiterPosition;
      if (this.props.inputProps && this.props.inputProps.onKeyDown) {
        this.props.inputProps.onKeyDown(event);
      }
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
      if (!key) {
        return;
      }
      var currentSelection = (0, _getSelectionRange.default)(this.input);
      if (selectionContainsPosition(currentSelection, decimalDelimiterPosition)) {
        this.handleSelectionOverDecimalDelimiter(event, currentSelection);
      }
      if (key.match(/[0-9]/)) {
        this.handleDigitKeyDown(event);
        return;
      }
      if (key === decimalDelimiter) {
        this.handleDecimalDelimiterKeyDown(event);
        return;
      }
      if (key === '-') {
        var caretPos = this.getSelectionStart();
        if (!this.props.allowNegative || caretPos) {
          event.preventDefault();
        }
        return;
      }
      var isPrintableCharacter = key.length == 1;
      if (isPrintableCharacter && !(event.metaKey || event.ctrlKey)) {
        event.preventDefault();
      }
      var name = "handle".concat(toUpperFirst(key), "KeyDown");
      if (this[name]) {
        this[name](event);
      }
    }
  }, {
    key: "handleArrowDownKeyDown",
    value: function handleArrowDownKeyDown(event) {
      this.handleArrowKeySpin(-1, event);
    }
  }, {
    key: "handleArrowUpKeyDown",
    value: function handleArrowUpKeyDown(event) {
      this.handleArrowKeySpin(1, event);
    }
  }, {
    key: "handleArrowKeySpin",
    value: function handleArrowKeySpin(direction, event) {
      var _this4 = this;
      if (this.isSpinning()) {
        event.preventDefault();
        event.stopPropagation();
        return;
      }
      if (this.props.spinOnArrowKeys) {
        event.preventDefault();
        event.stopPropagation();
        if (!this.isSpinning()) {
          var config = {
            shiftKey: event.shiftKey,
            event: event
          };
          this.stepTo(direction, config);
          this.spinTimeoutId = setTimeout(function () {
            _this4.startSpin(direction, config);
          }, 120);
        }
      }
    }
  }, {
    key: "handleArrowUpKeyUp",
    value: function handleArrowUpKeyUp() {
      this.onSpinKeyUp();
    }
  }, {
    key: "handleArrowDownKeyUp",
    value: function handleArrowDownKeyUp() {
      this.onSpinKeyUp();
    }
  }, {
    key: "onSpinKeyUp",
    value: function onSpinKeyUp() {
      this.props.spinOnArrowKeys && this.stopSpin();
    }
  }, {
    key: "getInput",
    value: function getInput() {
      return this.input;
    }
  }, {
    key: "getNumericValue",
    value: function getNumericValue() {
      return this.p.numericValue;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.p.value;
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return !!this.state.focused;
    }
  }, {
    key: "getStepValue",
    value: function getStepValue(props, direction, config) {
      config = config || {};
      var value = this.p.value;
      var stepValue = config.step || props.step;
      if (this.state.shiftKey || config.shiftKey && props.shiftStep) {
        stepValue = props.shiftStep;
      }
      var theValue = isNumeric(this.p.value) ? value * 1 + direction * stepValue : this.props.initialStep || 0;
      return (0, _clamp.default)(Math.round(theValue * 1000) / 1000, this.props.minValue, this.props.maxValue);
    }
  }, {
    key: "stepTo",
    value: function stepTo(direction, config) {
      config = config || {};
      this.stepToTriggered = true;
      var props = this.props;
      var step = config.step || props.step;
      var allowNegative = props.allowNegative;
      if (step != null) {
        var stepFn = typeof props.stepFn === 'function' ? props.stepFn : this.getStepValue;
        var value = stepFn(props, direction, config);
        var isPositive = checkPositive(value, {
          allowNegative: allowNegative
        });
        if (!allowNegative && !isPositive) {
          return;
        }
        this.spinValue = value;
        if (config.triggerChangeOnSpin) {
          if (props.triggerChangeOnSpinDelay > 0) {
            this.setIntermediateValue(value);
          }
          this.setValueOnSpin(value);
        } else {
          this.setIntermediateValue(value);
        }
      }
    }
  }, {
    key: "setValueOnSpin",
    value: function setValueOnSpin(value) {
      this.setValue(value);
    }
  }, {
    key: "stopSpin",
    value: function stopSpin() {
      clearTimeout(this.spinTimeoutId);
      clearTimeout(this.handleArrowDownTimeoutId);
      clearInterval(this.spinIntervalId);
      this.setValue(this.spinValue);
      this.handleArrowDownTimeoutId = null;
      this.spinTimeoutId = null;
      this.spinIntervalId = null;
    }
  }, {
    key: "startSpin",
    value: function startSpin(direction, config) {
      if (this.spinIntervalId) {
        clearInterval(this.spinIntervalId);
      }
      this.stepToTriggered = false;
      this.spinValue = this.getValue();
      var stepTo = this.stepTo.bind(this, direction, _objectSpread({
        triggerChangeOnSpin: this.props.triggerChangeOnSpin
      }, config));
      this.spinIntervalId = setInterval(stepTo, this.props.stepDelay);
    }
  }, {
    key: "isSpinning",
    value: function isSpinning() {
      return this.spinIntervalId != null;
    }
  }, {
    key: "handleWheel",
    value: function handleWheel(event) {
      var props = this.props;
      if ((props.requireFocusOnStep && this.isFocused() || !props.requireFocusOnStep) && props.stepOnWheel && props.step) {
        event.preventDefault();
        var nativeEvent = event.nativeEvent;
        var y = nativeEvent.wheelDeltaY || nativeEvent.wheelDelta || -nativeEvent.deltaY;
        y = y < 0 ? -1 : 1;
        this.stepTo(y, {
          shiftKey: event.shiftKey,
          event: event
        });
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: "getSelectionStart",
    value: function getSelectionStart() {
      return (0, _getSelectionStart2.default)(this.input);
    }
  }, {
    key: "getProps",
    value: function getProps(props, state) {
      props = props || this.props;
      state = state || this.state;
      var suffix = getSuffix(props);
      var prefix = getPrefix(props);
      var currentValue = getCurrentValue(_objectSpread(_objectSpread({}, props), {}, {
        suffix: suffix,
        prefix: prefix
      }), state);
      var decimalDelimiter = (0, _getDecimalDelimiter.default)(props.locale);
      var decimalDelimiterPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
      var className = (0, _join.default)(props.rootClassName, props.theme && "".concat(props.rootClassName, "--theme-").concat(props.theme), "".concat(props.rootClassName, "--").concat(props.rtl ? 'rtl' : 'ltr'), props.disabled && "".concat(props.rootClassName, "--disabled"), state.focused && "".concat(props.rootClassName, "--focused"), props.enableSpinnerTools && "".concat(props.rootClassName, "--enable-spinner-tools"), props.enableClearButton && "".concat(props.rootClassName, "--enable-clear-button"), props.className);
      var controlled = isControlled(props);
      var value = controlled ? props.value : state.value;
      if (state.intermediateValue !== null) {
        value = state.intermediateValue;
      }
      var numericValue = Number(value);
      var p = _objectSpread(_objectSpread({}, props), {}, {
        className: className,
        isControlled: controlled,
        isControlledPrecision: isControlledPrecision(props),
        value: value,
        numericValue: numericValue,
        currentValue: currentValue,
        suffix: suffix,
        prefix: prefix,
        decimalDelimiter: decimalDelimiter,
        decimalDelimiterPosition: decimalDelimiterPosition
      });
      p.formattedValue = getFormatedValue(value, p);
      return p;
    }
  }]);
  return InovuaNumericInput;
}(_react.Component);
InovuaNumericInput.defaultProps = {
  rootClassName: 'inovua-react-toolkit-numeric-input',
  spinOnArrowKeys: true,
  numbersOnly: true,
  step: 1,
  shiftStep: 10,
  requireFocusOnStep: true,
  stepOnWheel: true,
  allowNegative: true,
  allowFloat: true,
  triggerChangeOnSpin: true,
  triggerChangeOnSpinDelay: 80,
  stepDelay: 60,
  prefix: '',
  suffix: '',
  theme: 'default-light',
  format: 'number',
  currencyPosition: 'end',
  enableSpinnerTools: true,
  enableClearButton: true,
  acceptClearToolFocus: false,
  allowEmpty: true,
  toolPosition: 'end',
  arrowSize: 10,
  clearButtonSize: 10,
  inputProps: {}
};
InovuaNumericInput.propTypes = {
  rootClassName: _propTypes.default.string,
  stepDelay: _propTypes.default.number,
  step: _propTypes.default.number,
  initialStep: _propTypes.default.number,
  valueOnEmpty: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  minValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  maxValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  onChange: _propTypes.default.func,
  triggerChangeOnSpin: _propTypes.default.bool,
  allowEmpty: _propTypes.default.bool,
  allowFloat: _propTypes.default.bool,
  requireFocusOnStep: _propTypes.default.bool,
  spinOnArrowKeys: _propTypes.default.bool,
  numbersOnly: _propTypes.default.bool,
  shiftStep: _propTypes.default.number,
  stepOnWheel: _propTypes.default.bool,
  allowNegative: _propTypes.default.bool,
  precision: _propTypes.default.number,
  format: _propTypes.default.oneOf(['currency', 'number', 'percentage']),
  locale: _propTypes.default.string,
  prefix: _propTypes.default.string,
  suffix: _propTypes.default.string,
  theme: _propTypes.default.string,
  arrowColor: _propTypes.default.string,
  arrowStyle: _propTypes.default.object,
  currencySymbol: _propTypes.default.string,
  currencyPosition: _propTypes.default.oneOf(['start', 'end']),
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  wrapperProps: _propTypes.default.object,
  disabled: _propTypes.default.bool,
  acceptClearToolFocus: _propTypes.default.bool,
  renderClearIcon: _propTypes.default.func,
  clearButtonSize: _propTypes.default.number,
  clearButtonColor: _propTypes.default.string,
  clearButtonStyle: _propTypes.default.object,
  clearButtonClassName: _propTypes.default.string,
  enableSpinnerTools: _propTypes.default.bool,
  enableClearButton: _propTypes.default.bool,
  toolPosition: _propTypes.default.oneOf(['start', 'end']),
  arrowSize: _propTypes.default.number,
  arrowDownStyle: _propTypes.default.object,
  arrowUpStyle: _propTypes.default.object,
  inputProps: _propTypes.default.object,
  rtl: _propTypes.default.bool
};
globalObject.isNumeric = isNumeric;
var _default = InovuaNumericInput;
exports.default = _default;