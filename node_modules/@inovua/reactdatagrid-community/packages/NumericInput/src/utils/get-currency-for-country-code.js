/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getCurrencyForCountryCode;
var _countryCurrencyCodes = _interopRequireDefault(require("../data/countryCurrencyCodes"));
var _countries = _interopRequireDefault(require("../data/countries"));
var _find = _interopRequireDefault(require("./find"));
var countriesByCountryCode = _countries.default.reduce(function (accumulator, country) {
  accumulator[country.code] = country.name;
  accumulator[country.code.toLowerCase()] = country.name;
  return accumulator;
}, {});
function getCurrencyForCountryCode(locale) {
  var currencyDisplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'symbol';
  var code = locale.split('-')[1];
  var countryNameByCode = countriesByCountryCode[code];
  if (countryNameByCode) {
    var country = countriesByCountryCode[code] && countriesByCountryCode[code].toLowerCase();
    var currency = (0, _find.default)(_countryCurrencyCodes.default, function (countryCode) {
      return (countryCode.countries || []).indexOf(country) !== -1;
    });
    if (currency) {
      return new Number(1).toLocaleString(locale, {
        style: 'currency',
        currency: currency.code,
        currencyDisplay: currencyDisplay
      }).replace(/[0-9\.\,]/g, '');
    }
    return '';
  } else {
    console.error("Cannot get currency based on country code. Country ".concat(code, " not found."));
    return '';
  }
}