/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.countDecimalDigits = void 0;
exports.default = getTransformedStringValues;
exports.getDecimalDelimiterPosition = void 0;
var _getDecimalDelimiter = _interopRequireDefault(require("./get-decimal-delimiter"));
var _getDigitGroupDelimiter = _interopRequireDefault(require("./get-digit-group-delimiter"));
var _convertStringToNumber = _interopRequireDefault(require("./convert-string-to-number"));
var getDecimalDelimiterPosition = function getDecimalDelimiterPosition(value, decimalDelimiter) {
  var string = value && value.toString();
  var position = string && string.indexOf(decimalDelimiter);
  return position !== -1 ? position : false;
};
exports.getDecimalDelimiterPosition = getDecimalDelimiterPosition;
var countDecimalDigits = function countDecimalDigits(string, decimalDelimiter, decimalPosition) {
  var position = decimalPosition || getDecimalDelimiterPosition(string, decimalDelimiter);
  if (isNaN(position)) {
    return 0;
  }
  if (typeof position === 'number' && position < string.length) {
    return string.length - position - 1;
  }
  return 0;
};
exports.countDecimalDigits = countDecimalDigits;
function getTransformedStringValues(stringInput) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var internalApi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (typeof stringInput !== 'string') {
    stringInput += '';
  }
  if (!stringInput) {
    return ['', null];
  }
  stringInput = stringInput.replace(/[^0-9\,\.\-\+]/g, '');
  if (stringInput === '-' || stringInput === '-.') {
    return [stringInput, null];
  }
  var locale = props.locale,
    _props$min = props.min,
    min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,
    _props$max = props.max,
    max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max,
    suffix = props.suffix,
    prefix = props.prefix;
  var precision = props.precision || null;
  if (precision > 20) {
    precision = 20;
  }
  var _internalApi$getDecim = internalApi.getDecimalDelimiter,
    getDecimalDelimiter = _internalApi$getDecim === void 0 ? _getDecimalDelimiter.default : _internalApi$getDecim,
    _internalApi$getDigit = internalApi.getDigitGroupDelimiter,
    getDigitGroupDelimiter = _internalApi$getDigit === void 0 ? _getDigitGroupDelimiter.default : _internalApi$getDigit,
    _internalApi$convertS = internalApi.convertStringToNumber,
    convertStringToNumber = _internalApi$convertS === void 0 ? _convertStringToNumber.default : _internalApi$convertS;
  var decimalDelimiter = getDecimalDelimiter(locale);
  if (stringInput === decimalDelimiter) {
    return [stringInput, null];
  }
  var decimalDelimiterPosition = getDecimalDelimiterPosition(stringInput, decimalDelimiter);
  var decimalDigitsInInput = countDecimalDigits(stringInput, decimalDelimiter, decimalDelimiterPosition);
  if (precision || precision === 0 && decimalDigitsInInput > precision) {
    stringInput = stringInput.substring(0, stringInput.length - (decimalDigitsInInput - precision));
  }
  var digitGroupDelimiter = getDigitGroupDelimiter(locale);
  var parsedResult = convertStringToNumber(stringInput, {
    digitGroupDelimiter: digitGroupDelimiter,
    decimalDelimiter: decimalDelimiter,
    min: min,
    max: max
  });
  if (isNaN(parsedResult)) {
    return ['', null];
  }
  var numberWasClamped = parsedResult === min || parsedResult === max;
  if (numberWasClamped) {
    decimalDigitsInInput = 0;
  }
  var formatingOptions = {
    maximumFractionDigits: precision ? Math.min(precision, 20) : 20,
    minimumFractionDigits: Math.min(precision || decimalDigitsInInput, 20)
  };
  var stringRepresentation = parsedResult.toLocaleString(locale, formatingOptions);
  if (!precision && !numberWasClamped && !decimalDigitsInInput && decimalDelimiterPosition === stringInput.length - 1) {
    stringRepresentation += '.';
  }
  if (prefix) {
    stringRepresentation = "".concat(prefix, " ").concat(stringRepresentation);
  }
  if (suffix) {
    stringRepresentation = "".concat(stringRepresentation, " ").concat(suffix);
  }
  return [stringRepresentation, parsedResult];
}