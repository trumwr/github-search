/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _prepareClassName = _interopRequireDefault(require("./prepareClassName"));
var _uglified = _interopRequireDefault(require("../../../packages/uglified"));
var _getGlobal = require("../../../getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var InovuaButton = function (_Component) {
  (0, _inherits2.default)(InovuaButton, _Component);
  var _super = _createSuper(InovuaButton);
  function InovuaButton(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaButton);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps, prevState) {
      if (!prevProps.disabled && _this.props.disabled && prevState.focused) {
        _this.handleBlur();
        _this.setState({
          mouseOver: false
        });
      }
      if (prevProps.disabled && !_this.props.disabled && _this.state.focused) {
        _this.handleBlur();
      }
    });
    _this.state = {
      mouseOver: false,
      active: false,
      pressed: _this.props.defaultPressed
    };
    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMouseEnter = _this.handleMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMouseLeave = _this.handleMouseLeave.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMouseDown = _this.handleMouseDown.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMouseUp = _this.handleMouseUp.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2.default)(_this));
    _this.getRootRef = function (ref) {
      _this.rootNode = ref;
    };
    return _this;
  }
  (0, _createClass2.default)(InovuaButton, [{
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var key = event.key;
      if (this.tagName != 'button' && key == 'Enter') {
        this.props.onClick(event);
        event.preventDefault();
      }
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var buttonStates = this.getButtonStates();
      var style = this.prepareStyle(this.props, buttonStates);
      var className = (0, _prepareClassName.default)(buttonStates, props);
      var domProps = _objectSpread(_objectSpread({}, (0, _cleanProps.default)(this.props, InovuaButton.propTypes)), {}, {
        style: style,
        className: className,
        onClick: this.handleClick,
        onKeyDown: this.handleKeyDown,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        onMouseDown: this.handleMouseDown,
        onMouseUp: this.handleMouseUp,
        href: props.href
      });
      var topBottomVerticalAlign = this.props.verticalAlign == 'top' || this.props.verticalAlign == 'bottom';
      var avoidButtonTag = !!this.props.icon || topBottomVerticalAlign;
      var TagName = this.props.tagName;
      if (!TagName && !avoidButtonTag) {
        TagName = 'button';
      }
      if (TagName == 'button' && avoidButtonTag) {
        if (this.props.showWarnings && console && console.warn) {
          console.warn('Button html tags are not fully compatible with flexbox, so we\'re rendering a "div" instead. See http://stackoverflow.com/questions/35464067/flexbox-not-working-on-button-element-in-some-browsers for details.');
        }
      }
      if (props.href) {
        TagName = 'a';
      }
      TagName = TagName || 'div';
      this.tagName = TagName;
      if (TagName === 'div' && domProps.tabIndex === undefined && !this.props.disabled) {
        domProps.tabIndex = 0;
      }
      return _react.default.createElement(TagName, _objectSpread(_objectSpread({}, domProps), {}, {
        ref: this.getRootRef,
        children: this.prepareChildren(props, buttonStates)
      }));
    }
  }, {
    key: "handleFocus",
    value: function handleFocus(event) {
      if (this.props.disabled) {
        return;
      }
      this.setState({
        focused: true
      });
      this.props.onFocus(event);
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(event) {
      this.setState({
        focused: false
      });
      this.props.onBlur(event);
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      var props = this.props;
      if (props.disabled) {
        event.preventDefault();
        event.stopPropagation();
        return;
      }
      if (this.isToggleButon()) {
        this.toggle();
      }
      this.props.onClick(event);
    }
  }, {
    key: "isToggleButon",
    value: function isToggleButon() {
      return this.isPressed() !== undefined;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      var isPressed = this.isPressed();
      var newPressed = !isPressed;
      if (!this.isPressedControlled()) {
        this.setState({
          pressed: newPressed
        });
      }
      this.props.onToggle(newPressed);
    }
  }, {
    key: "isToggleButton",
    value: function isToggleButton() {
      return this.props.defaultPressed !== null || this.props.pressed !== null;
    }
  }, {
    key: "handleMouseEnter",
    value: function handleMouseEnter(event) {
      var props = this.props;
      if (props.disabled) {
        return;
      }
      this.setState({
        mouseOver: true
      });
      this.props.onMouseEnter(event);
    }
  }, {
    key: "handleMouseLeave",
    value: function handleMouseLeave(event) {
      var props = this.props;
      if (props.disabled) {
        return;
      }
      this.setState({
        mouseOver: false
      });
      this.props.onMouseLeave(event);
    }
  }, {
    key: "handleMouseUp",
    value: function handleMouseUp(event) {
      var props = this.props;
      if (props.disabled) {
        return;
      }
      this.setState({
        active: false
      });
      globalObject.removeEventListener('mouseup', this.handleMouseUp);
      props.onMouseUp(event);
      props.onDeactivate(event);
    }
  }, {
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      var props = this.props;
      if (props.disabled) {
        return;
      }
      this.setState({
        active: true
      });
      globalObject.addEventListener('mouseup', this.handleMouseUp);
      props.onMouseDown(event);
      props.onActivate(event);
    }
  }, {
    key: "isIconFirst",
    value: function isIconFirst() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var iconPosition = props.iconPosition,
        rtl = props.rtl;
      var iconFirst = iconPosition == 'left' && !rtl || iconPosition == 'top' || rtl && iconPosition == 'start' || rtl && iconPosition == 'right' || !rtl && iconPosition == 'start';
      return iconFirst;
    }
  }, {
    key: "prepareChildren",
    value: function prepareChildren(props, buttonStates) {
      var _this2 = this;
      var children = props.children;
      children = _react.default.createElement("div", {
        key: "text",
        className: "".concat(this.props.rootClassName, "__text"),
        children: children
      });
      var icon = this.props.icon;
      var rtl = this.props.rtl;
      if (icon) {
        var iconPosition = this.props.iconPosition;
        var iconFirst = this.isIconFirst(this.props);
        if (typeof icon == 'function') {
          icon = icon(buttonStates);
        }
        var wrapIcon = function wrapIcon(icon) {
          return _react.default.createElement("div", {
            key: "iconWrapper",
            className: "".concat(_this2.props.rootClassName, "__icon-wrap") + (_this2.props.disabled ? " ".concat(_this2.props.rootClassName, "__icon-wrap--disabled") : ''),
            children: icon
          });
        };
        if (iconFirst) {
          children = [wrapIcon(icon), children];
        } else {
          children = [children, wrapIcon(icon)];
        }
      }
      if (this.props.renderChildren) {
        children = this.props.renderChildren(children);
      }
      return children;
    }
  }, {
    key: "getButtonStates",
    value: function getButtonStates(props) {
      props = props || this.props;
      return {
        disabled: props.disabled,
        children: props.children,
        active: this.isActive(),
        pressed: this.isPressed(),
        over: this.isOver(),
        focused: this.isFocused(),
        iconFirst: this.isIconFirst(),
        rtl: this.props.rtl,
        icon: this.props.icon,
        ellipsis: props.ellipsis,
        align: props.align,
        verticalAlign: props.verticalAlign,
        wrap: props.wrap,
        overflow: props.overflow,
        iconPosition: this.props.icon ? this.props.iconPosition : undefined
      };
    }
  }, {
    key: "prepareStyle",
    value: function prepareStyle() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var buttonStates = arguments.length > 1 ? arguments[1] : undefined;
      var style = typeof props.style !== 'function' ? (0, _assign.default)({}, props.style) : props.style(props, buttonStates);
      if (props.disabled) {
        (0, _assign.default)(style, props.disabledStyle);
      } else {
        if (this.isPressed()) {
          (0, _assign.default)(style, props.pressedStyle);
        }
        if (this.isFocused()) {
          (0, _assign.default)(style, props.focusedStyle);
        }
        if (this.isOver()) {
          (0, _assign.default)(style, props.overStyle);
        }
        if (this.isActive()) {
          (0, _assign.default)(style, this.props.activeStyle);
        }
      }
      return style;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.props.activeState == null ? !!this.state.active : this.props.activeState;
    }
  }, {
    key: "isOver",
    value: function isOver() {
      return this.props.overState == null ? !!this.state.mouseOver : this.props.overState;
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.props.focusedState == null ? !!this.state.focused : this.props.focusedState;
    }
  }, {
    key: "isPressedControlled",
    value: function isPressedControlled() {
      return this.props.pressed != null;
    }
  }, {
    key: "isPressed",
    value: function isPressed() {
      return this.isPressedControlled() ? this.props.pressed : this.state.pressed;
    }
  }, {
    key: "getRootNode",
    value: function getRootNode() {
      return this.rootNode;
    }
  }]);
  return InovuaButton;
}(_react.Component);
function emptyFn() {}
InovuaButton.defaultProps = {
  isInovuaButton: true,
  theme: 'default-light',
  rootClassName: 'inovua-react-toolkit-button',
  align: 'center',
  verticalAlign: 'middle',
  ellipsis: true,
  href: null,
  iconPosition: 'start',
  onFocus: emptyFn,
  onBlur: emptyFn,
  onToggle: emptyFn,
  onClick: emptyFn,
  onMouseEnter: emptyFn,
  onMouseUp: emptyFn,
  onMouseDown: emptyFn,
  onDeactivate: emptyFn,
  onMouseLeave: emptyFn,
  onActivate: emptyFn,
  showWarnings: !_uglified.default
};
InovuaButton.propTypes = {
  isInovuaButton: _propTypes.default.bool,
  tagName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  primary: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  pressed: _propTypes.default.bool,
  defaultPressed: _propTypes.default.bool,
  href: _propTypes.default.string,
  align: _propTypes.default.oneOf(['start', 'end', 'center', 'left', 'right']),
  verticalAlign: _propTypes.default.oneOf(['top', 'middle', 'center', 'bottom']),
  rtl: _propTypes.default.bool,
  wrap: _propTypes.default.bool,
  overflow: _propTypes.default.bool,
  icon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  iconPosition: _propTypes.default.oneOf(['top', 'bottom', 'left', 'right', 'start', 'end']),
  style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
  disabledStyle: _propTypes.default.object,
  focusedStyle: _propTypes.default.object,
  pressedStyle: _propTypes.default.object,
  overStyle: _propTypes.default.object,
  activeStyle: _propTypes.default.object,
  className: _propTypes.default.string,
  activeClassName: _propTypes.default.string,
  overClassName: _propTypes.default.string,
  focusedClassName: _propTypes.default.string,
  disabledClassName: _propTypes.default.string,
  pressedClassName: _propTypes.default.string,
  theme: _propTypes.default.string,
  rootClassName: _propTypes.default.string,
  ellipsis: _propTypes.default.bool,
  onClick: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onToggle: _propTypes.default.func,
  onMouseEnter: _propTypes.default.func,
  onMouseUp: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onDeactivate: _propTypes.default.func,
  onMouseLeave: _propTypes.default.func,
  onActivate: _propTypes.default.func,
  showWarnings: _propTypes.default.bool
};
var _default = InovuaButton;
exports.default = _default;