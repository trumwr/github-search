/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RadioButton = exports.CheckBox = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _autoBind = _interopRequireDefault(require("../../react-class/autoBind"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _RadioButton = _interopRequireDefault(require("../../RadioButton"));
var _CheckBox = _interopRequireDefault(require("../../CheckBox"));
var _uglified = _interopRequireDefault(require("../../uglified"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var KEYS = {
  LEFT_ARROW: 'ArrowLeft',
  UP_ARROW: 'ArrowUp',
  RIGHT_ARROW: 'ArrowRight',
  DOWN_ARROW: 'ArrowDown'
};
var CLASS_NAME = 'inovua-react-toolkit-radio-button-group';
var getClassNames = function getClassNames(props, state) {
  var theme = props.theme,
    orientation = props.orientation,
    stretch = props.stretch,
    rtl = props.rtl,
    horizontal = props.horizontal,
    disabled = props.disabled;
  return (0, _join.default)(CLASS_NAME, props.className, "".concat(CLASS_NAME, "--theme-").concat(theme), "".concat(CLASS_NAME, "--orientation-").concat(orientation), stretch && "".concat(CLASS_NAME, "--stretch"), horizontal && "".concat(CLASS_NAME, "--orientation-horizontal"), disabled && "".concat(CLASS_NAME, "--disabled"), rtl ? "".concat(CLASS_NAME, "--rtl") : "".concat(CLASS_NAME, "--ltr"), state.focused && "".concat(CLASS_NAME, "--focused"));
};
var isChildChecked = function isChildChecked(_ref, idx) {
  var checkedItem = _ref.checkedItem;
  return !!checkedItem === idx;
};
var isControlledComponent = function isControlledComponent(props) {
  return !!props.checkedItemValue;
};
var emptyFn = function emptyFn() {
  return false;
};
var generateIndexToGroupMapping = function generateIndexToGroupMapping(props) {
  var children = props.children,
    radioOptions = props.radioOptions;
  var cleanChildren;
  if (!children) {
    return radioOptions.reduce(function (acc, option, idx) {
      acc[option.value] = idx;
      return acc;
    }, {});
  } else if (children && children.type) {
    cleanChildren = [children];
  } else {
    cleanChildren = (0, _toConsumableArray2.default)(children);
  }
  return cleanChildren.reduce(function (acc, child, idx) {
    var parsedChild = child;
    if (typeof child === 'function') {
      parsedChild = child({
        onChange: emptyFn,
        checked: false
      });
    }
    var radioValue = parsedChild.props['data-radio-value'];
    if (typeof radioValue === 'undefined' || radioValue === null || radioValue === false) {
      radioValue = idx;
    }
    acc[radioValue] = idx;
    return acc;
  }, {});
};
var getInitialStateValue = function getInitialStateValue(props) {
  var radioValue = props.radioValue,
    defaultRadioValue = props.defaultRadioValue;
  if (radioValue) {
    return null;
  }
  if (defaultRadioValue || defaultRadioValue === 0) {
    return defaultRadioValue;
  }
  return '';
};
var getRadioBasedChildren = function getRadioBasedChildren(_ref2) {
  var radioOptions = _ref2.radioOptions,
    renderItem = _ref2.renderItem,
    currentCheckedValue = _ref2.currentCheckedValue,
    onChange = _ref2.onChange,
    disabled = _ref2.disabled,
    readOnly = _ref2.readOnly,
    rtl = _ref2.rtl,
    theme = _ref2.theme;
  return radioOptions.reduce(function (acc, option) {
    acc.push(renderItem({
      rtl: rtl,
      checked: option.value === currentCheckedValue,
      'data-radio-value': option.value,
      children: option.label,
      tabIndex: null,
      onChange: onChange,
      key: option.value,
      disabled: disabled,
      readOnly: readOnly,
      theme: theme
    }));
    return acc;
  }, []);
};
var getCurrentCheckedValue = function getCurrentCheckedValue(props, state) {
  var radioValue = props.radioValue;
  var checkedItemValue = state.checkedItemValue;
  if (radioValue) {
    return radioValue;
  }
  return checkedItemValue;
};
var InovuaRadioButtonGroup = function (_Component) {
  (0, _inherits2.default)(InovuaRadioButtonGroup, _Component);
  var _super = _createSuper(InovuaRadioButtonGroup);
  function InovuaRadioButtonGroup(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaRadioButtonGroup);
    _this = _super.call(this, props);
    (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
    _this.valueToIndexMapping = generateIndexToGroupMapping(props);
    _this.state = {
      checkedItemValue: getInitialStateValue(props)
    };
    return _this;
  }
  (0, _createClass2.default)(InovuaRadioButtonGroup, [{
    key: "getCleanChild",
    value: function getCleanChild(child, idx) {
      var props = this.props,
        state = this.state,
        currentCheckedValue = this.currentCheckedValue,
        valueToIndexMapping = this.valueToIndexMapping;
      var currentChild = child;
      var disabled = props.disabled,
        readOnly = props.readOnly;
      var apiProps = {
        checked: valueToIndexMapping[currentCheckedValue] === idx,
        onChange: this.onRadioChildChange.bind(this),
        disabled: disabled,
        readOnly: readOnly
      };
      if (typeof child === 'function') {
        currentChild = child(apiProps);
      } else {
        currentChild = _react.default.cloneElement(currentChild, apiProps);
      }
      var _currentChild$props = currentChild.props,
        key = _currentChild$props.key,
        dataRadioValue = _currentChild$props['data-radio-value'];
      if (key === undefined || dataRadioValue === undefined) {
        key = key || idx;
        dataRadioValue = dataRadioValue || idx;
        currentChild = _react.default.cloneElement(currentChild, {
          key: key,
          'data-radio-value': dataRadioValue
        });
      }
      return currentChild;
    }
  }, {
    key: "onRadioChildChange",
    value: function onRadioChildChange(radioValue) {
      this.setValue(radioValue);
    }
  }, {
    key: "setValue",
    value: function setValue(radioValue) {
      var _this$p = this.p,
        isControlled = _this$p.isControlled,
        onChange = _this$p.onChange,
        name = _this$p.name;
      if (!isControlled) {
        this.setState({
          checkedItemValue: radioValue
        });
      }
      var index = this.valueToIndexMapping[radioValue];
      if (typeof onChange == 'function') {
        onChange({
          checkedItemIndex: index,
          checkedItemValue: radioValue,
          groupName: name
        });
      }
      this.setState({
        focusedIndex: index
      });
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.currentCheckedValue;
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.p.name;
    }
  }, {
    key: "getProps",
    value: function getProps(props, state) {
      props = props || this.props;
      state = state || this.state;
      var cleanChildren;
      var currentCheckedValue = this.currentCheckedValue = getCurrentCheckedValue(props, state);
      var shouldSubmitIsFunction = typeof props.shouldSubmit === 'function';
      var shouldSubmitValue = shouldSubmitIsFunction ? props.shouldSubmit(props) : typeof props.shouldSubmit === 'undefined' || props.shouldSubmit;
      if (props.showWarnings && shouldSubmitIsFunction && shouldSubmitValue && !props.name) {
        console.warn('shouldSubmit function returned true, but "name" prop is missing');
      }
      var withHiddenInput = !!(props.name && shouldSubmitValue);
      var _props = props,
        radioOptions = _props.radioOptions,
        renderItem = _props.renderItem,
        disabled = _props.disabled,
        readOnly = _props.readOnly,
        rtl = _props.rtl;
      if (radioOptions) {
        cleanChildren = getRadioBasedChildren({
          radioOptions: radioOptions,
          renderItem: renderItem,
          rtl: rtl,
          currentCheckedValue: currentCheckedValue,
          onChange: this.onRadioChildChange.bind(this),
          disabled: disabled,
          readOnly: readOnly,
          theme: props.theme
        });
      } else if (props.children && props.children.type) {
        cleanChildren = [this.getCleanChild(props.children, 0)];
      } else {
        cleanChildren = (0, _toConsumableArray2.default)(props.children).map(this.getCleanChild);
      }
      return _objectSpread(_objectSpread({}, props), {}, {
        withHiddenInput: withHiddenInput,
        children: cleanChildren,
        className: getClassNames(props, state),
        isControlled: isControlledComponent(props),
        currentCheckedValue: currentCheckedValue
      });
    }
  }, {
    key: "renderHiddenInput",
    value: function renderHiddenInput() {
      var _this2 = this;
      var _this$p2 = this.p,
        tabIndex = _this$p2.tabIndex,
        disabled = _this$p2.disabled,
        checked = _this$p2.checked,
        withHiddenInput = _this$p2.withHiddenInput,
        name = _this$p2.name,
        shouldSubmit = _this$p2.shouldSubmit;
      var inputProps = {
        type: 'checkbox',
        ref: function ref(_ref3) {
          return _this2.node = _ref3;
        },
        onClick: this.handleClick,
        checked: !!checked,
        tabIndex: disabled === true ? null : tabIndex
      };
      if (disabled) {
        return null;
      }
      if (!name) {
        return null;
      }
      if (typeof shouldSubmit == 'function' && shouldSubmit() === false) {
        return null;
      }
      if (shouldSubmit === false) {
        return null;
      }
      if (withHiddenInput) {
        inputProps.name = name;
      }
      return _react.default.createElement("input", _objectSpread(_objectSpread({}, inputProps), {}, {
        type: "hidden"
      }));
    }
  }, {
    key: "_attachEventHandler",
    value: function _attachEventHandler(key, handler, propagatedProps) {
      var oldEventHandler = propagatedProps[key];
      if (oldEventHandler) {
        propagatedProps[key] = function (ev) {
          handler(ev);
          oldEventHandler(ev);
        };
      } else {
        propagatedProps[key] = handler;
      }
    }
  }, {
    key: "setKeyboardNavigationProps",
    value: function setKeyboardNavigationProps(computedRBGDOMProps) {
      computedRBGDOMProps.tabIndex = this.props.tabIndex || 0;
      this._attachEventHandler('onFocus', this.onFocus, computedRBGDOMProps);
      this._attachEventHandler('onBlur', this.onBlur, computedRBGDOMProps);
      this._attachEventHandler('onKeyDown', this.onKeyDown, computedRBGDOMProps);
    }
  }, {
    key: "onFocus",
    value: function onFocus(event) {
      if (!event || !event.target) {
        return;
      }
      if (this.props.disabled) {
        return;
      }
      var currentTarget = event.target;
      if (!currentTarget) {
        return;
      }
      if (!currentTarget.dataset) {
        return;
      }
      var radioValue = currentTarget.dataset.radioValue;
      var focusedIndex = this.valueToIndexMapping[radioValue];
      var newState = {
        focused: true
      };
      if (focusedIndex !== undefined) {
        newState.focusedIndex = focusedIndex;
      }
      this.setState(newState);
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        focused: false
      });
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(ev) {
      if (!this.state.focused) {
        return;
      }
      if (this.props.disabled) {
        return;
      }
      if (this.props.readOnly) {
        return;
      }
      var focusedIndex = this.state.focusedIndex;
      var cleanedProps = this.getProps();
      var children = cleanedProps.children;
      switch (ev.key) {
        case KEYS.DOWN_ARROW:
        case KEYS.RIGHT_ARROW:
          ev.preventDefault();
          if (focusedIndex < children.length - 1) {
            var nextValue = children[focusedIndex + 1].props['data-radio-value'];
            this.setValue(nextValue);
            this.setState({
              focusedIndex: focusedIndex + 1
            });
          }
          break;
        case KEYS.UP_ARROW:
        case KEYS.LEFT_ARROW:
          ev.preventDefault();
          if (focusedIndex > 0) {
            var prevValue = children[focusedIndex - 1].props['data-radio-value'];
            this.setValue(prevValue);
            this.setState({
              focusedIndex: focusedIndex - 1
            });
          }
          break;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$p3 = this.p = this.getProps(),
        children = _this$p3.children,
        className = _this$p3.className,
        name = _this$p3.name,
        currentCheckedValue = _this$p3.currentCheckedValue,
        submitFriendly = _this$p3.submitFriendly,
        enableKeyboardNavigation = _this$p3.enableKeyboardNavigation;
      var cleanedProps = (0, _cleanProps.default)(this.props, InovuaRadioButtonGroup.propTypes);
      var computedRBGDOMProps = _objectSpread(_objectSpread({}, cleanedProps), {}, {
        className: className
      });
      if (enableKeyboardNavigation) {
        this.setKeyboardNavigationProps(computedRBGDOMProps);
      }
      return _react.default.createElement("div", _objectSpread({}, computedRBGDOMProps), children, submitFriendly && this.renderHiddenInput({
        name: name,
        value: currentCheckedValue
      }));
    }
  }]);
  return InovuaRadioButtonGroup;
}(_react.Component);
InovuaRadioButtonGroup.defaultProps = {
  defaultRadioValue: undefined,
  submitFriendly: true,
  renderItem: function renderItem(props) {
    return _react.default.createElement(WrappedRadioInput, _objectSpread({}, props));
  },
  orientation: 'vertical',
  theme: 'default-light',
  disabled: false,
  readOnly: false,
  enableKeyboardNavigation: true,
  showWarnings: !_uglified.default,
  stretch: false
};
InovuaRadioButtonGroup.propTypes = {
  defaultRadioValue: _propTypes.default.any,
  rtl: _propTypes.default.bool,
  shouldComponentUpdate: _propTypes.default.func,
  children: _propTypes.default.any,
  submitFriendly: _propTypes.default.bool,
  radioOptions: _propTypes.default.arrayOf(_propTypes.default.object),
  renderItem: _propTypes.default.func,
  orientation: _propTypes.default.oneOf(['vertical', 'horizontal']),
  theme: _propTypes.default.string,
  onChange: _propTypes.default.func,
  stretch: _propTypes.default.bool,
  shouldSubmit: function shouldSubmit(props, propName, componentName) {
    if (props.shouldSubmit && typeof props.shouldSubmit !== 'function' && !props.name) {
      return new Error("\"shouldSubmit\" was true, but component ".concat(componentName, " requires prop \"name\" to be submitted."));
    }
  },
  radioValue: _propTypes.default.any,
  value: function value(props) {
    if (typeof props.value !== 'undefined') {
      return new Error('"value" prop is not supported. Use "radioValue" instead.');
    }
  },
  defaultValue: function defaultValue(props) {
    if (typeof props.defaultValue !== 'undefined') {
      return new Error('"defaultValue" prop is not supported. Use "defaultRadioValue" instead.');
    }
  },
  disabled: _propTypes.default.bool,
  readOnly: _propTypes.default.bool,
  enableKeyboardNavigation: _propTypes.default.bool,
  showWarnings: _propTypes.default.bool
};
var WrappedRadioInput = function WrappedRadioInput(props) {
  var onChange = function onChange(data, event) {
    if (props.onChange) {
      props.onChange(props['data-radio-value']);
    }
  };
  return _react.default.createElement(_RadioButton.default, _objectSpread(_objectSpread({
    iconSize: 16,
    inlineBlock: false
  }, props), {}, {
    checkedValue: true,
    uncheckedValue: false,
    onChange: onChange
  }));
};
exports.RadioButton = WrappedRadioInput;
var WrappedCheckBox = function WrappedCheckBox(props) {
  var onChange = function onChange(data, event) {
    if (props.onChange) {
      props.onChange(props['data-radio-value']);
    }
  };
  return _react.default.createElement(_CheckBox.default, _objectSpread(_objectSpread({
    iconSize: 16
  }, props), {}, {
    checkedValue: true,
    uncheckedValue: false,
    onChange: onChange
  }));
};
exports.CheckBox = WrappedCheckBox;
var _default = InovuaRadioButtonGroup;
exports.default = _default;