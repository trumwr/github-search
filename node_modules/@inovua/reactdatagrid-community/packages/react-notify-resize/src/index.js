/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NotifyResize = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = require("prop-types");
var _shallowequal = _interopRequireDefault(require("./shallowequal"));
var _debounce = _interopRequireDefault(require("../../../packages/debounce"));
var _getGlobal = require("../../../getGlobal");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var STYLE_DISPLAY_NONE = {
  display: 'none'
};
var emptyFn = function emptyFn() {};
var immediateFn = function immediateFn(fn) {
  return fn();
};
var notifyResizeStyle = {
  contain: 'strict',
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  zIndex: -1,
  overflow: 'hidden',
  display: 'block',
  pointerEvents: 'none',
  opacity: 0,
  direction: 'ltr',
  textAlign: 'start'
};
var expandToolStyle = {
  contain: 'strict',
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  overflow: 'auto'
};
var contractToolStyle = {
  contain: 'strict',
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  overflow: 'auto'
};
var contractToolInnerStyle = {
  contain: 'strict',
  position: 'absolute',
  top: 0,
  left: 0,
  width: '200%',
  height: '200%'
};
var InovuaNotifyResize = function (_React$Component) {
  (0, _inherits2.default)(InovuaNotifyResize, _React$Component);
  var _super = _createSuper(InovuaNotifyResize);
  function InovuaNotifyResize(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaNotifyResize);
    _this = _super.call(this, props);
    _this.checkResize = _this.checkResize.bind((0, _assertThisInitialized2.default)(_this));
    _this.onResize = _this.onResize.bind((0, _assertThisInitialized2.default)(_this));
    if (props.notifyResizeDelay > 0) {
      _this.onResize = (0, _debounce.default)(_this.onResize, props.notifyResizeDelay);
    }
    if (props.checkResizeDelay > 0) {
      _this.checkResize = (0, _debounce.default)(_this.checkResize, props.checkResizeDelay);
    }
    _this.refNotifyResize = function (node) {
      _this.notifyResizeNode = node;
    };
    _this.refContractTool = function (node) {
      _this.contractToolNode = node;
    };
    _this.refExpandTool = function (node) {
      _this.expandToolNode = node;
    };
    _this.refExpandToolInner = function (node) {
      _this.expandToolInnerNode = node;
    };
    _this.refContractToolInner = function (node) {
      _this.contractToolInnerNode = node;
    };
    _this.state = {
      notifyResizeWidth: 0,
      notifyResizeHeight: 0,
      expandToolWidth: 0,
      expandToolHeight: 0,
      contractToolWidth: 0,
      contractToolHeight: 0
    };
    return _this;
  }
  (0, _createClass2.default)(InovuaNotifyResize, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (typeof nextProps.shouldComponentUpdate === 'function') {
        return nextProps.shouldComponentUpdate(nextProps, this.props, nextState, this.state);
      }
      return !(0, _shallowequal.default)(nextState, this.state) || !(0, _shallowequal.default)(nextProps, this.props);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.__willUnmount = true;
      if (this.observer) {
        if (this.observer.unobserve) {
          this.observer.unobserve(this.target);
        }
        if (this.observer.disconnect) {
          this.observer.disconnect();
        }
        delete this.observer;
      }
      delete this.target;
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      return this.notifyResizeNode;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      this.__willUnmount = false;
      var ResizeObserver = globalObject.ResizeObserver || this.props.ResizeObserver;
      if (this.props.useNativeIfAvailable && ResizeObserver) {
        var node = this.getDOMNode();
        var target = node.parentNode;
        this.target = target;
        var observer = new ResizeObserver(function (entries) {
          if (_this2.props.onObserverResize) {
            _this2.props.onObserverResize(entries);
          }
          var first = entries[0];
          if (first) {
            _this2.onResize(first.contentRect);
          }
        });
        observer.observe(target);
        this.observer = observer;
      }
      if (typeof this.props.onMount === 'function') {
        this.props.onMount(this);
      }
      if (this.observer) {
        return;
      }
      this.resetResizeTool(function () {
        if (_this2.props.notifyOnMount) {
          var _this2$state = _this2.state,
            width = _this2$state.notifyResizeWidth,
            height = _this2$state.notifyResizeHeight;
          _this2.onResize({
            width: width,
            height: height
          });
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var ResizeObserver = globalObject.ResizeObserver || this.props.ResizeObserver;
      if (this.props.useNativeIfAvailable && ResizeObserver) {
        return _react.default.createElement("div", {
          ref: this.refNotifyResize,
          style: STYLE_DISPLAY_NONE,
          "data-name": "@inovua/react-observer-placeholder"
        });
      }
      return _react.default.createElement("div", {
        ref: this.refNotifyResize,
        style: notifyResizeStyle,
        onScroll: this.checkResize
      }, this.renderExpandTool(), this.renderContractTool());
    }
  }, {
    key: "renderExpandTool",
    value: function renderExpandTool() {
      return _react.default.createElement("div", {
        ref: this.refExpandTool,
        style: expandToolStyle
      }, _react.default.createElement("div", {
        ref: this.refExpandToolInner,
        style: {
          position: 'absolute',
          top: 0,
          left: 0,
          width: this.state.expandToolWidth,
          height: this.state.expandToolHeight
        }
      }));
    }
  }, {
    key: "renderContractTool",
    value: function renderContractTool() {
      return _react.default.createElement("div", {
        ref: this.refContractTool,
        style: contractToolStyle
      }, _react.default.createElement("div", {
        ref: this.refContractToolInner,
        style: contractToolInnerStyle
      }));
    }
  }, {
    key: "resetResizeTool",
    value: function resetResizeTool(callback) {
      var _this3 = this;
      this.setDimensions(function () {
        _this3.scrollToBottomExpandTool();
        if (typeof callback == 'function') {
          callback();
        }
      });
    }
  }, {
    key: "setDimensions",
    value: function setDimensions(callback) {
      var _this4 = this;
      this.getDimensions(function (size) {
        var notifyResizeWidth = size.notifyResizeWidth,
          notifyResizeHeight = size.notifyResizeHeight;
        if (_this4.__willUnmount) {
          return;
        }
        _this4.setState({
          notifyResizeWidth: notifyResizeWidth,
          notifyResizeHeight: notifyResizeHeight,
          expandToolWidth: notifyResizeWidth + 1,
          expandToolHeight: notifyResizeHeight + 1
        }, callback);
      });
    }
  }, {
    key: "getDimensions",
    value: function getDimensions(callback) {
      var _this5 = this;
      if (!callback || typeof callback != 'function') {
        callback = emptyFn;
      }
      var notifyResize = this.notifyResizeNode;
      if (!notifyResize) {
        return;
      }
      var node = notifyResize.parentElement || notifyResize;
      var size;
      var fn = this.props.useRaf ? requestAnimationFrame : immediateFn;
      fn(function () {
        if (typeof _this5.props.measureSize == 'function') {
          size = _this5.props.measureSize(node, notifyResize);
        } else {
          size = {
            width: node.offsetWidth,
            height: node.offsetHeight
          };
        }
        callback({
          notifyResizeWidth: size.width,
          notifyResizeHeight: size.height
        });
      });
    }
  }, {
    key: "scrollToBottomExpandTool",
    value: function scrollToBottomExpandTool(callback) {
      var _this6 = this;
      if (this.notifyResizeNode) {
        requestAnimationFrame(function () {
          var expandTool = _this6.expandToolNode;
          var contractTool = _this6.contractToolNode;
          var expandToolScrollHeight;
          var expandToolScrollWidth;
          var contractToolScrollHeight;
          var contractToolScrollWidth;
          if (expandTool) {
            expandToolScrollHeight = expandTool.scrollHeight;
            expandToolScrollWidth = expandTool.scrollWidth;
          }
          if (contractTool) {
            contractToolScrollHeight = contractTool.scrollHeight;
            contractToolScrollWidth = contractTool.scrollWidth;
          }
          if (expandTool) {
            expandTool.scrollTop = expandToolScrollHeight;
            expandTool.scrollLeft = expandToolScrollWidth;
          }
          if (contractTool) {
            contractTool.scrollTop = contractToolScrollHeight;
            contractTool.scrollLeft = contractToolScrollWidth;
          }
          if (typeof callback == 'function') {
            callback();
          }
        });
      }
    }
  }, {
    key: "checkResize",
    value: function checkResize() {
      var _this7 = this;
      this.getDimensions(function (_ref) {
        var notifyResizeWidth = _ref.notifyResizeWidth,
          notifyResizeHeight = _ref.notifyResizeHeight;
        if (notifyResizeWidth !== _this7.state.notifyResizeWidth || notifyResizeHeight !== _this7.state.notifyResizeHeight) {
          _this7.onResize({
            width: notifyResizeWidth,
            height: notifyResizeHeight
          });
          _this7.resetResizeTool();
        }
      });
    }
  }, {
    key: "onResize",
    value: function onResize(_ref2) {
      var width = _ref2.width,
        height = _ref2.height;
      if (this.__willUnmount) {
        return;
      }
      if (typeof this.props.onResize === 'function') {
        this.props.onResize({
          width: width,
          height: height
        });
      }
    }
  }]);
  return InovuaNotifyResize;
}(_react.default.Component);
exports.NotifyResize = InovuaNotifyResize;
InovuaNotifyResize.defaultProps = {
  useNativeIfAvailable: true,
  useWillChange: false,
  useRaf: true
};
InovuaNotifyResize.propTypes = {
  ResizeObserver: _propTypes.func,
  onResize: _propTypes.func,
  onObserverResize: _propTypes.func,
  useNativeIfAvailable: _propTypes.bool,
  onMount: _propTypes.func,
  useWillChange: _propTypes.bool,
  useRaf: _propTypes.bool,
  notifyOnMount: _propTypes.bool,
  notifyResizeDelay: _propTypes.number,
  checkResizeDelay: _propTypes.number
};
var _default = InovuaNotifyResize;
exports.default = _default;