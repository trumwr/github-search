/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWeekendStartDay = exports.getWeekStartMoment = exports.getWeekStartDay = exports.getDaysInMonthView = exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../react-class"));
var _Flex = require("../../Flex");
var _moment = _interopRequireDefault(require("moment"));
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _whitespace = _interopRequireDefault(require("../../../common/whitespace"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _format = _interopRequireDefault(require("./utils/format"));
var _toMoment = _interopRequireDefault(require("./toMoment"));
var _getWeekDayNames = _interopRequireDefault(require("./utils/getWeekDayNames"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var RENDER_DAY = function RENDER_DAY(props) {
  var divProps = (0, _assign.default)({}, props);
  delete divProps.date;
  delete divProps.dateMoment;
  delete divProps.day;
  delete divProps.timestamp;
  return _react.default.createElement("div", _objectSpread({}, divProps));
};
var getWeekStartDay = function getWeekStartDay(props) {
  var locale = props.locale;
  var weekStartDay = props.weekStartDay;
  if (weekStartDay == null) {
    var localeData = props.localeData || _moment.default.localeData(locale);
    weekStartDay = localeData._week ? localeData._week.dow : null;
  }
  return weekStartDay;
};
exports.getWeekStartDay = getWeekStartDay;
var getWeekendStartDay = function getWeekendStartDay(props) {
  var weekendStartDay = props.weekendStartDay;
  if (weekendStartDay == null) {
    return getWeekStartDay(props) + 5 % 7;
  }
  return weekendStartDay;
};
exports.getWeekendStartDay = getWeekendStartDay;
var getWeekStartMoment = function getWeekStartMoment(value, props) {
  var locale = props.locale;
  var dateFormat = props.dateFormat;
  var weekStartDay = getWeekStartDay(props);
  return (0, _toMoment.default)(value, {
    locale: locale,
    dateFormat: dateFormat
  }).day(weekStartDay);
};
exports.getWeekStartMoment = getWeekStartMoment;
var getDaysInMonthView = function getDaysInMonthView(value, props) {
  var locale = props.locale,
    dateFormat = props.dateFormat;
  var toMomentParam = {
    locale: locale,
    dateFormat: dateFormat
  };
  var first = (0, _toMoment.default)(value, toMomentParam).startOf('month');
  var beforeFirst = (0, _toMoment.default)(value, toMomentParam).startOf('month').add(-1, 'days');
  var start = getWeekStartMoment(first, props);
  var result = [];
  var i = 0;
  if (beforeFirst.isBefore(start) && (props.alwaysShowPrevWeek || !start.isSame(first))) {
    start.add(-1, 'weeks');
  }
  for (; i < 42; i++) {
    result.push((0, _toMoment.default)(start, toMomentParam));
    start.add(1, 'days');
  }
  return result;
};
exports.getDaysInMonthView = getDaysInMonthView;
var getWeekDayNames = function getWeekDayNames(props) {
  var weekStartDay = props.weekStartDay,
    weekDayNames = props.weekDayNames,
    locale = props.locale;
  var names = weekDayNames;
  if (typeof names == 'function') {
    names = names(weekStartDay, locale);
  } else if (Array.isArray(names)) {
    names = (0, _toConsumableArray2.default)(names);
    var index = weekStartDay;
    while (index > 0) {
      names.push(names.shift());
      index--;
    }
  }
  return names;
};
var BasicMonthView = function (_Component) {
  (0, _inherits2.default)(BasicMonthView, _Component);
  var _super = _createSuper(BasicMonthView);
  function BasicMonthView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, BasicMonthView);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps) {
      if (prevProps.locale !== _this.props.locale || prevProps.dateFormat !== _this.props.dateFormat) {
        _this.updateToMoment(_this.props);
      }
    });
    _this.updateToMoment(props);
    return _this;
  }
  (0, _createClass2.default)(BasicMonthView, [{
    key: "updateToMoment",
    value: function updateToMoment(props) {
      this.toMoment = function (value, dateFormat) {
        return (0, _toMoment.default)(value, {
          locale: props.locale,
          dateFormat: dateFormat || props.dateFormat
        });
      };
    }
  }, {
    key: "prepareProps",
    value: function prepareProps(thisProps) {
      var props = (0, _assign.default)({}, thisProps);
      props.viewMoment = props.viewMoment || this.toMoment(props.viewDate);
      props.weekStartDay = getWeekStartDay(props);
      props.className = this.prepareClassName(props);
      return props;
    }
  }, {
    key: "prepareClassName",
    value: function prepareClassName(props) {
      return (0, _join.default)(props.className, props.rootClassName);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.p = this.prepareProps(this.props);
      var viewMoment = props.viewMoment;
      var daysInView = props.daysInView || getDaysInMonthView(viewMoment, props);
      var children = [this.renderWeekDayNames(), this.renderDays(props, daysInView)];
      if (props.renderChildren) {
        children = props.renderChildren(children, props);
      }
      var flexProps = (0, _assign.default)({}, props);
      delete flexProps.alwaysShowPrevWeek;
      delete flexProps.rootClassName;
      delete flexProps.cleanup;
      delete flexProps.dateFormat;
      delete flexProps.daysInView;
      delete flexProps.defaultDate;
      delete flexProps.defaultValue;
      delete flexProps.forceValidDate;
      delete flexProps.locale;
      delete flexProps.moment;
      delete flexProps.onClockEnterKey;
      delete flexProps.onClockEscapeKey;
      delete flexProps.onClockInputBlur;
      delete flexProps.onClockInputFocus;
      delete flexProps.onClockInputMouseDown;
      delete flexProps.onFooterCancelClick;
      delete flexProps.onFooterClearClick;
      delete flexProps.onFooterOkClick;
      delete flexProps.onFooterTodayClick;
      delete flexProps.onRenderDay;
      delete flexProps.renderChildren;
      delete flexProps.renderDay;
      delete flexProps.timestamp;
      delete flexProps.todayButton;
      delete flexProps.todayButtonText;
      delete flexProps.value;
      delete flexProps.viewDate;
      delete flexProps.viewMoment;
      delete flexProps.weekDayNames;
      delete flexProps.weekNumbers;
      delete flexProps.weekNumberName;
      delete flexProps.weekStartDay;
      delete flexProps.index;
      delete flexProps.cancelButton;
      delete flexProps.expanded;
      delete flexProps.clearIcon;
      delete flexProps.showClock;
      delete flexProps.enableMonthDecadeViewAnimation;
      delete flexProps.showMonthDecadeViewAnimation;
      delete flexProps.triggerChangeOnTimeChange;
      delete flexProps.cancelButtonText;
      delete flexProps.clearButtonText;
      delete flexProps.clearButton;
      delete flexProps.innerRef;
      if (typeof props.cleanup == 'function') {
        props.cleanup(flexProps);
      }
      return _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({
        column: true,
        ref: props.innerRef,
        wrap: false,
        inline: true,
        alignItems: "stretch"
      }, flexProps), {}, {
        children: children
      }));
    }
  }, {
    key: "renderWeekNumber",
    value: function renderWeekNumber(props, days) {
      var firstDayOfWeek = days[0];
      var week = firstDayOfWeek.weeks();
      var weekNumberProps = {
        key: "week_".concat(days),
        className: "".concat(props.rootClassName, "-cell ").concat(props.rootClassName, "-week-number"),
        week: week,
        days: days,
        date: firstDayOfWeek,
        children: week
      };
      var renderWeekNumber = props.renderWeekNumber;
      var result;
      if (renderWeekNumber) {
        result = renderWeekNumber(weekNumberProps);
      }
      if (result === undefined) {
        var divProps = (0, _assign.default)({}, weekNumberProps);
        delete divProps.date;
        delete divProps.days;
        delete divProps.week;
        delete divProps.showClock;
        delete divProps.rootClassName;
        result = _react.default.createElement("div", _objectSpread({
          key: weekNumberProps.key
        }, divProps));
      }
      return result;
    }
  }, {
    key: "renderDays",
    value: function renderDays(props, days) {
      var _this2 = this;
      var nodes = days.map(function (date) {
        return _this2.renderDay(props, date);
      });
      var len = days.length;
      var buckets = [];
      var bucketsLen = Math.ceil(len / 7);
      var i = 0;
      var weekStart;
      var weekEnd;
      for (; i < bucketsLen; i++) {
        weekStart = i * 7;
        weekEnd = (i + 1) * 7;
        buckets.push([props.weekNumbers && this.renderWeekNumber(props, days.slice(weekStart, weekEnd))].concat(nodes.slice(weekStart, weekEnd)));
      }
      var rootClassName = props.rootClassName;
      return buckets.map(function (bucket, index) {
        return _react.default.createElement("div", {
          key: "row_".concat(index),
          className: "".concat(rootClassName, "-row"),
          children: bucket
        });
      });
    }
  }, {
    key: "renderDay",
    value: function renderDay(props, dateMoment) {
      var dayText = _format.default.day(dateMoment, props.dayFormat);
      var className = (0, _join.default)("".concat(props.rootClassName, "-cell"), "".concat(props.rootClassName, "-day"));
      var renderDayProps = {
        day: dayText,
        dateMoment: dateMoment,
        timestamp: +dateMoment,
        key: dayText,
        className: className,
        children: dayText
      };
      if (typeof props.onRenderDay === 'function') {
        var newRenderDayProps = props.onRenderDay(renderDayProps);
        if (newRenderDayProps !== undefined) {
          renderDayProps = newRenderDayProps;
        }
      }
      var renderFunction = props.renderDay || RENDER_DAY;
      var result = renderFunction(renderDayProps);
      if (result === undefined) {
        result = RENDER_DAY(renderDayProps);
      }
      return result;
    }
  }, {
    key: "renderWeekDayNames",
    value: function renderWeekDayNames() {
      var props = this.p;
      var weekNumbers = props.weekNumbers,
        weekNumberName = props.weekNumberName,
        weekDayNames = props.weekDayNames,
        renderWeekDayNames = props.renderWeekDayNames,
        renderWeekDayName = props.renderWeekDayName,
        weekStartDay = props.weekStartDay,
        rootClassName = props.rootClassName;
      if (weekDayNames === false) {
        return null;
      }
      var names = weekNumbers ? [weekNumberName].concat(getWeekDayNames(props)) : getWeekDayNames(props);
      var className = "".concat(rootClassName, "-row ").concat(rootClassName, "-week-day-names");
      var renderProps = {
        className: className,
        names: names
      };
      if (renderWeekDayNames) {
        return renderWeekDayNames(renderProps);
      }
      return _react.default.createElement("div", {
        key: "week_day_names",
        className: className
      }, names.map(function (name, index) {
        var props = {
          weekStartDay: weekStartDay,
          index: index,
          name: name,
          className: "".concat(rootClassName, "-cell ").concat(rootClassName, "-week-day-name"),
          children: name
        };
        if (renderWeekDayName) {
          return renderWeekDayName(props);
        }
        var divProps = (0, _assign.default)({}, props);
        var keys = "week_".concat(index);
        delete divProps.index;
        delete divProps.weekStartDay;
        delete divProps.name;
        delete divProps.showClock;
        delete divProps.rootClassName;
        return _react.default.createElement("div", _objectSpread({
          key: keys
        }, divProps));
      }));
    }
  }]);
  return BasicMonthView;
}(_reactClass.default);
BasicMonthView.propTypes = {
  rootClassName: _propTypes.default.string,
  defaultClassName: _propTypes.default.string,
  className: _propTypes.default.string,
  dateFormat: _propTypes.default.string,
  alwaysShowPrevWeek: _propTypes.default.bool,
  viewDate: _propTypes.default.any,
  viewMoment: _propTypes.default.any,
  index: _propTypes.default.number,
  showClock: _propTypes.default.bool,
  onMouseLeave: _propTypes.default.any,
  locale: _propTypes.default.string,
  weekStartDay: _propTypes.default.number,
  weekNumbers: _propTypes.default.bool,
  weekNumberName: _propTypes.default.string,
  weekDayNames: function weekDayNames(props, propName) {
    var value = props[propName];
    if (typeof value != 'function' && value !== false && !Array.isArray(value)) {
      return new Error('"weekDayNames" should be a function, an array or the boolean "false"');
    }
    return undefined;
  },
  renderWeekDayNames: _propTypes.default.func,
  renderWeekDayName: _propTypes.default.func,
  renderWeekNumber: _propTypes.default.func,
  renderDay: _propTypes.default.func,
  onRenderDay: _propTypes.default.func
};
BasicMonthView.defaultProps = {
  rootClassName: 'inovua-react-toolkit-calendar__basic-month-view',
  dateFormat: 'YYYY-MM-DD',
  alwaysShowPrevWeek: false,
  weekNumbers: true,
  weekNumberName: "".concat(_whitespace.default).concat(_whitespace.default),
  weekDayNames: _getWeekDayNames.default
};
var _default = (0, _react.forwardRef)(function (props, ref) {
  return _react.default.createElement(BasicMonthView, _objectSpread({
    innerRef: ref
  }, props));
});
exports.default = _default;