/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "NAV_KEYS", {
  enumerable: true,
  get: function get() {
    return _navKeys.default;
  }
});
exports.renderFooter = exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../../react-class"));
var _moment = _interopRequireDefault(require("moment"));
var _assign = _interopRequireDefault(require("../../../../common/assign"));
var _join = _interopRequireDefault(require("../../../../common/join"));
var _clampRange = _interopRequireDefault(require("../clampRange"));
var _toMoment = _interopRequireDefault(require("../toMoment"));
var _isInRange = _interopRequireDefault(require("../utils/isInRange"));
var _NavBar = _interopRequireDefault(require("../NavBar"));
var _Footer = _interopRequireDefault(require("../Footer"));
var _joinFunctions = _interopRequireDefault(require("../joinFunctions"));
var _assignDefined = _interopRequireDefault(require("../assignDefined"));
var _BasicMonthView = _interopRequireWildcard(require("../BasicMonthView"));
var _onKeyDown = _interopRequireDefault(require("./onKeyDown"));
var _navKeys = _interopRequireDefault(require("./navKeys"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var TODAY;
var RENDER_DAY = function RENDER_DAY(props) {
  var divProps = (0, _assign.default)({}, props);
  delete divProps.date;
  delete divProps.dateMoment;
  delete divProps.day;
  delete divProps.isAfterMaxDate;
  delete divProps.isBeforeMinDate;
  delete divProps.inRange;
  delete divProps.timestamp;
  return _react.default.createElement("div", _objectSpread({}, divProps));
};
var isDateInMinMax = function isDateInMinMax(timestamp, props) {
  if (props.minDate && timestamp < props.minDate) {
    return false;
  }
  if (props.maxDate && timestamp > props.maxDate) {
    return false;
  }
  return true;
};
var _isValidActiveDate = function isValidActiveDate(timestamp, props) {
  if (!props) {
    throw new Error('props is mandatory in isValidActiveDate');
  }
  var dayProps = props.dayPropsMap[timestamp];
  if (dayProps && dayProps.disabled) {
    return false;
  }
  return isDateInMinMax(timestamp, props);
};
var _isInView = function isInView(mom, props) {
  if (!props) {
    throw new Error('props is mandatory in isInView');
  }
  var daysInView = props.daysInView;
  return (0, _isInRange.default)(mom, {
    range: daysInView,
    inclusive: true
  });
};
var prepareViewDate = function prepareViewDate(props, state) {
  var viewDate = props.viewDate === undefined ? state.viewDate : props.viewDate;
  if (!viewDate && props.moment) {
    return (0, _toMoment.default)(props.moment);
  }
  return viewDate;
};
var prepareDate = function prepareDate(props, state) {
  if (props.range) {
    return null;
  }
  return props.date === undefined ? state.date : props.date;
};
var prepareRange = function prepareRange(props, state) {
  if (props.moment) {
    return null;
  }
  return props.partialRange ? props.range || state.range : state.range || props.range;
};
var prepareActiveDate = function prepareActiveDate(props, state) {
  var fallbackDate = prepareDate(props, state) || (prepareRange(props, state) || [])[0];
  var activeDate = props.activeDate === undefined ? state.activeDate || fallbackDate : props.activeDate;
  var daysInView = props.daysInView;
  if (activeDate && daysInView && props.constrainActiveInView) {
    var activeMoment = this.toMoment(activeDate);
    if (!_isInView(activeMoment, props)) {
      var date = fallbackDate;
      var dateMoment = this.toMoment(date);
      if (date && _isInView(dateMoment, props) && _isValidActiveDate(+dateMoment, props)) {
        return date;
      }
      return null;
    }
  }
  return _isValidActiveDate(+activeDate, props) ? activeDate : null;
};
var _renderFooter = function renderFooter(props, buttonHandlers) {
  if (!props.footer) {
    return null;
  }
  buttonHandlers = buttonHandlers || props;
  var renderFooter = props.renderFooter;
  var footerFnProps = {
    onTodayClick: buttonHandlers.onFooterTodayClick,
    onClearClick: buttonHandlers.onFooterClearClick,
    onOkClick: buttonHandlers.onFooterOkClick,
    onCancelClick: buttonHandlers.onFooterCancelClick
  };
  var childFooter = _react.default.Children.toArray(props.children).filter(function (c) {
    return c && c.props && c.props.isDatePickerFooter;
  })[0];
  var childFooterProps = childFooter ? childFooter.props : null;
  if (childFooterProps) {
    Object.keys(footerFnProps).forEach(function (key) {
      if (childFooter.props[key]) {
        footerFnProps[key] = (0, _joinFunctions.default)(footerFnProps[key], childFooter.props[key]);
      }
    });
  }
  var footerProps = (0, _assignDefined.default)({}, footerFnProps, {
    key: 'footer_props_key',
    todayButton: props.todayButton,
    todayButtonText: props.todayButtonText,
    clearButton: props.clearButton,
    clearButtonText: props.clearButtonText,
    theme: props.theme,
    okButton: props.okButton === undefined && !props.insideField ? false : props.okButton,
    okButtonText: props.okButtonText,
    cancelButton: props.cancelButton === undefined && !props.insideField ? false : props.cancelButton,
    cancelButtonText: props.cancelButtonText,
    clearDate: props.clearDate || props.footerClearDate,
    selectDate: props.selectDate
  });
  if (childFooter) {
    if (renderFooter) {
      return renderFooter((0, _assign.default)({}, childFooter.props, footerProps));
    }
    return _react.default.cloneElement(childFooter, footerProps);
  }
  if (renderFooter) {
    return renderFooter(footerProps);
  }
  return _react.default.createElement(_Footer.default, _objectSpread({}, footerProps));
};
exports.renderFooter = _renderFooter;
var MonthView = function (_Component) {
  (0, _inherits2.default)(MonthView, _Component);
  var _super = _createSuper(MonthView);
  function MonthView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, MonthView);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps) {
      if (prevProps.locale !== _this.props.locale || prevProps.dateFormat !== _this.props.dateFormat) {
        _this.updateToMoment(_this.props);
      }
    });
    _this.state = {
      range: props.defaultRange,
      date: props.defaultDate,
      hoverRange: props.defaultHoverRange,
      activeDate: props.defaultActiveDate,
      viewDate: props.defaultViewDate
    };
    _this.monthViewRef = (0, _react.createRef)();
    _this.updateToMoment(props);
    return _this;
  }
  (0, _createClass2.default)(MonthView, [{
    key: "isInView",
    value: function isInView(mom, props) {
      return _isInView(mom, props || this.p);
    }
  }, {
    key: "updateToMoment",
    value: function updateToMoment(props) {
      this.toMoment = function (value, dateFormat) {
        return (0, _toMoment.default)(value, {
          locale: props.locale,
          dateFormat: dateFormat || props.dateFormat
        });
      };
      TODAY = +this.toMoment().startOf('day');
    }
  }, {
    key: "prepareClassName",
    value: function prepareClassName(props) {
      return (0, _join.default)(props.className, props.rootClassName, "".concat(props.rootClassName, "--theme-").concat(props.theme), props.size === undefined ? "".concat(props.rootClassName, "-relative") : null);
    }
  }, {
    key: "prepareProps",
    value: function prepareProps(thisProps, state) {
      var _this2 = this;
      var props = this.p = (0, _assign.default)({}, thisProps);
      state = state || this.state;
      props.hoverRange = props.hoverRange === undefined ? this.state.hoverRange : props.hoverRange;
      props.dayPropsMap = {};
      props.className = this.prepareClassName && this.prepareClassName(props);
      var minDate = props.minDate,
        maxDate = props.maxDate;
      if (minDate) {
        props.minDateMoment = this.toMoment(props.minDate).startOf('day');
        props.minDate = +props.minDateMoment;
      }
      if (maxDate) {
        props.maxDateMoment = this.toMoment(props.maxDate);
        props.maxDate = +props.maxDateMoment;
      }
      var date = prepareDate(props, state);
      if (date) {
        props.moment = props.moment || (props.range ? null : this.toMoment(date).startOf('day'));
        props.timestamp = props.moment ? +props.moment : null;
      }
      props.viewMoment = props.viewMoment || this.toMoment(prepareViewDate(props, state));
      if (props.constrainViewDate && props.minDate && props.viewMoment.isBefore(props.minDate)) {
        props.minConstrained = true;
        props.viewMoment = this.toMoment(props.minDate);
      }
      if (props.constrainViewDate && props.maxDate && props.viewMoment.isAfter(props.maxDate)) {
        props.maxConstrained = true;
        props.viewMoment = this.toMoment(props.maxDate);
      }
      props.viewMonthStart = this.toMoment(props.viewMoment).startOf('month');
      props.viewMonthEnd = this.toMoment(props.viewMoment).endOf('month');
      var range = prepareRange(props, state);
      if (range) {
        props.range = range.map(function (d) {
          return _this2.toMoment(d).startOf('day');
        });
        props.rangeStart = state.rangeStart || (props.range.length == 1 ? props.range[0] : null);
      }
      props.daysInView = (0, _BasicMonthView.getDaysInMonthView)(props.viewMoment, props);
      var activeDate = prepareActiveDate.call(this, props, state);
      if (activeDate) {
        props.activeDate = +this.toMoment(activeDate).startOf('day');
      }
      return props;
    }
  }, {
    key: "getViewMoment",
    value: function getViewMoment() {
      return this.p.viewMoment;
    }
  }, {
    key: "getViewSize",
    value: function getViewSize() {
      return 1;
    }
  }, {
    key: "preparePrevNextClassName",
    value: function preparePrevNextClassName(timestamp, props) {
      var viewMonthStart = props.viewMonthStart,
        viewMonthEnd = props.viewMonthEnd,
        rootClassName = props.rootClassName;
      var before = timestamp < viewMonthStart;
      var after = timestamp > viewMonthEnd;
      var thisMonth = !before && !after;
      return (0, _join.default)(timestamp == TODAY && "".concat(rootClassName, "-day--today"), props.highlightToday && timestamp == TODAY && "".concat(rootClassName, "-day--today-highlight"), before && "".concat(rootClassName, "-day--prev-month"), before && !props.showDaysBeforeMonth && "".concat(rootClassName, "-day--hidden"), after && "".concat(rootClassName, "-day--next-month"), after && !props.showDaysAfterMonth && "".concat(rootClassName, "-day--hidden"), thisMonth && "".concat(rootClassName, "-day--this-month"));
    }
  }, {
    key: "prepareMinMaxProps",
    value: function prepareMinMaxProps(timestamp, props) {
      var classes = [];
      var rootClassName = this.props.rootClassName;
      var isBeforeMinDate = false;
      var isAfterMaxDate = false;
      var minDate = props.minDate,
        maxDate = props.maxDate;
      if (minDate && timestamp < minDate) {
        classes.push("".concat(rootClassName, "-day--disabled-min"));
        isBeforeMinDate = true;
      }
      if (maxDate && timestamp > maxDate) {
        classes.push("".concat(rootClassName, "-day--disabled-max"));
        isAfterMaxDate = true;
      }
      return {
        className: (0, _join.default)(classes),
        isBeforeMinDate: isBeforeMinDate,
        isAfterMaxDate: isAfterMaxDate,
        disabled: isBeforeMinDate || isAfterMaxDate
      };
    }
  }, {
    key: "prepareWeekendClassName",
    value: function prepareWeekendClassName(dateMoment, _ref) {
      var highlightWeekends = _ref.highlightWeekends;
      var weekDay = dateMoment.day();
      var rootClassName = this.props.rootClassName;
      if (weekDay === 0 || weekDay === 6) {
        return (0, _join.default)("".concat(rootClassName, "-day--weekend"), highlightWeekends && "".concat(rootClassName, "-day--weekend-highlight"));
      }
      return '';
    }
  }, {
    key: "prepareRangeProps",
    value: function prepareRangeProps(dateMoment, props) {
      var inRange = false;
      var className = [];
      var hoverRange = props.hoverRange,
        range = props.range,
        rootClassName = props.rootClassName;
      if (range) {
        var _range = (0, _slicedToArray2.default)(range, 2),
          rangeStart = _range[0],
          rangeEnd = _range[1];
        if (!range.length) {
          rangeStart = props.rangeStart;
        }
        var rangeName = 'range';
        if (rangeStart && dateMoment.isSame(rangeStart)) {
          className.push("".concat(rootClassName, "-day--").concat(rangeName, "-start"));
          className.push("".concat(rootClassName, "-day--in-").concat(rangeName));
          if (!rangeEnd) {
            className.push("".concat(rootClassName, "-day--").concat(rangeName, "-end"));
          }
          inRange = true;
        }
        if (rangeEnd && dateMoment.isSame(rangeEnd)) {
          className.push("".concat(rootClassName, "-day--").concat(rangeName, "-end"));
          className.push("".concat(rootClassName, "-day--in-").concat(rangeName));
          inRange = true;
        }
        if (!inRange && (0, _isInRange.default)(dateMoment, range)) {
          className.push("".concat(rootClassName, "-day--in-").concat(rangeName));
          inRange = true;
        }
      }
      if (range && range.length < 2 && hoverRange && (0, _isInRange.default)(dateMoment, hoverRange)) {
        className.push("".concat(rootClassName, "-day--in-hover-range"));
        if (dateMoment.isSame(hoverRange[0])) {
          className.push("".concat(rootClassName, "-day--hover-range-start"));
        }
        if (dateMoment.isSame(hoverRange[1])) {
          className.push("".concat(rootClassName, "-day--hover-range-end"));
        }
      }
      return {
        inRange: inRange,
        className: (0, _join.default)(className)
      };
    }
  }, {
    key: "prepareDayProps",
    value: function prepareDayProps(renderDayProps, props) {
      var timestamp = renderDayProps.timestamp,
        dateMoment = renderDayProps.dateMoment,
        className = renderDayProps.className;
      props = props || this.p;
      var _props = props,
        rootClassName = _props.rootClassName;
      var result = {};
      var minMaxProps = this.prepareMinMaxProps(timestamp, props);
      var rangeProps = this.prepareRangeProps(dateMoment, props);
      var weekendClassName = this.prepareWeekendClassName(dateMoment, props);
      var prevNextClassName = this.preparePrevNextClassName(timestamp, props);
      var currentTimestamp = props.timestamp;
      (0, _assign.default)(result, minMaxProps, rangeProps, {
        children: _react.default.createElement("div", {
          className: "".concat(rootClassName, "-day-text")
        }, renderDayProps.day),
        className: (0, _join.default)([minMaxProps.className, rangeProps.className, prevNextClassName, weekendClassName, timestamp == currentTimestamp ? "".concat(rootClassName, "-day--value") : null, timestamp == props.activeDate ? "".concat(rootClassName, "-day--active") : null, className])
      });
      if (!result.disabled && props.isDisabledDay) {
        result.disabled = props.isDisabledDay(renderDayProps, props);
      }
      return result;
    }
  }, {
    key: "focus",
    value: function focus() {
      var domNode = this.getDOMNode();
      if (domNode) {
        domNode.focus();
      }
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      return this.monthViewRef.current;
    }
  }, {
    key: "onDayTextMouseEnter",
    value: function onDayTextMouseEnter(_ref2) {
      var dateMoment = _ref2.dateMoment,
        timestamp = _ref2.timestamp;
      if (!this.state.focused) {
        this.focus();
      }
      this.onActiveDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "renderDay",
    value: function renderDay(renderProps) {
      var props = this.p;
      var _renderProps = renderProps,
        dateMoment = _renderProps.dateMoment,
        timestamp = _renderProps.timestamp;
      var rootClassName = renderProps.rootClassName || this.props.rootClassName;
      (0, _assign.default)(renderProps, this.prepareDayProps(renderProps, props));
      if (props.range && props.highlightRangeOnMouseMove) {
        renderProps.onMouseEnter = this.handleDayMouseEnter.bind(this, renderProps);
      }
      if (typeof props.onRenderDay === 'function') {
        var newRenderProps = props.onRenderDay(renderProps);
        if (newRenderProps !== undefined) {
          renderProps = newRenderProps;
        }
      }
      if (renderProps.disabled) {
        renderProps.className = (0, _join.default)("".concat(rootClassName, "-day--disabled"), renderProps.className);
      } else {
        var eventParam = {
          dateMoment: dateMoment,
          timestamp: timestamp
        };
        var onClick = this.handleClick.bind(this, eventParam);
        var prevOnClick = renderProps.onClick;
        renderProps.onClick = prevOnClick ? function () {
          prevOnClick.apply(void 0, arguments);
          onClick.apply(void 0, arguments);
        } : onClick;
        if (props.activateOnHover && this.props.activeDate !== null) {
          var onMouseEnter = this.onDayTextMouseEnter.bind(this, eventParam);
          var prevOnMouseEnter = renderProps.onMouseEnter;
          renderProps.onMouseEnter = prevOnMouseEnter ? function () {
            prevOnMouseEnter.apply(void 0, arguments);
            onMouseEnter.apply(void 0, arguments);
          } : onMouseEnter;
        }
      }
      props.dayPropsMap[timestamp] = renderProps;
      var renderFunction = props.renderDay || RENDER_DAY;
      var result = renderFunction(renderProps);
      if (result === undefined) {
        result = RENDER_DAY(renderProps);
      }
      return result;
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.p = this.prepareProps(this.props);
      var basicViewProps = (0, _assign.default)({}, props);
      delete basicViewProps.activeDate;
      delete basicViewProps.activateOnHover;
      delete basicViewProps.arrows;
      delete basicViewProps.cleanup;
      delete basicViewProps.clockTabIndex;
      delete basicViewProps.constrainViewDate;
      delete basicViewProps.constrainActiveInView;
      delete basicViewProps.dayPropsMap;
      delete basicViewProps.date;
      delete basicViewProps.defaultActiveDate;
      delete basicViewProps.defaultDate;
      delete basicViewProps.defaultRange;
      delete basicViewProps.defaultViewDate;
      delete basicViewProps.enableMonthDecadeView;
      delete basicViewProps.focusOnFooterMouseDown;
      delete basicViewProps.focusOnNavMouseDown;
      delete basicViewProps.footer;
      delete basicViewProps.footerClearDate;
      delete basicViewProps.getTransitionTime;
      delete basicViewProps.highlightRangeOnMouseMove;
      delete basicViewProps.highlightToday;
      delete basicViewProps.highlightWeekends;
      delete basicViewProps.hoverRange;
      delete basicViewProps.insideField;
      delete basicViewProps.insideMultiView;
      delete basicViewProps.isDatePicker;
      delete basicViewProps.isDisabledDay;
      delete basicViewProps.maxConstrained;
      delete basicViewProps.maxDate;
      delete basicViewProps.maxDateMoment;
      delete basicViewProps.minConstrained;
      delete basicViewProps.minDate;
      delete basicViewProps.minDateMoment;
      delete basicViewProps.navBarArrows;
      delete basicViewProps.navNext;
      delete basicViewProps.navigation;
      delete basicViewProps.navigate;
      delete basicViewProps.navOnDateClick;
      delete basicViewProps.navPrev;
      delete basicViewProps.onActiveDateChange;
      delete basicViewProps.onChange;
      delete basicViewProps.onHoverRangeChange;
      delete basicViewProps.onRangeChange;
      delete basicViewProps.onViewDateChange;
      delete basicViewProps.onTransitionStart;
      delete basicViewProps.partialRange;
      delete basicViewProps.range;
      delete basicViewProps.rangeStart;
      delete basicViewProps.renderNavBar;
      delete basicViewProps.select;
      delete basicViewProps.showDaysAfterMonth;
      delete basicViewProps.showDaysBeforeMonth;
      delete basicViewProps.showClock;
      delete basicViewProps.theme;
      delete basicViewProps.viewDate;
      delete basicViewProps.viewMonthEnd;
      delete basicViewProps.viewMonthStart;
      delete basicViewProps.okButtonText;
      delete basicViewProps.okButton;
      delete basicViewProps.enableMonthDecadeViewAnimation;
      delete basicViewProps.showMonthDecadeViewAnimation;
      if (typeof props.cleanup == 'function') {
        props.cleanup(basicViewProps);
      }
      return _react.default.createElement(_BasicMonthView.default, _objectSpread(_objectSpread({
        key: "basic_month",
        tabIndex: 0,
        innerRef: this.monthViewRef
      }, basicViewProps), {}, {
        renderChildren: this.renderChildren,
        onKeyDown: this.onViewKeyDown,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        renderDay: this.renderDay,
        viewMoment: props.viewMoment,
        onMouseLeave: props.highlightRangeOnMouseMove ? this.handleViewMouseLeave : null
      }));
    }
  }, {
    key: "handleViewMouseLeave",
    value: function handleViewMouseLeave(event) {
      if (this.props.onMouseLeave) {
        this.props.onMouseLeave(event);
      }
      if (this.state.hoverRange) {
        this.setHoverRange(null);
      }
    }
  }, {
    key: "renderChildren",
    value: function renderChildren(children) {
      var props = this.p;
      var navBar = this.renderNavBar(props);
      var footer = this.renderFooter(props);
      var result = [navBar, children, footer];
      if (props.renderChildren) {
        return props.renderChildren(result);
      }
      return result;
    }
  }, {
    key: "focusFromFooter",
    value: function focusFromFooter() {
      if (!this.isFocused() && this.props.focusOnFooterMouseDown) {
        this.focus();
      }
    }
  }, {
    key: "onFooterTodayClick",
    value: function onFooterTodayClick() {
      this.focusFromFooter();
      if (this.props.onFooterTodayClick) {
        if (this.props.onFooterTodayClick() === false) {
          return;
        }
      }
      this.select({
        dateMoment: this.toMoment(Date.now())
      });
    }
  }, {
    key: "onFooterClearClick",
    value: function onFooterClearClick() {
      this.focusFromFooter();
      if (this.props.onFooterClearClick) {
        if (this.props.onFooterClearClick() === false) {
          return;
        }
      }
      this.select({
        dateMoment: null
      });
    }
  }, {
    key: "onFooterOkClick",
    value: function onFooterOkClick() {
      this.focusFromFooter();
      if (this.props.onFooterOkClick) {
        this.props.onFooterOkClick();
      }
    }
  }, {
    key: "onFooterCancelClick",
    value: function onFooterCancelClick() {
      if (this.props.onFooterCancelClick) {
        this.props.onFooterCancelClick();
      }
    }
  }, {
    key: "renderFooter",
    value: function renderFooter(props) {
      return _renderFooter((0, _assign.default)({}, props, {
        selectDate: this.select,
        owner: this
      }), this);
    }
  }, {
    key: "renderNavBar",
    value: function renderNavBar(props) {
      var _this3 = this;
      var theme = props.theme;
      var childNavBar = _react.default.Children.toArray(props.children).filter(function (c) {
        return c && c.props && c.props.isDatePickerNavBar;
      })[0];
      var ref = function ref(navBar) {
        _this3.navBar = navBar;
      };
      var okButtonText = props.okButtonText,
        cancelButtonText = props.cancelButtonText,
        locale = props.locale;
      var defaultProps = (0, _assignDefined.default)({}, {
        okButtonText: okButtonText,
        cancelButtonText: cancelButtonText,
        locale: locale
      });
      if (!childNavBar) {
        if (props.navigation || props.renderNavBar) {
          return this.renderNavBarComponent((0, _assignDefined.default)(_objectSpread(_objectSpread({}, defaultProps), {}, {
            minDate: props.minDate,
            maxDate: props.maxDate,
            theme: theme,
            secondary: true,
            date: props.moment,
            viewMoment: props.viewMoment,
            onViewDateChange: this.onNavViewDateChange,
            onMouseDown: this.onNavMouseDown,
            arrows: props.navBarArrows,
            ref: ref,
            enableMonthDecadeViewAnimation: props.enableMonthDecadeViewAnimation,
            showMonthDecadeViewAnimation: props.showMonthDecadeViewAnimation
          }), {
            enableMonthDecadeView: props.enableMonthDecadeView
          }));
        }
        return null;
      }
      var navBarProps = (0, _assign.default)({}, childNavBar.props, (0, _assignDefined.default)(_objectSpread(_objectSpread({}, defaultProps), {}, {
        viewMoment: props.viewMoment,
        date: props.moment,
        theme: theme,
        ref: ref,
        minDate: props.minDate,
        maxDate: props.maxDate
      }), {
        enableMonthDecadeView: props.enableMonthDecadeView
      }));
      var prevOnViewDateChange = navBarProps.onViewDateChange;
      var onViewDateChange = this.onViewDateChange;
      if (prevOnViewDateChange) {
        onViewDateChange = function onViewDateChange() {
          prevOnViewDateChange.apply(void 0, arguments);
          _this3.onNavViewDateChange.apply(_this3, arguments);
        };
      }
      navBarProps.onViewDateChange = onViewDateChange;
      var prevOnMouseDown = navBarProps.onMouseDown;
      var onMouseDown = this.onNavMouseDown;
      if (prevOnMouseDown) {
        onMouseDown = function onMouseDown() {
          prevOnMouseDown.apply(void 0, arguments);
          _this3.onNavMouseDown.apply(_this3, arguments);
        };
      }
      navBarProps.onMouseDown = onMouseDown;
      if (navBarProps) {
        return this.renderNavBarComponent(navBarProps);
      }
      return null;
    }
  }, {
    key: "onNavMouseDown",
    value: function onNavMouseDown(event) {
      if (this.props.focusOnNavMouseDown && !this.isFocused()) {
        this.focus();
      }
    }
  }, {
    key: "renderNavBarComponent",
    value: function renderNavBarComponent(navBarProps) {
      if (this.props.renderNavBar) {
        return this.props.renderNavBar(navBarProps);
      }
      return _react.default.createElement(_NavBar.default, _objectSpread({
        key: "month_navBar",
        showClock: this.props.showClock
      }, navBarProps));
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.state.focused;
    }
  }, {
    key: "onFocus",
    value: function onFocus(event) {
      this.setState({
        focused: true
      });
      this.props.onFocus(event);
    }
  }, {
    key: "onBlur",
    value: function onBlur(event) {
      this.setState({
        focused: false
      });
      this.hideMonthDecadeView();
      this.props.onBlur(event);
    }
  }, {
    key: "showMonthDecadeView",
    value: function showMonthDecadeView() {
      if (this.navBar) {
        this.navBar.showMonthDecadeView();
      }
    }
  }, {
    key: "hideMonthDecadeView",
    value: function hideMonthDecadeView() {
      if (this.navBar) {
        this.navBar.hideMonthDecadeView();
      }
    }
  }, {
    key: "isMonthDecadeViewVisible",
    value: function isMonthDecadeViewVisible() {
      if (this.navBar) {
        return this.navBar.isMonthDecadeViewVisible();
      }
      return false;
    }
  }, {
    key: "tryNavBarKeyDown",
    value: function tryNavBarKeyDown(event) {
      if (this.navBar && this.navBar.getMonthDecadeView) {
        var monthDecadeViewView = this.navBar.getMonthDecadeView();
        if (monthDecadeViewView && monthDecadeViewView.onKeyDown) {
          monthDecadeViewView.onKeyDown(event);
          return true;
        }
      }
      return false;
    }
  }, {
    key: "onViewKeyDown",
    value: function onViewKeyDown(event) {
      if (this.tryNavBarKeyDown(event)) {
        return;
      }
      return _onKeyDown.default.call(this, event);
    }
  }, {
    key: "confirm",
    value: function confirm(date, event) {
      event.preventDefault();
      if (this.props.confirm) {
        return this.props.confirm(date, event);
      }
      var dateMoment = this.toMoment(date);
      this.select({
        dateMoment: dateMoment,
        timestamp: +dateMoment
      }, event);
      return undefined;
    }
  }, {
    key: "navigate",
    value: function navigate(dir, event) {
      var _this4 = this;
      var props = this.p;
      var getNavigationDate = function getNavigationDate(dir, date, dateFormat) {
        var mom = _moment.default.isMoment(date) ? date : _this4.toMoment(date, dateFormat);
        return typeof dir == 'function' ? dir(mom) : mom.add(dir, 'day');
      };
      if (props.navigate) {
        return props.navigate(dir, event, getNavigationDate);
      }
      event.preventDefault();
      if (props.activeDate) {
        var nextMoment = getNavigationDate(dir, props.activeDate);
        this.gotoViewDate({
          dateMoment: nextMoment
        });
      }
      return undefined;
    }
  }, {
    key: "handleDayMouseEnter",
    value: function handleDayMouseEnter(dayProps) {
      var props = this.p;
      var rangeStart = props.rangeStart,
        range = props.range;
      var partial = !!(rangeStart && range.length < 2);
      if (partial) {
        this.setHoverRange((0, _clampRange.default)([rangeStart, dayProps.dateMoment]));
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(_ref3, event) {
      var timestamp = _ref3.timestamp,
        dateMoment = _ref3.dateMoment;
      var props = this.p;
      if (props.minDate && timestamp < props.minDate) {
        return;
      }
      if (props.maxDate && timestamp > props.maxDate) {
        return;
      }
      event.target.value = timestamp;
      this.select({
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "select",
    value: function select(_ref4, event) {
      var dateMoment = _ref4.dateMoment,
        timestamp = _ref4.timestamp;
      if (dateMoment && timestamp === undefined) {
        timestamp = +dateMoment;
      }
      if (this.props.select) {
        return this.props.select({
          dateMoment: dateMoment,
          timestamp: timestamp
        }, event);
      }
      if (!timestamp) {
        timestamp = +dateMoment;
      }
      this.gotoViewDate({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
      var props = this.p;
      var range = props.range;
      if (range) {
        this.selectRange({
          dateMoment: dateMoment,
          timestamp: timestamp
        }, event);
      } else {
        this.onChange({
          dateMoment: dateMoment,
          timestamp: timestamp
        }, event);
      }
      return undefined;
    }
  }, {
    key: "selectRange",
    value: function selectRange(_ref5, event) {
      var dateMoment = _ref5.dateMoment,
        timestamp = _ref5.timestamp;
      var props = this.p;
      var range = props.range;
      var rangeStart = props.rangeStart;
      if (dateMoment == null) {
        this.setState({
          rangeStart: null
        });
        this.onRangeChange([], event);
        return;
      }
      if (!rangeStart) {
        this.setState({
          rangeStart: dateMoment
        });
        if (range.length == 2) {
          this.onRangeChange([], event);
        }
      } else {
        this.setState({
          rangeStart: null
        });
        this.onRangeChange((0, _clampRange.default)([rangeStart, dateMoment]), event);
      }
    }
  }, {
    key: "format",
    value: function format(mom) {
      return mom == null ? '' : mom.format(this.props.dateFormat);
    }
  }, {
    key: "setHoverRange",
    value: function setHoverRange(hoverRange) {
      if (this.props.hoverRange === undefined) {
        this.setState({
          hoverRange: hoverRange
        });
      }
      if (this.props.onHoverRangeChange) {
        this.props.onHoverRangeChange(hoverRange);
      }
    }
  }, {
    key: "onRangeChange",
    value: function onRangeChange(range, event) {
      var _this5 = this;
      this.setState({
        range: this.props.range === undefined ? range : null
      });
      this.setHoverRange(null);
      if (this.props.onRangeChange) {
        var newRange = range.map(function (m) {
          var dateMoment = _this5.toMoment(m);
          return {
            dateString: dateMoment.format(_this5.props.dateFormat),
            dateMoment: dateMoment,
            timestamp: +dateMoment
          };
        });
        var formatted = newRange.map(function (o) {
          return o.dateString;
        });
        this.props.onRangeChange(formatted, newRange, event);
      }
    }
  }, {
    key: "onChange",
    value: function onChange(_ref6, event) {
      var dateMoment = _ref6.dateMoment,
        timestamp = _ref6.timestamp,
        noCollapse = _ref6.noCollapse;
      if (this.props.date === undefined) {
        this.setState({
          date: timestamp
        });
      }
      if (this.props.onChange) {
        var dateString = this.format(dateMoment);
        this.props.onChange(dateString, {
          dateMoment: dateMoment,
          timestamp: timestamp,
          dateString: dateString,
          noCollapse: noCollapse
        }, event);
      }
    }
  }, {
    key: "onNavViewDateChange",
    value: function onNavViewDateChange(dateString, _ref7) {
      var dateMoment = _ref7.dateMoment,
        timestamp = _ref7.timestamp;
      this.onViewDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onViewDateChange",
    value: function onViewDateChange(_ref8) {
      var dateMoment = _ref8.dateMoment,
        timestamp = _ref8.timestamp;
      var minDate;
      var maxDate;
      if (this.p.minDateMoment) {
        minDate = +this.toMoment(this.p.minDateMoment).startOf('month');
      }
      if (this.p.maxDateMoment) {
        maxDate = +this.toMoment(this.p.maxDateMoment).endOf('month');
      }
      if (this.props.constrainViewDate && !isDateInMinMax(timestamp, {
        minDate: minDate,
        maxDate: maxDate
      })) {
        return;
      }
      if (this.props.viewDate === undefined && this.props.navOnDateClick) {
        this.setState({
          viewDate: timestamp
        });
      }
      if (this.props.onViewDateChange) {
        var dateString = this.format(dateMoment);
        this.props.onViewDateChange(dateString, {
          dateMoment: dateMoment,
          dateString: dateString,
          timestamp: timestamp
        });
      }
    }
  }, {
    key: "isValidActiveDate",
    value: function isValidActiveDate(date, props) {
      return _isValidActiveDate(date, props || this.p);
    }
  }, {
    key: "onActiveDateChange",
    value: function onActiveDateChange(_ref9) {
      var dateMoment = _ref9.dateMoment,
        timestamp = _ref9.timestamp;
      if (!_isValidActiveDate(timestamp, this.p)) {
        return;
      }
      var props = this.p;
      var range = props.range;
      if (range && props.rangeStart) {
        var newRange = (0, _clampRange.default)([props.rangeStart, dateMoment]);
        if (props.partialRange) {
          this.onRangeChange(newRange);
        }
        this.setState({
          rangeStart: props.rangeStart,
          range: newRange
        });
      }
      if (this.props.activeDate === undefined) {
        this.setState({
          activeDate: timestamp
        });
      }
      if (this.props.onActiveDateChange) {
        var dateString = this.format(dateMoment);
        this.props.onActiveDateChange(dateString, {
          dateMoment: dateMoment,
          timestamp: timestamp,
          dateString: dateString
        });
      }
    }
  }, {
    key: "gotoViewDate",
    value: function gotoViewDate(_ref10) {
      var dateMoment = _ref10.dateMoment,
        timestamp = _ref10.timestamp;
      if (!timestamp) {
        timestamp = dateMoment == null ? null : +dateMoment;
      }
      this.onViewDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
      this.onActiveDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }]);
  return MonthView;
}(_reactClass.default);
exports.default = MonthView;
MonthView.defaultProps = {
  rootClassName: 'inovua-react-toolkit-calendar__month-view',
  dateFormat: 'YYYY-MM-DD',
  theme: 'default',
  onBlur: function onBlur() {},
  onFocus: function onFocus() {},
  footerClearDate: null,
  okButton: true,
  partialRange: true,
  activateOnHover: false,
  constrainActiveInView: false,
  showDaysBeforeMonth: true,
  showDaysAfterMonth: true,
  highlightWeekends: true,
  highlightToday: true,
  navOnDateClick: true,
  navigation: true,
  constrainViewDate: true,
  highlightRangeOnMouseMove: false,
  isDatePicker: true,
  enableMonthDecadeView: true,
  focusOnNavMouseDown: true,
  focusOnFooterMouseDown: true,
  enableMonthDecadeViewAnimation: true,
  showMonthDecadeViewAnimation: 300
};
var DateType = _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object, _propTypes.default.string]);
MonthView.propTypes = {
  rootClassName: _propTypes.default.string,
  navOnDateClick: _propTypes.default.bool,
  isDisabledDay: _propTypes.default.func,
  onChange: _propTypes.default.func,
  onViewDateChange: _propTypes.default.func,
  onActiveDateChange: _propTypes.default.func,
  dateFormat: _propTypes.default.string,
  date: DateType,
  theme: _propTypes.default.string,
  onBlur: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  footerClearDate: _propTypes.default.object,
  partialRange: _propTypes.default.bool,
  activateOnHover: _propTypes.default.bool,
  constrainActiveInView: _propTypes.default.bool,
  showDaysBeforeMonth: _propTypes.default.bool,
  showDaysAfterMonth: _propTypes.default.bool,
  highlightWeekends: _propTypes.default.bool,
  highlightToday: _propTypes.default.bool,
  navigation: _propTypes.default.bool,
  constrainViewDate: _propTypes.default.bool,
  highlightRangeOnMouseMove: _propTypes.default.bool,
  isDatePicker: _propTypes.default.bool,
  onRenderDay: _propTypes.default.func,
  getTransitionTime: _propTypes.default.func,
  cleanup: _propTypes.default.func,
  navigate: _propTypes.default.func,
  onRangeChange: _propTypes.default.func,
  onHoverRangeChange: _propTypes.default.func,
  renderNavBar: _propTypes.default.func,
  select: _propTypes.default.func,
  renderChildren: _propTypes.default.func,
  onFooterTodayClick: _propTypes.default.func,
  onFooterClearClick: _propTypes.default.func,
  onFooterCancelClick: _propTypes.default.func,
  onMouseLeave: _propTypes.default.any,
  clockTabIndex: _propTypes.default.number,
  index: _propTypes.default.number,
  dayPropsMap: _propTypes.default.object,
  insideMultiView: _propTypes.default.bool,
  insideField: _propTypes.default.bool,
  enableMonthDecadeView: _propTypes.default.bool,
  focusOnNavMouseDown: _propTypes.default.bool,
  focusOnFooterMouseDown: _propTypes.default.bool,
  maxConstrained: _propTypes.default.bool,
  minConstrained: _propTypes.default.bool,
  enableMonthDecadeViewAnimation: _propTypes.default.bool,
  showMonthDecadeViewAnimation: _propTypes.default.number,
  disabled: _propTypes.default.bool,
  footer: _propTypes.default.bool,
  navBarArrows: _propTypes.default.shape({
    prev: _propTypes.default.node,
    next: _propTypes.default.node,
    right: _propTypes.default.node,
    left: _propTypes.default.node
  }),
  cancelButton: _propTypes.default.bool,
  cancelButtonText: _propTypes.default.node,
  okButton: _propTypes.default.bool,
  okButtonText: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  showClock: _propTypes.default.bool,
  defaultDate: DateType,
  activeDate: DateType,
  defaultActiveDate: DateType,
  rangeStart: DateType,
  range: _propTypes.default.arrayOf(DateType),
  defaultRange: _propTypes.default.arrayOf(DateType),
  hoverRange: _propTypes.default.arrayOf(DateType),
  defaultHoverRange: _propTypes.default.arrayOf(DateType),
  minDate: DateType,
  maxDate: DateType,
  viewDate: DateType,
  defaultViewDate: DateType
};