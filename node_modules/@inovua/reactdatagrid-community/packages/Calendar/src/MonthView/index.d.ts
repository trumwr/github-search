/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="react" />
import Component from '../../../react-class';
import NAV_KEYS from './navKeys';
declare const renderFooter: (props: any, buttonHandlers: any) => any;
export default class MonthView extends Component {
    isInView(mom: any, props: any): any;
    constructor(props: any);
    componentDidUpdate: (prevProps: any) => void;
    updateToMoment(props: any): void;
    prepareClassName(props: any): string;
    prepareProps(thisProps: any, state: any): any;
    getViewMoment(): any;
    getViewSize(): number;
    preparePrevNextClassName(timestamp: any, props: any): string;
    prepareMinMaxProps(timestamp: any, props: any): {
        className: string;
        isBeforeMinDate: boolean;
        isAfterMaxDate: boolean;
        disabled: boolean;
    };
    prepareWeekendClassName(dateMoment: any, { highlightWeekends }: {
        highlightWeekends: any;
    }): string;
    prepareRangeProps(dateMoment: any, props: any): {
        inRange: boolean;
        className: string;
    };
    prepareDayProps(renderDayProps: any, props: any): {};
    focus(): void;
    getDOMNode(): any;
    onDayTextMouseEnter({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }): void;
    renderDay(renderProps: any): any;
    render(): JSX.Element;
    handleViewMouseLeave(event: any): void;
    renderChildren(children: any): any;
    focusFromFooter(): void;
    onFooterTodayClick(): void;
    onFooterClearClick(): void;
    onFooterOkClick(): void;
    onFooterCancelClick(): void;
    renderFooter(props: any): any;
    renderNavBar(props: any): any;
    onNavMouseDown(event: any): void;
    renderNavBarComponent(navBarProps: any): any;
    isFocused(): any;
    onFocus(event: any): void;
    onBlur(event: any): void;
    showMonthDecadeView(): void;
    hideMonthDecadeView(): void;
    isMonthDecadeViewVisible(): any;
    tryNavBarKeyDown(event: any): boolean;
    onViewKeyDown(event: any): void;
    confirm(date: any, event: any): any;
    navigate(dir: any, event: any): any;
    handleDayMouseEnter(dayProps: any): void;
    handleClick({ timestamp, dateMoment }: {
        timestamp: any;
        dateMoment: any;
    }, event: any): void;
    select({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }, event: any): any;
    selectRange({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }, event: any): void;
    format(mom: any): any;
    setHoverRange(hoverRange: any): void;
    onRangeChange(range: any, event: any): void;
    onChange({ dateMoment, timestamp, noCollapse }: {
        dateMoment: any;
        timestamp: any;
        noCollapse: any;
    }, event: any): void;
    onNavViewDateChange(dateString: any, { dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }): void;
    onViewDateChange({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }): void;
    isValidActiveDate(date: any, props: any): boolean;
    onActiveDateChange({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }): void;
    gotoViewDate({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }): void;
}
export { NAV_KEYS, renderFooter };
