/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _moment = _interopRequireDefault(require("moment"));
var _reactClass = _interopRequireDefault(require("../../../react-class"));
var _Flex = require("../../../Flex");
var _assign = _interopRequireDefault(require("../../../../common/assign"));
var _Field = _interopRequireDefault(require("../../../Field"));
var _DateFormatInput = _interopRequireDefault(require("../DateFormatInput"));
var _InlineBlock = _interopRequireDefault(require("../InlineBlock"));
var _Overlay = _interopRequireDefault(require("../../../Overlay"));
var _icons = require("./icons");
var _join = _interopRequireDefault(require("../../../../common/join"));
var _toMoment2 = _interopRequireDefault(require("../toMoment"));
var _Calendar = _interopRequireWildcard(require("../Calendar"));
var _joinFunctions = _interopRequireDefault(require("../joinFunctions"));
var _assignDefined = _interopRequireDefault(require("../assignDefined"));
var _forwardTime = _interopRequireDefault(require("../utils/forwardTime"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var POSITIONS = {
  top: 'top',
  bottom: 'bottom'
};
var defaultOverlayProps = {
  updatePositionOnScroll: true,
  rootClassName: 'inovua-react-toolkit-date-input__overlay',
  positions: ['tl-bl', 'bl-tl'],
  offset: 2,
  theme: null,
  visible: true
};
var getPicker = function getPicker(props) {
  var calendarProps = props.calendarProps;
  return _react.default.Children.toArray(props.children).filter(function (c) {
    return c && c.props && c.props.isDatePicker;
  })[0] || _react.default.createElement(_Calendar.default, _objectSpread({}, calendarProps));
};
var FIND_INPUT = function FIND_INPUT(c) {
  return c && (c.type === 'input' || c.props && c.isDateInput);
};
var preventDefault = function preventDefault(event) {
  event.preventDefault();
};
var DateInput = function (_Component) {
  (0, _inherits2.default)(DateInput, _Component);
  var _super = _createSuper(DateInput);
  function DateInput(props) {
    var _this;
    (0, _classCallCheck2.default)(this, DateInput);
    _this = _super.call(this, props);
    _this.state = {
      viewDate: props.viewDate || props.defaultViewDate,
      value: props.defaultValue === undefined ? '' : props.defaultValue,
      expanded: props.defaultExpanded || false,
      focused: false
    };
    return _this;
  }
  (0, _createClass2.default)(DateInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.unmounted = false;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unmounted = true;
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.prepareProps(this.props);
      var flexProps = (0, _assign.default)({}, props);
      delete flexProps.activeDate;
      delete flexProps.rootClassName;
      delete flexProps.cleanup;
      delete flexProps.clearIcon;
      delete flexProps.cancelButton;
      delete flexProps.collapseOnDateClick;
      delete flexProps.date;
      delete flexProps.dateFormat;
      delete flexProps.displayFormat;
      delete flexProps.expanded;
      delete flexProps.defaultExpanded;
      delete flexProps.expandOnFocus;
      delete flexProps.footer;
      delete flexProps.forceValidDate;
      delete flexProps.locale;
      delete flexProps.onExpand;
      delete flexProps.onExpandChange;
      delete flexProps.onCollapse;
      delete flexProps.minDate;
      delete flexProps.maxDate;
      delete flexProps.pickerProps;
      delete flexProps.position;
      delete flexProps.showClock;
      delete flexProps.skipTodayTime;
      delete flexProps.strict;
      delete flexProps.valid;
      delete flexProps.validateOnBlur;
      delete flexProps.viewDate;
      delete flexProps.value;
      delete flexProps.text;
      delete flexProps.theme;
      delete flexProps.updateOnDateClick;
      delete flexProps.defaultViewDate;
      delete flexProps.onViewDateChange;
      delete flexProps.onActiveDateChange;
      delete flexProps.renderInput;
      delete flexProps.renderClearIcon;
      delete flexProps.renderCalendarIcon;
      delete flexProps.renderPicker;
      delete flexProps.overlayProps;
      delete flexProps.relativeToViewport;
      delete flexProps.enableMonthDecadeViewAnimation;
      delete flexProps.showMonthDecadeViewAnimation;
      delete flexProps.updateOnWheel;
      delete flexProps.onTextChange;
      delete flexProps.focusedClassName;
      delete flexProps.expandedClassName;
      delete flexProps.invalidClassName;
      delete flexProps.onTimeChange;
      delete flexProps.okButton;
      delete flexProps.constrainTo;
      delete flexProps.defaultDate;
      delete flexProps.weekNumbers;
      delete flexProps.highlightWeekends;
      delete flexProps.calendarProps;
      delete flexProps.cancelButtonText;
      delete flexProps.clearButtonText;
      delete flexProps.okButtonText;
      delete flexProps.todayButtonText;
      delete flexProps.rtl;
      delete flexProps.pickerPosition;
      delete flexProps.onLazyBlur;
      if (typeof props.cleanup == 'function') {
        props.cleanup(flexProps);
      }
      return _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({
        inline: true,
        row: true,
        wrap: false
      }, flexProps), {}, {
        onClick: this.handleClick
      }), this.renderInput(), this.renderClearIcon(), this.renderCalendarIcon(), this.renderPicker());
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      if (this.props.onClick) {
        this.props.onClick(event);
      }
      if (!this.isLazyFocused()) {
        this.focus();
      }
    }
  }, {
    key: "renderInput",
    value: function renderInput() {
      var props = this.p;
      var inputProps = this.prepareInputProps(props);
      var input;
      if (props.renderInput) {
        input = props.renderInput(inputProps);
      }
      if (input === undefined) {
        input = props.children.filter(FIND_INPUT)[0];
        var FieldInput = props.forceValidDate ? _DateFormatInput.default : _Field.default;
        var propsForInput = (0, _assign.default)({}, inputProps);
        if (!props.forceValidDate) {
          delete propsForInput.date;
          delete propsForInput.maxDate;
          delete propsForInput.minDate;
          delete propsForInput.dateFormat;
        }
        input = input ? _react.default.cloneElement(input, propsForInput) : _react.default.createElement(FieldInput, _objectSpread({}, propsForInput));
      }
      return input;
    }
  }, {
    key: "renderClearIcon",
    value: function renderClearIcon() {
      var props = this.p;
      var rootClassName = props.rootClassName,
        disabled = props.disabled,
        text = props.text;
      if (!props.clearIcon || props.forceValidDate) {
        return undefined;
      }
      var clearIcon = props.clearIcon === true ? _icons.CLEAR_ICON : props.clearIcon;
      var clearIconProps = {
        className: (0, _join.default)("".concat(rootClassName, "__clear-icon"), text === '' || text == null ? "".concat(rootClassName, "__clear-icon--hidden") : "".concat(rootClassName, "__clear-icon--animation"), disabled && "".concat(rootClassName, "__clear-icon--disabled")),
        onMouseDown: preventDefault,
        onClick: this.onClearClick,
        children: clearIcon
      };
      var result;
      if (props.renderClearIcon) {
        result = props.renderClearIcon(clearIconProps);
      }
      if (result === undefined) {
        result = _react.default.createElement(_InlineBlock.default, _objectSpread({}, clearIconProps));
      }
      return result;
    }
  }, {
    key: "onClearClick",
    value: function onClearClick(event) {
      this.onFieldChange('');
      if (!this.isFocused()) {
        this.focus();
      }
    }
  }, {
    key: "renderCalendarIcon",
    value: function renderCalendarIcon() {
      var result;
      var renderIcon = this.props.renderCalendarIcon;
      var _this$props = this.props,
        rootClassName = _this$props.rootClassName,
        disabled = _this$props.disabled;
      var calendarIconProps = {
        className: (0, _join.default)("".concat(rootClassName, "__calendar-icon"), disabled ? "".concat(rootClassName, "__calendar-icon--disabled") : ''),
        onMouseDown: this.onCalendarIconMouseDown
      };
      if (renderIcon) {
        result = renderIcon(calendarIconProps);
      }
      if (result === undefined) {
        result = _react.default.createElement("div", _objectSpread({}, calendarIconProps), _icons.CALENDAR_ICON);
      }
      return result;
    }
  }, {
    key: "onCalendarIconMouseDown",
    value: function onCalendarIconMouseDown(event) {
      if (this.props.disabled) {
        return;
      }
      event.preventDefault();
      this.toggleExpand();
    }
  }, {
    key: "prepareExpanded",
    value: function prepareExpanded(props) {
      return props.expanded === undefined ? this.state.expanded : props.expanded;
    }
  }, {
    key: "prepareDate",
    value: function prepareDate(props, pickerProps) {
      props = props || this.p;
      pickerProps = pickerProps || props.pickerProps;
      var locale = props.locale || pickerProps.locale;
      var dateFormat = props.dateFormat === undefined ? pickerProps.dateFormat : props.dateFormat;
      var value = props.value === undefined ? this.state.value : props.value;
      var date = this.toMoment(value);
      var valid = date.isValid();
      if (value && typeof value != 'string' && valid) {
        value = this.format(date);
      }
      if (date && valid) {
        this.lastValidDate = date;
      } else {
        value = this.state.value;
      }
      var viewDate = this.props.viewDate || this.state.viewDate || this.lastValidDate || new Date();
      var activeDate = this.state.activeDate || this.lastValidDate || new Date();
      return {
        viewDate: viewDate,
        activeDate: activeDate,
        dateFormat: dateFormat,
        locale: locale,
        valid: valid,
        date: date,
        value: value
      };
    }
  }, {
    key: "preparePickerProps",
    value: function preparePickerProps(props) {
      var picker = getPicker(props, this);
      if (!picker) {
        return null;
      }
      return picker.props || {};
    }
  }, {
    key: "prepareProps",
    value: function prepareProps(thisProps) {
      var props = this.p = (0, _assign.default)({}, thisProps);
      props.children = _react.default.Children.toArray(props.children);
      props.expanded = this.prepareExpanded(props);
      props.pickerProps = this.preparePickerProps(props);
      var input = props.children.filter(FIND_INPUT)[0];
      if (input && input.type === 'input') {
        props.rawInput = true;
        props.forceValidDate = false;
      }
      var dateInfo = this.prepareDate(props, props.pickerProps);
      (0, _assign.default)(props, dateInfo);
      if (props.text === undefined) {
        props.text = this.state.text;
        if (!props.text) {
          props.text = props.valid && props.date ? props.value : this.props.value != null ? this.props.value : this.state.text || '';
        }
      }
      if (props.text === undefined) {
        props.text = '';
      }
      props.className = this.prepareClassName(props);
      if (props.calendarProps) {
        props.cancelButtonText = props.calendarProps.cancelButtonText;
        props.clearButtonText = props.calendarProps.clearButtonText;
        props.okButtonText = props.calendarProps.okButtonText;
        props.todayButtonText = props.calendarProps.todayButtonText;
      }
      return props;
    }
  }, {
    key: "prepareClassName",
    value: function prepareClassName(props) {
      var rootClassName = props.rootClassName;
      var position = POSITIONS[props.pickerProps.position || props.pickerPosition] || 'bottom';
      return (0, _join.default)([rootClassName, props.className, props.disabled && "".concat(rootClassName, "--disabled"), props.theme && "".concat(rootClassName, "--theme-").concat(props.theme), props.rtl ? "".concat(rootClassName, "--rtl") : "".concat(rootClassName, "--ltr"), "".concat(rootClassName, "--picker-position-").concat(position), this.isLazyFocused() && (0, _join.default)("".concat(rootClassName, "--focused"), props.focusedClassName), this.isExpanded() && (0, _join.default)("".concat(rootClassName, "--expanded"), props.expandedClassName), !props.valid && (0, _join.default)(props.invalidClassName, "".concat(rootClassName, "--invalid"))]);
    }
  }, {
    key: "prepareInputProps",
    value: function prepareInputProps(props) {
      var _this2 = this;
      var input = props.children.filter(FIND_INPUT)[0];
      var inputProps = input && input.props || {};
      var rootClassName = this.props.rootClassName;
      var onBlur = (0, _joinFunctions.default)(inputProps.onBlur, this.onFieldBlur);
      var onFocus = (0, _joinFunctions.default)(inputProps.onFocus, this.onFieldFocus);
      var onChange = (0, _joinFunctions.default)(inputProps.onChange, this.onFieldChange);
      var onKeyDown = (0, _joinFunctions.default)(inputProps.onKeyDown, this.onFieldKeyDown);
      var newInputProps = (0, _assign.default)({}, inputProps, {
        ref: function ref(f) {
          _this2.field = f;
        },
        date: props.date,
        onFocus: onFocus,
        onBlur: onBlur,
        onChange: onChange,
        dateFormat: props.dateFormat,
        value: props.text || '',
        onKeyDown: onKeyDown,
        placeholder: props.placeholder,
        className: (0, _join.default)("".concat(rootClassName, "__input"), inputProps.className)
      });
      (0, _assignDefined.default)(newInputProps, {
        placeholder: props.placeholder,
        autoFocus: props.autoFocus,
        disabled: props.disabled,
        minDate: props.minDate,
        maxDate: props.maxDate
      });
      return newInputProps;
    }
  }, {
    key: "renderPicker",
    value: function renderPicker() {
      var _this3 = this;
      var props = this.p;
      var renderPicker = this.props.renderPicker;
      if (this.isExpanded()) {
        var newExpand = !this.picker;
        var picker = getPicker(props, this);
        var pickerProps = props.pickerProps;
        var onMouseDown = (0, _joinFunctions.default)(pickerProps.onMouseDown, this.onPickerMouseDown);
        var onChange = (0, _joinFunctions.default)(pickerProps.onChange, this.onPickerChange);
        var date = props.valid && props.date;
        var footer = pickerProps.footer !== undefined ? pickerProps.footer : props.footer;
        var viewDate = props.viewDate || this.state.viewDate || props.defaultViewDate;
        var activeDate = newExpand && date ? date : props.activeDate;
        var pickerElement = _react.default.cloneElement(picker, (0, _assignDefined.default)({
          ref: function ref(p) {
            _this3.picker = _this3.pickerView = p;
            if (p) {
              var pickerView = p.getView ? p.getView() : p.view;
              if (pickerView) {
                _this3.pickerView = pickerView;
              }
            }
            if (!_this3.state.viewDate) {
              _this3.setViewDate(props.viewDate);
            }
          },
          footer: footer,
          okButton: props.okButton,
          okButtonText: props.okButtonText,
          cancelButton: props.cancelButton,
          weekNumbers: props.weekNumbers,
          highlightWeekends: props.highlightWeekends,
          enableMonthDecadeViewAnimation: props.enableMonthDecadeViewAnimation,
          showMonthDecadeViewAnimation: props.showMonthDecadeViewAnimation,
          focusOnNavMouseDown: false,
          focusOnFooterMouseDown: false,
          insideField: true,
          showClock: props.showClock,
          getTransitionTime: this.getTime,
          updateOnWheel: props.updateOnWheel,
          onClockInputBlur: this.onClockInputBlur,
          onClockEnterKey: this.onClockEnterKey,
          onClockEscapeKey: this.onClockEscapeKey,
          footerClearDate: props.clearDate || props.minDate,
          onFooterCancelClick: this.onFooterCancelClick,
          onFooterTodayClick: this.onFooterTodayClick,
          onFooterOkClick: this.onFooterOkClick,
          onFooterClearClick: this.onFooterClearClick,
          dateFormat: props.dateFormat,
          theme: props.theme || pickerProps.theme,
          arrows: props.navBarArrows,
          className: (0, _join.default)(pickerProps.className, "".concat(this.props.rootClassName, "__picker")),
          date: date || null,
          tabIndex: -1,
          viewDate: viewDate,
          activeDate: activeDate,
          locale: props.locale,
          triggerChangeOnTimeChange: this.props.triggerChangeOnTimeChange === undefined ? false : this.props.triggerChangeOnTimeChange,
          onViewDateChange: (0, _joinFunctions.default)(pickerProps.onViewDateChange, this.onViewDateChange),
          onActiveDateChange: (0, _joinFunctions.default)(pickerProps.onActiveDateChange, this.onActiveDateChange),
          onTimeChange: this.onTimeChange,
          onTransitionStart: this.onTransitionStart,
          onMouseDown: onMouseDown,
          onChange: onChange
        }, {
          minDate: props.minDate,
          maxDate: props.maxDate
        }));
        var result = pickerElement;
        if (props.relativeToViewport) {
          result = _react.default.createElement(_Overlay.default, _objectSpread(_objectSpread(_objectSpread({}, defaultOverlayProps), props.overlayProps), {}, {
            constrainTo: props.constrainTo
          }), pickerElement);
        }
        if (renderPicker) {
          var renderPickerResult = renderPicker(result, pickerElement);
          if (renderPickerResult !== undefined) {
            return renderPickerResult;
          }
        }
        return result;
      }
      this.time = null;
      if (renderPicker) {
        return renderPicker(null);
      }
      return null;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value || this.props.value;
    }
  }, {
    key: "onTimeChange",
    value: function onTimeChange(value, timeFormat) {
      var timeMoment = this.toMoment(value, {
        dateFormat: timeFormat
      });
      var time = ['hour', 'minute', 'second', 'millisecond'].reduce(function (acc, part) {
        acc[part] = timeMoment.get(part);
        return acc;
      }, {});
      this.time = time;
    }
  }, {
    key: "getTime",
    value: function getTime() {
      return this.time;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var dateMoment = this.toMoment(value);
      var dateString = this.format(dateMoment);
      this.setDate(dateString, (0, _assign.default)(config, {
        dateMoment: dateMoment
      }));
    }
  }, {
    key: "onFooterOkClick",
    value: function onFooterOkClick() {
      var activeDate = this.p.activeDate;
      if (activeDate) {
        var date = this.toMoment(activeDate);
        (0, _forwardTime.default)(this.time, date);
        this.setValue(date, {
          skipTime: !!this.time
        });
      }
      this.setExpanded(false);
    }
  }, {
    key: "onFooterCancelClick",
    value: function onFooterCancelClick() {
      this.setExpanded(false);
    }
  }, {
    key: "onFooterTodayClick",
    value: function onFooterTodayClick() {
      var today = this.toMoment(new Date()).startOf('day');
      this.onPickerChange(this.format(today), {
        dateMoment: today
      });
      if (this.pickerView && this.pickerView.gotoViewDate) {
        this.pickerView.gotoViewDate({
          dateMoment: today
        });
      }
      return false;
    }
  }, {
    key: "onFooterClearClick",
    value: function onFooterClearClick() {
      var clearDate = this.props.clearDate === undefined ? this.props.minDate : this.props.clearDate;
      if (clearDate !== undefined) {
        this.setValue(clearDate, {
          skipTime: true
        });
      }
      this.setExpanded(false);
      return false;
    }
  }, {
    key: "toMoment",
    value: function toMoment(value, props) {
      if (_moment.default.isMoment(value)) {
        return value;
      }
      props = props || this.p;
      var dateFormat = props.displayFormat;
      if (dateFormat === undefined) {
        dateFormat = props.dateFormat;
      }
      if (dateFormat === undefined) {
        dateFormat = this.p.dateFormat;
      }
      var date = (0, _toMoment2.default)(value, {
        strict: props.strict,
        locale: props.locale,
        dateFormat: dateFormat
      });
      if (!date.isValid() && props.displayFormat) {
        date = (0, _toMoment2.default)(value, {
          strict: props.strict,
          locale: props.locale,
          dateFormat: props.dateFormat === undefined ? this.p.dateFormat : props.dateFormat
        });
      }
      return date;
    }
  }, {
    key: "isValid",
    value: function isValid(text) {
      if (text === undefined) {
        text = this.p.text;
      }
      return this.toMoment(text).isValid();
    }
  }, {
    key: "onViewDateChange",
    value: function onViewDateChange(viewDate) {
      this.setState({
        viewDate: viewDate
      });
      if (this.props.onViewDateChange) {
        this.props.onViewDateChange.apply(this, arguments);
      }
    }
  }, {
    key: "setViewDate",
    value: function setViewDate(viewDate) {
      if (this.pickerView) {
        this.pickerView.gotoViewDate({
          dateMoment: this.toMoment(viewDate)
        });
      }
    }
  }, {
    key: "onActiveDateChange",
    value: function onActiveDateChange(activeDate) {
      this.setState({
        activeDate: activeDate
      });
      if (this.props.onActiveDateChange) {
        this.props.onActiveDateChange.apply(this, arguments);
      }
    }
  }, {
    key: "onViewKeyDown",
    value: function onViewKeyDown(event) {
      var key = event.key;
      if (this.pickerView) {
        this.onPickerViewKeyDown(event);
      }
    }
  }, {
    key: "onPickerViewKeyDown",
    value: function onPickerViewKeyDown(event) {
      this.pickerView.onViewKeyDown(event);
    }
  }, {
    key: "onPickerMouseDown",
    value: function onPickerMouseDown(event) {
      preventDefault(event);
      if (!this.isFocused()) {
        this.focus();
      }
    }
  }, {
    key: "isMonthDecadeViewVisible",
    value: function isMonthDecadeViewVisible() {
      if (this.picker && this.picker.isMonthDecadeViewVisible) {
        return this.picker.isMonthDecadeViewVisible();
      }
      return false;
    }
  }, {
    key: "onFieldKeyDown",
    value: function onFieldKeyDown(event) {
      var key = event.key;
      var expanded = this.isExpanded();
      var monthDecadeVisible = this.isMonthDecadeViewVisible();
      if (key == 'Enter' && !monthDecadeVisible) {
        this.onViewKeyDown(event);
        this.toggleExpand();
        return false;
      }
      if (monthDecadeVisible && (key == 'Escape' || key == 'Enter')) {
        this.onViewKeyDown(event);
        return false;
      }
      if (key == 'Escape') {
        if (expanded) {
          this.setExpanded(false);
          return false;
        }
      }
      if (expanded) {
        if (key in _Calendar.NAV_KEYS) {
          this.onViewKeyDown(event);
          return false;
        }
      }
      return true;
    }
  }, {
    key: "getInput",
    value: function getInput() {
      return this.field;
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.state.focused;
    }
  }, {
    key: "isLazyFocused",
    value: function isLazyFocused() {
      return this.isFocused() || this.isTimeInputFocused();
    }
  }, {
    key: "isTimeInputFocused",
    value: function isTimeInputFocused() {
      if (this.picker && this.picker.isTimeInputFocused) {
        return this.picker.isTimeInputFocused();
      }
      return false;
    }
  }, {
    key: "onFieldFocus",
    value: function onFieldFocus(event) {
      if (this.state.focused) {
        return;
      }
      this.setState({
        focused: true
      });
      if (this.props.expandOnFocus) {
        this.setExpanded(true);
      }
      this.props.onFocus(event);
    }
  }, {
    key: "onFieldBlur",
    value: function onFieldBlur(event) {
      var _this4 = this;
      if (!this.isFocused()) {
        return;
      }
      this.setState({
        focused: false
      });
      this.props.onBlur(event);
      if (!this.picker || !this.picker.isTimeInputFocused) {
        this.onLazyBlur();
        return;
      }
      setTimeout(function () {
        return _this4.onLazyBlur();
      }, 0);
    }
  }, {
    key: "onClockEnterKey",
    value: function onClockEnterKey() {
      if (!this.isFocused()) {
        this.focus();
      }
      this.onFooterOkClick();
    }
  }, {
    key: "onClockEscapeKey",
    value: function onClockEscapeKey() {
      if (!this.isFocused()) {
        this.focus();
      }
      this.onFooterCancelClick();
    }
  }, {
    key: "onClockInputBlur",
    value: function onClockInputBlur() {
      var _this5 = this;
      setTimeout(function () {
        if (!_this5.isFocused()) {
          _this5.onLazyBlur();
        }
      }, 0);
    }
  }, {
    key: "onLazyBlur",
    value: function onLazyBlur() {
      var _this6 = this;
      if (this.unmounted) {
        return;
      }
      if (this.isTimeInputFocused()) {
        return;
      }
      this.setExpanded(false);
      if (this.props.onLazyBlur) {
        this.props.onLazyBlur();
      }
      if (!this.isValid() && this.props.validateOnBlur) {
        var value = this.lastValidDate && this.p.text != '' ? this.format(this.lastValidDate) : '';
        setTimeout(function () {
          _this6.onFieldChange(value);
        }, 0);
      }
    }
  }, {
    key: "onInputChange",
    value: function onInputChange() {}
  }, {
    key: "isExpanded",
    value: function isExpanded() {
      return this.p.expanded;
    }
  }, {
    key: "toggleExpand",
    value: function toggleExpand() {
      this.setExpanded(!this.p.expanded);
    }
  }, {
    key: "setExpanded",
    value: function setExpanded(bool) {
      var _this7 = this;
      var props = this.p;
      if (bool === props.expanded) {
        return;
      }
      if (!bool) {
        this.onCollapse();
      } else {
        this.setState({}, function () {
          _this7.onExpand();
        });
      }
      if (bool && props.valid) {
        this.setState({
          activeDate: props.date
        });
      }
      if (this.props.expanded === undefined) {
        this.setState({
          expanded: bool
        });
      }
      this.props.onExpandChange(bool);
    }
  }, {
    key: "onCollapse",
    value: function onCollapse() {
      this.props.onCollapse();
    }
  }, {
    key: "onExpand",
    value: function onExpand() {
      this.props.onExpand();
    }
  }, {
    key: "onFieldChange",
    value: function onFieldChange(value) {
      if (this.p.rawInput && typeof value != 'string') {
        var event = value;
        value = event.target.value;
      }
      var dateMoment = value == '' ? null : this.toMoment(value);
      if (dateMoment === null || dateMoment.isValid()) {
        this.onChange(dateMoment);
      }
      this.onTextChange(value);
    }
  }, {
    key: "onTextChange",
    value: function onTextChange(text) {
      if (this.props.text === undefined) {
        this.setState({
          text: text
        });
      }
      if (this.props.onTextChange) {
        this.props.onTextChange(text);
      }
    }
  }, {
    key: "onPickerChange",
    value: function onPickerChange(dateString, _ref, event) {
      var dateMoment = _ref.dateMoment,
        forceUpdate = _ref.forceUpdate,
        noCollapse = _ref.noCollapse;
      var isEnter = event && event.key == 'Enter';
      var updateOnDateClick = forceUpdate ? true : this.props.updateOnDateClick || isEnter;
      var shouldCollapse = this.props.collapseOnDateClick || isEnter;
      if (noCollapse) {
        shouldCollapse = false;
      }
      if (updateOnDateClick) {
        (0, _forwardTime.default)(this.time, dateMoment);
        this.setDate(dateString, {
          dateMoment: dateMoment,
          skipTime: true
        });
        if (shouldCollapse) {
          this.setExpanded(false);
        }
      }
    }
  }, {
    key: "setDate",
    value: function setDate(dateString, _ref2) {
      var dateMoment = _ref2.dateMoment,
        _ref2$skipTime = _ref2.skipTime,
        skipTime = _ref2$skipTime === void 0 ? false : _ref2$skipTime;
      var props = this.p;
      var currentDate = props.date;
      if (props.valid && currentDate) {
        var dateFormat = props.dateFormat ? props.dateFormat.toLowerCase() : '';
        var hasTime = dateFormat.indexOf('k') != -1 || dateFormat.indexOf('h') != -1;
        if (hasTime && !skipTime) {
          ['hour', 'minute', 'second', 'millisecond'].forEach(function (part) {
            dateMoment.set(part, currentDate.get(part));
          });
        }
      }
      this.onTextChange(this.format(dateMoment));
      this.onChange(dateMoment);
    }
  }, {
    key: "onChange",
    value: function onChange(dateMoment) {
      if (dateMoment != null && !_moment.default.isMoment(dateMoment)) {
        dateMoment = this.toMoment(dateMoment);
      }
      (0, _forwardTime.default)(this.time, dateMoment);
      var newState = {};
      if (this.props.value === undefined) {
        (0, _assign.default)(newState, {
          text: null,
          value: dateMoment
        });
      }
      newState.activeDate = dateMoment;
      if (dateMoment) {
        if (!this.pickerView || !this.pickerView.isInView || !this.pickerView.isInView(dateMoment)) {
          newState.viewDate = dateMoment;
        }
      }
      if (this.props.onChange) {
        this.props.onChange(this.format(dateMoment), {
          dateMoment: dateMoment
        });
      }
      this.setState(newState);
    }
  }, {
    key: "format",
    value: function format(mom, _format) {
      var theFormat = _format;
      if (_format === undefined) {
        theFormat = this.p.displayFormat;
      }
      if (_format === undefined) {
        theFormat = this.p.dateFormat;
      }
      return mom == null ? '' : mom.format(theFormat);
    }
  }, {
    key: "focusField",
    value: function focusField() {
      var input = this.field;
      if (input) {
        input.focus();
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.focusField();
    }
  }]);
  return DateInput;
}(_reactClass.default);
exports.default = DateInput;
DateInput.defaultProps = {
  rootClassName: 'inovua-react-toolkit-date-input',
  showClock: undefined,
  relativeToViewport: true,
  enableMonthDecadeViewAnimation: true,
  showMonthDecadeViewAnimation: 300,
  overlayProps: undefined,
  forceValidDate: false,
  strict: false,
  expandOnFocus: true,
  updateOnDateClick: true,
  collapseOnDateClick: true,
  theme: 'default-light',
  footer: true,
  okButton: false,
  onBlur: function onBlur() {},
  onFocus: function onFocus() {},
  clearIcon: true,
  validateOnBlur: true,
  onExpandChange: function onExpandChange() {},
  onCollapse: function onCollapse() {},
  onExpand: function onExpand() {},
  minDate: (0, _moment.default)('1000-01-01', 'YYYY-MM-DD'),
  maxDate: (0, _moment.default)('9999-12-31 HH:mm:ss', 'YYYY-MM-DD 23:59:59'),
  skipTodayTime: false
};
var DateType = _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object, _propTypes.default.string]);
DateInput.propTypes = {
  autoFocus: _propTypes.default.bool,
  rootClassName: _propTypes.default.string,
  dateFormat: _propTypes.default.string.isRequired,
  displayFormat: _propTypes.default.string,
  relativeToViewport: _propTypes.default.bool,
  showClock: _propTypes.default.bool,
  strict: _propTypes.default.bool,
  expandOnFocus: _propTypes.default.bool,
  updateOnDateClick: _propTypes.default.bool,
  collapseOnDateClick: _propTypes.default.bool,
  enableMonthDecadeViewAnimation: _propTypes.default.bool,
  showMonthDecadeViewAnimation: _propTypes.default.number,
  theme: _propTypes.default.string,
  footer: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node]),
  onBlur: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  clearIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node]),
  validateOnBlur: _propTypes.default.bool,
  onExpandChange: _propTypes.default.func,
  onCollapse: _propTypes.default.func,
  onExpand: _propTypes.default.func,
  skipTodayTime: _propTypes.default.bool,
  date: DateType,
  value: DateType,
  defaultDate: DateType,
  viewDate: DateType,
  minDate: DateType,
  maxDate: DateType,
  activeDate: DateType,
  text: _propTypes.default.string,
  pickerProps: _propTypes.default.object,
  overlayProps: _propTypes.default.object,
  constrainTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object, _propTypes.default.bool]),
  cleanup: _propTypes.default.func,
  expanded: _propTypes.default.bool,
  triggerChangeOnTimeChange: _propTypes.default.bool,
  defaultExpanded: _propTypes.default.bool,
  forceValidDate: _propTypes.default.bool,
  valid: _propTypes.default.bool,
  updateOnWheel: _propTypes.default.bool,
  clearDate: _propTypes.default.bool,
  navBarArrows: _propTypes.default.bool,
  locale: _propTypes.default.string,
  focusedClassName: _propTypes.default.string,
  expandedClassName: _propTypes.default.string,
  invalidClassName: _propTypes.default.string,
  placeholder: _propTypes.default.string,
  onTextChange: _propTypes.default.func,
  renderPicker: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onViewDateChange: _propTypes.default.func,
  onActiveDateChange: _propTypes.default.func,
  defaultViewDate: _propTypes.default.any,
  onChange: _propTypes.default.func,
  renderInput: _propTypes.default.func,
  onLazyBlur: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,
  position: _propTypes.default.oneOf(['top', 'bottom']),
  weekNumbers: _propTypes.default.bool,
  highlightWeekends: _propTypes.default.bool,
  calendarProps: _propTypes.default.object,
  cancelButtonText: _propTypes.default.string,
  clearButtonText: _propTypes.default.string,
  okButtonText: _propTypes.default.string,
  todayButtonText: _propTypes.default.string
};