/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../react-class"));
var _Flex = require("../../Flex");
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _toMoment2 = _interopRequireDefault(require("./toMoment"));
var _forwardTime = _interopRequireDefault(require("./utils/forwardTime"));
var _getTransitionEnd = _interopRequireDefault(require("./getTransitionEnd"));
var _assignDefined = _interopRequireDefault(require("./assignDefined"));
var _MonthView = require("./MonthView");
var _NavBar = _interopRequireDefault(require("./NavBar"));
var _times = _interopRequireDefault(require("./utils/times"));
var _InlineBlock = _interopRequireDefault(require("./InlineBlock"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var renderHiddenNav = function renderHiddenNav(props) {
  return _react.default.createElement(_InlineBlock.default, _objectSpread(_objectSpread({}, props), {}, {
    style: {
      visibility: 'hidden'
    }
  }));
};
var joinFunctions = function joinFunctions(a, b) {
  if (a && b) {
    return function () {
      a.apply(void 0, arguments);
      b.apply(void 0, arguments);
    };
  }
  return a || b;
};
var TRANSITION_DURATION = '0.4s';
var TransitionView = function (_Component) {
  (0, _inherits2.default)(TransitionView, _Component);
  var _super = _createSuper(TransitionView);
  function TransitionView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, TransitionView);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps) {
      if (prevProps.viewDate !== _this.props.viewDate) {
        _this.transitionTo(_this.props.viewDate, _this.props);
      }
    });
    var child = _react.default.Children.toArray(_this.props.children)[0];
    var childProps = child.props;
    var viewDate = props.viewDate || props.defaultViewDate || props.defaultDate || props.date || childProps.viewDate || childProps.defaultViewDate || childProps.defaultDate || childProps.date;
    var dateFormat = props.dateFormat || childProps.dateFormat;
    var locale = props.locale || childProps.locale;
    _this.state = {
      rendered: false,
      viewDate: _this.toMoment(viewDate, {
        dateFormat: dateFormat,
        locale: locale
      })
    };
    return _this;
  }
  (0, _createClass2.default)(TransitionView, [{
    key: "toMoment",
    value: function toMoment(value, props) {
      props = props || this.props;
      return (0, _toMoment2.default)(value, {
        locale: props.locale,
        dateFormat: props.dateFormat
      });
    }
  }, {
    key: "format",
    value: function format(mom, props) {
      props = props || this.props;
      return mom.format(props.dateFormat);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        rendered: true
      });
    }
  }, {
    key: "transitionTo",
    value: function transitionTo(date, props) {
      props = props || this.props;
      var dateMoment = this.toMoment(date, props);
      this.doTransition(dateMoment);
    }
  }, {
    key: "getViewChild",
    value: function getViewChild() {
      return _react.default.Children.toArray(this.props.children).filter(function (c) {
        return c && c.props && c.props.isDatePicker;
      })[0];
    }
  }, {
    key: "prepareChildProps",
    value: function prepareChildProps(child, extraProps) {
      if (this.view) {
        return this.view.p;
      }
      child = child || this.getViewChild();
      return (0, _assign.default)({}, child.props, extraProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var props = this.props;
      var rootClassName = props.rootClassName;
      var child = this.child = this.getViewChild();
      var viewDate = this.state.viewDate || props.viewMoment || props.viewDate;
      var renderedChildProps = this.renderedChildProps = this.prepareChildProps(child, (0, _assignDefined.default)({
        viewDate: viewDate
      }));
      viewDate = this.state.viewDate || renderedChildProps.viewMoment || renderedChildProps.viewDate;
      if (!this.state.transition) {
        this.viewDate = viewDate;
      }
      var multiView = !!(child.props.size && child.props.size >= 2);
      var onViewDateChange = joinFunctions(this.onViewDateChange, props.onViewDateChange);
      var newProps = {
        key: 'picker',
        ref: function ref(v) {
          _this2.view = v;
        },
        viewDate: this.viewDate,
        onViewDateChange: onViewDateChange,
        navigation: multiView,
        constrainActiveInView: props.constrainActiveInView,
        className: (0, _join.default)(child.props.className, 'inovua-react-toolkit-calendar__center')
      };
      (0, _assignDefined.default)(newProps, {
        range: props.range,
        date: props.date,
        activeDate: props.activeDate,
        footer: false,
        insideField: props.insideField,
        defaultRange: props.defaultRange,
        defaultDate: props.defaultDate,
        defaultActiveDate: props.defaultActiveDate,
        onTimeChange: props.onTimeChange,
        onClockInputBlur: props.onClockInputBlur,
        onClockInputFocus: props.onClockInputFocus,
        onClockEnterKey: props.onClockEnterKey,
        onClockEscapeKey: props.onClockEscapeKey,
        showClock: props.showClock,
        tabIndex: props.tabIndex,
        dateFormat: props.dateFormat,
        locale: props.locale,
        theme: props.theme,
        minDate: props.minDate,
        maxDate: props.maxDate,
        onKeyDown: this.onKeyDown,
        onBlur: this.onBlur
      });
      if (props.onChange) {
        newProps.onChange = joinFunctions(props.onChange, renderedChildProps.onChange);
      }
      if (props.onRangeChange) {
        newProps.onRangeChange = joinFunctions(props.onRangeChange, renderedChildProps.onRangeChange);
      }
      if (props.onActiveDateChange) {
        newProps.onActiveDateChange = joinFunctions(props.onActiveDateChange, renderedChildProps.onActiveDateChange);
      }
      if (this.state.transition) {
        this.transitionDurationStyle = {
          transitionDuration: props.transitionDuration || TRANSITION_DURATION
        };
        newProps.style = (0, _assign.default)({}, child.props.style, this.transitionDurationStyle);
        newProps.className = (0, _join.default)(newProps.className, 'inovua-react-toolkit-calendar--transition', "inovua-react-toolkit-calendar--transition-".concat(this.state.transition == -1 ? 'left' : 'right'));
      }
      var navBar;
      var navBarProps = {
        minDate: props.minDate || renderedChildProps.minDate,
        maxDate: props.maxDate || renderedChildProps.maxDate,
        enableMonthDecadeView: props.enableMonthDecadeView === undefined ? renderedChildProps.enableMonthDecadeView : props.enableMonthDecadeView,
        secondary: true,
        viewDate: this.nextViewDate || this.viewDate,
        onViewDateChange: onViewDateChange,
        multiView: multiView,
        enableMonthDecadeViewAnimation: props.enableMonthDecadeViewAnimation,
        showMonthDecadeViewAnimation: props.showMonthDecadeViewAnimation
      };
      if (props.navigation) {
        navBar = this.renderNavBar((0, _assign.default)({}, navBarProps, {
          mainNavBar: true
        }));
      }
      var footer;
      if (props.footer) {
        footer = (0, _MonthView.renderFooter)(props, props.insideField ? props : this.view);
      }
      if (multiView) {
        newProps.renderNavBar = this.renderMultiViewNavBar.bind(this, navBarProps);
      }
      var clone = _react.default.cloneElement(child, newProps);
      var flexProps = (0, _assign.default)({}, props);
      delete flexProps.constrainActiveInView;
      delete flexProps.enableMonthDecadeView;
      delete flexProps.focusOnNavMouseDown;
      delete flexProps.focusOnTransitionEnd;
      delete flexProps.footerClearDate;
      delete flexProps.isDatePicker;
      delete flexProps.navigation;
      delete flexProps.onTransitionEnd;
      delete flexProps.onTransitionStart;
      delete flexProps.theme;
      delete flexProps.rootClassName;
      delete flexProps.enableMonthDecadeViewAnimation;
      delete flexProps.showMonthDecadeViewAnimation;
      delete flexProps.footer;
      return _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({
        column: true,
        inline: true,
        wrap: false,
        alignItems: "stretch"
      }, flexProps), {}, {
        className: (0, _join.default)(props.className, rootClassName, props.theme && "".concat(rootClassName, "--theme-").concat(props.theme))
      }), navBar, _react.default.createElement(_Flex.Flex, {
        inline: true,
        row: true,
        style: {
          position: 'relative',
          overflow: 'hidden'
        }
      }, this.renderAt(-1, {
        multiView: multiView,
        navBarProps: navBarProps
      }), clone, this.renderAt(1, {
        multiView: multiView,
        navBarProps: navBarProps
      })), footer);
    }
  }, {
    key: "tryNavBarKeyDown",
    value: function tryNavBarKeyDown(event) {
      if (this.navBar && this.navBar.getMonthDecadeView) {
        var monthDecadeView = this.navBar.getMonthDecadeView();
        if (monthDecadeView && monthDecadeView.onKeyDown) {
          monthDecadeView.onKeyDown(event);
          return true;
        }
      }
      return false;
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      var initialKeyDown = this.child.onKeyDown;
      if (this.tryNavBarKeyDown(event)) {
        return false;
      }
      if (initialKeyDown) {
        return initialKeyDown(event);
      }
    }
  }, {
    key: "isMonthDecadeViewVisible",
    value: function isMonthDecadeViewVisible() {
      if (this.navBar && this.navBar.isMonthDecadeViewVisible) {
        return this.navBar.isMonthDecadeViewVisible();
      }
      return false;
    }
  }, {
    key: "showMonthDecadeView",
    value: function showMonthDecadeView() {
      if (this.navBar) {
        this.navBar.showMonthDecadeView();
      }
    }
  }, {
    key: "hideMonthDecadeView",
    value: function hideMonthDecadeView() {
      if (this.navBar) {
        this.navBar.hideMonthDecadeView();
      }
    }
  }, {
    key: "onBlur",
    value: function onBlur(event) {
      var initialBlur = this.child.onBlur;
      this.hideMonthDecadeView();
      if (initialBlur) {
        initialBlur(event);
      }
      return true;
    }
  }, {
    key: "renderMultiViewNavBar",
    value: function renderMultiViewNavBar(navBarProps, config) {
      var index = config.index;
      var count = this.child.props.perRow;
      if (index >= count) {
        var viewDate = this.toMoment(navBarProps.viewDate).add(index, 'month');
        return _react.default.createElement(_NavBar.default, _objectSpread(_objectSpread({}, navBarProps), {}, {
          renderNavNext: renderHiddenNav,
          renderNavPrev: renderHiddenNav,
          onViewDateChange: null,
          viewDate: this.toMoment(viewDate)
        }));
      }
      return null;
    }
  }, {
    key: "renderNavBar",
    value: function renderNavBar(navBarProps) {
      var _this3 = this;
      navBarProps = (0, _assign.default)({}, navBarProps);
      if (navBarProps.mainNavBar) {
        navBarProps.ref = function (navBar) {
          _this3.navBar = navBar;
        };
        navBarProps.onMouseDown = this.onNavMouseDown;
      }
      var props = this.props;
      var _navBarProps = navBarProps,
        multiView = _navBarProps.multiView;
      var navBar = _react.default.Children.toArray(props.children).filter(function (c) {
        return c && c.props && c.props.isDatePickerNavBar;
      })[0];
      var newProps = navBarProps;
      if (navBar) {
        newProps = (0, _assign.default)({}, navBarProps, navBar.props);
        newProps.viewDate = navBarProps.viewDate;
        newProps.onViewDateChange = navBarProps.onViewDateChange;
      }
      if (multiView) {
        var count = this.child.props.perRow;
        var viewSize = this.getViewSize();
        var bars = (0, _times.default)(count).map(function (index) {
          var onUpdate = function onUpdate(dateMoment, dir) {
            var mom = _this3.toMoment(newProps.viewDate);
            if (Math.abs(dir) == 1) {
              mom.add(dir * viewSize, 'month');
            } else {
              var sign = dir > 0 ? 1 : -1;
              mom.add(sign, 'year');
            }
            return mom;
          };
          var barProps = (0, _assign.default)({}, newProps, {
            onUpdate: onUpdate,
            renderNavNext: renderHiddenNav,
            renderNavPrev: renderHiddenNav,
            viewDate: _this3.toMoment(newProps.viewDate).add(index, 'month')
          });
          delete barProps.rootClassName;
          if (index == 0) {
            delete barProps.renderNavPrev;
          }
          if (index == count - 1) {
            delete barProps.renderNavNext;
          }
          return _react.default.createElement(_NavBar.default, _objectSpread({
            flex: true
          }, barProps));
        });
        return _react.default.createElement(_Flex.Flex, {
          row: true,
          children: bars
        });
      }
      return navBar ? _react.default.cloneElement(navBar, newProps) : _react.default.createElement(_NavBar.default, _objectSpread({}, newProps));
    }
  }, {
    key: "getViewSize",
    value: function getViewSize() {
      return this.view && this.view.getViewSize ? this.view.getViewSize() || 1 : 1;
    }
  }, {
    key: "renderAt",
    value: function renderAt(index, _ref) {
      var multiView = _ref.multiView,
        navBarProps = _ref.navBarProps;
      if (!this.state.rendered || !this.view) {
        return null;
      }
      var viewSize = this.getViewSize();
      var viewDiff = viewSize * index;
      var childProps = this.child.props;
      var renderedProps = this.renderedChildProps;
      var viewDate = this.toMoment(this.viewDate).add(viewDiff, 'month');
      if (this.nextViewDate && this.state.prepareTransition == -index) {
        viewDate = this.nextViewDate;
      }
      var date = renderedProps.date || renderedProps.moment;
      if (this.state.transitionTime) {
        date = (0, _forwardTime.default)(this.state.transitionTime, this.toMoment(date));
      }
      var newProps = (0, _assign.default)({
        date: date,
        readOnly: true,
        range: renderedProps.range,
        activeDate: renderedProps.activeDate,
        dateFormat: renderedProps.dateFormat,
        locale: renderedProps.locale,
        tabIndex: -1,
        clockTabIndex: -1,
        navigation: multiView,
        viewDate: viewDate,
        key: index,
        footer: false,
        className: (0, _join.default)(childProps.className, "inovua-react-toolkit-calendar__".concat(index == -1 ? 'prev' : 'next'))
      });
      (0, _assignDefined.default)(newProps, {
        showClock: renderedProps.showClock,
        minDate: renderedProps.minDate,
        maxDate: renderedProps.maxDate
      });
      if (this.state.transition && this.state.transition != index) {
        newProps.style = (0, _assign.default)({}, childProps.style, this.transitionDurationStyle);
        newProps.className = (0, _join.default)(newProps.className, 'inovua-react-toolkit-calendar--transition', "inovua-react-toolkit-calendar--transition-".concat(this.state.transition == -1 ? 'left' : 'right'));
      }
      if (multiView) {
        newProps.renderNavBar = this.renderMultiViewNavBar.bind(this, (0, _assign.default)({}, navBarProps, {
          viewDate: viewDate,
          onViewDateChange: null
        }));
      }
      return _react.default.cloneElement(this.child, newProps);
    }
  }, {
    key: "getView",
    value: function getView() {
      return this.view;
    }
  }, {
    key: "isInView",
    value: function isInView() {
      var _this$view;
      return (_this$view = this.view).isInView.apply(_this$view, arguments);
    }
  }, {
    key: "onViewDateChange",
    value: function onViewDateChange(dateString, _ref2) {
      var dateMoment = _ref2.dateMoment;
      this.doTransition(dateMoment);
    }
  }, {
    key: "doTransition",
    value: function doTransition(dateMoment) {
      var _this4 = this;
      if (this.state.transition) {
        return;
      }
      dateMoment = this.toMoment(dateMoment);
      var newMoment = this.toMoment(dateMoment).startOf('month');
      var viewMoment = this.toMoment(this.viewDate).startOf('month');
      if (newMoment.format('YYYY-MM') == viewMoment.format('YYYY-MM')) {
        return;
      }
      var navNext = newMoment.isAfter(viewMoment);
      var transition = navNext ? -1 : 1;
      var viewSize = this.getViewSize();
      if (Math.abs(viewSize) > 1) {
        var temp = this.toMoment(viewMoment).add(viewSize * -transition, 'month');
        if (navNext) {
          dateMoment = dateMoment.isAfter(temp) ? dateMoment : temp;
        } else {
          dateMoment = dateMoment.isBefore(temp) ? dateMoment : temp;
        }
      }
      var transitionTime = this.props.getTransitionTime ? this.props.getTransitionTime() : null;
      this.setState({
        transitionTime: transitionTime,
        prepareTransition: transition
      }, function () {
        setTimeout(function () {
          if (!_this4.getViewDOMNode()) {
            return;
          }
          _this4.nextViewDate = dateMoment;
          _this4.addTransitionEnd();
          _this4.setState({
            transition: transition
          });
        });
      });
    }
  }, {
    key: "getViewDOMNode",
    value: function getViewDOMNode() {
      return this.view.getDOMNode ? this.view.getDOMNode() : null;
    }
  }, {
    key: "addTransitionEnd",
    value: function addTransitionEnd() {
      var dom = this.getViewDOMNode();
      if (dom) {
        dom.addEventListener((0, _getTransitionEnd.default)(), this.onTransitionEnd, false);
      }
    }
  }, {
    key: "removeTransitionEnd",
    value: function removeTransitionEnd(dom) {
      dom = dom || this.getViewDOMNode();
      if (dom) {
        dom.removeEventListener((0, _getTransitionEnd.default)(), this.onTransitionEnd);
      }
    }
  }, {
    key: "onTransitionEnd",
    value: function onTransitionEnd() {
      this.removeTransitionEnd();
      if (!this.nextViewDate) {
        return;
      }
      this.setState({
        viewDate: this.nextViewDate,
        transition: 0,
        prepareTransition: 0
      });
      if (this.props.focusOnTransitionEnd) {
        this.focus();
      }
      delete this.nextViewDate;
    }
  }, {
    key: "onNavMouseDown",
    value: function onNavMouseDown() {
      if (this.props.focusOnNavMouseDown && !this.isFocused()) {
        this.focus();
      }
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      var view = this.getView();
      if (view) {
        return view.isFocused();
      }
      return false;
    }
  }, {
    key: "focus",
    value: function focus() {
      this.getView().focus();
    }
  }]);
  return TransitionView;
}(_reactClass.default);
exports.default = TransitionView;
TransitionView.propTypes = {
  children: _propTypes.default.node.isRequired,
  rootClassName: _propTypes.default.string,
  focusOnNavMouseDown: _propTypes.default.bool,
  onTransitionStart: _propTypes.default.func,
  onTransitionEnd: _propTypes.default.func,
  footerClearDate: _propTypes.default.bool,
  enableMonthDecadeView: _propTypes.default.bool,
  constrainActiveInView: _propTypes.default.bool,
  focusOnTransitionEnd: _propTypes.default.bool,
  navigation: _propTypes.default.bool,
  theme: _propTypes.default.string,
  isDatePicker: _propTypes.default.bool,
  enableMonthDecadeViewAnimation: _propTypes.default.bool,
  showMonthDecadeViewAnimation: _propTypes.default.number
};
TransitionView.defaultProps = {
  rootClassName: 'inovua-react-toolkit-calendar__transition-month-view',
  focusOnNavMouseDown: true,
  enableMonthDecadeViewAnimation: true,
  showMonthDecadeViewAnimation: 300,
  onTransitionStart: function onTransitionStart() {},
  onTransitionEnd: function onTransitionEnd() {},
  footerClearDate: null,
  enableMonthDecadeView: true,
  constrainActiveInView: false,
  focusOnTransitionEnd: false,
  navigation: true,
  theme: 'default-light',
  isDatePicker: true
};