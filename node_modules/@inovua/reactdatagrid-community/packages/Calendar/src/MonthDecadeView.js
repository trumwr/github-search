/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../react-class"));
var _Flex = require("../../Flex");
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _toMoment2 = _interopRequireDefault(require("./toMoment"));
var _joinFunctions = _interopRequireDefault(require("./joinFunctions"));
var _Footer = _interopRequireDefault(require("./Footer"));
var _YearView = _interopRequireDefault(require("./YearView"));
var _assignDefined = _interopRequireDefault(require("./assignDefined"));
var _DecadeView = _interopRequireWildcard(require("./DecadeView"));
var _MonthDecadeView$prop;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var preventDefault = function preventDefault(e) {
  e.preventDefault();
};
var MonthDecadeView = function (_Component) {
  (0, _inherits2.default)(MonthDecadeView, _Component);
  var _super = _createSuper(MonthDecadeView);
  function MonthDecadeView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, MonthDecadeView);
    _this = _super.call(this, props);
    _this.state = (0, _DecadeView.getInitialState)(props);
    return _this;
  }
  (0, _createClass2.default)(MonthDecadeView, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.unmounted = false;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unmounted = true;
    }
  }, {
    key: "toMoment",
    value: function toMoment(date, format) {
      return (0, _toMoment2.default)(date, format, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var dateProps = (0, _DecadeView.prepareDateProps)(this.props, this.state);
      var props = this.p = _objectSpread(_objectSpread({}, this.props), dateProps);
      props.children = _react.default.Children.toArray(props.children);
      var rootClassName = props.rootClassName;
      var className = (0, _join.default)(props.className, rootClassName, props.theme && "".concat(rootClassName, "--theme-").concat(props.theme));
      var separatorClassName = "".concat(rootClassName, "__separator");
      var commonProps = (0, _assignDefined.default)({}, {
        locale: props.locale,
        theme: props.theme,
        minDate: props.minDate,
        maxDate: props.maxDate,
        viewDate: props.viewMoment,
        activeDate: props.activeDate,
        date: props.date,
        dateFormat: props.dateFormat
      });
      var yearViewProps = (0, _assign.default)({}, commonProps);
      var decadeViewProps = (0, _assign.default)({}, commonProps, {
        ref: function ref(view) {
          _this2.decadeView = view;
        }
      });
      var flexProps = (0, _assign.default)({}, this.props);
      delete flexProps.rootClassName;
      delete flexProps.activeDate;
      delete flexProps.adjustDateStartOf;
      delete flexProps.adjustMaxDateStartOf;
      delete flexProps.adjustMinDateStartOf;
      delete flexProps.cleanup;
      delete flexProps.date;
      delete flexProps.dateFormat;
      delete flexProps.defaultDate;
      delete flexProps.defaultViewDate;
      delete flexProps.focusDecadeView;
      delete flexProps.focusYearView;
      delete flexProps.okButtonText;
      delete flexProps.cancelButtonText;
      delete flexProps.footer;
      delete flexProps.locale;
      delete flexProps.maxDate;
      delete flexProps.minDate;
      delete flexProps.onOkClick;
      delete flexProps.onCancelClick;
      delete flexProps.okOnEnter;
      delete flexProps.navigation;
      delete flexProps.theme;
      delete flexProps.viewMoment;
      if (typeof props.cleanup == 'function') {
        props.cleanup(flexProps);
      }
      return _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({
        inline: true,
        column: true,
        alignItems: "stretch"
      }, flexProps), {}, {
        className: className
      }), this.renderYearView(yearViewProps), _react.default.createElement("div", {
        className: separatorClassName
      }), this.renderDecadeView(decadeViewProps), _react.default.createElement("div", {
        className: separatorClassName
      }), this.renderFooter());
    }
  }, {
    key: "renderFooter",
    value: function renderFooter() {
      var props = this.p;
      var children = props.children;
      if (!props.footer) {
        return null;
      }
      var okButtonText = props.okButtonText,
        cancelButtonText = props.cancelButtonText;
      var defaultFooterProps = (0, _assignDefined.default)({}, {
        okButtonText: okButtonText,
        cancelButtonText: cancelButtonText,
        theme: props.theme
      });
      var footerChild = children.filter(function (c) {
        return c && c.props && c.props.isDatePickerFooter;
      })[0];
      if (footerChild) {
        var newFooterProps = {
          onOkClick: (0, _joinFunctions.default)(this.onOkClick, footerChild.props.onOkClick),
          onCancelClick: (0, _joinFunctions.default)(this.onCancelClick, footerChild.props.onCancelClick)
        };
        (0, _assignDefined.default)(newFooterProps, defaultFooterProps);
        if (footerChild.props.centerButtons === undefined) {
          newFooterProps.centerButtons = true;
        }
        if (footerChild.props.todayButton === undefined) {
          newFooterProps.todayButton = false;
        }
        if (footerChild.props.clearButton === undefined) {
          newFooterProps.clearButton = false;
        }
        return _react.default.cloneElement(footerChild, newFooterProps);
      }
      return _react.default.createElement(_Footer.default, _objectSpread(_objectSpread({
        key: "month_decade_footer"
      }, defaultFooterProps), {}, {
        todayButton: false,
        clearButton: false,
        onOkClick: this.onOkClick,
        onCancelClick: this.onCancelClick,
        centerButtons: true
      }));
    }
  }, {
    key: "onOkClick",
    value: function onOkClick() {
      if (this.props.onOkClick) {
        var dateMoment = this.p.activeMoment;
        var dateString = this.format(dateMoment);
        var timestamp = +dateMoment;
        this.props.onOkClick(dateString, {
          dateMoment: dateMoment,
          timestamp: timestamp
        });
      }
    }
  }, {
    key: "onCancelClick",
    value: function onCancelClick() {
      if (this.props.onCancelClick) {
        this.props.onCancelClick();
      }
    }
  }, {
    key: "renderYearView",
    value: function renderYearView(yearViewProps) {
      var props = this.p;
      var children = props.children;
      var yearViewChild = children.filter(function (c) {
        return c && c.props && c.props.isYearView;
      })[0];
      var yearViewChildProps = yearViewChild ? yearViewChild.props : {};
      var tabIndex = yearViewChildProps.tabIndex == null ? null : yearViewChildProps.tabIndex;
      yearViewProps.tabIndex = tabIndex;
      if (props.focusYearView === false || tabIndex == null) {
        yearViewProps.tabIndex = null;
        yearViewProps.onFocus = this.onYearViewFocus;
        yearViewProps.onMouseDown = this.onYearViewMouseDown;
      }
      (0, _assign.default)(yearViewProps, {
        onViewDateChange: (0, _joinFunctions.default)(this.onViewDateChange, yearViewChildProps.onViewDateChange),
        onActiveDateChange: (0, _joinFunctions.default)(this.onActiveDateChange, yearViewChildProps.onActiveDateChange),
        onChange: (0, _joinFunctions.default)(this.handleYearViewOnChange, yearViewChildProps.onChange)
      });
      if (yearViewChild) {
        return _react.default.cloneElement(yearViewChild, yearViewProps);
      }
      return _react.default.createElement(_YearView.default, _objectSpread({}, yearViewProps));
    }
  }, {
    key: "renderDecadeView",
    value: function renderDecadeView(decadeViewProps) {
      var props = this.p;
      var children = props.children;
      var decadeViewChild = children.filter(function (c) {
        return c && c.props && c.props.isDecadeView;
      })[0];
      var decadeViewChildProps = decadeViewChild ? decadeViewChild.props : {};
      var tabIndex = decadeViewChildProps.tabIndex == null ? null : decadeViewChildProps.tabIndex;
      decadeViewProps.tabIndex = tabIndex;
      if (props.focusDecadeView === false || tabIndex == null) {
        decadeViewProps.tabIndex = null;
        decadeViewProps.onMouseDown = this.onDecadeViewMouseDown;
      }
      (0, _assign.default)(decadeViewProps, {
        onConfirm: (0, _joinFunctions.default)(this.handleDecadeViewOnConfirm, decadeViewChildProps.onConfirm),
        onViewDateChange: (0, _joinFunctions.default)(this.handleDecadeOnViewDateChange, decadeViewChildProps.onViewDateChange),
        onActiveDateChange: (0, _joinFunctions.default)(this.handleDecadeOnActiveDateChange, decadeViewChildProps.onActiveDateChange),
        onChange: (0, _joinFunctions.default)(this.handleDecadeOnChange, decadeViewChildProps.onChange)
      });
      if (decadeViewChild) {
        return _react.default.cloneElement(decadeViewChild, decadeViewProps);
      }
      return _react.default.createElement(_DecadeView.default, _objectSpread({}, decadeViewProps));
    }
  }, {
    key: "onYearViewFocus",
    value: function onYearViewFocus() {
      if (this.props.focusYearView === false) {
        this.focus();
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.decadeView && this.props.focusDecadeView) {
        this.decadeView.focus();
      }
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      return this.decadeView;
    }
  }, {
    key: "onYearViewMouseDown",
    value: function onYearViewMouseDown(e) {
      preventDefault(e);
      this.focus();
    }
  }, {
    key: "onDecadeViewMouseDown",
    value: function onDecadeViewMouseDown(e) {
      preventDefault(e);
    }
  }, {
    key: "format",
    value: function format(mom, _format) {
      _format = _format || this.props.dateFormat;
      return mom.format(_format);
    }
  }, {
    key: "handleDecadeViewOnConfirm",
    value: function handleDecadeViewOnConfirm() {
      if (this.props.okOnEnter) {
        this.onOkClick();
      }
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      if (event.key == 'Escape') {
        return this.onCancelClick();
      }
      if (this.decadeView) {
        this.decadeView.onKeyDown(event);
      }
      return undefined;
    }
  }, {
    key: "confirm",
    value: function confirm(date, event) {
      return _DecadeView.confirm.call(this, date, event);
    }
  }, {
    key: "navigate",
    value: function navigate(direction, event) {
      return _DecadeView.navigate.call(this, direction, event);
    }
  }, {
    key: "select",
    value: function select(_ref, event) {
      var dateMoment = _ref.dateMoment,
        timestamp = _ref.timestamp;
      return _DecadeView.select.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "handleDecadeOnViewDateChange",
    value: function handleDecadeOnViewDateChange(dateString, _ref2) {
      var dateMoment = _ref2.dateMoment,
        timestamp = _ref2.timestamp;
      var props = this.p;
      var currentViewMoment = props.viewMoment;
      if (currentViewMoment) {
        dateMoment.set('month', currentViewMoment.get('month'));
        dateString = this.format(dateMoment);
        timestamp = +dateMoment;
      }
      this.onViewDateChange(dateString, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "handleDecadeOnActiveDateChange",
    value: function handleDecadeOnActiveDateChange(dateString, _ref3) {
      var dateMoment = _ref3.dateMoment,
        timestamp = _ref3.timestamp;
      var props = this.p;
      var currentViewMoment = props.viewMoment;
      if (currentViewMoment) {
        dateMoment.set('month', currentViewMoment.get('month'));
        dateString = this.format(dateMoment);
        timestamp = +dateMoment;
      }
      this.onActiveDateChange(dateString, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "handleDecadeOnChange",
    value: function handleDecadeOnChange(dateString, _ref4, event) {
      var dateMoment = _ref4.dateMoment,
        timestamp = _ref4.timestamp;
      var props = this.p;
      var currentViewMoment = props.viewMoment;
      if (currentViewMoment) {
        dateMoment.set('month', currentViewMoment.get('month'));
        dateString = this.format(dateMoment);
        timestamp = +dateMoment;
      }
      this.onChange(dateString, {
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "handleYearViewOnChange",
    value: function handleYearViewOnChange(dateString, _ref5, event) {
      var dateMoment = _ref5.dateMoment,
        timestamp = _ref5.timestamp;
      var props = this.p;
      var currentMoment = props.moment;
      if (currentMoment) {
        dateMoment.set('year', currentMoment.get('year'));
        dateString = this.format(dateMoment);
        timestamp = +dateMoment;
      }
      this.onChange(dateString, {
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "onViewDateChange",
    value: function onViewDateChange(dateString, _ref6) {
      var dateMoment = _ref6.dateMoment,
        timestamp = _ref6.timestamp;
      return _DecadeView.onViewDateChange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "gotoViewDate",
    value: function gotoViewDate(_ref7) {
      var dateMoment = _ref7.dateMoment,
        timestamp = _ref7.timestamp;
      return _DecadeView.gotoViewDate.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onActiveDateChange",
    value: function onActiveDateChange(dateString, _ref8) {
      var dateMoment = _ref8.dateMoment,
        timestamp = _ref8.timestamp;
      return _DecadeView.onActiveDateChange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onChange",
    value: function onChange(dateString, _ref9, event) {
      var dateMoment = _ref9.dateMoment,
        timestamp = _ref9.timestamp;
      return _DecadeView.onChange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }]);
  return MonthDecadeView;
}(_reactClass.default);
exports.default = MonthDecadeView;
MonthDecadeView.defaultProps = {
  rootClassName: 'inovua-react-toolkit-calendar__month-decade-view',
  okOnEnter: true,
  footer: true,
  theme: 'default',
  navigation: true,
  focusYearView: false,
  focusDecadeView: true,
  dateFormat: 'YYYY-MM-DD',
  adjustDateStartOf: 'month',
  adjustMinDateStartOf: 'month',
  adjustMaxDateStartOf: 'month'
};
MonthDecadeView.propTypes = (_MonthDecadeView$prop = {
  okOnEnter: _propTypes.default.bool,
  navigation: _propTypes.default.bool,
  focusYearView: _propTypes.default.bool,
  focusDecadeView: _propTypes.default.bool,
  footer: _propTypes.default.bool,
  minDate: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
  maxDate: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
  viewMoment: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
  activeDate: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
  date: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
  defaultDate: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
  defaultViewDate: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
  dateFormat: _propTypes.default.string,
  moment: _propTypes.default.object,
  locale: _propTypes.default.string,
  theme: _propTypes.default.string
}, (0, _defineProperty2.default)(_MonthDecadeView$prop, "dateFormat", _propTypes.default.string), (0, _defineProperty2.default)(_MonthDecadeView$prop, "adjustDateStartOf", _propTypes.default.string), (0, _defineProperty2.default)(_MonthDecadeView$prop, "adjustMinDateStartOf", _propTypes.default.string), (0, _defineProperty2.default)(_MonthDecadeView$prop, "adjustMaxDateStartOf", _propTypes.default.string), (0, _defineProperty2.default)(_MonthDecadeView$prop, "cleanup", _propTypes.default.func), (0, _defineProperty2.default)(_MonthDecadeView$prop, "onCancelClick", _propTypes.default.func), (0, _defineProperty2.default)(_MonthDecadeView$prop, "onOkClick", _propTypes.default.func), (0, _defineProperty2.default)(_MonthDecadeView$prop, "onChange", _propTypes.default.func), _MonthDecadeView$prop);