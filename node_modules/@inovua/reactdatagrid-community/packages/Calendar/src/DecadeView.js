/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onChange = exports.onActiveDateChange = exports.navigate = exports.isValidActiveDate = exports.isDateInMinMax = exports.gotoViewDate = exports.getInitialState = exports.default = exports.confirm = void 0;
Object.defineProperty(exports, "onKeyDown", {
  enumerable: true,
  get: function get() {
    return _onKeyDown.default;
  }
});
exports.select = exports.prepareViewDate = exports.prepareMinMax = exports.prepareDateProps = exports.prepareDate = exports.prepareActiveDate = exports.onViewDateChange = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../react-class"));
var _moment = _interopRequireDefault(require("moment"));
var _Flex = require("../../Flex");
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _times = _interopRequireDefault(require("./utils/times"));
var _toMoment2 = _interopRequireDefault(require("./toMoment"));
var _onKeyDown = _interopRequireDefault(require("./MonthView/onKeyDown"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ARROWS = {
  prev: _react.default.createElement("svg", {
    width: "5",
    height: "10",
    viewBox: "0 0 5 10"
  }, _react.default.createElement("path", {
    fillRule: "evenodd",
    d: "M.262 4.738L4.368.632c.144-.144.379-.144.524 0C4.96.702 5 .796 5 .894v8.212c0 .204-.166.37-.37.37-.099 0-.193-.039-.262-.108L.262 5.262c-.145-.145-.145-.38 0-.524z"
  })),
  next: _react.default.createElement("svg", {
    width: "5",
    height: "10",
    viewBox: "0 0 5 10"
  }, _react.default.createElement("path", {
    fillRule: "evenodd",
    d: "M4.738 5.262L.632 9.368c-.144.144-.379.144-.524 0C.04 9.298 0 9.204 0 9.106V.894C0 .69.166.524.37.524c.099 0 .193.039.262.108l4.106 4.106c.145.145.145.38 0 .524z"
  }))
};
var getDecadeStartYear = function getDecadeStartYear(mom) {
  var year = mom.get('year');
  return year - year % 10;
};
var getDecadeEndYear = function getDecadeEndYear(mom) {
  return getDecadeStartYear(mom) + 9;
};
var NAV_KEYS = {
  ArrowUp: function ArrowUp(mom) {
    return mom.add(-5, 'year');
  },
  ArrowDown: function ArrowDown(mom) {
    return mom.add(5, 'year');
  },
  ArrowLeft: function ArrowLeft(mom) {
    return mom.add(-1, 'year');
  },
  ArrowRight: function ArrowRight(mom) {
    return mom.add(1, 'year');
  },
  Home: function Home(mom) {
    return mom.set('year', getDecadeStartYear(mom));
  },
  End: function End(mom) {
    return mom.set('year', getDecadeEndYear(mom));
  },
  PageUp: function PageUp(mom) {
    return mom.add(-10, 'year');
  },
  PageDown: function PageDown(mom) {
    return mom.add(10, 'year');
  }
};
var isDateInMinMax = function isDateInMinMax(timestamp, props) {
  if (props.minDate && timestamp < props.minDate) {
    return false;
  }
  if (props.maxDate && timestamp > props.maxDate) {
    return false;
  }
  return true;
};
exports.isDateInMinMax = isDateInMinMax;
var isValidActiveDate = function isValidActiveDate(timestamp, props) {
  if (!props) {
    throw new Error('props is mandatory in isValidActiveDate');
  }
  return isDateInMinMax(timestamp, props);
};
exports.isValidActiveDate = isValidActiveDate;
var _select = function select(_ref, event) {
  var dateMoment = _ref.dateMoment,
    timestamp = _ref.timestamp;
  if (this.props.select) {
    return this.props.select({
      dateMoment: dateMoment,
      timestamp: timestamp
    }, event);
  }
  if (!timestamp) {
    timestamp = +dateMoment;
  }
  this.gotoViewDate({
    dateMoment: dateMoment,
    timestamp: timestamp
  });
  this.onChange({
    dateMoment: dateMoment,
    timestamp: timestamp
  }, event);
  return undefined;
};
exports.select = _select;
var _confirm = function confirm(date, event) {
  event.preventDefault();
  if (this.props.confirm) {
    return this.props.confirm(date, event);
  }
  var dateMoment = this.toMoment(date);
  var timestamp = +dateMoment;
  this.select({
    dateMoment: dateMoment,
    timestamp: timestamp
  }, event);
  if (this.props.onConfirm) {
    this.props.onConfirm({
      dateMoment: dateMoment,
      timestamp: timestamp
    });
  }
  return undefined;
};
exports.confirm = _confirm;
var _onActiveDateChange = function onActiveDateChange(_ref2) {
  var dateMoment = _ref2.dateMoment,
    timestamp = _ref2.timestamp;
  if (!isValidActiveDate(timestamp, this.p)) {
    return;
  }
  if (this.props.activeDate === undefined) {
    this.setState({
      activeDate: timestamp
    });
  }
  if (this.props.onActiveDateChange) {
    var dateString = this.format(dateMoment);
    this.props.onActiveDateChange(dateString, {
      dateMoment: dateMoment,
      timestamp: timestamp,
      dateString: dateString
    });
  }
};
exports.onActiveDateChange = _onActiveDateChange;
var _onViewDateChange = function onViewDateChange(_ref3) {
  var dateMoment = _ref3.dateMoment,
    timestamp = _ref3.timestamp;
  if (dateMoment && timestamp === undefined) {
    timestamp = +dateMoment;
  }
  if (this.props.constrainViewDate && !isDateInMinMax(timestamp, this.p)) {
    return;
  }
  if (this.props.viewDate === undefined) {
    this.setState({
      viewDate: timestamp
    });
  }
  if (this.props.onViewDateChange) {
    var dateString = this.format(dateMoment);
    this.props.onViewDateChange(dateString, {
      dateMoment: dateMoment,
      dateString: dateString,
      timestamp: timestamp
    });
  }
};
exports.onViewDateChange = _onViewDateChange;
var _onChange = function onChange(_ref4, event) {
  var dateMoment = _ref4.dateMoment,
    timestamp = _ref4.timestamp;
  if (this.props.date === undefined) {
    this.setState({
      date: timestamp
    });
  }
  if (this.props.onChange) {
    var dateString = this.format(dateMoment);
    this.props.onChange(dateString, {
      dateMoment: dateMoment,
      timestamp: timestamp,
      dateString: dateString
    }, event);
  }
};
exports.onChange = _onChange;
var _navigate = function navigate(direction, event) {
  var _this = this;
  var props = this.p;
  var getNavigationDate = function getNavigationDate(dir, date, dateFormat) {
    var mom = _moment.default.isMoment(date) ? date : _this.toMoment(date, dateFormat);
    if (typeof dir == 'function') {
      return dir(mom);
    }
    return mom;
  };
  if (props.navigate) {
    return props.navigate(direction, event, getNavigationDate);
  }
  event.preventDefault();
  if (props.activeDate) {
    var nextMoment = getNavigationDate(direction, props.activeDate);
    this.gotoViewDate({
      dateMoment: nextMoment
    });
  }
  return undefined;
};
exports.navigate = _navigate;
var _gotoViewDate = function gotoViewDate(_ref5) {
  var dateMoment = _ref5.dateMoment,
    timestamp = _ref5.timestamp;
  if (!timestamp) {
    timestamp = dateMoment == null ? null : +dateMoment;
  }
  this.onViewDateChange({
    dateMoment: dateMoment,
    timestamp: timestamp
  });
  this.onActiveDateChange({
    dateMoment: dateMoment,
    timestamp: timestamp
  });
};
exports.gotoViewDate = _gotoViewDate;
var prepareDate = function prepareDate(props, state) {
  return props.date === undefined ? state.date : props.date;
};
exports.prepareDate = prepareDate;
var prepareViewDate = function prepareViewDate(props, state) {
  var viewDate = props.viewDate === undefined ? state.viewDate : props.viewDate;
  if (!viewDate && props.date) {
    return props.date;
  }
  return viewDate;
};
exports.prepareViewDate = prepareViewDate;
var prepareActiveDate = function prepareActiveDate(props, state) {
  var activeDate = props.activeDate === undefined ? state.activeDate || prepareDate(props, state) : props.activeDate;
  return activeDate;
};
exports.prepareActiveDate = prepareActiveDate;
var prepareMinMax = function prepareMinMax(props) {
  var minDate = props.minDate,
    maxDate = props.maxDate;
  var result = {};
  if (minDate != null) {
    result.minDateMoment = (0, _toMoment2.default)(props.minDate, props).startOf(props.adjustMinDateStartOf);
    result.minDate = +result.minDateMoment;
  }
  if (maxDate != null) {
    result.maxDateMoment = (0, _toMoment2.default)(props.maxDate, props).endOf(props.adjustMaxDateStartOf);
    result.maxDate = +result.maxDateMoment;
  }
  return result;
};
exports.prepareMinMax = prepareMinMax;
var prepareDateProps = function prepareDateProps(props, state) {
  var result = {};
  (0, _assign.default)(result, prepareMinMax(props));
  result.date = prepareDate(props, state);
  result.viewDate = prepareViewDate(props, state);
  var activeDate = prepareActiveDate(props, state);
  if (result.date != null) {
    result.moment = (0, _toMoment2.default)(result.date, props);
    if (props.adjustDateStartOf) {
      result.moment.startOf(props.adjustDateStartOf);
    }
    result.timestamp = +result.moment;
  }
  if (activeDate) {
    result.activeMoment = (0, _toMoment2.default)(activeDate, props);
    if (props.adjustDateStartOf) {
      result.activeMoment.startOf(props.adjustDateStartOf);
    }
    result.activeDate = +result.activeMoment;
  }
  var viewMoment = (0, _toMoment2.default)(result.viewDate, props);
  if (props.constrainViewDate && result.minDate != null && viewMoment.isBefore(result.minDate)) {
    result.minConstrained = true;
    viewMoment = (0, _toMoment2.default)(result.minDate, props);
  }
  if (props.constrainViewDate && result.maxDate != null && viewMoment.isAfter(result.maxDate)) {
    result.maxConstrained = true;
    viewMoment = (0, _toMoment2.default)(result.maxDate, props);
  }
  if (props.adjustDateStartOf) {
    viewMoment.startOf(props.adjustDateStartOf);
  }
  result.viewMoment = viewMoment;
  return result;
};
exports.prepareDateProps = prepareDateProps;
var getInitialState = function getInitialState(props) {
  return {
    date: props.defaultDate,
    activeDate: props.defaultActiveDate,
    viewDate: props.defaultViewDate
  };
};
exports.getInitialState = getInitialState;
var DecadeView = function (_Component) {
  (0, _inherits2.default)(DecadeView, _Component);
  var _super = _createSuper(DecadeView);
  function DecadeView(props) {
    var _this2;
    (0, _classCallCheck2.default)(this, DecadeView);
    _this2 = _super.call(this, props);
    _this2.decadeViewRef = (0, _react.createRef)();
    _this2.state = getInitialState(props);
    return _this2;
  }
  (0, _createClass2.default)(DecadeView, [{
    key: "getYearsInDecade",
    value: function getYearsInDecade(value) {
      var _this3 = this;
      var year = getDecadeStartYear(this.toMoment(value));
      var start = this.toMoment("".concat(year), 'YYYY').startOf('year');
      return (0, _times.default)(10).map(function (i) {
        return _this3.toMoment(start).add(i, 'year');
      });
    }
  }, {
    key: "toMoment",
    value: function toMoment(date, format) {
      return (0, _toMoment2.default)(date, format, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.p = (0, _assign.default)({}, this.props);
      if (props.onlyCompareYear) {}
      var dateProps = prepareDateProps(props, this.state);
      (0, _assign.default)(props, dateProps);
      var yearsInView = this.getYearsInDecade(props.viewMoment);
      var rootClassName = props.rootClassName;
      var className = (0, _join.default)(props.className, rootClassName, props.theme && "".concat(rootClassName, "--theme-").concat(props.theme));
      var children = this.renderYears(props, yearsInView);
      var align = 'stretch';
      var column = true;
      if (props.navigation) {
        column = false;
        align = 'center';
        children = [this.renderNav(-1), _react.default.createElement(_Flex.Flex, {
          key: "year_view",
          inline: true,
          flex: true,
          column: true,
          alignItems: "stretch",
          children: children
        }), this.renderNav(1)];
      }
      var flexProps = (0, _assign.default)({}, this.props);
      delete flexProps.activeDate;
      delete flexProps.adjustDateStartOf;
      delete flexProps.adjustMaxDateStartOf;
      delete flexProps.adjustMinDateStartOf;
      delete flexProps.arrows;
      delete flexProps.cleanup;
      delete flexProps.constrainViewDate;
      delete flexProps.date;
      delete flexProps.dateFormat;
      delete flexProps.isDecadeView;
      delete flexProps.maxDate;
      delete flexProps.minDate;
      delete flexProps.navigation;
      delete flexProps.navKeys;
      delete flexProps.onActiveDateChange;
      delete flexProps.onConfirm;
      delete flexProps.onlyCompareYear;
      delete flexProps.onViewDateChange;
      delete flexProps.perRow;
      delete flexProps.theme;
      delete flexProps.viewDate;
      delete flexProps.yearFormat;
      delete flexProps.rootClassName;
      if (typeof props.cleanup == 'function') {
        props.cleanup(flexProps);
      }
      return _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({
        inline: true,
        ref: this.decadeViewRef,
        column: column,
        alignItems: align,
        tabIndex: 0
      }, flexProps), {}, {
        onKeyDown: this.onKeyDown,
        className: className,
        children: children
      }));
    }
  }, {
    key: "renderNav",
    value: function renderNav(dir) {
      var _this4 = this;
      var props = this.p;
      var name = dir == -1 ? 'prev' : 'next';
      var navMoment = this.toMoment(props.viewMoment).add(dir * 10, 'year');
      var disabled = dir == -1 ? props.minDateMoment && getDecadeEndYear(navMoment) < getDecadeEndYear(props.minDateMoment) : props.maxDateMoment && getDecadeEndYear(navMoment) > getDecadeEndYear(props.maxDateMoment);
      var rootClassName = props.rootClassName;
      var className = (0, _join.default)("".concat(rootClassName, "-arrow"), "".concat(rootClassName, "-arrow--").concat(name), disabled && "".concat(rootClassName, "-arrow--disabled"));
      var arrow = props.arrows[name] || ARROWS[name];
      var arrowProps = {
        className: className,
        onClick: !disabled ? function () {
          return _this4.onViewDateChange({
            dateMoment: navMoment,
            timestamp: _this4.toMoment(props.viewMoment)
          });
        } : null,
        children: arrow,
        disabled: disabled
      };
      if (props.renderNavigation) {
        return props.renderNavigation(arrowProps, props);
      }
      return _react.default.createElement("div", _objectSpread({
        key: "nav_arrow_".concat(dir)
      }, arrowProps));
    }
  }, {
    key: "renderYears",
    value: function renderYears(props, years) {
      var nodes = years.map(this.renderYear);
      var perRow = props.perRow;
      var buckets = (0, _times.default)(Math.ceil(nodes.length / perRow)).map(function (i) {
        return nodes.slice(i * perRow, (i + 1) * perRow);
      });
      return buckets.map(function (bucket, i) {
        return _react.default.createElement(_Flex.Flex, {
          alignItems: "center",
          flex: true,
          row: true,
          inline: true,
          key: "row_".concat(i),
          className: "".concat(props.rootClassName, "-row")
        }, bucket);
      });
    }
  }, {
    key: "renderYear",
    value: function renderYear(dateMoment) {
      var props = this.p;
      var yearText = this.format(dateMoment);
      var timestamp = +dateMoment;
      var isActiveDate = props.onlyCompareYear && props.activeMoment ? dateMoment.get('year') == props.activeMoment.get('year') : timestamp === props.activeDate;
      var isValue = props.onlyCompareYear && props.moment ? dateMoment.get('year') == props.moment.get('year') : timestamp === props.timestamp;
      var rootClassName = props.rootClassName;
      var className = (0, _join.default)("".concat(rootClassName, "-year"), isActiveDate && "".concat(rootClassName, "-year--active"), isValue && "".concat(rootClassName, "-year--value"), props.minDate != null && timestamp < props.minDate && "".concat(rootClassName, "-year--disabled"), props.maxDate != null && timestamp > props.maxDate && "".concat(rootClassName, "-year--disabled"));
      var onClick = this.handleClick.bind(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
      return _react.default.createElement(_Flex.Item, {
        key: yearText,
        className: className,
        onClick: onClick
      }, yearText);
    }
  }, {
    key: "format",
    value: function format(mom, _format) {
      _format = _format || this.props.yearFormat;
      return mom.format(_format);
    }
  }, {
    key: "handleClick",
    value: function handleClick(_ref6, event) {
      var timestamp = _ref6.timestamp,
        dateMoment = _ref6.dateMoment;
      event.target.value = timestamp;
      var props = this.p;
      if (props.minDate && timestamp < props.minDate) {
        return;
      }
      if (props.maxDate && timestamp > props.maxDate) {
        return;
      }
      this.select({
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      return _onKeyDown.default.call(this, event);
    }
  }, {
    key: "confirm",
    value: function confirm(date, event) {
      return _confirm.call(this, date, event);
    }
  }, {
    key: "navigate",
    value: function navigate(direction, event) {
      return _navigate.call(this, direction, event);
    }
  }, {
    key: "select",
    value: function select(_ref7, event) {
      var dateMoment = _ref7.dateMoment,
        timestamp = _ref7.timestamp;
      return _select.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "onViewDateChange",
    value: function onViewDateChange(_ref8) {
      var dateMoment = _ref8.dateMoment,
        timestamp = _ref8.timestamp;
      return _onViewDateChange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "gotoViewDate",
    value: function gotoViewDate(_ref9) {
      var dateMoment = _ref9.dateMoment,
        timestamp = _ref9.timestamp;
      return _gotoViewDate.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onActiveDateChange",
    value: function onActiveDateChange(_ref10) {
      var dateMoment = _ref10.dateMoment,
        timestamp = _ref10.timestamp;
      return _onActiveDateChange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onChange",
    value: function onChange(_ref11, event) {
      var dateMoment = _ref11.dateMoment,
        timestamp = _ref11.timestamp;
      return _onChange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      return this.decadeViewRef.current;
    }
  }, {
    key: "focus",
    value: function focus() {
      this.decadeViewRef.current.focus();
    }
  }]);
  return DecadeView;
}(_reactClass.default);
exports.default = DecadeView;
DecadeView.defaultProps = {
  rootClassName: 'inovua-react-toolkit-calendar__decade-view',
  isDecadeView: true,
  arrows: {},
  navigation: true,
  constrainViewDate: true,
  navKeys: NAV_KEYS,
  theme: 'default',
  yearFormat: 'YYYY',
  dateFormat: 'YYYY-MM-DD',
  perRow: 5,
  onlyCompareYear: true,
  adjustDateStartOf: 'year',
  adjustMinDateStartOf: 'year',
  adjustMaxDateStartOf: 'year'
};
DecadeView.propTypes = {
  isDecadeView: _propTypes.default.bool,
  rootClassName: _propTypes.default.string,
  navigation: _propTypes.default.bool,
  constrainViewDate: _propTypes.default.bool,
  arrows: _propTypes.default.object,
  navKeys: _propTypes.default.object,
  theme: _propTypes.default.string,
  yearFormat: _propTypes.default.string,
  dateFormat: _propTypes.default.string,
  perRow: _propTypes.default.number,
  minDate: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),
  maxDate: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),
  viewDate: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),
  date: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),
  defaultDate: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),
  viewMoment: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),
  moment: _propTypes.default.object,
  minDateMoment: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),
  maxDateMoment: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.object]),
  onlyCompareYear: _propTypes.default.bool,
  adjustDateStartOf: _propTypes.default.string,
  adjustMinDateStartOf: _propTypes.default.string,
  adjustMaxDateStartOf: _propTypes.default.string,
  activeDate: _propTypes.default.number,
  select: _propTypes.default.func,
  confirm: _propTypes.default.func,
  onConfirm: _propTypes.default.func,
  onActiveDateChange: _propTypes.default.func,
  onViewDateChange: _propTypes.default.func,
  cleanup: _propTypes.default.func,
  onChange: _propTypes.default.func,
  renderNavigation: _propTypes.default.func,
  navigate: _propTypes.default.func
};