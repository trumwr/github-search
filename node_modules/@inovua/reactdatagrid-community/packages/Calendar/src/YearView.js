/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../react-class"));
var _Flex = require("../../Flex");
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _times = _interopRequireDefault(require("./utils/times"));
var _toMoment2 = _interopRequireDefault(require("./toMoment"));
var _bemFactory = _interopRequireDefault(require("./bemFactory"));
var _DecadeView = require("./DecadeView");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var bem = (0, _bemFactory.default)('react-calendar__year-view');
var NAV_KEYS = {
  ArrowUp: function ArrowUp(mom) {
    if (mom.get('month') >= 4) {
      mom.add(-4, 'month');
    }
    return mom;
  },
  ArrowDown: function ArrowDown(mom) {
    if (mom.get('month') <= 7) {
      mom.add(4, 'month');
    }
    return mom;
  },
  ArrowLeft: function ArrowLeft(mom) {
    if (mom.get('month') >= 1) {
      mom.add(-1, 'month');
    }
    return mom;
  },
  ArrowRight: function ArrowRight(mom) {
    if (mom.get('month') <= 10) {
      mom.add(1, 'month');
    }
    return mom;
  },
  Home: function Home(mom) {
    return mom.startOf('year').startOf('month');
  },
  End: function End(mom) {
    return mom.endOf('year').startOf('month');
  },
  PageUp: function PageUp(mom) {
    var month = mom.get('month') - 4;
    var extra4 = month - 4;
    if (month >= 0) {
      if (extra4 >= 0) {
        return mom.set('month', extra4);
      }
      return mom.set('month', month);
    }
    return mom;
  },
  PageDown: function PageDown(mom) {
    var month = mom.get('month') + 4;
    var extra4 = month + 4;
    if (month <= 11) {
      if (extra4 <= 11) {
        return mom.set('month', extra4);
      }
      return mom.set('month', month);
    }
    return mom;
  }
};
var YearView = function (_Component) {
  (0, _inherits2.default)(YearView, _Component);
  var _super = _createSuper(YearView);
  function YearView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, YearView);
    _this = _super.call(this, props);
    _this.state = (0, _DecadeView.getInitialState)(props);
    _this.yearViewRef = (0, _react.createRef)();
    return _this;
  }
  (0, _createClass2.default)(YearView, [{
    key: "getMonthsInYear",
    value: function getMonthsInYear(value) {
      var _this2 = this;
      var start = this.toMoment(value).startOf('year');
      return (0, _times.default)(12).map(function (i) {
        return _this2.toMoment(start).add(i, 'month');
      });
    }
  }, {
    key: "toMoment",
    value: function toMoment(date) {
      return (0, _toMoment2.default)(date, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.p = (0, _assign.default)({}, this.props);
      var rootClassName = props.rootClassName;
      var dateProps = (0, _DecadeView.prepareDateProps)(props, this.state);
      (0, _assign.default)(props, dateProps);
      var className = (0, _join.default)(props.className, rootClassName, props.theme && "".concat(rootClassName, "--theme-").concat(props.theme));
      var monthsInView = this.getMonthsInYear(props.viewMoment);
      var flexProps = (0, _assign.default)({}, props);
      delete flexProps.rootClassName;
      delete flexProps.activeDate;
      delete flexProps.activeMoment;
      delete flexProps.adjustDateStartOf;
      delete flexProps.adjustMaxDateStartOf;
      delete flexProps.adjustMinDateStartOf;
      delete flexProps.cleanup;
      delete flexProps.constrainViewDate;
      delete flexProps.date;
      delete flexProps.dateFormat;
      delete flexProps.isYearView;
      delete flexProps.maxConstrained;
      delete flexProps.maxDate;
      delete flexProps.maxDateMoment;
      delete flexProps.minConstrained;
      delete flexProps.minDate;
      delete flexProps.minDateMoment;
      delete flexProps.moment;
      delete flexProps.monthFormat;
      delete flexProps.navKeys;
      delete flexProps.onActiveDateChange;
      delete flexProps.onViewDateChange;
      delete flexProps.onlyCompareMonth;
      delete flexProps.timestamp;
      delete flexProps.theme;
      delete flexProps.viewDate;
      delete flexProps.viewMoment;
      if (typeof props.cleanup == 'function') {
        props.cleanup(flexProps);
      }
      return _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({
        inline: true,
        column: true,
        ref: this.yearViewRef,
        alignItems: "stretch",
        tabIndex: 0
      }, flexProps), {}, {
        onKeyDown: this.onKeyDown,
        className: className
      }), this.renderMonths(props, monthsInView));
    }
  }, {
    key: "renderMonths",
    value: function renderMonths(props, months) {
      var _this3 = this;
      var nodes = months.map(function (monthMoment) {
        return _this3.renderMonth(props, monthMoment);
      });
      var buckets = (0, _times.default)(Math.ceil(nodes.length / 4)).map(function (i) {
        return nodes.slice(i * 4, (i + 1) * 4);
      });
      var className = "".concat(this.props.rootClassName, "-row");
      return buckets.map(function (bucket, i) {
        return _react.default.createElement(_Flex.Flex, {
          alignItems: "center",
          flex: true,
          row: true,
          inline: true,
          key: "row_".concat(i),
          className: className
        }, bucket);
      });
    }
  }, {
    key: "format",
    value: function format(mom, _format) {
      _format = _format || this.props.monthFormat;
      return mom.format(_format);
    }
  }, {
    key: "renderMonth",
    value: function renderMonth(props, dateMoment) {
      var index = dateMoment.get('month');
      var monthText = props.monthNames ? props.monthNames[index] || this.format(dateMoment) : this.format(dateMoment);
      var timestamp = +dateMoment;
      var isActiveDate = props.onlyCompareMonth && props.activeMoment ? dateMoment.get('month') == props.activeMoment.get('month') : timestamp === props.activeDate;
      var isValue = props.onlyCompareMonth && props.moment ? dateMoment.get('month') == props.moment.get('month') : timestamp === props.timestamp;
      var disabled = props.minDate != null && timestamp < props.minDate || props.maxDate != null && timestamp > props.maxDate;
      var rootClassName = props.rootClassName;
      var className = (0, _join.default)("".concat(rootClassName, "-month"), !disabled && isActiveDate && "".concat(rootClassName, "-month--active"), !disabled && isValue && "".concat(rootClassName, "-month--value"), disabled && "".concat(rootClassName, "-month--disabled"));
      var onClick = disabled ? null : this.handleClick.bind(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
      return _react.default.createElement(_Flex.Item, {
        key: monthText,
        className: className,
        onClick: onClick
      }, monthText);
    }
  }, {
    key: "handleClick",
    value: function handleClick(_ref, event) {
      var timestamp = _ref.timestamp,
        dateMoment = _ref.dateMoment;
      event.target.value = timestamp;
      this.select({
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      return _DecadeView.onKeyDown.call(this, event);
    }
  }, {
    key: "confirm",
    value: function confirm(date, event) {
      return _DecadeView.confirm.call(this, date, event);
    }
  }, {
    key: "navigate",
    value: function navigate(direction, event) {
      return _DecadeView.navigate.call(this, direction, event);
    }
  }, {
    key: "select",
    value: function select(_ref2, event) {
      var dateMoment = _ref2.dateMoment,
        timestamp = _ref2.timestamp;
      return _DecadeView.select.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "onViewDateChange",
    value: function onViewDateChange(_ref3) {
      var dateMoment = _ref3.dateMoment,
        timestamp = _ref3.timestamp;
      return _DecadeView.onViewDateChange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "gotoViewDate",
    value: function gotoViewDate(_ref4) {
      var dateMoment = _ref4.dateMoment,
        timestamp = _ref4.timestamp;
      return _DecadeView.gotoViewDate.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onActiveDateChange",
    value: function onActiveDateChange(_ref5) {
      var dateMoment = _ref5.dateMoment,
        timestamp = _ref5.timestamp;
      return _DecadeView.onActiveDateChange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onChange",
    value: function onChange(_ref6, event) {
      var dateMoment = _ref6.dateMoment,
        timestamp = _ref6.timestamp;
      return _DecadeView.onChange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      }, event);
    }
  }, {
    key: "focus",
    value: function focus() {
      this.yearViewRef.current.focus();
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      return this.yearViewRef.current;
    }
  }]);
  return YearView;
}(_reactClass.default);
exports.default = YearView;
YearView.defaultProps = {
  rootClassName: 'inovua-react-toolkit-calendar__year-view',
  isYearView: true,
  navKeys: NAV_KEYS,
  constrainViewDate: true,
  theme: 'default',
  monthFormat: 'MMM',
  dateFormat: 'YYYY-MM-DD',
  onlyCompareMonth: true,
  adjustDateStartOf: 'month',
  adjustMinDateStartOf: 'month',
  adjustMaxDateStartOf: 'month'
};
YearView.propTypes = {
  rootClassName: _propTypes.default.string,
  navKeys: _propTypes.default.object,
  isYearView: _propTypes.default.bool,
  constrainViewDate: _propTypes.default.bool,
  onlyCompareMonth: _propTypes.default.bool,
  theme: _propTypes.default.string,
  monthFormat: _propTypes.default.string,
  dateFormat: _propTypes.default.string,
  adjustDateStartOf: _propTypes.default.string,
  adjustMinDateStartOf: _propTypes.default.string,
  adjustMaxDateStartOf: _propTypes.default.string
};