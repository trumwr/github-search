/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../react-class"));
var _NotifyResize = require("../../NotifyResize");
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _toMoment = _interopRequireDefault(require("./toMoment"));
var _Clock$propTypes;
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var MINUTES = Array.apply(void 0, (0, _toConsumableArray2.default)(new Array(60))).map(function (_, index) {
  return index;
});
var toUpperFirst = function toUpperFirst(str) {
  return str ? str.charAt(0).toUpperCase() + str.substr(1) : '';
};
var transformStyle = {
  transform: ''
};
var rotateTickStyle = function rotateTickStyle(tick, _ref, totalSize, offset) {
  var width = _ref.width,
    height = _ref.height;
  var result = (0, _assign.default)({}, transformStyle);
  var deg = tick * 6;
  var transform = "translate3d(".concat(-width / 2, "px, ").concat(-height / 2, "px, 0px) ") + "rotate(".concat(deg, "deg) translate3d(0px, -").concat(offset, "px, 0px)");
  Object.keys(result).forEach(function (name) {
    result[name] = transform;
  });
  return result;
};
var Clock = function (_Component) {
  (0, _inherits2.default)(Clock, _Component);
  var _super = _createSuper(Clock);
  function Clock(props) {
    var _this;
    (0, _classCallCheck2.default)(this, Clock);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps) {
      if (prevProps.run !== _this.props.run || prevProps.defaultSeconds !== _this.props.defaultSeconds || prevProps.defaultTime !== _this.props.defaultTime) {
        var prevRun = _this.shouldRun(prevProps);
        var currentRun = _this.shouldRun(_this.props);
        if (!prevRun && currentRun) {
          _this.start();
        } else if (prevRun && !currentRun) {
          _this.stop();
        }
      }
    });
    var time;
    var seconds;
    if (props.defaultSeconds) {
      seconds = props.defaultSeconds == true ? Date.now() / 1000 : +props.defaultSeconds;
    }
    if (props.defaultTime) {
      time = props.defaultTime == true ? Date.now() : +props.defaultTime;
    }
    _this.state = {};
    if (seconds !== undefined) {
      _this.state.seconds = seconds;
      _this.state.defaultSeconds = seconds;
    }
    if (time !== undefined) {
      _this.state.time = time;
      _this.state.defaultTime = time;
    }
    return _this;
  }
  (0, _createClass2.default)(Clock, [{
    key: "shouldRun",
    value: function shouldRun(props) {
      props = props || this.props;
      if (props.run === false) {
        return false;
      }
      return !!(props.defaultSeconds || props.defaultTime);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.shouldRun(this.props)) {
        this.start();
      }
      if (this.props.size == 'auto') {
        this.setState({
          rendered: true
        });
      }
    }
  }, {
    key: "start",
    value: function start() {
      this.startTime = Date.now ? Date.now() : +new Date();
      this.run();
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.timeoutId) {
        clearTimeout(this.timeoutId);
      }
    }
  }, {
    key: "run",
    value: function run() {
      var _this2 = this;
      this.timeoutId = setTimeout(function () {
        _this2.update();
        _this2.run();
      }, this.props.updateInterval);
    }
  }, {
    key: "update",
    value: function update() {
      var now = Date.now ? Date.now() : +new Date();
      var diff = now - this.startTime;
      var seconds = this.getPropsSeconds();
      if (seconds !== undefined) {
        this.setSeconds(seconds + diff / 1000);
        return;
      }
      var time = this.getPropsTime();
      this.setTime(time + diff);
    }
  }, {
    key: "setSeconds",
    value: function setSeconds(seconds) {
      this.setState({
        seconds: seconds
      });
      if (this.props.onSecondsChange) {
        this.props.onSecondsChange(seconds);
      }
    }
  }, {
    key: "setTime",
    value: function setTime(time) {
      this.setState({
        time: time
      });
      if (this.props.onTimeChange) {
        this.props.onTimeChange(time);
      }
    }
  }, {
    key: "getPropsTime",
    value: function getPropsTime() {
      return this.props.time || this.state.defaultTime || 0;
    }
  }, {
    key: "getPropsSeconds",
    value: function getPropsSeconds() {
      return this.props.seconds || this.state.defaultSeconds;
    }
  }, {
    key: "getSeconds",
    value: function getSeconds() {
      return this.state.seconds || this.getPropsSeconds();
    }
  }, {
    key: "getTime",
    value: function getTime() {
      return this.state.time || this.getPropsTime();
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.p = (0, _assign.default)({}, this.props);
      var size = props.size;
      if (size == 'auto') {
        this.ignoreRender = false;
        if (!this.state.rendered) {
          this.ignoreRender = true;
        }
        size = props.size = this.state.size;
      }
      var valueSeconds = this.getSeconds();
      var valueTime = this.getTime();
      var width = size;
      var height = size;
      var className = (0, _join.default)(props.className, props.rootClassName, "".concat(props.rootClassName, "--theme-").concat(props.theme));
      var seconds;
      var minutes;
      var hours;
      if (valueSeconds != undefined) {
        seconds = Math.floor(valueSeconds % 60);
        minutes = valueSeconds / 60 % 60;
        hours = valueSeconds / 3600 % 24;
      } else {
        var mom = (0, _toMoment.default)(valueTime);
        seconds = mom.seconds();
        minutes = mom.minutes() + seconds / 60;
        hours = mom.hours() + minutes / 60;
      }
      hours *= 5;
      var defaultStyle = {};
      if (props.color) {
        defaultStyle.borderColor = props.color;
      }
      var style = (0, _assign.default)(defaultStyle, props.style, {
        width: width,
        height: height,
        borderWidth: props.borderWidth
      });
      var divProps = (0, _assign.default)({}, props);
      delete divProps.rootClassName;
      delete divProps.bigTickHeight;
      delete divProps.bigTickOffset;
      delete divProps.bigTickWidth;
      delete divProps.borderColor;
      delete divProps.borderWidth;
      delete divProps.centerOverlaySize;
      delete divProps.centerSize;
      delete divProps.cleanup;
      delete divProps.defaultSeconds;
      delete divProps.defaultTime;
      delete divProps.handHeight;
      delete divProps.handOffset;
      delete divProps.handWidth;
      delete divProps.hourHandDiff;
      delete divProps.isDatePickerClock;
      delete divProps.minuteHandDiff;
      delete divProps.seconds;
      delete divProps.secondHandDiff;
      delete divProps.secondHandWidth;
      delete divProps.showHoursHand;
      delete divProps.showMinutesHand;
      delete divProps.showSecondsHand;
      delete divProps.showSmallTicks;
      delete divProps.smallTickHeight;
      delete divProps.smallTickOffset;
      delete divProps.smallTickWidth;
      delete divProps.theme;
      delete divProps.time;
      delete divProps.tickHeight;
      delete divProps.tickOffset;
      delete divProps.tickWidth;
      delete divProps.updateInterval;
      delete divProps.rootClassName;
      if (typeof props.cleanup == 'function') {
        props.cleanup(divProps);
      }
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, divProps), {}, {
        className: className,
        style: style
      }), this.renderCenter(), this.renderHourHand(hours), this.renderMinuteHand(minutes), this.renderSecondHand(seconds), this.renderCenterOverlay(), MINUTES.map(this.renderTick), this.props.size == 'auto' && _react.default.createElement(_NotifyResize.NotifyResize, {
        notifyOnMount: true,
        onResize: this.onResize
      }));
    }
  }, {
    key: "renderCenter",
    value: function renderCenter() {
      var props = this.props;
      var centerSize = props.centerSize || (props.bigTickHeight || props.tickHeight) * 3;
      return _react.default.createElement("div", {
        className: "".concat(props.rootClassName, "-center"),
        style: {
          width: centerSize,
          height: centerSize
        }
      });
    }
  }, {
    key: "renderCenterOverlay",
    value: function renderCenterOverlay() {
      var props = this.props;
      var centerOverlaySize = props.centerOverlaySize || props.handWidth * 4;
      return _react.default.createElement("div", {
        className: "".concat(props.rootClassName, "-overlay"),
        style: {
          width: centerOverlaySize,
          height: centerOverlaySize,
          borderWidth: props.handWidth
        }
      });
    }
  }, {
    key: "onResize",
    value: function onResize(_ref2) {
      var width = _ref2.width,
        height = _ref2.height;
      if (width != height) {
        console.warn("Clock width != height. Please make sure it's a square.");
      }
      this.setState({
        size: width
      });
    }
  }, {
    key: "renderSecondHand",
    value: function renderSecondHand(value) {
      return this.props.showSecondsHand && this.renderHand('second', value);
    }
  }, {
    key: "renderMinuteHand",
    value: function renderMinuteHand(value) {
      return this.props.showMinutesHand && this.renderHand('minute', value);
    }
  }, {
    key: "renderHourHand",
    value: function renderHourHand(value) {
      return this.props.showHoursHand && this.renderHand('hour', value);
    }
  }, {
    key: "renderHand",
    value: function renderHand(name, value) {
      if (this.ignoreRender) {
        return null;
      }
      var props = this.p;
      var size = props.size,
        borderWidth = props.borderWidth;
      var height = props["".concat(name, "HandHeight")] || props.handHeight || size / 2 - props["".concat(name, "HandDiff")] / 2;
      var width = props["".concat(name, "HandWidth")] || props.handWidth || props.tickWidth;
      var offset = props["".concat(name, "HandOffset")] || props.handOffset;
      if (!offset && offset != 0) {
        offset = 5;
      }
      var style = rotateTickStyle(value, {
        width: width,
        height: height
      }, size - borderWidth, height / 2 - offset);
      style.width = width;
      style.height = height;
      if (props.color) {
        style.background = props.color;
      }
      var className = (0, _join.default)("".concat(props.rootClassName, "-hand"), "".concat(props.rootClassName, "-hand-").concat(name));
      var renderName = "render".concat(toUpperFirst(name), "Hand");
      if (props[renderName]) {
        return props[renderName]({
          key: name,
          className: className,
          style: style
        });
      }
      return _react.default.createElement("div", {
        key: name,
        className: className,
        style: style
      });
    }
  }, {
    key: "renderTick",
    value: function renderTick(tick) {
      if (this.ignoreRender) {
        return null;
      }
      var _this$p = this.p,
        size = _this$p.size,
        borderWidth = _this$p.borderWidth,
        tickWidth = _this$p.tickWidth,
        smallTickWidth = _this$p.smallTickWidth,
        bigTickWidth = _this$p.bigTickWidth,
        tickHeight = _this$p.tickHeight,
        smallTickHeight = _this$p.smallTickHeight,
        bigTickHeight = _this$p.bigTickHeight,
        tickOffset = _this$p.tickOffset,
        smallTickOffset = _this$p.smallTickOffset,
        bigTickOffset = _this$p.bigTickOffset,
        rootClassName = _this$p.rootClassName;
      var small = !!(tick % 5);
      var sizeName = small ? 'small' : 'big';
      if (small && !this.props.showSmallTicks) {
        return false;
      }
      var className = (0, _join.default)("".concat(rootClassName, "-tick"), "".concat(rootClassName, "-tick--").concat(sizeName));
      var offset = small ? smallTickOffset || tickOffset : bigTickOffset || tickOffset;
      var tWidth = small ? smallTickWidth || tickWidth : bigTickWidth || tickWidth;
      var tHeight = small ? smallTickHeight || tickHeight : bigTickHeight || tickHeight;
      var totalSize = size - borderWidth;
      var style = rotateTickStyle(tick, {
        width: tWidth,
        height: tHeight
      }, totalSize, totalSize / 2 - (tHeight / 2 + offset));
      style.height = tHeight;
      style.width = tWidth;
      if (this.props.color) {
        style.background = this.props.color;
      }
      if (this.props.renderTick) {
        return this.props.renderTick({
          tick: tick,
          className: className,
          style: style
        });
      }
      return _react.default.createElement("div", {
        key: tick,
        className: className,
        style: style
      });
    }
  }]);
  return Clock;
}(_reactClass.default);
exports.default = Clock;
Clock.defaultProps = {
  rootClassName: 'inovua-react-toolkit-calendar__clock',
  centerSize: null,
  centerOverlaySize: null,
  size: 120,
  updateInterval: 1000,
  theme: 'default',
  showSecondsHand: true,
  showHoursHand: true,
  showMinutesHand: true,
  handWidth: 2,
  secondHandWidth: 1,
  handOffset: 10,
  hourHandDiff: 35,
  minuteHandDiff: 25,
  secondHandDiff: 10,
  tickWidth: 1,
  bigTickWidth: 2,
  tickOffset: 2,
  smallTickHeight: 6,
  bigTickHeight: 10,
  color: '',
  borderWidth: 0,
  showSmallTicks: true,
  isDatePickerClock: true
};
Clock.propTypes = (_Clock$propTypes = {
  rootClassName: _propTypes.default.string,
  centerSize: _propTypes.default.number,
  centerOverlaySize: _propTypes.default.number,
  defaultSeconds: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  seconds: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  defaultTime: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  time: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  size: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  theme: _propTypes.default.string,
  showSecondsHand: _propTypes.default.bool,
  showHoursHand: _propTypes.default.bool,
  showMinutesHand: _propTypes.default.bool,
  run: _propTypes.default.bool,
  updateInterval: _propTypes.default.number,
  handWidth: _propTypes.default.number,
  secondHandWidth: _propTypes.default.number,
  handOffset: _propTypes.default.number,
  bigTickOffset: _propTypes.default.number,
  hourHandDiff: _propTypes.default.number,
  minuteHandDiff: _propTypes.default.number,
  secondHandDiff: _propTypes.default.number,
  borderColor: _propTypes.default.string,
  handHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  tickWidth: _propTypes.default.number,
  bigTickWidth: _propTypes.default.number,
  smallTickWidth: _propTypes.default.number,
  tickOffset: _propTypes.default.number,
  smallTickOffset: _propTypes.default.number,
  smallTickHeight: _propTypes.default.number,
  bigTickHeight: _propTypes.default.number,
  tickHeight: _propTypes.default.number,
  color: _propTypes.default.string,
  borderWidth: _propTypes.default.number,
  showSmallTicks: _propTypes.default.bool,
  isDatePickerClock: _propTypes.default.bool,
  renderTick: _propTypes.default.func,
  onSecondsChange: _propTypes.default.func,
  onTimeChange: _propTypes.default.func
}, (0, _defineProperty2.default)(_Clock$propTypes, "onTimeChange", _propTypes.default.func), (0, _defineProperty2.default)(_Clock$propTypes, "cleanup", _propTypes.default.func), _Clock$propTypes);