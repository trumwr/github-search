/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="react" />
import Component from '../../react-class';
import moment from 'moment';
import ON_KEY_DOWN from './MonthView/onKeyDown';
declare const isDateInMinMax: (timestamp: any, props: any) => boolean;
declare const isValidActiveDate: (timestamp: any, props: any) => boolean;
declare const select: ({ dateMoment, timestamp }: {
    dateMoment: any;
    timestamp: any;
}, event: any) => any;
declare const confirm: (date: any, event: any) => any;
declare const onActiveDateChange: ({ dateMoment, timestamp }: {
    dateMoment: any;
    timestamp: any;
}) => void;
declare const onViewDateChange: ({ dateMoment, timestamp }: {
    dateMoment: any;
    timestamp: any;
}) => void;
declare const onChange: ({ dateMoment, timestamp }: {
    dateMoment: any;
    timestamp: any;
}, event: any) => void;
declare const navigate: (direction: any, event: any) => any;
declare const gotoViewDate: ({ dateMoment, timestamp }: {
    dateMoment: any;
    timestamp: any;
}) => void;
declare const prepareDate: (props: any, state: any) => any;
declare const prepareViewDate: (props: any, state: any) => any;
declare const prepareActiveDate: (props: any, state: any) => any;
declare const prepareMinMax: (props: any) => {};
declare const prepareDateProps: (props: any, state: any) => {};
declare const getInitialState: (props: any) => {
    date: any;
    activeDate: any;
    viewDate: any;
};
export default class DecadeView extends Component {
    constructor(props: any);
    getYearsInDecade(value: any): moment.Moment[];
    toMoment(date: any, format: any): moment.Moment;
    render(): JSX.Element;
    renderNav(dir: any): any;
    renderYears(props: any, years: any): JSX.Element[];
    renderYear(dateMoment: any): JSX.Element;
    format(mom: any, format: any): any;
    handleClick({ timestamp, dateMoment }: {
        timestamp: any;
        dateMoment: any;
    }, event: any): void;
    onKeyDown(event: any): void;
    confirm(date: any, event: any): any;
    navigate(direction: any, event: any): any;
    select({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }, event: any): any;
    onViewDateChange({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }): void;
    gotoViewDate({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }): void;
    onActiveDateChange({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }): void;
    onChange({ dateMoment, timestamp }: {
        dateMoment: any;
        timestamp: any;
    }, event: any): void;
    getDOMNode(): any;
    focus(): void;
}
export { onChange, onViewDateChange, onActiveDateChange, select, confirm, gotoViewDate, navigate, ON_KEY_DOWN as onKeyDown, prepareActiveDate, prepareViewDate, prepareMinMax, prepareDateProps, prepareDate, isDateInMinMax, isValidActiveDate, getInitialState, };
