/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderNavBar = exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../react-class"));
var _Flex = require("../../Flex");
var _InlineBlock = _interopRequireDefault(require("./InlineBlock"));
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _clampRange = _interopRequireDefault(require("./clampRange"));
var _NavBar = _interopRequireDefault(require("./NavBar"));
var _toMoment = _interopRequireDefault(require("./toMoment"));
var _isInRange2 = _interopRequireDefault(require("./utils/isInRange"));
var _BasicMonthView = require("./BasicMonthView");
var _MonthView = _interopRequireWildcard(require("./MonthView"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var times = function times(count) {
  return (0, _toConsumableArray2.default)(new Array(count)).map(function (v, i) {
    return i;
  });
};
var prepareDate = function prepareDate(props, state) {
  if (props.range) {
    return null;
  }
  return props.date === undefined ? state.date : props.date;
};
var prepareViewDate = function prepareViewDate(props, state) {
  return props.viewDate === undefined ? state.viewDate : state.propViewDate || props.viewDate;
};
var prepareRange = function prepareRange(props, state) {
  return props.range && props.range.length ? props.range : state.range;
};
var prepareActiveDate = function prepareActiveDate(props, state) {
  var fallbackDate = prepareDate(props, state) || (prepareRange(props, state) || [])[0];
  var activeDate = props.activeDate === undefined ? state.activeDate || fallbackDate : props.activeDate;
  if (activeDate && props.inViewStart && props.inViewEnd && props.constrainActiveInView) {
    var activeMoment = this.toMoment(activeDate);
    if (!(0, _isInRange2.default)(activeMoment, [props.inViewStart, props.inViewEnd])) {
      var date = fallbackDate;
      var dateMoment = this.toMoment(date);
      if (date && (0, _isInRange2.default)(dateMoment, [props.inViewStart, props.inViewEnd])) {
        return date;
      }
      return null;
    }
  }
  return activeDate;
};
var prepareViews = function prepareViews(props) {
  var daysInView = [];
  var viewMoments = [];
  var viewMoment = props.viewMoment;
  var index = 0;
  var size = props.size;
  while (index < size) {
    var mom = this.toMoment(viewMoment).startOf('day').add(index, 'month');
    var days = (0, _BasicMonthView.getDaysInMonthView)(mom, props);
    viewMoments.push(mom);
    daysInView.push(days);
    index++;
  }
  props.daysInView = daysInView;
  props.viewMoments = viewMoments;
  var lastViewDays = daysInView[size - 1];
  props.inViewStart = daysInView[0][0];
  props.inViewEnd = lastViewDays[lastViewDays.length - 1];
};
var _renderNavBar = function renderNavBar(config, navBarProps) {
  var props = this.props;
  var index = config.index,
    viewMoment = config.viewMoment;
  navBarProps = (0, _assign.default)({}, navBarProps, {
    secondary: true,
    minDate: config.minDate || props.minDate,
    maxDate: config.maxDate || props.maxDate,
    renderNavNext: config.renderHiddenNav || this.renderHiddenNav,
    renderNavPrev: config.renderHiddenNav || this.renderHiddenNav,
    viewMoment: viewMoment,
    size: props.size,
    onViewDateChange: config.onViewDateChange || this.onNavViewDateChange,
    onUpdate: config.onUpdate || this.updateViewMoment,
    enableMonthDecadeView: props.enableMonthDecadeView
  });
  if (index == 0) {
    delete navBarProps.renderNavPrev;
  }
  if (index == props.perRow - 1) {
    delete navBarProps.renderNavNext;
  }
  var marginStyle;
  if (index % 2 == 0) {
    marginStyle = {
      marginRight: 1
    };
  } else {
    marginStyle = null;
  }
  return _react.default.createElement(_NavBar.default, _objectSpread({
    key: "multi_month_nav_bar",
    style: marginStyle
  }, navBarProps));
};
exports.renderNavBar = _renderNavBar;
var MultiMonthView = function (_Component) {
  (0, _inherits2.default)(MultiMonthView, _Component);
  var _super = _createSuper(MultiMonthView);
  function MultiMonthView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, MultiMonthView);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidMount", function () {
      _this.updateToMoment(_this.props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps) {
      if (prevProps.locale !== _this.props.locale || prevProps.dateFormat !== _this.props.dateFormat) {
        _this.updateToMoment(_this.props);
      }
    });
    _this.state = {
      hoverRange: null,
      range: props.defaultRange,
      date: props.defaultDate,
      activeDate: props.defaultActiveDate,
      viewDate: props.defaultViewDate
    };
    return _this;
  }
  (0, _createClass2.default)(MultiMonthView, [{
    key: "updateToMoment",
    value: function updateToMoment(props) {
      this.toMoment = function (value, dateFormat) {
        return (0, _toMoment.default)(value, {
          locale: props.locale,
          dateFormat: dateFormat || props.dateFormat
        });
      };
    }
  }, {
    key: "prepareProps",
    value: function prepareProps(thisProps, state) {
      var _this2 = this;
      var props = (0, _assign.default)({}, thisProps);
      state = state || this.state;
      props.viewMoment = this.toMoment(prepareViewDate(props, state));
      props.viewStart = this.toMoment(props.viewMoment).startOf('month');
      props.viewEnd = this.toMoment(props.viewStart).add(props.size - 1, 'month').endOf('month');
      prepareViews.call(this, props);
      var activeDate = prepareActiveDate.call(this, props, state);
      if (activeDate) {
        props.activeDate = +this.toMoment(activeDate);
      }
      props.date = prepareDate(props, state);
      if (!props.date) {
        var range = prepareRange(props, state);
        if (range) {
          props.range = range.map(function (d) {
            return _this2.toMoment(d).startOf('day');
          });
          props.rangeStart = state.rangeStart || (props.range.length == 1 ? props.range[0] : null);
        }
      }
      return props;
    }
  }, {
    key: "render",
    value: function render() {
      this.views = [];
      var props = this.p = this.prepareProps(this.props, this.state);
      var size = props.size;
      var rowCount = Math.ceil(size / props.perRow);
      var children = times(rowCount).map(this.renderRow).filter(function (x) {
        return !!x;
      });
      var rootClassName = props.rootClassName;
      var className = (0, _join.default)(props.className, rootClassName, props.theme && "".concat(rootClassName, "--theme-").concat(props.theme));
      var footer = (0, _MonthView.renderFooter)(props, this);
      if (footer) {
        children.push(footer);
      }
      var flexProps = (0, _assign.default)({}, props);
      delete flexProps.activeDate;
      delete flexProps.clockTabIndex;
      delete flexProps.constrainActiveInView;
      delete flexProps.constrainViewDate;
      delete flexProps.date;
      delete flexProps.dateFormat;
      delete flexProps.daysInView;
      delete flexProps.defaultRange;
      delete flexProps.enableMonthDecadeView;
      delete flexProps.footer;
      delete flexProps.footerClearDate;
      delete flexProps.forceViewUpdate;
      delete flexProps.highlightRangeOnMouseMove;
      delete flexProps.inViewEnd;
      delete flexProps.inViewStart;
      delete flexProps.isDatePicker;
      delete flexProps.locale;
      delete flexProps.navigation;
      delete flexProps.onViewDateChange;
      delete flexProps.perRow;
      delete flexProps.range;
      delete flexProps.rangeStart;
      delete flexProps.renderNavBar;
      delete flexProps.theme;
      delete flexProps.viewDate;
      delete flexProps.viewEnd;
      delete flexProps.viewMoment;
      delete flexProps.viewMoments;
      delete flexProps.viewStart;
      delete flexProps.rootClassName;
      delete flexProps.enableMonthDecadeViewAnimation;
      delete flexProps.showMonthDecadeViewAnimation;
      delete flexProps.okButton;
      return _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({
        key: "multi_month_view",
        column: true,
        inline: true,
        alignItems: "stretch",
        wrap: false
      }, flexProps), {}, {
        className: className
      }), children);
    }
  }, {
    key: "renderRow",
    value: function renderRow(rowIndex) {
      var _this3 = this;
      var props = this.p;
      var viewProps = (0, _assign.default)({}, this.p);
      delete viewProps.rootClassName;
      delete viewProps.forceViewUpdate;
      delete viewProps.index;
      delete viewProps.inViewEnd;
      delete viewProps.inViewStart;
      delete viewProps.navigate;
      delete viewProps.perRow;
      delete viewProps.viewEnd;
      delete viewProps.viewMoments;
      delete viewProps.viewStart;
      var children = times(props.perRow).map(function (i) {
        var index = rowIndex * props.perRow + i;
        var keys = "row_".concat(index * i);
        if (index >= props.size) {
          return null;
        }
        return _this3.renderView(viewProps, index, props.size, keys);
      });
      return _react.default.createElement(_Flex.Flex, {
        key: "row_index_".concat(rowIndex),
        inline: true,
        row: true,
        wrap: false,
        children: children
      });
    }
  }, {
    key: "renderView",
    value: function renderView(viewProps, index, size, keys) {
      var _this4 = this;
      var props = this.p;
      var viewMoment = props.viewMoments[index];
      var range;
      if (props.range) {
        range = props.rangeStart && props.range.length == 0 ? [props.rangeStart] : props.range;
      }
      var navBarKeys = keys * 8;
      return _react.default.createElement(_MonthView.default, _objectSpread(_objectSpread({
        ref: function ref(view) {
          _this4.views[index] = view;
        },
        constrainViewDate: false
      }, viewProps), {}, {
        className: null,
        index: index,
        key: keys,
        footer: false,
        constrainActiveInView: false,
        navigate: this.onMonthNavigate.bind(this, index),
        hoverRange: this.state.hoverRange,
        onHoverRangeChange: this.setHoverRange,
        activeDate: props.activeDate,
        onActiveDateChange: this.onActiveDateChange,
        onViewDateChange: this.onAdjustViewDateChange,
        date: props.date,
        defaultDate: null,
        onChange: this.onChange,
        range: range,
        defaultRange: null,
        onRangeChange: this.onRangeChange,
        viewMoment: viewMoment,
        insideMultiView: true,
        daysInView: props.daysInView[index],
        showDaysBeforeMonth: index == 0,
        showDaysAfterMonth: index == size - 1,
        select: this.select,
        renderNavBar: this.props.navigation && (this.props.renderNavBar || this.renderNavBar).bind(this, {
          index: index,
          viewMoment: viewMoment,
          navBarKeys: navBarKeys
        })
      }));
    }
  }, {
    key: "onFooterTodayClick",
    value: function onFooterTodayClick() {
      this.views[0].onFooterTodayClick();
    }
  }, {
    key: "onFooterClearClick",
    value: function onFooterClearClick() {
      this.views[0].onFooterClearClick();
    }
  }, {
    key: "onFooterOkClick",
    value: function onFooterOkClick() {
      this.views[0].onFooterOkClick();
    }
  }, {
    key: "onFooterCancelClick",
    value: function onFooterCancelClick() {
      this.views[0].onFooterCancelClick();
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      var firstView = this.views[0];
      if (firstView) {
        return firstView.isFocused();
      }
      return false;
    }
  }, {
    key: "focus",
    value: function focus() {
      var firstView = this.views[0];
      if (firstView) {
        firstView.focus();
      }
    }
  }, {
    key: "setHoverRange",
    value: function setHoverRange(hoverRange) {
      this.setState({
        hoverRange: hoverRange
      });
    }
  }, {
    key: "select",
    value: function select(_ref, event) {
      var dateMoment = _ref.dateMoment,
        timestamp = _ref.timestamp;
      var props = this.p;
      var visibleRange = [props.inViewStart, props.inViewEnd];
      this.onAdjustViewDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
      this.onActiveDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
      var range = props.range;
      if (range) {
        this.selectRange({
          dateMoment: dateMoment,
          timestamp: timestamp
        });
      } else {
        this.onChange({
          dateMoment: dateMoment,
          timestamp: timestamp
        }, event);
      }
    }
  }, {
    key: "selectRange",
    value: function selectRange(_ref2) {
      var dateMoment = _ref2.dateMoment,
        timestamp = _ref2.timestamp;
      return _MonthView.default.prototype.selectRange.call(this, {
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onRangeChange",
    value: function onRangeChange(range) {
      return _MonthView.default.prototype.onRangeChange.call(this, range);
    }
  }, {
    key: "onViewKeyDown",
    value: function onViewKeyDown() {
      var view = this.views[0];
      if (view) {
        view.onViewKeyDown.apply(view, arguments);
      }
    }
  }, {
    key: "renderNavBar",
    value: function renderNavBar(config, navBarProps) {
      return _renderNavBar.call(this, config, navBarProps);
    }
  }, {
    key: "onMonthNavigate",
    value: function onMonthNavigate(index, dir, event, getNavigationDate) {
      var props = this.p;
      event.preventDefault();
      if (!props.activeDate) {
        return;
      }
      var key = event.key;
      var homeEndDate = key == 'Home' ? props.viewStart : props.viewEnd;
      var mom = key == 'Home' || key == 'End' ? homeEndDate : props.activeDate;
      var nextMoment = getNavigationDate(dir, this.toMoment(mom));
      var viewMoment = this.toMoment(nextMoment);
      this.onActiveDateChange({
        dateMoment: nextMoment,
        timestamp: +nextMoment
      });
      if (this.isInRange(viewMoment)) {
        return;
      }
      if (viewMoment.isAfter(props.viewEnd)) {
        viewMoment.add(-props.size + 1, 'month');
      }
      this.onViewDateChange({
        dateMoment: viewMoment,
        timestamp: +viewMoment
      });
    }
  }, {
    key: "onAdjustViewDateChange",
    value: function onAdjustViewDateChange(_ref3) {
      var dateMoment = _ref3.dateMoment,
        timestamp = _ref3.timestamp;
      var props = this.p;
      var update = dateMoment == null;
      if (dateMoment && dateMoment.isAfter(props.viewEnd)) {
        dateMoment = this.toMoment(dateMoment).add(-props.size + 1, 'month');
        timestamp = +dateMoment;
        update = true;
      } else if (dateMoment && dateMoment.isBefore(props.viewStart)) {
        update = true;
      }
      if (update) {
        this.onViewDateChange({
          dateMoment: dateMoment,
          timestamp: timestamp
        });
      }
    }
  }, {
    key: "updateViewMoment",
    value: function updateViewMoment(dateMoment, dir) {
      var sign = dir < 0 ? -1 : 1;
      var abs = Math.abs(dir);
      var newMoment = this.toMoment(this.p.viewStart);
      newMoment.add(sign, abs == 1 ? 'month' : 'year');
      return newMoment;
    }
  }, {
    key: "renderHiddenNav",
    value: function renderHiddenNav(props) {
      return _react.default.createElement(_InlineBlock.default, _objectSpread(_objectSpread({}, props), {}, {
        style: {
          visibility: 'hidden'
        }
      }));
    }
  }, {
    key: "isInRange",
    value: function isInRange(moment) {
      return (0, _isInRange2.default)(moment, [this.p.viewStart, this.p.viewEnd]);
    }
  }, {
    key: "isInView",
    value: function isInView(moment) {
      return this.isInRange(moment);
    }
  }, {
    key: "onNavViewDateChange",
    value: function onNavViewDateChange(dateString, _ref4) {
      var dateMoment = _ref4.dateMoment,
        timestamp = _ref4.timestamp;
      this.onViewDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onViewDateChange",
    value: function onViewDateChange(_ref5) {
      var dateMoment = _ref5.dateMoment,
        timestamp = _ref5.timestamp;
      if (this.props.viewDate === undefined) {
        this.setState({
          viewDate: timestamp
        });
      }
      if (this.props.onViewDateChange) {
        var dateString = this.format(dateMoment);
        this.props.onViewDateChange(dateString, {
          dateMoment: dateMoment,
          dateString: dateString,
          timestamp: timestamp
        });
      }
    }
  }, {
    key: "onActiveDateChange",
    value: function onActiveDateChange(_ref6) {
      var dateMoment = _ref6.dateMoment,
        timestamp = _ref6.timestamp;
      var valid = this.views.reduce(function (isValid, view) {
        return isValid && view.isValidActiveDate(timestamp);
      }, true);
      if (!valid) {
        return;
      }
      var props = this.p;
      var range = props.range;
      if (range && props.rangeStart) {
        this.setState({
          rangeStart: props.rangeStart,
          range: (0, _clampRange.default)([props.rangeStart, dateMoment])
        });
      }
      if (this.props.activeDate === undefined) {
        this.setState({
          activeDate: timestamp
        });
      }
      if (this.props.onActiveDateChange) {
        var dateString = this.format(dateMoment);
        this.props.onActiveDateChange(dateString, {
          dateMoment: dateMoment,
          dateString: dateString,
          timestamp: timestamp
        });
      }
    }
  }, {
    key: "gotoViewDate",
    value: function gotoViewDate(_ref7) {
      var dateMoment = _ref7.dateMoment,
        timestamp = _ref7.timestamp;
      if (!timestamp) {
        timestamp = +dateMoment;
      }
      this.onViewDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
      this.onActiveDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "format",
    value: function format(mom) {
      return mom == null ? '' : mom.format(this.props.dateFormat);
    }
  }, {
    key: "onChange",
    value: function onChange(_ref8, event) {
      var dateMoment = _ref8.dateMoment,
        timestamp = _ref8.timestamp;
      if (this.props.date === undefined) {
        this.setState({
          date: timestamp
        });
      }
      if (this.props.onChange) {
        var dateString = this.format(dateMoment);
        this.props.onChange(dateString, {
          dateMoment: dateMoment,
          dateString: dateString,
          timestamp: timestamp
        }, event);
      }
    }
  }, {
    key: "getViewSize",
    value: function getViewSize() {
      return this.props.size;
    }
  }]);
  return MultiMonthView;
}(_reactClass.default);
exports.default = MultiMonthView;
MultiMonthView.defaultProps = {
  rootClassName: 'inovua-react-toolkit-calendar__multi-month-view',
  perRow: 2,
  size: 2,
  enableMonthDecadeView: true,
  enableMonthDecadeViewAnimation: true,
  showMonthDecadeViewAnimation: 300,
  footerClearDate: null,
  okButton: true,
  isDatePicker: true,
  forceViewUpdate: false,
  navigation: true,
  theme: 'default',
  constrainActiveInView: true,
  dateFormat: 'YYYY-MM-DD'
};
MultiMonthView.propTypes = {
  rootClassName: _propTypes.default.string,
  theme: _propTypes.default.string,
  dateFormat: _propTypes.default.string,
  locale: _propTypes.default.string,
  perRow: _propTypes.default.number,
  size: _propTypes.default.number,
  daysInView: _propTypes.default.number,
  clockTabIndex: _propTypes.default.number,
  enableMonthDecadeView: _propTypes.default.bool,
  footerClearDate: _propTypes.default.bool,
  isDatePicker: _propTypes.default.bool,
  forceViewUpdate: _propTypes.default.bool,
  navigation: _propTypes.default.bool,
  constrainActiveInView: _propTypes.default.bool,
  constrainViewDate: _propTypes.default.bool,
  inViewStart: _propTypes.default.bool,
  inViewEnd: _propTypes.default.bool,
  footer: _propTypes.default.bool,
  highlightRangeOnMouseMove: _propTypes.default.bool,
  enableMonthDecadeViewAnimation: _propTypes.default.bool,
  viewStart: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  viewEnd: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  date: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  defaultDate: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  minDate: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  maxDate: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  viewDate: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  viewMoment: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  viewMoments: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number])),
  defaultViewDate: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  activeDate: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  defaultActiveDate: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  range: _propTypes.default.array,
  defaultRange: _propTypes.default.array
};