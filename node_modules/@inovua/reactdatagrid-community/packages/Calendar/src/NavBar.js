/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = _interopRequireDefault(require("../../react-class"));
var _Flex = require("../../Flex");
var _InlineBlock = _interopRequireDefault(require("./InlineBlock"));
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _assignDefined = _interopRequireDefault(require("./assignDefined"));
var _toMoment2 = _interopRequireDefault(require("./toMoment"));
var _MonthDecadeView = _interopRequireDefault(require("./MonthDecadeView"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ARROWS = {
  prev: _react.default.createElement("svg", {
    width: "6",
    height: "10",
    viewBox: "0 0 6 10"
  }, _react.default.createElement("path", {
    fillRule: "evenodd",
    d: "M2.197 5l2.865-2.866c.311-.31.311-.814 0-1.125-.31-.31-.814-.31-1.125 0L.477 4.47c-.293.294-.293.769 0 1.061l3.46 3.46c.311.311.815.311 1.125 0 .311-.31.311-.814 0-1.124L2.197 5z"
  })),
  next: _react.default.createElement("svg", {
    width: "6",
    height: "10",
    viewBox: "0 0 6 10"
  }, _react.default.createElement("path", {
    fillRule: "evenodd",
    d: "M3.803 5L.938 7.866c-.311.31-.311.814 0 1.125.31.31.814.31 1.125 0l3.46-3.46c.293-.294.293-.769 0-1.061l-3.46-3.46c-.311-.311-.815-.311-1.126 0-.31.31-.31.814 0 1.124L3.803 5z"
  })),
  right: _react.default.createElement("svg", {
    width: "12",
    height: "10",
    viewBox: "0 0 12 10"
  }, _react.default.createElement("g", {
    fillRule: "evenodd"
  }, _react.default.createElement("path", {
    d: "M3.803 4.5L.938 7.366c-.311.31-.311.814 0 1.125.31.31.814.31 1.125 0l3.46-3.46c.293-.294.293-.769 0-1.061L2.063.51C1.751.198 1.247.198.936.51c-.31.31-.31.814 0 1.124L3.803 4.5zM9.803 4.5L6.937 7.366c-.31.31-.31.814 0 1.125.311.31.815.31 1.125 0l3.461-3.46c.293-.294.293-.769 0-1.061L8.063.51c-.311-.311-.815-.311-1.126 0-.31.31-.31.814 0 1.124L9.803 4.5z",
    transform: "translate(0 .5)"
  }))),
  left: _react.default.createElement("svg", {
    width: "12",
    height: "10",
    viewBox: "0 0 12 10"
  }, _react.default.createElement("g", {
    fillRule: "evenodd"
  }, _react.default.createElement("path", {
    d: "M3.803 4.5L.938 7.366c-.311.31-.311.814 0 1.125.31.31.814.31 1.125 0l3.46-3.46c.293-.294.293-.769 0-1.061L2.063.51C1.751.198 1.247.198.936.51c-.31.31-.31.814 0 1.124L3.803 4.5zM9.803 4.5L6.937 7.366c-.31.31-.31.814 0 1.125.311.31.815.31 1.125 0l3.461-3.46c.293-.294.293-.769 0-1.061L8.063.51c-.311-.311-.815-.311-1.126 0-.31.31-.31.814 0 1.124L9.803 4.5z",
    transform: "rotate(180 6 4.75)"
  })))
};
var NavBar = function (_Component) {
  (0, _inherits2.default)(NavBar, _Component);
  var _super = _createSuper(NavBar);
  function NavBar(props) {
    var _this;
    (0, _classCallCheck2.default)(this, NavBar);
    _this = _super.call(this, props);
    _this.state = {
      viewDate: props.defaultViewDate
    };
    return _this;
  }
  (0, _createClass2.default)(NavBar, [{
    key: "prepareViewDate",
    value: function prepareViewDate(props) {
      return props.viewDate === undefined ? this.state.viewDate : props.viewDate;
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.p = (0, _assign.default)({}, this.props);
      var rootClassName = props.rootClassName,
        index = props.index;
      var viewMoment = props.viewMoment = props.viewMoment || this.toMoment(this.prepareViewDate(props));
      props.monthDecadeViewEnabled = props.expandedMonthDecadeView || props.enableMonthDecadeView;
      var secondary = props.secondary;
      var className = (0, _join.default)(props.className, rootClassName, "".concat(rootClassName, "--theme-").concat(props.theme), "".concat(rootClassName, "--with-month-decade-view"));
      var monthDecadeView = props.monthDecadeViewEnabled ? this.renderMonthDecadeView() : null;
      var flexProps = (0, _assign.default)({}, props);
      delete flexProps.rootClassName;
      delete flexProps.arrows;
      delete flexProps.doubleArrows;
      delete flexProps.date;
      delete flexProps.enableMonthDecadeView;
      delete flexProps.monthDecadeViewEnabled;
      delete flexProps.isDatePickerNavBar;
      delete flexProps.minDate;
      delete flexProps.maxDate;
      delete flexProps.mainNavBar;
      delete flexProps.multiView;
      delete flexProps.navDateFormat;
      delete flexProps.onNavClick;
      delete flexProps.onUpdate;
      delete flexProps.onViewDateChange;
      delete flexProps.renderNavNext;
      delete flexProps.renderNavPrev;
      delete flexProps.secondary;
      delete flexProps.theme;
      delete flexProps.viewDate;
      delete flexProps.viewMoment;
      delete flexProps.showClock;
      delete flexProps.enableMonthDecadeViewAnimation;
      delete flexProps.showMonthDecadeViewAnimation;
      delete flexProps.cancelButtonText;
      delete flexProps.clearButtonText;
      delete flexProps.okButtonText;
      if (typeof props.cleanup == 'function') {
        props.cleanup(flexProps);
      }
      return _react.default.createElement(_Flex.Flex, _objectSpread(_objectSpread({
        key: "navBar",
        inline: true,
        row: true
      }, flexProps), {}, {
        className: className
      }), secondary && this.renderNav(-2, viewMoment, 'left'), this.renderNav(-1, viewMoment, 'prev'), _react.default.createElement(_Flex.Item, {
        key: "month_year",
        className: (0, _join.default)("".concat(rootClassName, "-date"), props.monthDecadeViewEnabled ? '' : "".concat(rootClassName, "-date-disabled")),
        style: {
          textAlign: 'center'
        },
        onMouseDown: props.monthDecadeViewEnabled ? this.toggleMonthDecadeView : null
      }, this.renderNavDate(viewMoment)), this.renderNav(1, viewMoment, 'next'), secondary && this.renderNav(2, viewMoment, 'right'), monthDecadeView);
    }
  }, {
    key: "renderMonthDecadeView",
    value: function renderMonthDecadeView() {
      var _this2 = this;
      if (!this.state.monthDecadeView) {
        return null;
      }
      var _this$p = this.p,
        viewMoment = _this$p.viewMoment,
        theme = _this$p.theme,
        locale = _this$p.locale,
        minDate = _this$p.minDate,
        maxDate = _this$p.maxDate,
        rootClassName = _this$p.rootClassName,
        size = _this$p.size,
        okButtonText = _this$p.okButtonText,
        cancelButtonText = _this$p.cancelButtonText,
        showClock = _this$p.showClock,
        enableMonthDecadeViewAnimation = _this$p.enableMonthDecadeViewAnimation,
        showMonthDecadeViewAnimation = _this$p.showMonthDecadeViewAnimation;
      var className = (0, _join.default)("".concat(rootClassName, "-month-decade-view"), (size <= 1 || size === undefined) && "".concat(rootClassName, "-month-decade-view-month"), showClock && "".concat(rootClassName, "-month-decade-view-calendar"));
      var modalClassName = (0, _join.default)("".concat(rootClassName, "-month-decade-view-modal"), enableMonthDecadeViewAnimation && "".concat(rootClassName, "-month-decade-view-show-animation"));
      var modalWrapperClassName = size || size === undefined ? modalClassName : null;
      var monthDecadeViewProps = (0, _assignDefined.default)({
        defaultViewDate: viewMoment,
        defaultDate: viewMoment,
        ref: function ref(view) {
          _this2.monthDecadeView = view;
        },
        focusDecadeView: false,
        className: className,
        theme: theme,
        okButtonText: okButtonText,
        cancelButtonText: cancelButtonText,
        onOkClick: this.onMonthDecadeViewOk,
        onCancelClick: this.onMonthDecadeViewCancel
      }, {
        minDate: minDate,
        maxDate: maxDate,
        locale: locale
      });
      if (this.props.renderMonthDecadeView) {
        return this.props.renderMonthDecadeView(monthDecadeViewProps);
      }
      return _react.default.createElement("div", {
        style: {
          animationDuration: "".concat(showMonthDecadeViewAnimation, "ms")
        },
        className: modalWrapperClassName
      }, _react.default.createElement(_MonthDecadeView.default, _objectSpread({}, monthDecadeViewProps)));
    }
  }, {
    key: "toggleMonthDecadeView",
    value: function toggleMonthDecadeView(event) {
      if (this.isMonthDecadeViewVisible()) {
        this.hideMonthDecadeView(event);
      } else {
        this.showMonthDecadeView(event);
      }
    }
  }, {
    key: "getMonthDecadeViewView",
    value: function getMonthDecadeViewView() {
      return this.monthDecadeView;
    }
  }, {
    key: "isMonthDecadeViewVisible",
    value: function isMonthDecadeViewVisible() {
      return !!this.monthDecadeView;
    }
  }, {
    key: "onMonthDecadeViewOk",
    value: function onMonthDecadeViewOk(dateString, _ref) {
      var dateMoment = _ref.dateMoment,
        timestamp = _ref.timestamp;
      this.hideMonthDecadeView();
      this.onViewDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "onMonthDecadeViewCancel",
    value: function onMonthDecadeViewCancel() {
      this.hideMonthDecadeView();
    }
  }, {
    key: "showMonthDecadeView",
    value: function showMonthDecadeView(event) {
      event.preventDefault();
      this.setState({
        monthDecadeView: true
      });
      if (this.props.onShowMonthDecadeView) {
        this.props.onShowMonthDecadeView();
      }
    }
  }, {
    key: "hideMonthDecadeView",
    value: function hideMonthDecadeView(event) {
      if (event && event.preventDefault) {
        event.preventDefault();
      }
      this.setState({
        monthDecadeView: false
      });
      if (this.props.onHideMonthDecadeView) {
        this.props.onHideMonthDecadeView();
      }
    }
  }, {
    key: "toMoment",
    value: function toMoment(value, props) {
      props = props || this.props;
      return (0, _toMoment2.default)(value, {
        locale: props.locale,
        dateFormat: props.dateFormat
      });
    }
  }, {
    key: "renderNav",
    value: function renderNav(dir, viewMoment, name) {
      var props = this.p;
      var disabled = dir < 0 ? props.prevDisabled : props.nextDisabled;
      var secondary = Math.abs(dir) == 2;
      if (dir < 0 && props.minDate) {
        var gotoMoment = this.getGotoMoment(dir, viewMoment).endOf('month');
        if (gotoMoment.isBefore(this.toMoment(props.minDate))) {
          disabled = true;
        }
      }
      if (dir > 0 && props.maxDate) {
        var _gotoMoment = this.getGotoMoment(dir, viewMoment).startOf('month');
        if (_gotoMoment.isAfter(this.toMoment(props.maxDate))) {
          disabled = true;
        }
      }
      if (this.state.monthDecadeView) {
        disabled = true;
      }
      var rootClassName = props.rootClassName;
      var className = (0, _join.default)("".concat(rootClassName, "-arrow"), "".concat(rootClassName, "-arrow--").concat(name), secondary && "".concat(rootClassName, "-secondary-arrow"), disabled && "".concat(rootClassName, "-arrow--disabled"));
      var arrowClass = "".concat(rootClassName, "-arrows-pos");
      var arrowDivClass = "".concat(rootClassName, "-arrows-div");
      var arrow = props.arrows[dir] || props.arrows[name] || ARROWS[name];
      var children;
      var dirArrow = props.arrows[dir];
      if (dirArrow) {
        children = dirArrow;
      } else {
        var doubleArrows = dir < -1 ? arrow : dir > 1 ? arrow : null;
        children = dir < 0 ? _react.default.createElement("div", {
          className: arrowDivClass
        }, secondary ? _react.default.createElement("div", {
          className: arrowClass
        }, doubleArrows) : _react.default.createElement("div", {
          className: arrowClass
        }, arrow)) : _react.default.createElement("div", {
          className: arrowDivClass
        }, secondary ? _react.default.createElement("div", {
          className: arrowClass
        }, doubleArrows) : _react.default.createElement("div", {
          className: arrowClass
        }, arrow));
      }
      var navProps = {
        dir: dir,
        name: name,
        disabled: disabled,
        onClick: !disabled ? this.onNavClick.bind(this, dir, viewMoment) : null,
        className: className,
        children: children
      };
      if (props.renderNav) {
        return props.renderNav(navProps);
      }
      if (dir < 0 && props.renderNavPrev) {
        return props.renderNavPrev(navProps);
      }
      if (dir > 0 && props.renderNavNext) {
        return props.renderNavNext(navProps);
      }
      return _react.default.createElement(_InlineBlock.default, _objectSpread(_objectSpread({
        key: name
      }, navProps), {}, {
        disabled: null,
        name: null
      }));
    }
  }, {
    key: "getGotoMoment",
    value: function getGotoMoment(dir, viewMoment) {
      viewMoment = viewMoment || this.p.viewMoment;
      var sign = dir < 0 ? -1 : 1;
      var abs = Math.abs(dir);
      var mom = this.toMoment(viewMoment);
      mom.add(sign, abs == 1 ? 'month' : 'year');
      return mom;
    }
  }, {
    key: "onNavClick",
    value: function onNavClick(dir, viewMoment, event) {
      var props = this.props;
      var dateMoment = this.toMoment(viewMoment);
      if (props.onUpdate) {
        dateMoment = props.onUpdate(dateMoment, dir);
      } else {
        var sign = dir < 0 ? -1 : 1;
        var abs = Math.abs(dir);
        dateMoment.add(sign, abs == 1 ? 'month' : 'year');
      }
      var timestamp = +dateMoment;
      props.onNavClick(dir, viewMoment, event);
      var disabled = dir < 0 ? props.prevDisabled : props.nextDisabled;
      if (disabled) {
        return;
      }
      this.onViewDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: "renderNavDate",
    value: function renderNavDate(viewMoment) {
      var props = this.props;
      var text = viewMoment.format(props.navDateFormat);
      if (props.renderNavDate) {
        return props.renderNavDate(viewMoment, text);
      }
      return text;
    }
  }, {
    key: "onViewDateChange",
    value: function onViewDateChange(_ref2) {
      var dateMoment = _ref2.dateMoment,
        timestamp = _ref2.timestamp;
      if (this.props.viewDate === undefined) {
        this.setState({
          viewDate: timestamp
        });
      }
      if (this.props.onViewDateChange) {
        var dateString = dateMoment.format(this.props.dateFormat);
        this.props.onViewDateChange(dateString, {
          dateString: dateString,
          dateMoment: dateMoment,
          timestamp: timestamp
        });
      }
    }
  }]);
  return NavBar;
}(_reactClass.default);
exports.default = NavBar;
NavBar.defaultProps = {
  rootClassName: 'inovua-react-toolkit-calendar__nav-bar',
  arrows: {},
  doubleArrows: {},
  theme: 'default',
  isDatePickerNavBar: true,
  navDateFormat: 'MMM YYYY',
  enableMonthDecadeView: true,
  onNavClick: function onNavClick(dir, viewMoment) {},
  onViewDateChange: function onViewDateChange() {}
};
NavBar.propTypes = {
  rootClassName: _propTypes.default.string,
  secondary: _propTypes.default.bool,
  showClock: _propTypes.default.bool,
  enableMonthDecadeViewAnimation: _propTypes.default.bool,
  showMonthDecadeViewAnimation: _propTypes.default.number,
  renderNav: _propTypes.default.func,
  renderNavPrev: _propTypes.default.func,
  renderNavNext: _propTypes.default.func,
  arrows: _propTypes.default.object,
  doubleArrows: _propTypes.default.object,
  navDateFormat: _propTypes.default.string,
  onUpdate: _propTypes.default.func,
  onNavClick: _propTypes.default.func,
  onViewDateChange: _propTypes.default.func,
  onClick: _propTypes.default.any
};