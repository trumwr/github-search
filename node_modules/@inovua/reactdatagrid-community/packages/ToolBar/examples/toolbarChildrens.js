/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.undoButton = exports.settingsButton = exports.separator = exports.redoButton = exports.newButton = exports.menuButton = exports.mailButton = exports.iconButton = exports.deleteButton = exports.combo = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _Button = _interopRequireDefault(require("../../Button"));
require("../../Button/style/index.scss");
var _ComboBox = _interopRequireDefault(require("../../ComboBox"));
require("../../ComboBox/style/index.scss");
var _DropdownButton = _interopRequireDefault(require("../../DropdownButton"));
require("../../DropdownButton/style/index.scss");
var _SplitButton = _interopRequireDefault(require("../../SplitButton"));
require("../../SplitButton/style/index.scss");
var _icons = require("./icons");
var _this = void 0;
var settingsItems = [{
  label: 'Refresh',
  icon: _icons.REFRESH_ICON
}, {
  label: 'Back',
  icon: _icons.BACK_ICON
}, '-', {
  label: 'Save file as',
  icon: _icons.SAVE_ICON,
  items: [{
    label: 'PDF'
  }, {
    label: 'HTML'
  }, {
    label: 'PNG'
  }, {
    label: 'Animated GIF'
  }]
}, {
  label: 'Open'
}, {
  label: 'Export sheet to',
  items: [{
    label: 'CSV'
  }, {
    label: 'Proprietary format'
  }]
}];
var menuItems = [{
  label: 'Back',
  secondaryLabel: 'Alt+Left Arrow',
  icon: _icons.BACK_ICON
}, {
  label: 'Forward',
  disabled: true,
  secondaryLabel: 'Alt+Right Arrow',
  icon: _icons.FORWARD_ICON
}, {
  label: 'Reload',
  secondaryLabel: 'Ctrl + R',
  icon: _icons.REFRESH_ICON
}, '-', {
  label: 'Save as...',
  secondaryLabel: 'Ctrl + S',
  icon: _icons.SAVE_ICON
}, {
  label: 'Print...',
  secondaryLabel: 'Ctrl + P'
}, {
  label: 'Cast...'
}, {
  label: 'Translate to',
  items: [{
    label: 'English',
    name: 'en'
  }, {
    label: 'French',
    name: 'fr'
  }, {
    label: 'German',
    name: 'de'
  }]
}, {
  label: 'Translate to Disabled',
  disabled: true,
  items: [{
    label: 'English',
    name: 'en'
  }, {
    label: 'French',
    name: 'fr'
  }, {
    label: 'German',
    name: 'de'
  }]
}, '-', {
  label: 'View page source',
  secondaryLabel: 'Ctrl + U'
}, {
  label: 'Inspect',
  secondaryLabel: 'Ctrl + Shift + I',
  icon: _icons.ZOOM_BACK
}];
var separatorStyle = {
  width: 1,
  margin: '6px 4px',
  background: '#a1b6d3'
};
var separator = _react.default.createElement("div", {
  style: separatorStyle
});
exports.separator = separator;
var newButton = _react.default.createElement(_Button.default, {
  style: {
    minWidth: 90
  }
}, "New item");
exports.newButton = newButton;
var iconButton = _react.default.createElement(_Button.default, (0, _defineProperty2.default)({
  style: {
    minWidth: 90
  },
  icon: _icons.EDIT_ICON
}, "style", {
  minWidth: 30
}));
exports.iconButton = iconButton;
var deleteButton = _react.default.createElement(_Button.default, {
  style: {
    minWidth: 90
  },
  icon: _icons.DELETE_ICON
}, "Delete");
exports.deleteButton = deleteButton;
var settingsButton = _react.default.createElement(_DropdownButton.default, {
  items: settingsItems,
  style: {
    maxHeight: 32
  }
}, _react.default.createElement("div", {
  style: {
    display: 'flex',
    alignItems: 'center'
  }
}, _icons.SETTINGS_ICON, " ", _react.default.createElement("span", {
  style: {
    marginLeft: 5
  }
}, "Settings")));
exports.settingsButton = settingsButton;
var menuButton = _react.default.createElement(_SplitButton.default, {
  items: menuItems
}, "Menu");
exports.menuButton = menuButton;
var undoButton = _react.default.createElement(_Button.default, {
  style: {
    minWidth: 90
  },
  icon: _icons.UNDO_ICON
}, "Undo");
exports.undoButton = undoButton;
var redoButton = _react.default.createElement(_Button.default, {
  style: {
    minWidth: 90
  },
  icon: _icons.REDO_ICON
}, "Redo");
exports.redoButton = redoButton;
var mailButton = _react.default.createElement(_Button.default, {
  style: {
    minWidth: 90
  },
  icon: _icons.MAIL_ICON
}, "E-mail");
exports.mailButton = mailButton;
var combo = _react.default.createElement(_ComboBox.default, {
  style: {
    width: 300
  },
  collapseOnSelect: true,
  onChange: function onChange(value) {
    return _this.setState({
      value: value
    });
  },
  dataSource: [{
    id: 1,
    label: 'romania'
  }, {
    id: 2,
    label: 'Italy'
  }]
});
exports.combo = combo;