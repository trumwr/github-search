/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Separator = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _ArrowScroller = _interopRequireDefault(require("../../ArrowScroller"));
var _DropdownOverflow = _interopRequireDefault(require("./DropdownOverflow"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var InovuaToolbar = function (_Component) {
  (0, _inherits2.default)(InovuaToolbar, _Component);
  var _super = _createSuper(InovuaToolbar);
  function InovuaToolbar(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaToolbar);
    _this = _super.call(this, props);
    _this.setRootRef = function (ref) {
      _this.node = ref;
    };
    return _this;
  }
  (0, _createClass2.default)(InovuaToolbar, [{
    key: "render",
    value: function render() {
      var props = this.props;
      var className = props.className;
      var rootProps = _objectSpread(_objectSpread({
        useTransformOnScroll: props.useTransformOnScroll,
        ref: this.setRootRef
      }, (0, _cleanProps.default)(props, InovuaToolbar.propTypes)), {}, {
        className: className,
        rtl: props.rtl,
        rootClassName: props.rootClassName,
        theme: props.theme
      });
      return props.overflowStrategy === 'scroll' ? _react.default.createElement(_ArrowScroller.default, _objectSpread(_objectSpread({}, rootProps), this.getScrollerProps())) : _react.default.createElement(_DropdownOverflow.default, _objectSpread(_objectSpread({}, rootProps), this.getDropdownOverflowProps()));
    }
  }, {
    key: "scrollIntoView",
    value: function scrollIntoView(node) {
      return this.node && this.node.scrollIntoView(node);
    }
  }, {
    key: "getInstance",
    value: function getInstance() {
      return this.node;
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      var props = this.props;
      return (0, _join.default)(this.props.className, props.rootClassName, props.theme && "".concat(props.rootClassName, "--theme-").concat(props.theme), props.changeButtonStyles && "".concat(props.rootClassName, "--change-button-styles"));
    }
  }, {
    key: "getScrollerProps",
    value: function getScrollerProps() {
      var props = this.props;
      var result = {
        vertical: props.vertical,
        scrollOnMouseEnter: props.scrollOnMouseEnter,
        arrowSize: props.arrowSize,
        className: (0, _join.default)(this.getClassName(), "".concat(props.rootClassName, "--arrowScroller"))
      };
      if (this.props.rtl) {
        result.nativeScroll = false;
      }
      return result;
    }
  }, {
    key: "getDropdownOverflowProps",
    value: function getDropdownOverflowProps() {
      var props = this.props;
      return {
        className: (0, _join.default)(this.getClassName(), "".concat(props.rootClassName, "--dropdown")),
        constrainTo: props.constrainTo,
        dropdownButtonProps: props.dropdownButtonProps,
        renderDropdownButton: props.renderDropdownButton
      };
    }
  }]);
  return InovuaToolbar;
}(_react.Component);
InovuaToolbar.defaultProps = {
  rootClassName: 'inovua-react-toolkit-toolbar',
  vertical: false,
  useTransformOnScroll: false,
  changeButtonStyles: true,
  rtl: false,
  theme: 'default-light',
  overflowStrategy: 'scroll'
};
InovuaToolbar.propTypes = {
  rtl: _propTypes.default.bool,
  rootClassName: _propTypes.default.string,
  changeButtonStyles: _propTypes.default.bool,
  scrollOnMouseEnter: _propTypes.default.bool,
  theme: _propTypes.default.string,
  constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
  arrowSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
    width: _propTypes.default.number,
    height: _propTypes.default.number
  })]),
  overflowStrategy: _propTypes.default.oneOf(['scroll', 'dropdown']),
  vertical: _propTypes.default.bool,
  dropdownButtonProps: _propTypes.default.object,
  renderDropdownButton: _propTypes.default.func,
  useTransformOnScroll: _propTypes.default.bool
};
var Separator = function Separator(props) {
  return _react.default.createElement("div", _objectSpread(_objectSpread({}, props), {}, {
    className: (0, _join.default)(props.className, 'inovua-react-toolkit-toolbar__separator')
  }));
};
exports.Separator = Separator;
InovuaToolbar.Separator = Separator;
var _default = InovuaToolbar;
exports.default = _default;