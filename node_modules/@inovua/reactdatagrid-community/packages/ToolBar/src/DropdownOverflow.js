/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _NotifyResize = require("../../NotifyResize");
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _DropdownButton = _interopRequireDefault(require("../../DropdownButton"));
var _getGroupedItems = _interopRequireDefault(require("./utils/getGroupedItems"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var firstRenderStyle = {
  visibility: 'hidden',
  overflow: 'hidden'
};
var ghostStyle = {
  visibility: 'hidden',
  overflow: 'hidden',
  position: 'absolute'
};
var DropDownOverflow = function (_Component) {
  (0, _inherits2.default)(DropDownOverflow, _Component);
  var _super = _createSuper(DropDownOverflow);
  function DropDownOverflow(props) {
    var _this;
    (0, _classCallCheck2.default)(this, DropDownOverflow);
    _this = _super.call(this, props);
    _this.setRootRef = function (ref) {
      _this.rootNode = ref;
    };
    _this.setGhostRef = function (ref) {
      _this.ghostNode = ref;
    };
    _this.state = {};
    _this.handleResize = _this.handleResize.bind((0, _assertThisInitialized2.default)(_this));
    _this.isFirstRender = true;
    return _this;
  }
  (0, _createClass2.default)(DropDownOverflow, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateOverflowItems();
      this.isFirstRender = false;
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var style = _objectSpread(_objectSpread({}, props.style), this.isFirstRender && firstRenderStyle);
      var className = (0, _join.default)(props.rootClassName, props.className, props.rtl && "".concat(props.rootClassName, "--rtl"));
      var dropdownProps = (0, _assign.default)({}, props);
      delete dropdownProps.scrollOnClick;
      delete dropdownProps.mouseoverScrollSpeed;
      delete dropdownProps.scrollSpeed;
      delete dropdownProps.scrollStep;
      delete dropdownProps.useTransformOnScroll;
      var domProps = (0, _cleanProps.default)(dropdownProps, DropDownOverflow.propTypes);
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, domProps), {}, {
        ref: this.setRootRef,
        style: style,
        className: className
      }), _react.default.createElement(_NotifyResize.NotifyResize, {
        key: "notify",
        rafOnResize: true,
        notifyOnMount: false,
        onResize: this.handleResize
      }), this.renderVisibleItems(), (this.isFirstRender || this.state.overflowIndexes) && this.renderDropdownButton(), this.renderGhost());
    }
  }, {
    key: "renderVisibleItems",
    value: function renderVisibleItems() {
      var visibleItems = this.props.children;
      if (this.state.visibleIndexes) {
        var children = this.getChildrenArray();
        visibleItems = this.state.visibleIndexes.map(function (index) {
          return children[index];
        });
      }
      return visibleItems;
    }
  }, {
    key: "renderDropdownButton",
    value: function renderDropdownButton() {
      var items = [];
      if (this.state.overflowIndexes) {
        var children = this.getChildrenArray();
        items = this.state.overflowIndexes.map(function (index) {
          return {
            id: index,
            label: children[index]
          };
        });
      }
      var domProps = _objectSpread({
        items: items,
        constrainTo: this.props.constrainTo,
        menuProps: _objectSpread(_objectSpread({
          constrainTo: this.props.constrainTo
        }, this.props.dropdownButtonProps && this.props.dropdownButtonProps.menuProps), {}, {
          theme: null,
          disableScroller: true
        })
      }, this.props.dropdownButtonProps);
      var result;
      if (typeof this.props.renderDropdownButton === 'function') {
        result = this.props.renderDropdownButton({
          items: items,
          domProps: domProps,
          overflowIndexes: this.state.overflowIndexes
        });
      }
      if (result === undefined) {
        result = _react.default.createElement(_DropdownButton.default, _objectSpread({}, domProps));
      }
      return result;
    }
  }, {
    key: "renderGhost",
    value: function renderGhost() {
      if (!this.state.ghostVisible) {
        return null;
      }
      return _react.default.createElement("div", {
        ref: this.setGhostRef,
        style: _objectSpread(_objectSpread({}, ghostStyle), {}, {
          width: this.state.width,
          height: this.state.height
        })
      }, this.props.children, this.renderDropdownButton());
    }
  }, {
    key: "getRootSize",
    value: function getRootSize() {
      var maxSize = this.rootNode[this.getSizeName()];
      return maxSize;
    }
  }, {
    key: "updateOverflowItems",
    value: function updateOverflowItems() {
      var _this2 = this;
      if (!this.rootNode) {
        return;
      }
      var parentNode = this.state.ghostVisible ? this.ghostNode : this.rootNode;
      var children = parentNode.children;
      var maxSize = this.getRootSize();
      var boxes = [].slice.call(children).map(function (child) {
        return child[_this2.getSizeName()];
      });
      var overflowControlSize = boxes[boxes.length - 1];
      if (this.isFirstRender) {
        boxes = boxes.slice(1);
      }
      boxes = boxes.slice(0, -1);
      var groupedItems = (0, _getGroupedItems.default)({
        boxes: boxes,
        maxSize: maxSize,
        overflowControlSize: overflowControlSize
      });
      if (groupedItems) {
        this.setState({
          visibleIndexes: groupedItems.visibleIndexes,
          overflowIndexes: groupedItems.overflowIndexes
        });
      } else {
        this.setState({
          visibleIndexes: null,
          overflowIndexes: null
        });
      }
    }
  }, {
    key: "handleResize",
    value: function handleResize(_ref) {
      var _this3 = this;
      var width = _ref.width,
        height = _ref.height;
      this.setState({
        width: width,
        height: height,
        ghostVisible: true
      }, function () {
        _this3.updateOverflowItems();
        _this3.setState({
          ghostVisible: false
        });
      });
    }
  }, {
    key: "getSizeName",
    value: function getSizeName() {
      return 'offsetWidth';
    }
  }, {
    key: "getChildrenArray",
    value: function getChildrenArray() {
      return _react.default.Children.toArray(this.props.children);
    }
  }]);
  return DropDownOverflow;
}(_react.Component);
DropDownOverflow.defaultProps = {
  rootClassName: 'react-toolkit-dropdown-overflow',
  rtl: false
};
DropDownOverflow.propTypes = {
  rootClassName: _propTypes.default.string,
  dropdownButtonProps: _propTypes.default.object,
  constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
  renderDropdownButton: _propTypes.default.func,
  rtl: _propTypes.default.bool
};
var _default = DropDownOverflow;
exports.default = _default;