/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _regionAlign = _interopRequireDefault(require("../../../packages/region-align"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _Menu = _interopRequireDefault(require("../../Menu"));
var _Button = _interopRequireDefault(require("../../Button"));
var _ToggleIcon = _interopRequireDefault(require("../../../common/ToggleIcon"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _containsNode = _interopRequireDefault(require("../../../common/containsNode"));
var _getGlobal = require("../../../getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var ALIGN_OFFSET = {
  top: 5
};
var returnFalse = function returnFalse() {
  return false;
};
var InovuaDropDownButton = function (_Component) {
  (0, _inherits2.default)(InovuaDropDownButton, _Component);
  var _super = _createSuper(InovuaDropDownButton);
  function InovuaDropDownButton(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaDropDownButton);
    _this = _super.call(this, props);
    _this.state = {
      expanded: props.defaultExpanded,
      focused: false
    };
    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleClickOutside = _this.handleClickOutside.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleWindowScroll = _this.handleWindowScroll.bind((0, _assertThisInitialized2.default)(_this));
    _this.onMenuDismiss = _this.onMenuDismiss.bind((0, _assertThisInitialized2.default)(_this));
    _this.rootRef = function (ref) {
      _this.rootNode = ref;
    };
    return _this;
  }
  (0, _createClass2.default)(InovuaDropDownButton, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (nextProps.shouldComponentUpdate) {
        return nextProps.shouldComponentUpdate(nextProps, nextState, this);
      }
      return true;
    }
  }, {
    key: "onMenuDismiss",
    value: function onMenuDismiss() {
      this.props.onDismiss();
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var key = event.key;
      if (this.props.hideMenuOnEscape && this.getExpanded()) {
        this.collapse();
        event.preventDefault();
      }
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateComponentReferenceRegion();
      if (this.props.dismissOnScroll) {
        window.addEventListener('scroll', this.handleWindowScroll, {
          capture: true
        });
        window.addEventListener('scroll', this.handleWindowScroll, {
          capture: false
        });
      }
      globalObject.addEventListener('click', this.handleClickOutside);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      globalObject.removeEventListener('click', this.handleClickOutside);
      globalObject.removeEventListener('scroll', this.handleWindowScroll, {
        capture: true
      });
      globalObject.removeEventListener('scroll', this.handleWindowScroll, {
        capture: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = (0, _join.default)(props.rootClassName, props.className, props.theme && "".concat(props.rootClassName, "--theme-").concat(props.theme), this.state.focused && "".concat(props.rootClassName, "--focused"), props.disabled && "".concat(props.rootClassName, "--disabled"), this.getExpanded() && "".concat(props.rootClassName, "--expanded"), props.rtl ? "".concat(props.rootClassName, "--rtl") : "".concat(props.rootClassName, "--ltr"));
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props, InovuaDropDownButton.propTypes)), {}, {
        ref: this.rootRef,
        className: className
      }), this.renderButton(), this.renderMenu());
    }
  }, {
    key: "renderButton",
    value: function renderButton() {
      var _objectSpread2;
      var props = this.props;
      var className = "".concat(props.rootClassName, "__button");
      var buttonProps = _objectSpread(_objectSpread(_objectSpread({}, this.getCommonProps()), {}, {
        key: 'button',
        iconPosition: this.props.iconPosition || this.props.arrowPosition,
        style: _objectSpread({}, props.buttonProps)
      }, props.buttonProps), {}, (_objectSpread2 = {
        className: className,
        icon: props.icon,
        disabled: props.disabled,
        onClick: this.handleClick,
        rtl: props.rtl,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onKeyDown: this.handleKeyDown
      }, (0, _defineProperty2.default)(_objectSpread2, "icon", [props.icon && props.icon.type ? (0, _react.cloneElement)(props.icon, {
        key: 'inovua-ddbuttonicon'
      }) : props.icon, this.renderArrow()]), (0, _defineProperty2.default)(_objectSpread2, "children", props.children), (0, _defineProperty2.default)(_objectSpread2, "tagName", 'div'), _objectSpread2));
      var result;
      if (typeof props.renderButton === 'function') {
        result = props.renderButton(buttonProps);
      }
      if (result === undefined) {
        result = _react.default.createElement(_Button.default, _objectSpread({}, buttonProps));
      }
      return result;
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      if (this.props.hideMenuOnClick) {
        this.toggle();
      } else {
        this.expand();
      }
      this.props.onClick(event);
    }
  }, {
    key: "handleFocus",
    value: function handleFocus(event) {
      if (this.props.disabled) {
        return;
      }
      this.setState({
        focused: true
      });
      this.props.onFocus(event);
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(event) {
      if (this.props.disabled) {
        return;
      }
      this.setState({
        focused: false
      });
      this.props.onBlur(event);
    }
  }, {
    key: "expand",
    value: function expand() {
      this.setExpanded(true);
    }
  }, {
    key: "collapse",
    value: function collapse() {
      this.setExpanded(false);
    }
  }, {
    key: "toggle",
    value: function toggle() {
      var expanded = this.getExpanded();
      this.setExpanded(!expanded);
    }
  }, {
    key: "isExpandedControlled",
    value: function isExpandedControlled() {
      return this.props.expanded != undefined;
    }
  }, {
    key: "setExpanded",
    value: function setExpanded(expanded) {
      if (expanded === this.getExpanded()) {
        return null;
      }
      if (!this.isExpandedControlled()) {
        this.setState({
          expanded: expanded
        });
        this.updateComponentReferenceRegion();
      }
      if (!expanded) {
        this.props.onDismiss();
      }
      this.props.onExpandedChange(expanded);
    }
  }, {
    key: "getExpanded",
    value: function getExpanded() {
      return this.isExpandedControlled() ? this.props.expanded : this.state.expanded;
    }
  }, {
    key: "updateComponentReferenceRegion",
    value: function updateComponentReferenceRegion() {
      var node = this.props.getAlignNode ? this.props.getAlignNode() : this.rootNode;
      if (!node) {
        return null;
      }
      var referenceRegion = _regionAlign.default.from(node);
      this.setState({
        referenceRegion: referenceRegion
      });
    }
  }, {
    key: "renderMenu",
    value: function renderMenu() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var expanded = this.getExpanded();
      if (!expanded && !this.props.renderMenuWhenCollapsed) {
        return;
      }
      if (!props.items || !props.items.length) {
        return null;
      }
      var style = _objectSpread({}, props.menuProps.style);
      if (!expanded) {
        style.display = 'none';
      }
      var menuProps = _objectSpread(_objectSpread(_objectSpread({}, this.getCommonProps()), {}, {
        key: 'menu',
        items: props.items,
        alignOffset: ALIGN_OFFSET,
        constrainTo: props.constrainTo
      }, props.menuProps), {}, {
        alignTo: this.state.referenceRegion,
        alignPositions: props.alignPositions,
        onChildClick: props.onMenuClick,
        rtl: props.rtl,
        style: style,
        visible: expanded,
        theme: 'default-light',
        className: "".concat(props.rootClassName, "__menu"),
        onDismiss: this.onMenuDismiss
      });
      if (!expanded && !this.prevExpanded && this.props.optimizeMenuSCUWhenCollapsed) {
        menuProps.shouldComponentUpdate = returnFalse;
      }
      this.prevExpanded = expanded;
      var MenuComp = this.props.menu ? this.props.menu : _Menu.default;
      if (!MenuComp) {
        return null;
      }
      var result;
      if (typeof props.renderMenu === 'function') {
        result = props.renderMenu(menuProps);
      }
      if (result === undefined) {
        result = _react.default.createElement(MenuComp, _objectSpread({}, menuProps));
      }
      return result;
    }
  }, {
    key: "renderArrow",
    value: function renderArrow() {
      var props = this.props;
      var result = null;
      if (props.arrow !== true) {
        if (typeof props.arrow === 'function') {
          result = props.arrow(this.getExpanded());
        } else {
          result = props.arrow;
        }
      }
      if (result === null) {
        result = _react.default.createElement(_ToggleIcon.default, {
          key: "icon",
          className: "".concat(props.rootClassName, "__arrow"),
          expanded: this.getExpanded()
        });
      }
      return result;
    }
  }, {
    key: "getCommonProps",
    value: function getCommonProps() {
      var props = this.props;
      return {
        theme: props.theme
      };
    }
  }, {
    key: "handleClickOutside",
    value: function handleClickOutside(event) {
      var node = this.rootNode;
      var target = event.target;
      if (!node || !target) {
        return null;
      }
      if (node !== target && !node.contains(target)) {
        if (this.props.hideMenuOnClickOutside) {
          this.collapse();
        }
      }
    }
  }, {
    key: "handleWindowScroll",
    value: function handleWindowScroll(event) {
      if (this.getExpanded() && !(0, _containsNode.default)(this.rootNode, event.target)) {
        this.setExpanded(false);
      }
    }
  }]);
  return InovuaDropDownButton;
}(_react.Component);
function emptyFn() {}
InovuaDropDownButton.defaultProps = {
  rootClassName: 'inovua-react-toolkit-dropdown-button',
  theme: 'default-light',
  menuProps: {},
  rtl: false,
  menu: null,
  alignPositions: ['tl-bl', 'tr-br', 'bl-tl', 'br-tr', 'tl-tr', 'bl-br', 'tr-tl', 'tr-br'],
  arrow: true,
  arrowPosition: 'end',
  constrainTo: true,
  disabled: false,
  hideMenuOnClick: true,
  hideMenuOnClickOutside: true,
  hideMenuOnEscape: true,
  onExpandedChange: emptyFn,
  onMenuClick: emptyFn,
  optimizeMenuSCUWhenCollapsed: false,
  onClick: emptyFn,
  onFocus: emptyFn,
  onBlur: emptyFn,
  onDismiss: emptyFn,
  defaultExpanded: false,
  dismissOnScroll: false,
  isInovuaButton: true
};
InovuaDropDownButton.propTypes = {
  theme: _propTypes.default.string,
  rtl: _propTypes.default.bool,
  dismissOnScroll: _propTypes.default.bool,
  icon: _propTypes.default.node,
  iconPosition: _propTypes.default.oneOf(['left', 'right', 'start', 'end']),
  rootClassName: _propTypes.default.string,
  menuProps: _propTypes.default.object,
  buttonProps: _propTypes.default.object,
  disabled: _propTypes.default.bool,
  menu: _propTypes.default.func,
  arrow: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool, _propTypes.default.func]),
  alignPositions: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),
  onDismiss: _propTypes.default.func,
  arrowPosition: _propTypes.default.oneOf(['left', 'right', 'start', 'end']),
  hideMenuOnClick: _propTypes.default.bool,
  hideMenuOnEscape: _propTypes.default.bool,
  hideMenuOnClickOutside: _propTypes.default.bool,
  renderMenuWhenCollapsed: _propTypes.default.bool,
  optimizeMenuSCUWhenCollapsed: _propTypes.default.bool,
  onExpandedChange: _propTypes.default.func,
  onMenuClick: _propTypes.default.func,
  onClick: _propTypes.default.func,
  getAlignNode: _propTypes.default.func,
  constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
  items: _propTypes.default.array,
  expanded: _propTypes.default.bool,
  defaultExpanded: _propTypes.default.bool,
  pressed: _propTypes.default.bool,
  renderMenu: _propTypes.default.func,
  renderButton: _propTypes.default.func,
  isInovuaButton: _propTypes.default.bool
};
var _default = InovuaDropDownButton;
exports.default = _default;