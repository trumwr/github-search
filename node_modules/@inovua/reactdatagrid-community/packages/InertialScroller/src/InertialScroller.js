/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _isMobile = _interopRequireDefault(require("../../../common/isMobile"));
var _clamp = _interopRequireDefault(require("../../../common/clamp"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function ypos(e) {
  if (e.targetTouches && e.targetTouches.length >= 1) {
    return e.targetTouches[0].clientY;
  }
  return e.clientY;
}
var InovuaInertialScroller = function (_Component) {
  (0, _inherits2.default)(InovuaInertialScroller, _Component);
  var _super = _createSuper(InovuaInertialScroller);
  function InovuaInertialScroller(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaInertialScroller);
    _this = _super.call(this, props);
    _this.state = {};
    _this.setRootRef = function (ref) {
      _this.node = ref;
    };
    _this.setViewRef = function (ref) {
      _this.viewNode = ref;
    };
    _this.tap = _this.tap.bind((0, _assertThisInitialized2.default)(_this));
    _this.drag = _this.drag.bind((0, _assertThisInitialized2.default)(_this));
    _this.release = _this.release.bind((0, _assertThisInitialized2.default)(_this));
    _this.track = _this.track.bind((0, _assertThisInitialized2.default)(_this));
    _this.autoScroll = _this.autoScroll.bind((0, _assertThisInitialized2.default)(_this));
    _this.min = 0;
    _this.max = null;
    _this.pressed = null;
    _this.reference = null;
    _this.offset = 0;
    return _this;
  }
  (0, _createClass2.default)(InovuaInertialScroller, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateMaxScroll();
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = (0, _join.default)(props.rootClassName, props.className, "".concat(props.rootClassName, "--theme-").concat(props.theme));
      var events;
      if (_isMobile.default && this.props.enableTouchDrag) {
        events = {
          onTouchStart: this.tap,
          onTouchEnd: this.release,
          onTouchMove: this.drag
        };
      }
      if (!_isMobile.default && props.enableMouseDrag) {
        events = {
          onMouseDown: this.tap,
          onMouseUp: this.release,
          onMouseMove: this.drag
        };
      }
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props, InovuaInertialScroller.propTypes)), {}, {
        className: className,
        ref: this.setRootRef
      }, events), _react.default.createElement("div", {
        ref: this.setViewRef,
        className: "".concat(props.rootClassName, "__view")
      }, props.children));
    }
  }, {
    key: "tap",
    value: function tap(event) {
      this.pressed = true;
      this.reference = ypos(event);
      this.timeStamp = Date.now();
      this.frame = this.offset;
      this.velocity = 0;
      this.amplitude = 0;
      clearInterval(this.ticker);
      this.ticker = setInterval(this.track, 16);
      event.stopPropagation();
      event.preventDefault();
    }
  }, {
    key: "drag",
    value: function drag(event) {
      if (this.pressed) {
        var y = ypos(event);
        var delta = this.reference - y;
        if (delta > this.props.threshold || delta < -this.props.threshold) {
          this.reference = y;
          this.scrollTo(this.offset + delta);
        }
      }
    }
  }, {
    key: "release",
    value: function release(event) {
      this.pressed = false;
      this.updateMaxScroll();
      event.stopPropagation();
      event.preventDefault();
      clearInterval(this.ticker);
      if (this.velocity > 10 || this.velocity < -10) {
        this.amplitude = this.props.initialAmplitude * this.velocity;
        this.target = Math.round(this.offset + this.amplitude);
        this.timestamp = Date.now();
        requestAnimationFrame(this.autoScroll);
      }
    }
  }, {
    key: "scrollTo",
    value: function scrollTo(offset) {
      if (!this.viewNode) {
        return null;
      }
      this.offset = (0, _clamp.default)(offset, 0, this.max);
      this.viewNode.style.transform = "translateY(".concat(-this.offset, "px)");
    }
  }, {
    key: "autoScroll",
    value: function autoScroll() {
      var elapsed, delta;
      var timeConstant = this.props.timeConstant;
      if (this.amplitude) {
        elapsed = Date.now() - this.timestamp;
        delta = -this.amplitude * Math.exp(-elapsed / timeConstant);
        if (delta > 0.1 || delta < -0.1) {
          this.scrollTo(this.target + delta);
          requestAnimationFrame(this.autoScroll);
        } else {
          this.scrollTo(this.target);
        }
      }
    }
  }, {
    key: "updateMaxScroll",
    value: function updateMaxScroll() {
      this.max = this.viewNode && this.viewNode.offsetHeight - this.node.offsetHeight;
    }
  }, {
    key: "track",
    value: function track() {
      var now, elapsed, delta, v;
      now = Date.now();
      elapsed = now - this.timeStamp;
      this.timeStamp = now;
      delta = this.offset - this.frame;
      this.frame = this.offset;
      v = 1000 * delta / (1 + elapsed);
      this.velocity = 0.8 * v + 0.2 * this.velocity;
    }
  }]);
  return InovuaInertialScroller;
}(_react.Component);
function emptyFn() {}
InovuaInertialScroller.defaultProps = {
  theme: 'default',
  rootClassName: 'react-toolkit-inertial-scroller',
  threshold: 5,
  timeConstant: 360,
  initialAmplitude: 0.5,
  enableMouseDrag: true,
  enableTouchDrag: true
};
InovuaInertialScroller.propTypes = {
  theme: _propTypes.default.string,
  rootClassName: _propTypes.default.string,
  threshold: _propTypes.default.number,
  timeConstant: _propTypes.default.number,
  initialAmplitude: _propTypes.default.number,
  enableMouseDrag: _propTypes.default.bool,
  enableTouchDrag: _propTypes.default.bool
};
var _default = InovuaInertialScroller;
exports.default = _default;