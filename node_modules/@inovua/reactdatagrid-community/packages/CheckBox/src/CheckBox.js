/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactClass = require("../../../packages/react-class");
var _uglified = _interopRequireDefault(require("../../../packages/uglified"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _assign = _interopRequireDefault(require("../../../common/assign"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _getClassNames = _interopRequireDefault(require("./utils/getClassNames"));
var _icons = require("./icons");
var _InovuaCheckBox$propT;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var stopPropagation = function stopPropagation(e) {
  return e.stopPropagation();
};
var isValidCheckValue = function isValidCheckValue(value, props) {
  return value === props.checkedValue || value === props.uncheckedValue || value === props.indeterminateValue && props.supportIndeterminate;
};
var nextValue = function nextValue(oldValue, props) {
  if (oldValue === props.checkedValue) {
    return props.uncheckedValue;
  }
  if (oldValue === props.uncheckedValue) {
    return props.supportIndeterminate ? props.indeterminateValue : props.checkedValue;
  }
  if (props.supportIndeterminate && oldValue === props.indeterminateValue) {
    return props.checkedValue;
  }
  return props.uncheckedValue;
};
var getComponentStyle = function getComponentStyle(props, state) {
  var focused = state.focused;
  var disabled = props.disabled,
    focusedStyle = props.focusedStyle,
    disabledStyle = props.disabledStyle,
    readOnly = props.readOnly,
    readOnlyStyle = props.readOnlyStyle,
    style = props.style;
  var styles = [style || {}];
  if (focused) {
    styles.push(focusedStyle);
  }
  if (disabled) {
    styles.push(disabledStyle);
  }
  if (readOnly) {
    styles.push(readOnlyStyle);
  }
  return _assign.default.apply(void 0, [{}].concat(styles));
};
var getComputedIconStyle = function getComputedIconStyle(config) {
  var focused = config.focused,
    disabled = config.disabled,
    focusedIconStyle = config.focusedIconStyle,
    disabledIconStyle = config.disabledIconStyle,
    iconStyle = config.iconStyle;
  var styles = [iconStyle];
  styles.push(getIconSizeStyle(config));
  if (focused) {
    styles.push(focusedIconStyle);
  }
  if (disabled) {
    styles.push(disabledIconStyle);
  }
  return _assign.default.apply(void 0, [{}].concat(styles));
};
var getIconClassName = function getIconClassName(props) {
  var iconClassName = '';
  if (props.iconClassName) {
    iconClassName = props.iconClassName;
  }
  if (props.disabled && props.disabledIconClassName) {
    iconClassName = (0, _join.default)(iconClassName, props.disabledIconClassName);
  }
  if (props.focused && props.focusedIconClassName) {
    iconClassName = (0, _join.default)(iconClassName, props.focusedIconClassName);
  }
  if (props.readOnly && props.readOnlyIconClassName) {
    iconClassName = (0, _join.default)(iconClassName, props.readOnlyIconClassName);
  }
  return iconClassName;
};
var renderIconFunctionOrJSX = function renderIconFunctionOrJSX(iconRender, props, _ref) {
  var style = _ref.style,
    className = _ref.className;
  if (typeof iconRender === 'function') {
    return iconRender({
      style: style,
      className: className
    }, props);
  }
  return _react.default.cloneElement(iconRender, {
    style: _objectSpread(_objectSpread({}, iconRender.props.style), style),
    className: (0, _join.default)(iconRender.props.className, className)
  });
};
var renderCheckedIcon = function renderCheckedIcon(props, iconProps) {
  var checkedIcon = props.checkedIcon,
    checkedIconSrc = props.checkedIconSrc;
  if (checkedIconSrc) {
    return _react.default.createElement("img", _objectSpread(_objectSpread({}, iconProps), {}, {
      src: checkedIconSrc
    }));
  }
  return renderIconFunctionOrJSX(checkedIcon, props, iconProps);
};
var renderUncheckedIcon = function renderUncheckedIcon(props, iconProps) {
  var uncheckedIcon = props.uncheckedIcon,
    uncheckedIconSrc = props.uncheckedIconSrc;
  if (uncheckedIconSrc) {
    return _react.default.createElement("img", _objectSpread(_objectSpread({}, iconProps), {}, {
      src: uncheckedIconSrc
    }));
  }
  return renderIconFunctionOrJSX(uncheckedIcon, props, iconProps);
};
var renderIndeterminateIcon = function renderIndeterminateIcon(props, iconProps) {
  var indeterminateIcon = props.indeterminateIcon,
    indeterminateIconSrc = props.indeterminateIconSrc;
  if (indeterminateIconSrc) {
    return _react.default.createElement("img", _objectSpread(_objectSpread({}, iconProps), {}, {
      src: indeterminateIconSrc
    }));
  }
  return renderIconFunctionOrJSX(indeterminateIcon, props, iconProps);
};
var renderIcon = function renderIcon(config) {
  var checkedDescriptor = getCheckedDescriptor(config.checked, config);
  var checkBoxIconStyle = getComputedIconStyle(config);
  var iconProps = {
    className: getIconClassName(config),
    style: checkBoxIconStyle
  };
  switch (checkedDescriptor) {
    case CHECKED_STATE:
      return renderCheckedIcon(config, iconProps);
    case UNCHECKED_STATE:
      return renderUncheckedIcon(config, iconProps);
    case INDETERMINATE_STATE:
      return renderIndeterminateIcon(config, iconProps);
  }
};
var getIconSizeStyle = function getIconSizeStyle(props) {
  var style = {};
  var iconSize = props.iconSize;
  if (Array.isArray(iconSize)) {
    style.width = iconSize[0];
    style.height = iconSize[1];
  } else {
    style.width = style.height = iconSize;
  }
  return style;
};
var CHECKED_STATE = 'checked';
var UNCHECKED_STATE = 'unchecked';
var INDETERMINATE_STATE = 'indeterminate';
var getCheckedDescriptor = function getCheckedDescriptor(checked, props) {
  var checkedValue = props.checkedValue,
    supportIndeterminate = props.supportIndeterminate,
    indeterminateValue = props.indeterminateValue;
  if (checked === checkedValue) {
    return CHECKED_STATE;
  }
  if (supportIndeterminate && checked === indeterminateValue) {
    return INDETERMINATE_STATE;
  }
  return UNCHECKED_STATE;
};
var renderHiddenInput = function renderHiddenInput(props) {
  var withHiddenInput = props.withHiddenInput,
    name = props.name;
  var checked = props.checked;
  var checkedDescriptor = getCheckedDescriptor(checked, props);
  switch (checkedDescriptor) {
    case CHECKED_STATE:
      checked = props.checkedSubmitValue === undefined ? props.checkedValue : props.checkedSubmitValue;
      break;
    case UNCHECKED_STATE:
      checked = props.uncheckedSubmitValue === undefined ? props.uncheckedValue : props.uncheckedSubmitValue;
      break;
    case INDETERMINATE_STATE:
      checked = props.indeterminateSubmitValue === undefined ? props.indeterminateValue : props.indeterminateSubmitValue;
  }
  if (checked === null) {
    checked = '';
  }
  if (withHiddenInput) {
    return _react.default.createElement("input", {
      type: "hidden",
      name: name,
      value: checked
    });
  }
  return null;
};
var getChecked = function getChecked(props, state) {
  var checked = isControlledComponent(props) ? props.checked : state.checked;
  return isValidCheckValue(checked, props) ? checked : props.uncheckedValue;
};
var isControlledComponent = function isControlledComponent(props) {
  return props.checked !== undefined;
};
var InovuaCheckBox = function (_Component) {
  (0, _inherits2.default)(InovuaCheckBox, _Component);
  var _super = _createSuper(InovuaCheckBox);
  function InovuaCheckBox(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaCheckBox);
    _this = _super.call(this, props);
    (0, _reactClass.autoBind)((0, _assertThisInitialized2.default)(_this));
    var defaultChecked = props.defaultChecked,
      uncheckedValue = props.uncheckedValue;
    _this.state = {
      checked: isValidCheckValue(defaultChecked, props) ? defaultChecked : uncheckedValue
    };
    _this.checkboxRef = (0, _react.createRef)();
    return _this;
  }
  (0, _createClass2.default)(InovuaCheckBox, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.checkUpdateIndeterminate(this.p);
      if (prevProps.supportIndeterminate && !this.props.supportIndeterminate) {
        this.setNativeIndeterminate(false);
      }
      if (!prevProps.autoFocus && this.props.autoFocus && !this.isFocused()) {
        this.focus();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.checkUpdateIndeterminate();
      if (this.props.autoFocus) {
        this.focus();
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.checkboxRef.current.focus();
    }
  }, {
    key: "checkUpdateIndeterminate",
    value: function checkUpdateIndeterminate() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.p;
      if (props.browserNative && props.supportIndeterminate) {
        this.setNativeIndeterminate(getCheckedDescriptor(props.checked, props) === INDETERMINATE_STATE);
      }
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.state.focused;
    }
  }, {
    key: "handleFocus",
    value: function handleFocus(event) {
      var onFocus = this.p.onFocus;
      this.setState({
        focused: true
      });
      onFocus && onFocus(event);
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(event) {
      var onBlur = this.p.onBlur;
      this.setState({
        focused: false
      });
      onBlur && onBlur(event);
    }
  }, {
    key: "changeToNextValue",
    value: function changeToNextValue(event) {
      var _this$p = this.p,
        readOnly = _this$p.readOnly,
        checked = _this$p.checked,
        nextValue = _this$p.nextValue;
      if (readOnly) {
        return;
      }
      var nextCheckedValue = nextValue(checked, this.p);
      this.setChecked(nextCheckedValue, event);
    }
  }, {
    key: "setChecked",
    value: function setChecked(value, event) {
      var _this$p2 = this.p,
        disabled = _this$p2.disabled,
        onChange = _this$p2.onChange;
      if (disabled) {
        return;
      }
      if (!isValidCheckValue(value, this.p)) {
        return;
      }
      if (!isControlledComponent(this.props)) {
        this.setState({
          checked: value
        });
      }
      if (typeof onChange == 'function') {
        onChange(value, event);
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      var _this$p3 = this.p,
        onClick = _this$p3.onClick,
        disabled = _this$p3.disabled;
      if (disabled) {
        return;
      }
      this.changeToNextValue(event);
      if (onClick) {
        onClick(event);
      }
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var onKeyDown = this.p.onKeyDown;
      if (event.key === ' ') {
        event.preventDefault();
        this.changeToNextValue(event);
      }
      if (typeof onKeyDown == 'function') {
        onKeyDown(event);
      }
    }
  }, {
    key: "getProps",
    value: function getProps(props, state) {
      var checked = getChecked(props, state);
      var style = getComponentStyle(props, state);
      var className = (0, _getClassNames.default)(props, state, {
        checked: checked
      });
      var shouldSubmitIsFunction = typeof props.shouldSubmit === 'function';
      var shouldSubmitValue = shouldSubmitIsFunction ? props.shouldSubmit(checked, props) : typeof props.shouldSubmit === 'undefined' || props.shouldSubmit;
      if (props.showWarnings && shouldSubmitIsFunction && shouldSubmitValue && !props.name) {
        console.warn('shouldSubmit function returned true, but "name" prop is missing');
      }
      var withHiddenInput = !!(props.name && shouldSubmitValue);
      var focused = state.focused;
      return _objectSpread(_objectSpread({}, props), {}, {
        checked: checked,
        style: style,
        withHiddenInput: withHiddenInput,
        focused: focused,
        className: className
      });
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props,
        state = this.state;
      var _this$p4 = this.p = this.getProps(props, state),
        children = _this$p4.children,
        className = _this$p4.className,
        style = _this$p4.style,
        tabIndex = _this$p4.tabIndex,
        iconCheckOnly = _this$p4.iconCheckOnly,
        browserNative = _this$p4.browserNative,
        focusable = _this$p4.focusable;
      var eventHandlers = {
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onKeyDown: this.handleKeyDown
      };
      if (!iconCheckOnly) {
        eventHandlers.onClick = this.handleClick;
      }
      var domProps = _objectSpread(_objectSpread(_objectSpread({}, (0, _cleanProps.default)(props, InovuaCheckBox.propTypes)), eventHandlers), {}, {
        className: className,
        style: style,
        ref: this.checkboxRef,
        tabIndex: props.disabled === true ? null : tabIndex
      });
      if (!props.focusable) {
        delete domProps.tabIndex;
      }
      return browserNative ? this.renderBrowserNative(domProps) : _react.default.createElement("div", _objectSpread({}, domProps), this.renderCheckbox(this.p, iconCheckOnly && {
        onClick: this.handleClick
      }), children && _react.default.createElement("div", {
        className: "".concat(props.rootClassName, "__inner-content-wrapper")
      }, children));
    }
  }, {
    key: "renderBrowserNative",
    value: function renderBrowserNative(domProps) {
      var _this$props = this.props,
        children = _this$props.children,
        iconCheckOnly = _this$props.iconCheckOnly;
      var Factory = iconCheckOnly ? 'div' : 'label';
      return _react.default.createElement(Factory, _objectSpread(_objectSpread({}, domProps), {}, {
        onClick: this.props.onClick,
        onChange: stopPropagation
      }), this.renderBrowserNativeInput(), children);
    }
  }, {
    key: "renderBrowserNativeInput",
    value: function renderBrowserNativeInput() {
      var _this2 = this;
      var _this$p5 = this.p,
        tabIndex = _this$p5.tabIndex,
        rootClassName = _this$p5.rootClassName,
        disabled = _this$p5.disabled,
        checked = _this$p5.checked,
        renderNativeBrowserInput = _this$p5.renderNativeBrowserInput,
        withHiddenInput = _this$p5.withHiddenInput,
        name = _this$p5.name;
      var className = (0, _join.default)(this.p.className, "".concat(rootClassName, "--browser-native"));
      var inputProps = {
        disabled: disabled,
        className: className,
        type: 'checkbox',
        ref: function ref(_ref2) {
          return _this2.node = _ref2;
        },
        onClick: this.handleClick,
        checked: !!checked,
        tabIndex: disabled === true ? null : tabIndex
      };
      if (withHiddenInput) {
        inputProps.name = name;
      }
      var result;
      if (typeof renderNativeBrowserInput === 'function') {
        result = renderNativeBrowserInput({
          inputProps: inputProps,
          props: this.p
        });
      }
      if (result === undefined) {
        result = _react.default.createElement("input", _objectSpread({}, inputProps));
      }
      return result;
    }
  }, {
    key: "renderCheckbox",
    value: function renderCheckbox(config, eventHandlers) {
      var input = config.disabled !== true && renderHiddenInput(config);
      var icon = renderIcon(config);
      var domProps = {};
      if (config.disabled) {
        domProps.disabled = 'disabled';
      }
      return _react.default.createElement("div", _objectSpread(_objectSpread({
        className: "".concat(config.rootClassName, "__icon-wrapper")
      }, domProps), eventHandlers), input, icon);
    }
  }, {
    key: "setNativeIndeterminate",
    value: function setNativeIndeterminate(indeterminate) {
      if (this.node) {
        this.node.indeterminate = indeterminate;
      }
    }
  }]);
  return InovuaCheckBox;
}(_react.Component);
InovuaCheckBox.defaultProps = {
  rootClassName: 'inovua-react-toolkit-checkbox',
  browserNative: false,
  iconStyle: {},
  disabledIconStyle: {},
  focusedIconStyle: {},
  disabledStyle: {},
  readOnlyStyle: {},
  focusedStyle: {},
  supportIndeterminate: false,
  focusable: true,
  disabled: false,
  readOnly: false,
  tabIndex: 0,
  checkedValue: true,
  uncheckedValue: false,
  indeterminateValue: null,
  checkedSubmitValue: undefined,
  uncheckedSubmitValue: undefined,
  indeterminateSubmitValue: undefined,
  checked: undefined,
  defaultChecked: undefined,
  iconSize: 16,
  checkedIcon: _icons.checkedIcon,
  uncheckedIcon: _icons.uncheckedIcon,
  indeterminateIcon: _icons.indeterminateIcon,
  iconCheckOnly: false,
  shouldSubmit: undefined,
  nextValue: nextValue,
  childrenPosition: 'end',
  inlineBlock: true,
  theme: 'default-light',
  showWarnings: !_uglified.default
};
var func = _propTypes.default.func,
  number = _propTypes.default.number,
  object = _propTypes.default.object,
  string = _propTypes.default.string,
  bool = _propTypes.default.bool,
  any = _propTypes.default.any;
var nonNullPropType = function nonNullPropType(props, propName, componentName) {
  if (props[propName] === null) {
    return new Error("".concat(propName, " is null in ").concat(componentName, ". This is not valid for input; use undefined instead."));
  }
  return null;
};
InovuaCheckBox.propTypes = (_InovuaCheckBox$propT = {
  rootClassName: string,
  browserNative: bool,
  focusable: bool,
  renderNativeBrowserInput: func,
  shouldSubmit: function shouldSubmit(props, propName, componentName) {
    if (props.shouldSubmit && typeof props.shouldSubmit !== 'function' && !props.name) {
      return new Error("\"shouldSubmit\" was true, but component ".concat(componentName, " requires prop \"name\" to be submitted."));
    }
  },
  value: function value(props) {
    if (typeof props.value !== 'undefined') {
      return new Error('"value" prop is not supported. Use "checked" instead.');
    }
  },
  defaultValue: function defaultValue(props) {
    if (typeof props.defaultValue !== 'undefined') {
      return new Error('"defaultValue" prop is not supported. Use "checked" instead.');
    }
  },
  nextValue: func,
  name: string,
  iconClassName: string,
  readOnlyClassName: string,
  disabledClassName: string,
  focusedClassName: string,
  checked: any,
  defaultChecked: any,
  disabled: bool,
  readOnly: bool,
  tabIndex: number,
  supportIndeterminate: bool,
  checkedValue: any,
  uncheckedValue: any,
  indeterminateValue: any,
  checkedSubmitValue: nonNullPropType,
  uncheckedSubmitValue: nonNullPropType,
  indeterminateSubmitValue: nonNullPropType,
  iconSize: _propTypes.default.oneOfType([string, _propTypes.default.arrayOf([string]), number, _propTypes.default.arrayOf(number)]),
  checkedIconSrc: string,
  checkedIcon: any,
  iconCheckOnly: bool,
  uncheckedIconSrc: string,
  uncheckedIcon: any,
  indeterminateIconSrc: string,
  indeterminateIcon: any,
  childrenPosition: _propTypes.default.oneOf(['start', 'end']),
  inlineBlock: bool,
  rtl: bool,
  theme: string,
  iconStyle: object,
  disabledIconStyle: object,
  focusedIconStyle: object
}, (0, _defineProperty2.default)(_InovuaCheckBox$propT, "iconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "disabledIconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "focusedIconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "readOnlyIconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "disabledStyle", object), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "readOnlyStyle", object), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "focusedStyle", object), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "showWarnings", bool), _InovuaCheckBox$propT);
var _default = InovuaCheckBox;
exports.default = _default;