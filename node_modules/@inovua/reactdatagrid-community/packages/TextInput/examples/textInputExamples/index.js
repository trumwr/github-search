/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _src = _interopRequireDefault(require("../../src"));
require("../../style/index.scss");
require("../../../NumericInput/style/index.scss");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var TextInputExamples = function (_Component) {
  (0, _inherits2.default)(TextInputExamples, _Component);
  var _super = _createSuper(TextInputExamples);
  function TextInputExamples(props) {
    var _this;
    (0, _classCallCheck2.default)(this, TextInputExamples);
    _this = _super.call(this, props);
    _this.state = {
      enableSpinnerTools: true,
      enableClearButton: true,
      toolPosition: false,
      size: 20,
      theValue: 'Text',
      value: 68,
      rtl: false,
      minLength: 10,
      maxLength: 20,
      readOnly: false,
      disabled: false,
      hidden: false,
      clearButtonSize: 10,
      clearButtonColor: '#495e85',
      setPlaceholder: true
    };
    return _this;
  }
  (0, _createClass2.default)(TextInputExamples, [{
    key: "onChange",
    value: function onChange(value) {
      this.setState({
        value: value
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      return _react.default.createElement("div", {
        className: "TextInputExamples",
        style: {
          padding: 30
        }
      }, _react.default.createElement("h1", null, "TextInput configurator"), _react.default.createElement("div", {
        style: {
          marginBottom: 20
        }
      }, _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "rtl:", _react.default.createElement("input", {
        type: "checkbox",
        checked: this.state.rtl,
        onChange: function onChange(ev) {
          return _this2.setState({
            rtl: ev.target.checked
          });
        }
      })), _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "readOnly:", _react.default.createElement("input", {
        type: "checkbox",
        checked: this.state.readOnly,
        onChange: function onChange(ev) {
          return _this2.setState({
            readOnly: ev.target.checked
          });
        }
      })), _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "disabled:", _react.default.createElement("input", {
        type: "checkbox",
        checked: this.state.disabled,
        onChange: function onChange(ev) {
          return _this2.setState({
            disabled: ev.target.checked
          });
        }
      })), _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "hidden:", _react.default.createElement("input", {
        type: "checkbox",
        checked: this.state.hidden,
        onChange: function onChange(ev) {
          return _this2.setState({
            hidden: ev.target.checked
          });
        }
      })), _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "enableClearButton:", _react.default.createElement("input", {
        type: "checkbox",
        checked: this.state.enableClearButton,
        onChange: function onChange(ev) {
          return _this2.setState({
            enableClearButton: ev.target.checked
          });
        }
      })), _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "Placeholder:", _react.default.createElement("input", {
        type: "checkbox",
        checked: this.state.setPlaceholder,
        onChange: function onChange(ev) {
          return _this2.setState({
            setPlaceholder: ev.target.checked
          });
        }
      })), _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "size:", _react.default.createElement("input", {
        style: {
          width: 80
        },
        type: "number",
        value: this.state.size,
        onChange: function onChange(ev) {
          return _this2.setState({
            size: ev.target.value
          });
        }
      })), _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "minLength:", _react.default.createElement("input", {
        style: {
          width: 80
        },
        type: "number",
        value: this.state.minLength,
        onChange: function onChange(ev) {
          return _this2.setState({
            minLength: ev.target.value
          });
        }
      })), _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "maxLength:", _react.default.createElement("input", {
        style: {
          width: 80
        },
        type: "number",
        value: this.state.maxLength,
        onChange: function onChange(ev) {
          return _this2.setState({
            maxLength: ev.target.value
          });
        }
      })), _react.default.createElement("div", {
        style: {
          marginBottom: 10
        }
      }, "clearButtonColor:", _react.default.createElement("input", {
        style: {
          width: 80
        },
        type: "color",
        value: this.state.clearButtonColor,
        onChange: function onChange(ev) {
          return _this2.setState({
            clearButtonColor: ev.target.value
          });
        }
      }))), _react.default.createElement("div", null, _react.default.createElement(_src.default, {
        rtl: this.state.rtl,
        autoFocus: true,
        style: {
          width: 120
        },
        required: true,
        minLength: this.state.minLength * 1,
        maxLength: this.state.maxLength * 1,
        readOnly: this.state.readOnly,
        disabled: this.state.disabled,
        hidden: this.state.hidden,
        enableClearButton: this.state.enableClearButton,
        onKeyDown: function onKeyDown(e) {
          console.log(e.key);
        },
        clearButtonColor: this.state.clearButtonColor,
        placeholder: this.state.setPlaceholder ? 'Placeholder' : null,
        value: this.state.theValue,
        onChange: function onChange(v) {
          console.log(v);
          _this2.setState({
            theValue: v
          });
        },
        stopChangePropagation: false,
        inputProps: {
          value: this.state.theValue,
          onChange: function onChange(v) {
            return _this2.setState({
              theValue: v
            });
          }
        }
      })));
    }
  }]);
  return TextInputExamples;
}(_react.Component);
var _default = TextInputExamples;
exports.default = _default;