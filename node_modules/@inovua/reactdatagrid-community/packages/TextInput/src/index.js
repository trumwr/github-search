/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _autoBind = _interopRequireDefault(require("../../../packages/react-class/autoBind"));
var _Field = _interopRequireDefault(require("../../Field"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var preventDefault = function preventDefault(e) {
  return e.preventDefault();
};
var getClearButtonClassNames = function getClearButtonClassNames(props) {
  var clearButtonClassName = (0, _join.default)("".concat(props.rootClassName, "__clear-button"), props.clearButtonClassName);
  return {
    clearButtonClassName: clearButtonClassName
  };
};
var isControlled = function isControlled(props) {
  return props.value !== undefined;
};
var emptyObject = {};
var TextInput = function (_Component) {
  (0, _inherits2.default)(TextInput, _Component);
  var _super = _createSuper(TextInput);
  function TextInput(props) {
    var _this;
    (0, _classCallCheck2.default)(this, TextInput);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderClearIcon", function (svgProps) {
      var result;
      if (_this.props.renderClearIcon && typeof _this.props.renderClearIcon === 'function') {
        result = _this.props.renderClearIcon(_objectSpread({}, svgProps));
      }
      if (result === undefined) {
        result = _react.default.createElement("svg", {
          style: _objectSpread({}, svgProps),
          viewBox: "0 0 10 10"
        }, _react.default.createElement("path", {
          fill: "none",
          fillRule: "evenodd",
          strokeLinecap: "round",
          strokeWidth: "1.33",
          d: "M1 1l8 8m0-8L1 9"
        }));
      }
      return result;
    });
    _this.fieldRef = function (field) {
      _this.field = field;
    };
    _this.state = {
      focused: false,
      value: props.defaultValue == null ? '' : props.defaultValue
    };
    (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  (0, _createClass2.default)(TextInput, [{
    key: "handleChange",
    value: function handleChange(value, event) {
      this.setValue(value, event);
    }
  }, {
    key: "focus",
    value: function focus() {
      this.field.focus();
    }
  }, {
    key: "setValue",
    value: function setValue(value, event) {
      if (!isControlled(this.props)) {
        this.setState({
          value: value
        });
      }
      if (this.props.inputProps && this.props.inputProps.onChange) {
        this.props.inputProps.onChange(value, event);
      }
      if (this.props.onChange) {
        this.props.onChange(value, event);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props,
        state = this.state;
      var wrapperProps = props.wrapperProps,
        style = props.style,
        enableClearButton = props.enableClearButton;
      var inputProps = props.inputProps || emptyObject;
      var inputClassName = (0, _join.default)("".concat(props.rootClassName, "__input"), inputProps.className);
      var value = isControlled(props) ? props.value : state.value;
      var fieldProps = _objectSpread(_objectSpread({
        size: 1
      }, inputProps), {}, {
        ref: this.fieldRef,
        className: inputClassName,
        onChange: this.handleChange,
        value: value,
        type: props.type,
        stopChangePropagation: props.stopChangePropagation
      });
      if (props.hidden) {
        fieldProps.hidden = props.hidden;
      }
      if (props.name) {
        fieldProps.name = props.name;
      }
      if (props.placeholder) {
        fieldProps.placeholder = props.placeholder;
      }
      if (props.required) {
        fieldProps.required = props.required;
      }
      if (props.readOnly) {
        fieldProps.readOnly = props.readOnly;
      }
      if (props.autoFocus) {
        fieldProps.autoFocus = props.autoFocus;
      }
      if (props.maxLength != undefined) {
        fieldProps.maxLength = props.maxLength;
      }
      if (props.minLength != undefined) {
        fieldProps.minLength = props.minLength;
      }
      if (props.size != undefined) {
        fieldProps.size = props.size;
      }
      if (props.disabled) {
        fieldProps.disabled = props.disabled;
      }
      var className = (0, _join.default)(props.rootClassName, props.className, props.rtl ? "".concat(props.rootClassName, "--rtl") : "".concat(props.rootClassName, "--ltr"), props.theme && "".concat(props.rootClassName, "--theme-").concat(props.theme), enableClearButton && "".concat(props.rootClassName, "--enable-clear-button"), state.focused && "".concat(props.rootClassName, "--focused"), fieldProps.disabled && "".concat(props.rootClassName, "--disabled"));
      var input = _react.default.createElement(_Field.default, _objectSpread({}, fieldProps));
      var wrapperDomProps = (0, _cleanProps.default)(wrapperProps, TextInput.propTypes);
      var domProps = (0, _cleanProps.default)(props, TextInput.propTypes);
      delete domProps.onChange;
      return _react.default.createElement("div", _objectSpread(_objectSpread(_objectSpread({}, domProps), wrapperDomProps), {}, {
        className: className,
        style: style,
        onBlur: this.onBlur,
        onClick: this.onClick,
        onFocus: this.onFocus
      }), input, this.renderClearButtonWrapper(fieldProps));
    }
  }, {
    key: "handleClearButtonClick",
    value: function handleClearButtonClick(event) {
      this.setState({
        focused: true
      });
      this.setValue('');
      this.focus();
    }
  }, {
    key: "renderClearButtonWrapper",
    value: function renderClearButtonWrapper(fieldProps) {
      var props = this.props,
        state = this.state;
      var clearButtonColor = props.clearButtonColor,
        clearButtonStyle = props.clearButtonStyle,
        clearButtonSize = props.clearButtonSize,
        enableClearButton = props.enableClearButton,
        rootClassName = props.rootClassName;
      var value = isControlled(props) ? props.value : state.value;
      var emptyValue = value == '' || value == null;
      var showButton = enableClearButton && !emptyValue && !fieldProps.disabled && !fieldProps.readOnly;
      return _react.default.createElement("div", {
        key: "clearButton",
        className: (0, _join.default)("".concat(rootClassName, "__clear-button-wrapper"), !showButton && "".concat(rootClassName, "__clear-button-wrapper--hidden"))
      }, this.renderClearButton(_objectSpread({
        clearButtonColor: clearButtonColor,
        clearButtonStyle: clearButtonStyle,
        clearButtonSize: clearButtonSize
      }, getClearButtonClassNames(props))));
    }
  }, {
    key: "renderClearButton",
    value: function renderClearButton(config) {
      var clearButtonColor = config.clearButtonColor,
        clearButtonStyle = config.clearButtonStyle,
        clearButtonClassName = config.clearButtonClassName,
        clearButtonSize = config.clearButtonSize;
      var svgProps = {};
      var tabIndex = this.props.acceptClearToolFocus ? 0 : -1;
      if (clearButtonColor) {
        svgProps.fill = clearButtonColor;
      }
      if (clearButtonSize) {
        if (Array.isArray(clearButtonSize)) {
          svgProps.width = clearButtonSize[0];
          svgProps.height = clearButtonSize[1];
        } else {
          svgProps.width = clearButtonSize;
          svgProps.height = clearButtonSize;
        }
      }
      return _react.default.createElement("button", {
        key: "clearButton",
        type: "button",
        onClick: this.handleClearButtonClick,
        onMouseDown: preventDefault,
        className: clearButtonClassName,
        style: _objectSpread({}, clearButtonStyle),
        tabIndex: tabIndex
      }, this.renderClearIcon(svgProps));
    }
  }, {
    key: "onClick",
    value: function onClick(event) {
      if (!this.state.focused) {
        this.focus();
      }
      if (this.props.wrapperProps && this.props.wrapperProps.onClick) {
        this.props.wrapperProps.onClick(event);
      }
    }
  }, {
    key: "onBlur",
    value: function onBlur(event) {
      this.setState({
        focused: false
      });
      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus(event) {
      this.setState({
        focused: true
      });
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }]);
  return TextInput;
}(_react.Component);
TextInput.defaultProps = {
  hidden: false,
  type: 'text',
  theme: 'default-light',
  rootClassName: 'inovua-react-toolkit-text-input',
  enableClearButton: true,
  clearButtonSize: 10,
  stopChangePropagation: true,
  acceptClearToolFocus: false
};
TextInput.propTypes = {
  type: _propTypes.default.string,
  theme: _propTypes.default.string,
  name: _propTypes.default.string,
  placeholder: _propTypes.default.string,
  autoFocus: _propTypes.default.bool,
  maxLength: _propTypes.default.number,
  size: _propTypes.default.number,
  minLength: _propTypes.default.number,
  required: _propTypes.default.bool,
  readOnly: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  hidden: _propTypes.default.bool,
  stopChangePropagation: _propTypes.default.bool,
  enableClearButton: _propTypes.default.bool,
  acceptClearToolFocus: _propTypes.default.bool,
  rtl: _propTypes.default.bool,
  rootClassName: _propTypes.default.string,
  clearButtonSize: _propTypes.default.number,
  clearButtonColor: _propTypes.default.string,
  clearButtonStyle: _propTypes.default.object,
  clearButtonClassName: _propTypes.default.string,
  renderClearIcon: _propTypes.default.func
};
var _default = TextInput;
exports.default = _default;