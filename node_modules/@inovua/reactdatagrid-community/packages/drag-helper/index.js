/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _regionAlign = _interopRequireDefault(require("../region-align"));
var _once = _interopRequireDefault(require("./utils/once"));
var _isMobile = _interopRequireDefault(require("../isMobile"));
var _getGlobal = require("../../getGlobal");
var globalObject = (0, _getGlobal.getGlobal)();
var Helper = function Helper(config) {
  this.config = config;
};
var getEvents = function getEvents(mobile) {
  return {
    move: mobile ? 'touchmove' : 'mousemove',
    up: mobile ? 'touchend' : 'mouseup'
  };
};
function getPageCoords(event, mobile) {
  var firstTouch;
  var pageX = event.pageX;
  var pageY = event.pageY;
  if (mobile && event.touches && (firstTouch = event.touches[0])) {
    pageX = firstTouch.pageX;
    pageY = firstTouch.pageY;
  }
  return {
    pageX: pageX,
    pageY: pageY
  };
}
Object.assign(Helper.prototype, {
  initDrag: function initDrag(event) {
    this.onDragInit(event);
    var mobile = this.config.mobile;
    if (mobile === undefined) {
      mobile = _isMobile.default;
    }
    var events = this.config.events || getEvents(mobile);
    var onDragStart = (0, _once.default)(this.onDragStart, this);
    var target = mobile ? event.target : globalObject;
    var mouseUpListener = function (event) {
      this.onDrop(event);
      target && target.removeEventListener(events.move, mouseMoveListener);
      target && target.removeEventListener(events.up, mouseUpListener);
    }.bind(this);
    var mouseMoveListener = function (event) {
      if (!mobile && event.which !== 1) {
        mouseUpListener(event);
        return;
      }
      onDragStart(event, mobile);
      this.onDrag(event, mobile);
    }.bind(this);
    target && target.addEventListener(events.move, mouseMoveListener, false);
    target && target.addEventListener(events.up, mouseUpListener);
  },
  onDragInit: function onDragInit(event) {
    var config = {
      diff: {
        left: 0,
        top: 0
      }
    };
    this.state = {
      config: config
    };
    if (this.config.region) {
      this.state.initialRegion = _regionAlign.default.from(this.config.region);
      this.state.dragRegion = config.dragRegion = this.state.initialRegion.clone();
    }
    if (this.config.constrainTo) {
      this.state.constrainTo = _regionAlign.default.from(this.config.constrainTo);
    }
    this.callConfig('onDragInit', event);
  },
  onDragStart: function onDragStart(event, mobile) {
    this.state.initPageCoords = getPageCoords(event, mobile);
    this.state.didDrag = this.state.config.didDrag = true;
    this.callConfig('onDragStart', event);
  },
  onDrag: function onDrag(event, mobile) {
    var config = this.state.config;
    var initPageCoords = this.state.initPageCoords;
    var eventCoords = getPageCoords(event, mobile);
    var diff = config.diff = {
      left: eventCoords.pageX - initPageCoords.pageX,
      top: eventCoords.pageY - initPageCoords.pageY
    };
    if (this.state.initialRegion) {
      var dragRegion = config.dragRegion;
      dragRegion.set(this.state.initialRegion);
      dragRegion.shift(diff);
      if (this.state.constrainTo) {
        diff.left = dragRegion.left - this.state.initialRegion.left;
        diff.top = dragRegion.top - this.state.initialRegion.top;
      }
      config.dragRegion = dragRegion;
    }
    this.callConfig('onDrag', event);
  },
  onDrop: function onDrop(event) {
    this.callConfig('onDrop', event);
    this.state = null;
  },
  callConfig: function callConfig(fnName, event) {
    var config = this.state.config;
    var args = [event, config];
    var fn = this.config[fnName];
    if (fn) {
      fn.apply(this, args);
    }
  }
});
function _default(event, config) {
  if (config.scope) {
    var skippedKeys = {
      scope: 1,
      region: 1,
      constrainTo: 1
    };
    Object.keys(config).forEach(function (key) {
      var value = config[key];
      if (key in skippedKeys) {
        return;
      }
      if (typeof value == 'function') {
        config[key] = value.bind(config.scope);
      }
    });
  }
  var helper = new Helper(config);
  helper.initDrag(event);
  return helper;
}