/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Component, HTMLAttributes } from 'react';
import PropTypes from 'prop-types';
import cleanProps from '../../../packages/react-clean-props';
import isMobile from '../../../packages/isMobile';
import smoothScrollTo from '../../../packages/smoothScrollTo';
import scrollPage from '../../../packages/scrollPage';
import getScrollbarWidth from '../../../packages/getScrollbarWidth';
type ScrollContainerProps = {
    rtl?: boolean;
    theme?: string;
    autoHide?: boolean;
    inertialScroll?: boolean;
    inlineBlock?: boolean;
    usePassiveScroll?: boolean;
    viewStyle?: ElementCSSInlineStyle;
    viewClassName?: string;
    tagName?: string;
    scrollThumbStyle?: ElementCSSInlineStyle;
    showScrollbars?: boolean;
} & HTMLAttributes<HTMLElement>;
export default class InovuaScrollContainer extends Component<ScrollContainerProps> {
    scrollerScrollSize: {
        width?: number;
        height?: number;
    };
    scrollerClientSize: {
        width?: number;
        height?: number;
    };
    refScroller?: any;
    scrollerNode?: any;
    constructor(props: ScrollContainerProps);
    onWrapperScroll(event: any): void;
    setupWrapperPassiveScrollListener(node: any): void;
    removeWrapperPassiveScrollListener(node?: any): void;
    setupPassiveScrollListener(node: any): void;
    removePassiveScrollListener(node?: any): void;
    componentWillUnmount(): void;
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): any;
    ensureNonStaticStyle(style: any, domNode: any): any;
    render(): JSX.Element;
    onMouseEnter(event: any): void;
    onMouseLeave(): void;
    onViewResize(size: any): void;
    onResize(size: any): void;
    getDOMNode(): any;
    set scrollTop(value: any);
    set scrollLeft(value: any);
    get scrollTop(): any;
    get scrollLeft(): any;
    getScrollPosition(): any;
    get scrollTopMax(): number;
    get scrollLeftMax(): number;
    renderScrollbars(): any[];
    getEmptyScrollOffset(): any;
    renderScrollbar(orientation: any, scrollbars: any): JSX.Element | null;
    onScrollbarStartDrag(orientation: any): void;
    onScrollbarStopDrag(orientation: any): void;
    focus(): void;
    onScrollbarWheelScroll(orientation: any, delta: any): void;
    onScrollbarPageScroll(orientation: any, direction: any): void;
    scrollPage(orientation: any, direction: any): void;
    scrollHorizontalPage(direction: any): void;
    scrollVerticalPage(direction: any): void;
    smoothScrollTo(newValue: any, cfg: any, callback: any): void;
    onScrollThumbScrollTop(pos: any): void;
    onScrollThumbScrollLeft(pos: any): void;
    getScrollerNode(): any;
    getScrollerChild(): any;
    getTrackSize(): any;
    getScrollSize(): any;
    getClientSize(): any;
    getScrollbars(): {
        vertical: boolean;
        horizontal: boolean;
    };
    rafSync(callback: any): void;
    sync(): void;
    hasScrollbar(orientation: any): any;
    hasVerticalScrollbar(): any;
    hasHorizontalScrollbar(): any;
    computeScrollWithThreshold: (scrollTop: number, scrollThreshold: number | string, scrollMaxDelta: number) => boolean;
    onScroll(event: any): void;
    onScrollDebounce(eventTarget: any): void;
    getContainerTargetNode(): any;
    lazyShowScrollbars(): void;
    applyCSSContainOnScrollUpdate: (bool: any) => void;
    onStop(scrollPos: any, prevScrollPos: any, eventTarget: any): void;
    showScrollbars(): void;
    checkAllowedScrollbars(): {
        vertical: boolean;
        horizontal: boolean;
    };
    setScrollbarsVisible(scrollbars: any): void;
    hideScrollbars(): void;
}
declare const propTypes: {
    alwaysShowTrack: PropTypes.Requireable<boolean>;
    avoidScrollTopBrowserLayout: PropTypes.Requireable<boolean>;
    applyCSSContainOnScroll: PropTypes.Requireable<boolean>;
    avoidRepaintOnScroll: PropTypes.Requireable<boolean>;
    autoHide: PropTypes.Requireable<boolean>;
    cancelPrevScrollRaf: PropTypes.Requireable<boolean>;
    dragToScroll: PropTypes.Requireable<boolean>;
    display: PropTypes.Requireable<string>;
    checkResizeDelay: PropTypes.Requireable<number>;
    emptyScrollOffset: PropTypes.Requireable<number>;
    factory: PropTypes.Requireable<(...args: any[]) => any>;
    nativeScroll: PropTypes.Requireable<boolean>;
    forceNonStaticPosition: PropTypes.Requireable<boolean>;
    hideDelay: PropTypes.Requireable<number>;
    getClientSize: PropTypes.Requireable<(...args: any[]) => any>;
    getScrollSize: PropTypes.Requireable<(...args: any[]) => any>;
    getTrackSize: PropTypes.Requireable<(...args: any[]) => any>;
    getScrollerNodeClientSize: PropTypes.Requireable<(...args: any[]) => any>;
    hideTransitionDuration: PropTypes.Requireable<string>;
    hideNativeScrollbarIfPossible: PropTypes.Requireable<boolean>;
    inertialScroll: PropTypes.Requireable<boolean>;
    rtl: PropTypes.Requireable<boolean>;
    inlineBlock: PropTypes.Requireable<boolean>;
    rafOnResize: PropTypes.Requireable<boolean>;
    contain: PropTypes.Requireable<NonNullable<string | boolean | null | undefined>>;
    onContainerScroll: PropTypes.Requireable<(...args: any[]) => any>;
    onContainerScrollHorizontal: PropTypes.Requireable<(...args: any[]) => any>;
    onContainerScrollHorizontalMax: PropTypes.Requireable<(...args: any[]) => any>;
    onContainerScrollHorizontalMin: PropTypes.Requireable<(...args: any[]) => any>;
    onContainerScrollVertical: PropTypes.Requireable<(...args: any[]) => any>;
    onContainerScrollVerticalMax: PropTypes.Requireable<(...args: any[]) => any>;
    onContainerScrollVerticalMin: PropTypes.Requireable<(...args: any[]) => any>;
    onResize: PropTypes.Requireable<(...args: any[]) => any>;
    onScroll: PropTypes.Requireable<(...args: any[]) => any>;
    onScrollbarsChange: PropTypes.Requireable<(...args: any[]) => any>;
    onScrollStart: PropTypes.Requireable<(...args: any[]) => any>;
    onScrollStop: PropTypes.Requireable<(...args: any[]) => any>;
    onViewResize: PropTypes.Requireable<(...args: any[]) => any>;
    rafOnScroll: PropTypes.Requireable<boolean>;
    scrollDebounceDelay: PropTypes.Requireable<number>;
    renderScroller: PropTypes.Requireable<(...args: any[]) => any>;
    renderView: PropTypes.Requireable<(...args: any[]) => any>;
    resizer: PropTypes.Requireable<boolean>;
    scrollbars: PropTypes.Requireable<NonNullable<boolean | PropTypes.InferProps<{
        vertical: PropTypes.Requireable<boolean>;
        horizontal: PropTypes.Requireable<boolean>;
    }> | null | undefined>>;
    usePassiveScroll: PropTypes.Requireable<boolean>;
    showScrollbarsOnOver: PropTypes.Requireable<boolean>;
    onScrollbarStartDrag: PropTypes.Requireable<(...args: any[]) => any>;
    onScrollbarStopDrag: PropTypes.Requireable<(...args: any[]) => any>;
    onHorizontalScrollbarStartDrag: PropTypes.Requireable<(...args: any[]) => any>;
    onHorizontalScrollbarStopDrag: PropTypes.Requireable<(...args: any[]) => any>;
    onVerticalScrollbarStartDrag: PropTypes.Requireable<(...args: any[]) => any>;
    onVerticalScrollbarStopDrag: PropTypes.Requireable<(...args: any[]) => any>;
    scrollerStyle: PropTypes.Requireable<PropTypes.InferProps<{}>>;
    scrollStopDelay: PropTypes.Requireable<number>;
    scrollThumbMargin: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
    scrollMaxDelta: PropTypes.Requireable<number>;
    scrollThumbMinSize: PropTypes.Requireable<number>;
    scrollThumbOverWidth: PropTypes.Requireable<number>;
    scrollThumbRadius: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
    scrollThumbStartEndRespectMargin: PropTypes.Requireable<boolean>;
    scrollThumbWidth: PropTypes.Requireable<number>;
    scrollThumbStyle: PropTypes.Requireable<PropTypes.InferProps<PropTypes.ValidationMap<any>>>;
    scrollTrackOverTransitionDuration: PropTypes.Requireable<string>;
    showDelay: PropTypes.Requireable<number>;
    showTrackOnDrag: PropTypes.Requireable<boolean>;
    shouldComponentUpdate: PropTypes.Requireable<(...args: any[]) => any>;
    shouldAllowScrollbars: PropTypes.Requireable<(...args: any[]) => any>;
    showTransitionDuration: PropTypes.Requireable<string>;
    tagName: PropTypes.Requireable<string>;
    theme: PropTypes.Requireable<string>;
    scrollerResizerProps: PropTypes.Requireable<object>;
    onDidMount: PropTypes.Requireable<(...args: any[]) => any>;
    onWillUnmount: PropTypes.Requireable<(...args: any[]) => any>;
    viewClassName: PropTypes.Requireable<string>;
    viewStyle: PropTypes.Requireable<PropTypes.InferProps<{}>>;
    wrapperStyle: PropTypes.Requireable<PropTypes.InferProps<{}>>;
    ResizeObserver: PropTypes.Requireable<(...args: any[]) => any>;
    scrollThreshold: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
    showScrollbars: PropTypes.Requireable<boolean>;
};
export { propTypes, cleanProps, smoothScrollTo, scrollPage, getScrollbarWidth, isMobile, };
