/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactCleanProps = _interopRequireDefault(require("../../../../packages/react-clean-props"));
var _debounce = _interopRequireDefault(require("../../../../packages/debounce"));
var _src = _interopRequireDefault(require("../../../../packages/react-notify-resize/src"));
var _smoothScrollTo = _interopRequireDefault(require("../../../../packages/smoothScrollTo"));
var _uglified = _interopRequireDefault(require("../../../../packages/uglified"));
var _join = _interopRequireDefault(require("../../../../packages/join"));
var _isSafari = _interopRequireDefault(require("../../../../packages/isSafari"));
var _getScrollbarWidth = _interopRequireDefault(require("../../../../packages/getScrollbarWidth"));
var _getGlobal = require("../../../../getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var raf = globalObject.requestAnimationFrame;
var HAS_NEGATIVE_SCROLL;
var ua = globalObject.navigator ? globalObject.navigator.userAgent : '';
var IS_EDGE = ua.indexOf('Edge/') !== -1;
var IS_MS_BROWSER = IS_EDGE || ua.indexOf('Trident') !== -1;
var IS_IE = IS_MS_BROWSER && !IS_EDGE;
var IS_FF = ua.toLowerCase().indexOf('firefox') > -1;
var SCROLLER_Z_INDEX = 1000;
var SCROLLER_STYLE = {
  overflow: 'auto',
  position: 'static',
  flex: '1 1 auto',
  WebkitOverflowScrolling: 'auto'
};
if (IS_EDGE) {
  SCROLLER_STYLE.position = 'relative';
} else {
  SCROLLER_STYLE.zIndex = SCROLLER_Z_INDEX;
}
var _default = function _default(displayName, CONFIG) {
  var VirtualScrollContainer = function (_React$Component) {
    (0, _inherits2.default)(VirtualScrollContainer, _React$Component);
    var _super = _createSuper(VirtualScrollContainer);
    function VirtualScrollContainer(props) {
      var _this;
      (0, _classCallCheck2.default)(this, VirtualScrollContainer);
      _this = _super.call(this, props);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function () {
        if (_this.props.onResize) {
          var _this$props;
          (_this$props = _this.props).onResize.apply(_this$props, arguments);
        }
        _this.sync();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sync", function () {
        if (!_this.domNode) {
          return;
        }
        CONFIG.sync.call((0, _assertThisInitialized2.default)(_this));
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "smoothScrollTo", function (newValue, config, callback) {
        (0, _smoothScrollTo.default)(_this.scroller, newValue, config, callback);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollbars", function () {
        return {
          horizontal: _this.hasHorizontalScrollbar(),
          vertical: _this.hasVerticalScrollbar()
        };
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasScrollbar", function (orientation) {
        return CONFIG.hasScrollbar.call((0, _assertThisInitialized2.default)(_this), orientation);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasVerticalScrollbar", function () {
        return _this.hasScrollbar('vertical');
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasHorizontalScrollbar", function () {
        return _this.hasScrollbar('horizontal');
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focus", function () {
        _this.scroller.focus();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function (event) {
        if (event.target === _this.domNode) {
          _this.focus();
        }
        if (_this.props.onFocus) {
          _this.props.onFocus(event);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onChildResize", function (scrollSize) {
        _this.setState({
          scrollSize: scrollSize
        }, _this.sync);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollPosition", function () {
        return CONFIG.getScrollPosition.call((0, _assertThisInitialized2.default)(_this));
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateScrollStyle", function (scrollPos) {
        scrollPos = scrollPos || _this.getScrollPosition();
        var _scrollPos = scrollPos,
          scrollTop = _scrollPos.scrollTop;
        var _scrollPos2 = scrollPos,
          scrollLeft = _scrollPos2.scrollLeft;
        if (_this.props.rtl && scrollLeft < 0) {
          HAS_NEGATIVE_SCROLL = true;
        }
        var node = _this.childNode.current ? _this.childNode.current.firstChild : null;
        if (_this.props.rtl) {
          if (!HAS_NEGATIVE_SCROLL) {
            if (IS_MS_BROWSER) {
              scrollLeft = -scrollLeft;
            } else {
              scrollLeft = -(_this.scrollLeftMax - scrollLeft);
            }
          }
        }
        if (_this.props.applyScrollStyle) {
          _this.props.applyScrollStyle({
            scrollLeft: scrollLeft,
            scrollTop: scrollTop
          }, node);
        } else {
          node.style.top = "".concat(-scrollTop, "px");
          node.style.left = "".concat(-scrollLeft, "px");
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNotifyResizeMount", function () {
        _this.notifierMounted = true;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBefore", function () {
        var before = _this.props.before;
        if (!before) {
          return null;
        }
        return _react.default.cloneElement(before, {
          key: 'before',
          style: _objectSpread({
            position: 'absolute',
            top: 0,
            zIndex: 2 * SCROLLER_Z_INDEX + 1
          }, before.props.style),
          children: _react.default.createElement(_react.default.Fragment, null, before.props.children, _react.default.createElement(_src.default, {
            notifyOnMount: true,
            onResize: _this.onBeforeElementResize
          }))
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfter", function () {
        var after = _this.props.after;
        if (!after) {
          return null;
        }
        var bottom = _this.props.nativeScroll ? _this.oldScrollbars && _this.oldScrollbars.horizontal ? (0, _getScrollbarWidth.default)() : 0 : 0;
        return _react.default.cloneElement(after, {
          key: 'after',
          style: _objectSpread(_objectSpread({
            position: 'absolute',
            zIndex: 2 * SCROLLER_Z_INDEX + 1
          }, after.props.style), {}, {
            bottom: bottom
          }),
          children: _react.default.createElement(_react.default.Fragment, null, after.props.children, _react.default.createElement(_src.default, {
            notifyOnMount: true,
            onResize: _this.onAfterElementResize
          }))
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBeforeHeight", function () {
        return _this.props.before ? _this.state.beforeElementSize.height || 0 : 0;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfterHeight", function () {
        return _this.props.after ? _this.state.afterElementSize.height || 0 : 0;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onBeforeElementResize", function (size) {
        _this.setState({
          beforeElementSize: size
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onAfterElementResize", function (size) {
        _this.setState({
          afterElementSize: size
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollIntoView", function (_ref) {
        var target = _ref.target;
        if (target === _this.childNode.current) {
          if (target.scrollTop !== 0) {
            _this.scrollTop += target.scrollTop;
            target.scrollTop = 0;
          }
          if (target.scrollLeft !== 0) {
            _this.scrollLeft += target.scrollLeft;
            target.scrollLeft = 0;
          }
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollIntent", function () {
        if (!_this.wheelCapturedOnScroller || IS_EDGE) {
          return;
        }
        _this.clear();
        _this.lazyRestorePointerEvents();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lazyRestorePointerEvents", function () {
        if (_this.childNode.current && _this.wheelCapturedOnScroller) {
          _this.clear();
          _this.rafHandle = raf(function () {
            _this.wheelCapturedOnScroller = false;
            delete _this.rafHandle;
            _this.childNode.current.style.pointerEvents = 'auto';
          });
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onWheelEvent", function (event) {
        if ((0, _isSafari.default)() && globalObject.WheelEvent) {
          _this.scrollerNode.dispatchEvent(new WheelEvent('wheel', event.nativeEvent));
          event.stopPropagation();
          event.preventDefault();
          return;
        }
        _this.childNode.current.style.pointerEvents = 'none';
        _this.wheelCapturedOnScroller = true;
        event.stopPropagation();
        var isProbablyChrome = !IS_MS_BROWSER && !IS_FF && !(0, _isSafari.default)();
        var now = Date.now ? Date.now() : +new Date();
        if (isProbablyChrome) {
          if (now - _this.wheelEventTimestamp < 150) {
            event.preventDefault();
          }
        } else {
          event.preventDefault();
        }
        _this.wheelEventTimestamp = now;
        _this.onScrollIntent();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "clear", function () {
        if (_this.rafHandle) {
          cancelAnimationFrame(_this.rafHandle);
          _this.rafHandle = null;
        }
      });
      _this.wheelEventTimestamp = 0;
      _this.lazyRestorePointerEvents = (0, _debounce.default)(_this.lazyRestorePointerEvents, props.pointerEventsRestoreDelay, {
        leading: false,
        trailing: true
      });
      _this.childNode = (0, _react.createRef)();
      _this.refThis = function (c) {
        _this.domNode = c;
      };
      if (CONFIG.init) {
        CONFIG.init.call((0, _assertThisInitialized2.default)(_this), props);
      }
      _this.state = {
        beforeElementSize: {
          height: 0
        },
        afterElementSize: {
          height: 0
        }
      };
      return _this;
    }
    (0, _createClass2.default)(VirtualScrollContainer, [{
      key: "ensureNonStaticStyle",
      value: function ensureNonStaticStyle(style, domNode) {
        if (!this.props.forceNonStaticPosition) {
          return style;
        }
        style = style || {};
        var _style = style,
          position = _style.position;
        var nonStatic = position === 'relative' || position === 'absolute';
        if (nonStatic) {
          return style;
        }
        if (domNode) {
          position = globalObject.getComputedStyle(domNode).position;
          nonStatic = position === 'relative' || position === 'absolute';
          if (!nonStatic) {
            return Object.assign({}, style, {
              position: 'relative'
            });
          }
        }
        return Object.assign({}, style, {
          position: 'relative'
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.showWarnings) {
          if (!this.props.scrollSize) {
            if (!this.notifierMounted) {
              console.warn("The component inside the ".concat(displayName, " has not rendered its children. Please either render its children, or specify a 'scrollSize' prop to determine the size of the scrolling content."));
            }
          }
          if (!this.props.forceNonStaticPosition && getComputedStyle(this.domNode).position === 'static') {
            console.warn("".concat(displayName, " has position: \"static\". It should have a non-static position!"));
          }
        }
        var contentNode = this.childNode.current ? this.childNode.current.firstChild : null;
        if (contentNode) {
          contentNode.style.willChange = 'transform';
        }
        if (this.props.rtl && !this.scrollLeft) {
          this.updateScrollStyle();
        }
        this.sync();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevScrollSize = prevProps.scrollSize;
        var scrollSize = this.props.scrollSize;
        if (prevScrollSize && !scrollSize) {
          this.sync();
        } else if (prevScrollSize && scrollSize) {
          if (prevScrollSize.width !== scrollSize.width || prevScrollSize.height !== scrollSize.height) {
            this.sync();
          }
        }
      }
    }, {
      key: "clientSize",
      get: function get() {
        return CONFIG.getClientSize.call(this);
      }
    }, {
      key: "scrollTopMax",
      get: function get() {
        return CONFIG.getScrollTopMax.call(this);
      }
    }, {
      key: "scrollLeftMax",
      get: function get() {
        return CONFIG.getScrollLeftMax.call(this);
      }
    }, {
      key: "scrollTop",
      get: function get() {
        return this.scroller.scrollTop;
      },
      set: function set(value) {
        this.scroller.scrollTop = value;
      }
    }, {
      key: "scrollLeft",
      get: function get() {
        return this.scroller.scrollLeft;
      },
      set: function set(value) {
        this.scroller.scrollLeft = value;
      }
    }, {
      key: "render",
      value: function render() {
        var props = this.props;
        var style = props.style,
          className = props.className;
        var rtl = props.rtl,
          inertialScroll = props.inertialScroll,
          useWheelCapture = props.useWheelCapture,
          contain = props.contain,
          renderView = props.renderView;
        style = Object.assign({}, this.ensureNonStaticStyle(style, this.domNode), {
          overflow: 'hidden',
          display: 'flex',
          alignItems: 'stretch',
          alignContent: 'stretch',
          flexFlow: 'column',
          flexWrap: 'nowrap',
          transform: 'translate3d(0px, 0px, 0px)'
        });
        if (contain) {
          if (contain === true) {
            style.contain = 'style layout paint';
          } else {
            style.contain = contain;
          }
        }
        className = (0, _join.default)(className, 'inovua-react-virtual-scroll-container', rtl && 'inovua-react-virtual-scroll-container--rtl');
        if (CONFIG.prepareClassName) {
          className = CONFIG.prepareClassName.call(this, className);
        }
        var content = _react.default.Children.only(props.children);
        var newContentProps = {};
        if (!this.props.scrollSize) {
          newContentProps.children = [_react.default.createElement(_src.default, {
            key: "notify-resize",
            onResize: this.onChildResize,
            notifyOnMount: true,
            ResizeObserver: this.props.ResizeObserver,
            useRaf: this.props.rafOnResize,
            checkResizeDelay: this.props.checkResizeDelay,
            onMount: this.onNotifyResizeMount
          }), content.props.children];
        }
        newContentProps.style = Object.assign({}, content.props.style, (0, _defineProperty2.default)({
          position: 'absolute',
          top: 0
        }, rtl ? 'right' : 'left', 0));
        var beforeHeight = this.getBeforeHeight();
        var useAbsolutePosition = IS_IE || IS_FF;
        var childStyle = {
          overflow: 'hidden',
          position: useAbsolutePosition ? 'absolute' : 'fixed',
          top: beforeHeight,
          left: 0,
          right: 0,
          bottom: 0
        };
        if (!useAbsolutePosition) {
          childStyle.backfaceVisibility = 'hidden';
          if ((0, _isSafari.default)()) {
            childStyle.WebkitBackfaceVisibility = 'hidden';
          }
        }
        if (!IS_EDGE) {
          childStyle.zIndex = 2 * SCROLLER_Z_INDEX;
        }
        var domProps = (0, _defineProperty2.default)({
          ref: this.childNode,
          style: childStyle,
          onScroll: this.scrollIntoView
        }, useWheelCapture ? 'onWheelCapture' : 'onWheel', IS_EDGE ? null : this.onWheelEvent);
        content = _react.default.createElement(_react.default.Fragment, null, this.getBefore(), _react.default.createElement("div", _objectSpread({
          key: "content"
        }, domProps), (0, _react.cloneElement)(content, newContentProps)), this.getAfter());
        var scrollSize = this.props.scrollSize || this.state.scrollSize;
        var afterHeight = this.getAfterHeight();
        var extraHeight = beforeHeight + afterHeight;
        if (extraHeight && scrollSize) {
          scrollSize = Object.assign({}, scrollSize, {
            height: scrollSize.height + extraHeight
          });
        }
        var spacer = _react.default.createElement("div", {
          "data-name": "spacer",
          key: "spacer",
          style: Object.assign({
            pointerEvents: 'none'
          }, scrollSize)
        });
        if (this.props.renderSpacer) {
          spacer = this.props.renderSpacer(spacer, {
            scrollSize: scrollSize
          });
        }
        var scrollerStyle = inertialScroll ? Object.assign({}, SCROLLER_STYLE, {
          WebkitOverflowScrolling: 'touch'
        }) : SCROLLER_STYLE;
        return _react.default.createElement("div", _objectSpread(_objectSpread({
          tabIndex: -1
        }, (0, _reactCleanProps.default)(this.props, this.constructor.propTypes)), {}, {
          onFocus: this.onFocus,
          style: style,
          className: className,
          ref: this.refThis
        }), _react.default.createElement(_src.default, {
          onResize: this.onResize,
          notifyOnMount: true,
          ResizeObserver: this.props.ResizeObserver,
          useRaf: this.props.rafOnResize,
          checkResizeDelay: this.props.checkResizeDelay,
          measureSize: this.props.measureSize
        }), CONFIG.renderScroller.call(this, {
          props: props,
          content: content,
          spacer: spacer,
          scrollerStyle: scrollerStyle,
          renderView: renderView
        }));
      }
    }]);
    return VirtualScrollContainer;
  }(_react.default.Component);
  VirtualScrollContainer.propTypes = {
    applyScrollStyle: _propTypes.default.func,
    avoidRepaintOnScroll: _propTypes.default.bool,
    forceNonStaticPosition: _propTypes.default.bool,
    hideNativeScrollbarIfPossible: _propTypes.default.bool,
    inertialScroll: _propTypes.default.bool,
    measureSize: _propTypes.default.func,
    onResize: _propTypes.default.func,
    contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    onScrollbarsChange: _propTypes.default.func,
    pointerEventsRestoreDelay: _propTypes.default.number,
    checkResizeDelay: _propTypes.default.number,
    rafOnResize: _propTypes.default.bool,
    rtl: _propTypes.default.bool,
    scrollSize: _propTypes.default.shape({
      height: _propTypes.default.number,
      width: _propTypes.default.number
    }),
    scrollerStyle: _propTypes.default.shape({}),
    viewStyle: _propTypes.default.shape({}),
    showWarnings: _propTypes.default.bool,
    useWheelCapture: _propTypes.default.bool
  };
  VirtualScrollContainer.defaultProps = {
    avoidRepaintOnScroll: true,
    inertialScroll: true,
    rtl: false,
    rafOnResize: true,
    useWheelCapture: true,
    forceNonStaticPosition: false,
    pointerEventsRestoreDelay: 250,
    showWarnings: !_uglified.default
  };
  return VirtualScrollContainer;
};
exports.default = _default;