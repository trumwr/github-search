/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _src = require("../../../../packages/react-scroll-container-pro/src");
var _debounce = _interopRequireDefault(require("../../../../packages/debounce"));
var _getScrollbarWidth = _interopRequireDefault(require("../../../../packages/getScrollbarWidth"));
var _isSafari = _interopRequireDefault(require("../../../../packages/isSafari"));
var _ScrollerFactory = _interopRequireDefault(require("./ScrollerFactory"));
var _getGlobal = require("../../../../getGlobal");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var globalObject = (0, _getGlobal.getGlobal)();
var raf = globalObject.requestAnimationFrame;
var emptyObject = {};
var SCROLLBAR_WIDTH = (0, _getScrollbarWidth.default)();
var onScrollbarsChange = function onScrollbarsChange(scrollbars) {
  if (SCROLLBAR_WIDTH) {
    var style = this.childNode.style;
    var rtl = this.props.rtl;
    var right = scrollbars.vertical ? SCROLLBAR_WIDTH : 0;
    var bottom = scrollbars.horizontal ? SCROLLBAR_WIDTH : 0;
    style ? style[rtl && !(0, _isSafari.default)() ? 'left' : 'right'] = "".concat(right, "px") : null;
    style ? style.bottom = "".concat(bottom, "px") : null;
  }
  if (this.props.onScrollbarsChange) {
    this.props.onScrollbarsChange(scrollbars);
  }
};
var onStop = function onStop(scrollPos, prevScrollPos) {
  this.scrollStarted = false;
  if (this.props.onScrollStop) {
    this.props.onScrollStop(scrollPos, prevScrollPos);
  }
};
var onScroll = function onScroll(_ref) {
  var target = _ref.target;
  var _this$props = this.props,
    onScrollStart = _this$props.onScrollStart,
    onScrollStop = _this$props.onScrollStop;
  var startStop = !!(onScrollStart || onScrollStop);
  var scrollTop = target.scrollTop,
    scrollLeft = target.scrollLeft;
  var scrollPos = {
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  };
  var prevScrollPos = this.currentScrollPosition || emptyObject;
  var prevScrollTop = prevScrollPos.scrollTop,
    prevScrollLeft = prevScrollPos.scrollLeft;
  if (startStop) {
    if (!this.scrollStarted) {
      if (onScrollStart) {
        onScrollStart(scrollPos, prevScrollPos);
      }
    }
  }
  var scrollVertical = false;
  var scrollHorizontal = false;
  if (this.props.onContainerScroll) {
    this.props.onContainerScroll(scrollPos, prevScrollPos);
  }
  var scrollTopChange = scrollTop !== prevScrollTop;
  if (scrollTopChange) {
    scrollVertical = true;
    if (this.props.onContainerScrollVertical) {
      this.props.onContainerScrollVertical(scrollTop, prevScrollTop);
    }
    if (this.props.onContainerScrollVerticalMin && scrollTop === 0) {
      this.props.onContainerScrollVerticalMin(0);
    }
    if (this.props.onContainerScrollVerticalMax && scrollTop === this.scrollTopMax) {
      this.props.onContainerScrollVerticalMax(scrollTop);
    }
  }
  var scrollLeftChange = scrollLeft !== prevScrollLeft;
  if (scrollLeftChange) {
    scrollHorizontal = true;
    if (this.props.onContainerScrollHorizontal) {
      this.props.onContainerScrollHorizontal(scrollLeft, prevScrollLeft);
    }
    if (this.props.onContainerScrollHorizontalMin && scrollLeft === 0) {
      this.props.onContainerScrollHorizontalMin(0);
    }
    if (this.props.onContainerScrollHorizontalMax && scrollLeft === this.scrollLeftMax) {
      this.props.onContainerScrollHorizontalMax(scrollLeft);
    }
  }
  if (startStop && (scrollTopChange || scrollLeftChange)) {
    if (!this.scrollStarted || this.scrollStarted.vertical !== scrollVertical || this.scrollStarted.horizontal !== scrollHorizontal) {
      this.scrollStarted = {
        horizontal: scrollHorizontal,
        vertical: scrollVertical
      };
    }
    this.onStop(scrollPos, prevScrollPos);
  }
  this.currentScrollPosition = scrollPos;
};
var InovuaNativeScrollContainer = (0, _ScrollerFactory.default)('InovuaNativeScrollContainer', {
  init: function init(props) {
    var _this = this;
    this.refScroller = function (s) {
      _this.scroller = s;
    };
    this.onStop = (0, _debounce.default)(onStop.bind(this), props.scrollStopDelay, {
      leading: false
    });
    this.onScrollerScroll = function (event) {
      if (event.target === _this.scroller) {
        raf(function () {
          _this.updateScrollStyle();
        });
        onScroll.call(_this, event);
        _this.onScrollIntent();
      }
      if (_this.props.onScroll) {
        _this.props.onScroll(event);
      }
    };
  },
  prepareClassName: function prepareClassName(className) {
    return "".concat(className, " inovua-react-virtual-scroll-container--native");
  },
  sync: function sync() {
    if (!this.oldScrollbars) {
      this.oldScrollbars = this.getScrollbars();
      return;
    }
    var scrollbars = this.getScrollbars();
    if (scrollbars.vertical !== this.oldScrollbars.vertical || scrollbars.horizontal !== this.oldScrollbars.horizontal) {
      onScrollbarsChange.call(this, scrollbars);
    }
    this.oldScrollbars = scrollbars;
  },
  getClientSize: function getClientSize() {
    var scroller = this.scroller;
    return {
      height: scroller.clientHeight,
      width: scroller.clientWidth
    };
  },
  hasScrollbar: function hasScrollbar(orientation) {
    var scroller = this.scroller;
    return orientation === 'horizontal' ? scroller.scrollWidth > scroller.clientWidth : scroller.scrollHeight > scroller.clientHeight;
  },
  getScrollLeftMax: function getScrollLeftMax() {
    var scroller = this.scroller;
    return scroller.scrollWidth - scroller.clientWidth;
  },
  getScrollTopMax: function getScrollTopMax() {
    var scroller = this.scroller;
    return scroller.scrollHeight - scroller.clientHeight;
  },
  getScrollPosition: function getScrollPosition() {
    return {
      scrollTop: this.scrollTop,
      scrollLeft: this.scrollLeft
    };
  },
  renderScroller: function renderScroller(_ref2) {
    var content = _ref2.content,
      spacer = _ref2.spacer,
      scrollerStyle = _ref2.scrollerStyle,
      props = _ref2.props;
    var renderScroller = props.renderScroller;
    var className = 'inovua-react-virtual-scroll-container__scroll-container';
    if (props.avoidRepaintOnScroll) {
      className += " ".concat(className, "--avoid-repaint");
    }
    var domProps = {
      key: 'scroller',
      tabIndex: -1,
      onScroll: this.onScrollerScroll,
      ref: this.refScroller,
      style: scrollerStyle,
      className: className,
      children: [content, spacer]
    };
    var result = typeof renderScroller === 'function' ? renderScroller(domProps) : _react.default.createElement("div", _objectSpread({}, domProps));
    return result;
  }
});
InovuaNativeScrollContainer.propTypes = _objectSpread(_objectSpread({
  renderScrollerSpacer: _propTypes.default.func
}, _src.propTypes), InovuaNativeScrollContainer.propTypes);
InovuaNativeScrollContainer.defaultProps.scrollStopDelay = 150;
var _default = InovuaNativeScrollContainer;
exports.default = _default;