/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _src = _interopRequireWildcard(require("../../../../packages/react-scroll-container-pro/src"));
var _ScrollerFactory = _interopRequireDefault(require("./ScrollerFactory"));
var _getGlobal = require("../../../../getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var globalObject = (0, _getGlobal.getGlobal)();
var raf = globalObject.requestAnimationFrame;
var caf = globalObject.cancelAnimationFrame;
var VIEW_STYLE = {
  position: 'static'
};
var FLEX_1_STYLE = {
  flex: 1
};
var filterScrollerProps = function filterScrollerProps(props) {
  return Object.keys(props).reduce(function (acc, propName) {
    if (_src.propTypes[propName] !== undefined) {
      acc[propName] = props[propName];
    }
    return acc;
  }, {});
};
var InovuaVirtualScrollContainer = (0, _ScrollerFactory.default)('InovuaVirtualScrollContainer', {
  init: function init() {
    var _this = this;
    this.childScrollLeft = 0;
    this.childScrollTop = 0;
    this.refScroller = function (s) {
      _this.scroller = s;
      _this.scrollerNode = s ? s.getScrollerNode() : null;
    };
    this.onContainerScroll = function (scrollPos) {
      var scrollLeft = scrollPos.scrollLeft,
        scrollTop = scrollPos.scrollTop;
      _this.childScrollLeft = scrollLeft;
      _this.childScrollTop = scrollTop;
      if (_this.containerScrollRafId) {
        caf(_this.containerScrollRafId);
      }
      _this.containerScrollRafId = raf(function () {
        delete _this.containerScrollRafId;
        _this.updateScrollStyle(scrollPos);
      });
      if (_this.props.onContainerScroll) {
        var _this$props;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        (_this$props = _this.props).onContainerScroll.apply(_this$props, [scrollPos].concat(args));
      }
      if (_this.onScrollIntent) {
        _this.onScrollIntent();
      }
    };
  },
  sync: function sync() {
    if (!this.scroller) {
      return;
    }
    if (this.scroller.rafSync) {
      this.scroller.rafSync();
    } else if (this.scroller.sync) {
      this.scroller.sync();
    }
  },
  getClientSize: function getClientSize() {
    var scroller = this.scroller;
    return scroller.getClientSize();
  },
  hasScrollbar: function hasScrollbar(orientation) {
    return this.scroller.hasScrollbar(orientation);
  },
  getScrollLeftMax: function getScrollLeftMax() {
    var scroller = this.scroller;
    return scroller.scrollLeftMax;
  },
  getScrollTopMax: function getScrollTopMax() {
    var scroller = this.scroller;
    return scroller.scrollTopMax;
  },
  getScrollPosition: function getScrollPosition() {
    return {
      scrollTop: this.childScrollTop,
      scrollLeft: this.childScrollLeft
    };
  },
  renderScroller: function renderScroller(_ref) {
    var props = _ref.props,
      content = _ref.content,
      spacer = _ref.spacer,
      scrollerStyle = _ref.scrollerStyle,
      renderView = _ref.renderView,
      viewStyle = _ref.viewStyle;
    var className = 'inovua-react-virtual-scroll-container__scroll-container';
    if (props.avoidRepaintOnScroll) {
      className += " ".concat(className, "--avoid-repaint");
    }
    return _react.default.createElement(_src.default, _objectSpread(_objectSpread({}, filterScrollerProps(props)), {}, {
      onContainerScroll: this.onContainerScroll,
      ref: this.refScroller,
      style: FLEX_1_STYLE,
      className: className,
      scrollerStyle: scrollerStyle,
      renderView: renderView,
      viewStyle: viewStyle ? Object.assign({}, VIEW_STYLE, viewStyle) : VIEW_STYLE,
      resizer: false
    }), content, spacer);
  }
});
InovuaVirtualScrollContainer.propTypes = Object.assign({
  renderSpacer: _propTypes.default.func,
  renderScrollerSpacer: _propTypes.default.func
}, _src.propTypes, InovuaVirtualScrollContainer.propTypes);
var _default = InovuaVirtualScrollContainer;
exports.default = _default;