/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
Object.defineProperty(exports, "getScrollbarWidth", {
  enumerable: true,
  get: function get() {
    return _getScrollbarWidth.default;
  }
});
Object.defineProperty(exports, "isMobile", {
  enumerable: true,
  get: function get() {
    return _isMobile.default;
  }
});
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _src = _interopRequireDefault(require("../../react-scroll-container-pro/src"));
var _reactCleanProps = _interopRequireDefault(require("../../react-clean-props"));
var _hasSticky = require("../../hasSticky");
var _smoothScrollTo = _interopRequireDefault(require("../../smoothScrollTo"));
var _isMobile = _interopRequireDefault(require("../../isMobile"));
var _getScrollbarWidth = _interopRequireDefault(require("../../getScrollbarWidth"));
var _join = _interopRequireDefault(require("../../join"));
var _isSafari = _interopRequireDefault(require("../../isSafari"));
var _src2 = _interopRequireDefault(require("../../react-notify-resize/src"));
var _getGlobal = require("../../../getGlobal");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var STICKY_STYLE = {
  position: _hasSticky.sticky,
  top: 0,
  left: 0
};
var WRAPPER_STYLE = {
  display: 'block',
  position: 'absolute',
  flex: '',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0
};
var ua = globalObject.navigator ? globalObject.navigator.userAgent : '';
var IS_EDGE = ua.indexOf('Edge/') !== -1;
var StickyVirtualScrollContainer = function (_React$Component) {
  (0, _inherits2.default)(StickyVirtualScrollContainer, _React$Component);
  var _super = _createSuper(StickyVirtualScrollContainer);
  function StickyVirtualScrollContainer(_props) {
    var _this;
    (0, _classCallCheck2.default)(this, StickyVirtualScrollContainer);
    _this = _super.call(this, _props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "initializeScrollLeftForRtl", function () {
      var fixScrollLeft = function fixScrollLeft() {
        if (_this.scroller && _this.scrollLeftMax) {
          _this.scroller.getScrollerNode().scrollLeft = 1000000000;
          return;
        }
        requestAnimationFrame(fixScrollLeft);
      };
      requestAnimationFrame(fixScrollLeft);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function () {
      if (_this.props.onResize) {
        var _this$props;
        (_this$props = _this.props).onResize.apply(_this$props, arguments);
      }
      _this.sync();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sync", function () {
      _this.scroller.sync();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rafSync", function () {
      if (_this.scroller.rafSync) {
        _this.scroller.rafSync();
      } else {
        _this.scroller.sync();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "smoothScrollTo", function (newValue, config, callback) {
      (0, _smoothScrollTo.default)(_this.scroller, newValue, config, callback);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollbars", function () {
      return {
        horizontal: _this.hasHorizontalScrollbar(),
        vertical: _this.hasVerticalScrollbar()
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasScrollbar", function (orientation) {
      return _this.scroller.hasScrollbar.call((0, _assertThisInitialized2.default)(_this), orientation);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasVerticalScrollbar", function () {
      return _this.hasScrollbar('vertical');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasHorizontalScrollbar", function () {
      return _this.hasScrollbar('horizontal');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focus", function () {
      _this.scroller.focus();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function (event) {
      if (event.target === _this.domNode) {
        _this.focus();
      }
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getTransformNode", function () {
      return _this.viewNode.children[0].children[0];
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollSize", function () {
      var node = _this.getTransformNode();
      var size;
      if (_this.props.getScrollSize) {
        size = _this.props.getScrollSize(node);
      } else {
        size = {
          width: node.scrollWidth,
          height: node.scrollHeight
        };
      }
      return size;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollPosition", function () {
      return _this.scroller.getScrollPosition();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateScrollStyle", function (scrollPos, prevScrollPos) {
      scrollPos = scrollPos || _this.getScrollPosition();
      var _scrollPos = scrollPos,
        scrollTop = _scrollPos.scrollTop,
        scrollLeft = _scrollPos.scrollLeft,
        scrollLeftMax = _scrollPos.scrollLeftMax;
      _this.scrollLeftMaxValue = scrollLeftMax;
      if (_this.props.onContainerScroll) {
        _this.props.onContainerScroll(scrollPos, prevScrollPos);
      }
      var node = _this.getTransformNode();
      var shouldApplyDefaultTransform = true;
      if (_this.props.applyScrollStyle) {
        shouldApplyDefaultTransform = _this.props.applyScrollStyle({
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
          scrollLeftMax: scrollLeftMax
        }, node) !== false;
      }
      if (shouldApplyDefaultTransform) {
        node.style.willChange = "transform";
        node.style.backfaceVisibility = "hidden";
        if (_this.props.useTransformToScroll) {
          node.style.transform = "translate3d(".concat(-scrollLeft, "px, ").concat(-scrollTop, "px, 0px)");
        } else {
          node.style.top = "".concat(-scrollTop, "px");
          node.style.left = "".concat(-scrollLeft, "px");
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBeforeHeight", function () {
      return _this.props.before ? _this.state.beforeElementSize.height || 0 : 0;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfterHeight", function () {
      return _this.props.after ? _this.state.afterElementSize.height || 0 : 0;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBeforeAndAfterHeight", function () {
      return _this.getBeforeHeight() + _this.getAfterHeight();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onViewResize", function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var size = args[0];
      _this.setState({
        size: size
      }, function () {
        _this.rafSync();
      });
      if (_this.props.onViewResize) {
        var _this$props2;
        (_this$props2 = _this.props).onViewResize.apply(_this$props2, args);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollerSpacer", function () {
      var spacerProps = {
        key: 'spacer',
        'data-name': 'spacer--sticky-scroller',
        style: _objectSpread({
          pointerEvents: 'none',
          position: 'absolute',
          top: 0,
          left: 0
        }, _this.state.size)
      };
      var result;
      if (_this.props.renderScrollerSpacer) {
        result = _this.props.renderScrollerSpacer(spacerProps, _this.state.size);
      }
      if (result === undefined) {
        result = _react.default.createElement("div", _objectSpread({}, spacerProps));
      }
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScroller", function (scrollerProps) {
      var scrollerOffset = _this.props.nativeScroll ? 0 : -_this.getEmptyScrollOffset();
      var props = _objectSpread(_objectSpread({}, scrollerProps), {}, {
        'data-name': 'scroller',
        className: '',
        style: {
          display: 'block',
          position: 'absolute',
          WebkitOverflowScrolling: 'touch',
          top: 0,
          left: 0,
          right: scrollerOffset,
          bottom: scrollerOffset,
          overflow: _this.props.nativeScroll ? 'auto' : 'scroll'
        },
        children: [_this.props.extraChildren, scrollerProps.children, _this.renderScrollerSpacer()]
      });
      var result;
      if (_this.props.renderScroller) {
        result = _this.props.renderScroller(props);
      }
      if (result === undefined) {
        result = _react.default.createElement("div", _objectSpread({}, props));
      }
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBefore", function () {
      var before = _this.props.before;
      if (!before) {
        return null;
      }
      return _react.default.cloneElement(before, {
        style: _objectSpread({
          position: 'absolute',
          top: 0
        }, before.props.style),
        children: _react.default.createElement(_react.default.Fragment, null, before.props.children, _react.default.createElement(_src2.default, {
          notifyOnMount: true,
          onResize: _this.onBeforeElementResize
        }))
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfter", function () {
      var after = _this.props.after;
      if (!after) {
        return null;
      }
      return _react.default.cloneElement(after, {
        style: _objectSpread({
          position: 'absolute',
          bottom: 0
        }, after.props.style),
        children: _react.default.createElement(_react.default.Fragment, null, after.props.children, _react.default.createElement(_src2.default, {
          notifyOnMount: true,
          onResize: _this.onAfterElementResize
        }))
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onBeforeElementResize", function (size) {
      _this.setState({
        beforeElementSize: size
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onAfterElementResize", function (size) {
      _this.setState({
        afterElementSize: size
      });
    });
    _this.refView = function (c) {
      _this.viewNode = c ? (0, _reactDom.findDOMNode)(c) : null;
    };
    _this.refScroller = function (s) {
      _this.scroller = s;
      _this.scrollerNode = s ? s.getScrollerNode() : null;
    };
    _this.state = {
      size: {},
      beforeElementSize: {
        height: 0
      },
      afterElementSize: {
        height: 0
      }
    };
    return _this;
  }
  (0, _createClass2.default)(StickyVirtualScrollContainer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.sync();
      if (this.props.rtl) {
        this.initializeScrollLeftForRtl();
      }
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      return this.scroller.getDOMNode();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.rtl) {
        if (prevProps.rtl !== this.props.rtl || prevProps.nativeScroll !== this.props.nativeScroll) {
          this.initializeScrollLeftForRtl();
        }
      }
    }
  }, {
    key: "scrollTop",
    get: function get() {
      return this.scroller.scrollTop;
    },
    set: function set(value) {
      this.scroller.scrollTop = value;
    }
  }, {
    key: "scrollTopMax",
    get: function get() {
      return this.scroller.scrollTopMax;
    }
  }, {
    key: "scrollLeft",
    get: function get() {
      return this.scroller.scrollLeft;
    },
    set: function set(value) {
      this.scroller.scrollLeft = this.props.rtl && value < 0 ? this.scrollLeftMax + value : value;
    }
  }, {
    key: "scrollLeftMax",
    get: function get() {
      return this.scrollLeftMaxValue != null ? this.scrollLeftMaxValue : this.scroller.scrollLeftMax;
    }
  }, {
    key: "getEmptyScrollOffset",
    value: function getEmptyScrollOffset() {
      return this.props.emptyScrollOffset == null ? (0, _getScrollbarWidth.default)() : this.props.emptyScrollOffset;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var props = this.props;
      var style = props.style,
        className = props.className;
      var rtl = props.rtl,
        contain = props.contain;
      if (contain) {
        style = _objectSpread({}, style);
        if (contain === true) {
          style.contain = 'style layout paint';
        } else {
          style.contain = contain;
        }
      }
      if (this.props.rtl) {
        style = _objectSpread(_objectSpread({}, style), {}, {
          direction: 'ltr'
        });
      }
      className = (0, _join.default)(className, 'inovua-react-virtual-scroll-container', rtl && 'inovua-react-virtual-scroll-container--rtl', 'inovua-react-virtual-scroll-container--sticky-strategy');
      var stickyStyle = STICKY_STYLE;
      if (this.props.rtl) {
        stickyStyle = _objectSpread(_objectSpread({}, stickyStyle), {}, {
          direction: 'rtl'
        });
      }
      var beforeHeight = this.getBeforeHeight();
      var afterHeight = this.getAfterHeight();
      var renderView = function renderView(viewProps) {
        var viewDOMProps = {
          ref: _this2.refView,
          style: stickyStyle,
          key: 'view',
          'data-name': 'view',
          children: _react.default.createElement("div", {
            style: {
              position: 'absolute',
              minWidth: '100%',
              direction: 'ltr'
            }
          }, _react.default.createElement("div", {
            style: {
              position: 'absolute',
              overflow: 'visible',
              minWidth: '100%',
              direction: _this2.props.rtl ? 'rtl' : 'ltr'
            }
          }, viewProps.children[0], viewProps.children[1]))
        };
        var result;
        if (_this2.props.renderView) {
          result = _this2.props.renderView(viewDOMProps);
        }
        if (result === undefined) {
          result = _react.default.createElement("div", _objectSpread({}, viewDOMProps));
        }
        return result;
      };
      var cleanedProps = (0, _reactCleanProps.default)(this.props, this.constructor.propTypes);
      if (this.props.nativeScroll) {
        cleanedProps.scrollbars = false;
      }
      return _react.default.createElement(_src.default, _objectSpread(_objectSpread({
        tabIndex: -1,
        display: this.props.display || 'block',
        className: className,
        wrapperStyle: _objectSpread(_objectSpread({}, WRAPPER_STYLE), {}, {
          top: beforeHeight,
          bottom: afterHeight
        })
      }, cleanedProps), {}, {
        style: style,
        before: this.getBefore(),
        after: this.getAfter(),
        nativeScroll: this.props.nativeScroll,
        emptyScrollOffset: 0,
        getScrollSize: this.getScrollSize,
        renderScroller: this.renderScroller,
        renderView: renderView,
        onViewResize: this.onViewResize,
        onContainerScroll: this.updateScrollStyle,
        ref: this.refScroller
      }));
    }
  }]);
  return StickyVirtualScrollContainer;
}(_react.default.Component);
StickyVirtualScrollContainer.propTypes = {
  contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
  before: _propTypes.default.element,
  after: _propTypes.default.element,
  extraChildren: _propTypes.default.node,
  renderScrollerSpacer: _propTypes.default.func,
  applyScrollStyle: _propTypes.default.func,
  useTransformToScroll: _propTypes.default.bool,
  preventRtlInherit: _propTypes.default.bool
};
StickyVirtualScrollContainer.defaultProps = {
  useTransformToScroll: !IS_EDGE,
  shouldAllowScrollbars: function shouldAllowScrollbars(props, scrollbarWidth) {
    if (props.nativeScroll) {
      return false;
    }
    if (scrollbarWidth) {
      return true;
    }
    if (_isMobile.default || (0, _isSafari.default)()) {
      return false;
    }
    return true;
  }
};
var _default = StickyVirtualScrollContainer;
exports.default = _default;