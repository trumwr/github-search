/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="react" />
import getScrollbarWidth from '../../../packages/getScrollbarWidth';
import HAS_STICKY from '../../../packages/hasSticky';
import StickyScroller, { isMobile } from './StickyScroller';
declare const _default: {
    new (props: any): {
        ensureNonStaticStyle(style: any, domNode: any): any;
        componentDidMount(): void;
        componentDidUpdate(prevProps: any): void;
        onResize: (...args: any[]) => void;
        sync: () => void;
        readonly clientSize: any;
        readonly scrollTopMax: any;
        readonly scrollLeftMax: any;
        scrollTop: any;
        scrollLeft: any;
        smoothScrollTo: (newValue: any, config: any, callback: any) => void;
        getScrollbars: () => {
            horizontal: any;
            vertical: any;
        };
        hasScrollbar: (orientation: any) => any;
        hasVerticalScrollbar: () => any;
        hasHorizontalScrollbar: () => any;
        focus: () => void;
        onFocus: (event: any) => void;
        onChildResize: (scrollSize: any) => void;
        getScrollPosition: () => any;
        updateScrollStyle: (scrollPos: any) => void;
        onNotifyResizeMount: () => void;
        render(): JSX.Element;
        getBefore: () => import("react").DetailedReactHTMLElement<{
            key: string;
            style: any;
            children: JSX.Element;
        }, HTMLElement> | null;
        getAfter: () => import("react").DetailedReactHTMLElement<{
            key: string;
            style: any;
            children: JSX.Element;
        }, HTMLElement> | null;
        getBeforeHeight: () => any;
        getAfterHeight: () => any;
        onBeforeElementResize: (size: any) => void;
        onAfterElementResize: (size: any) => void;
        scrollIntoView: ({ target }: {
            target: any;
        }) => void;
        onScrollIntent: () => void;
        lazyRestorePointerEvents: () => void;
        onWheelEvent: (event: any) => void;
        clear: () => void;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{}>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<{}> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<{}>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: import("react").Context<any> | undefined;
} | typeof StickyScroller;
export default _default;
declare const NativeScrollContainer: {
    new (props: any): {
        ensureNonStaticStyle(style: any, domNode: any): any;
        componentDidMount(): void;
        componentDidUpdate(prevProps: any): void;
        onResize: (...args: any[]) => void;
        sync: () => void;
        readonly clientSize: any;
        readonly scrollTopMax: any;
        readonly scrollLeftMax: any;
        scrollTop: any;
        scrollLeft: any;
        smoothScrollTo: (newValue: any, config: any, callback: any) => void;
        getScrollbars: () => {
            horizontal: any;
            vertical: any;
        };
        hasScrollbar: (orientation: any) => any;
        hasVerticalScrollbar: () => any;
        hasHorizontalScrollbar: () => any;
        focus: () => void;
        onFocus: (event: any) => void;
        onChildResize: (scrollSize: any) => void;
        getScrollPosition: () => any;
        updateScrollStyle: (scrollPos: any) => void;
        onNotifyResizeMount: () => void;
        render(): JSX.Element;
        getBefore: () => import("react").DetailedReactHTMLElement<{
            key: string;
            style: any;
            children: JSX.Element;
        }, HTMLElement> | null;
        getAfter: () => import("react").DetailedReactHTMLElement<{
            key: string;
            style: any;
            children: JSX.Element;
        }, HTMLElement> | null;
        getBeforeHeight: () => any;
        getAfterHeight: () => any;
        onBeforeElementResize: (size: any) => void;
        onAfterElementResize: (size: any) => void;
        scrollIntoView: ({ target }: {
            target: any;
        }) => void;
        onScrollIntent: () => void;
        lazyRestorePointerEvents: () => void;
        onWheelEvent: (event: any) => void;
        clear: () => void;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{}>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<{}> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<{}>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: import("react").Context<any> | undefined;
} | typeof StickyScroller;
export { HAS_STICKY as hasSticky, getScrollbarWidth, isMobile, NativeScrollContainer, };
