/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function getValueProps(_ref) {
  var _objectSpread2;
  var state = _ref.state,
    props = _ref.props,
    computed = _ref.computed,
    tagProps = _ref.tagProps;
  var multiple = props.multiple,
    renderTag = props.renderTag,
    renderTags = props.renderTags,
    tagBorder = props.tagBorder,
    tagStyle = props.tagStyle,
    tagPadding = props.tagPadding,
    tagHeight = props.tagHeight,
    tagWidth = props.tagWidth,
    tagMinSize = props.tagMinSize,
    tagMaxSize = props.tagMaxSize,
    wrapMultiple = props.wrapMultiple,
    tagCloseIcon = props.tagCloseIcon,
    tagCloseIconPosition = props.tagCloseIconPosition,
    maxTagsLength = props.maxTagsLength,
    rtl = props.rtl,
    renderRemainingTags = props.renderRemainingTags,
    renderDisplayValue = props.renderDisplayValue,
    searchable = props.searchable,
    renderTagLabel = props.renderTagLabel;
  var focus = state.focus;
  var rootClassName = "".concat(props.rootClassName, "__value");
  tagProps = _objectSpread(_objectSpread({}, tagProps), {}, {
    closeIcon: tagCloseIcon,
    border: tagBorder,
    style: tagStyle,
    padding: tagPadding,
    height: tagHeight,
    width: tagWidth,
    minSize: tagMinSize,
    maxSize: tagMaxSize,
    closeIconPosition: tagCloseIconPosition,
    ellipsis: props.tagEllipsis
  });
  var valueProps = _objectSpread((_objectSpread2 = {
    renderTagLabel: renderTagLabel,
    multiple: multiple,
    searchable: searchable,
    rootClassName: rootClassName,
    renderTag: renderTag,
    renderRemainingTags: renderRemainingTags,
    renderTags: renderTags,
    tagProps: tagProps,
    wrapMultiple: wrapMultiple,
    maxTagsLength: maxTagsLength,
    focus: focus
  }, (0, _defineProperty2.default)(_objectSpread2, "maxTagsLength", maxTagsLength), (0, _defineProperty2.default)(_objectSpread2, "rtl", rtl), (0, _defineProperty2.default)(_objectSpread2, "renderDisplayValue", renderDisplayValue), _objectSpread2), computed);
  return valueProps;
}
var _default = getValueProps;
exports.default = _default;