/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _hightlightText = _interopRequireDefault(require("./hightlightText"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var defaultFilterFunction = function defaultFilterFunction(_ref) {
  var label = _ref.label,
    text = _ref.text,
    mode = _ref.mode;
  label = label.toLowerCase ? label.toLowerCase() : "".concat(label);
  text = text.toLowerCase ? text.toLowerCase() : "".concat(text);
  return mode === 'contains' ? label.indexOf(text) !== -1 : label.startsWith(text);
};
function filterByText(_ref2) {
  var data = _ref2.data,
    getFilterProperty = _ref2.getFilterProperty,
    text = _ref2.text,
    _ref2$filterFunction = _ref2.filterFunction,
    filterFunction = _ref2$filterFunction === void 0 ? defaultFilterFunction : _ref2$filterFunction,
    _ref2$mode = _ref2.mode,
    mode = _ref2$mode === void 0 ? 'contains' : _ref2$mode,
    hightlight = _ref2.hightlight;
  if (!Array.isArray(data)) {
    return null;
  }
  var filteredData = data.reduce(function (acc, item) {
    var label = getFilterProperty(item);
    var match = filterFunction({
      label: label,
      text: text,
      item: item,
      mode: mode
    });
    if (match) {
      if (hightlight) {
        var newItem = _objectSpread(_objectSpread({}, item), {}, {
          mode: mode,
          matchText: (0, _hightlightText.default)({
            queryText: text,
            text: label
          })
        });
        acc.push(newItem);
      } else {
        acc.push(item);
      }
    }
    return acc;
  }, []);
  return filteredData;
}
var _default = filterByText;
exports.default = _default;