/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _findItemIndex = _interopRequireDefault(require("./findItemIndex"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function getNextItem(config) {
  var data = config.data,
    id = config.id,
    getIdProperty = config.getIdProperty,
    _config$direction = config.direction,
    direction = _config$direction === void 0 ? 1 : _config$direction;
  if (!Array.isArray(data) || !data.length || !getIdProperty || id == null) {
    return null;
  }
  if (data.length === 1) {
    return id;
  }
  var enabledItems = data.filter(function (item) {
    return !item.disabled;
  });
  if (enabledItems.length === 0) {
    return null;
  }
  var currentIndex = (0, _findItemIndex.default)({
    data: data,
    id: id,
    getIdProperty: getIdProperty
  });
  var nextIndex;
  if (direction === 1) {
    nextIndex = currentIndex + 1;
    nextIndex = nextIndex > data.length - 1 ? 0 : nextIndex;
  } else {
    nextIndex = currentIndex - 1;
    nextIndex = nextIndex >= 0 ? nextIndex : data.length - 1;
  }
  var newItem = data[nextIndex];
  var newActiveId = getIdProperty(newItem);
  if (newItem.disabled) {
    newActiveId = getNextItem(_objectSpread(_objectSpread({}, config), {}, {
      id: newActiveId
    }));
  }
  return newActiveId;
}
var _default = getNextItem;
exports.default = _default;