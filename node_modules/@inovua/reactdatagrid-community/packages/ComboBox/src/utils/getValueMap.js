/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var contains = function contains(stack, needle) {
  for (var i = 0; i < stack.length; i++) {
    if (stack[i] == needle) {
      return true;
    }
  }
  return false;
};
function getValueMap(_ref) {
  var value = _ref.value,
    dataMap = _ref.dataMap,
    oldValueMap = _ref.oldValueMap;
  if (value == null) {
    return oldValueMap;
  }
  var valueMap = _objectSpread({}, oldValueMap);
  value = Array.isArray(value) ? value : [value];
  valueMap = Object.keys(valueMap).reduce(function (acc, id) {
    if (contains(value, id)) {
      acc[id] = valueMap[id];
    }
    return acc;
  }, {});
  value.forEach(function (id) {
    if (dataMap && dataMap[id]) {
      valueMap[id] = dataMap[id];
    }
  });
  return valueMap;
}
var _default = getValueMap;
exports.default = _default;