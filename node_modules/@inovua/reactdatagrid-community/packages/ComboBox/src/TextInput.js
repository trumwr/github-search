/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _getSelectionStart2 = _interopRequireDefault(require("./utils/getSelectionStart"));
var _getSelectionEnd2 = _interopRequireDefault(require("./utils/getSelectionEnd"));
var _setInputSelection = _interopRequireDefault(require("./utils/setInputSelection"));
var _throttle = _interopRequireDefault(require("../../../common/throttle"));
var _join = _interopRequireDefault(require("../../../common/join"));
var _getCursorPosition = _interopRequireDefault(require("./utils/getCursorPosition"));
var _getGlobal = require("../../../getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var TextInput = function (_Component) {
  (0, _inherits2.default)(TextInput, _Component);
  var _super = _createSuper(TextInput);
  function TextInput(props) {
    var _this;
    (0, _classCallCheck2.default)(this, TextInput);
    _this = _super.call(this, props);
    _this.handleChange = _this.handleChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.updateValue = _this.updateValue.bind((0, _assertThisInitialized2.default)(_this));
    if (props.throttle) {
      _this.updateThrottledUpdateValue(props.throttle);
    }
    _this.state = {
      value: props.value
    };
    return _this;
  }
  (0, _createClass2.default)(TextInput, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;
      var previousValue = prevProps.value || '';
      var currentValue = this.props.value || '';
      if (previousValue != currentValue) {
        clearTimeout(this.suggestionTimeOut);
      }
      if (this.props.suggestion && this.props.suggestion !== currentValue && this.props.autocomplete && currentValue !== previousValue && currentValue.length > previousValue.length) {
        this.suggestionTimeOut = setTimeout(function () {
          _this2.selectForwardIfNecessary();
        }, this.props.autocompleteDelay);
      }
      if (this.props.throttle && prevProps.value !== this.props.value) {
        this.setState({
          value: this.props.value
        });
      }
      if (prevProps.throttle !== this.props.throttle) {
        this.updateThrottledUpdateValue(this.props.throttle);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.suggestionTimeOut) {
        clearTimeout(this.suggestionTimeOut);
        this.suggestionTimeOut = null;
      }
    }
  }, {
    key: "updateThrottledUpdateValue",
    value: function updateThrottledUpdateValue(throttleDelay) {
      this.throttledUpdateValue = (0, _throttle.default)(this.updateValue, throttleDelay, {
        trailing: true,
        leading: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$props = this.props,
        rootClassName = _this$props.rootClassName,
        onClick = _this$props.onClick,
        maxWidth = _this$props.maxWidth,
        visible = _this$props.visible,
        searchable = _this$props.searchable;
      var className = (0, _join.default)("".concat(rootClassName, "__wrapper"), this.props.className, !visible && "".concat(rootClassName, "__wrapper--invisible"), !searchable && "".concat(rootClassName, "__wrapper--non-searchable"));
      var value = this.getValue() || '';
      var valueLength = value != null && value.length;
      var size = valueLength ? valueLength + 1 : 1;
      var inputStyle = {};
      if (size === 1 && valueLength === 0) {
        inputStyle.width = 1;
      }
      if (maxWidth) {
        inputStyle.maxWidth = maxWidth;
      }
      return _react.default.createElement("span", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(this.props, TextInput.propTypes)), {}, {
        onClick: onClick,
        className: className
      }), _react.default.createElement("input", {
        style: inputStyle,
        className: rootClassName,
        ref: function ref(_ref) {
          return _this3.inputNode = _ref;
        },
        type: "text",
        value: value || '',
        onChange: this.handleChange,
        onClick: this.onClick,
        tabIndex: this.props.tabIndex,
        onMouseDown: this.handleMouseDown,
        size: size
      }), !value && this.renderPlaceholder());
    }
  }, {
    key: "renderPlaceholder",
    value: function renderPlaceholder() {
      var _this4 = this;
      if (!this.props.placeholder) {
        return null;
      }
      var placeholderProps = {
        className: "".concat(this.props.rootClassName, "__placeholder")
      };
      return _react.default.createElement("span", _objectSpread(_objectSpread({}, placeholderProps), {}, {
        ref: function ref(_ref2) {
          return _this4.placeholderNode = _ref2;
        }
      }), this.props.placeholder);
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var value = this.props.throttle ? this.state.value : this.props.value;
      return value;
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.inputNode && this.inputNode.focus) {
        this.inputNode.focus();
      }
    }
  }, {
    key: "blur",
    value: function blur() {
      if (this.inputNode && this.inputNode.blur) {
        this.inputNode.blur();
      }
    }
  }, {
    key: "hasFocus",
    value: function hasFocus() {
      var activeElement = globalObject && globalObject.document && globalObject.document.activeElement;
      return this.inputNode === activeElement;
    }
  }, {
    key: "handleChange",
    value: function handleChange(event) {
      var value = event.target.value;
      if (this.props.throttle) {
        this.setState({
          value: value
        });
        this.throttledUpdateValue(value);
      } else {
        this.updateValue(value);
      }
    }
  }, {
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      event.stopPropagation();
    }
  }, {
    key: "onClick",
    value: function onClick(event) {
      event.stopPropagation();
    }
  }, {
    key: "updateValue",
    value: function updateValue(value) {
      this.props.onChange(value);
    }
  }, {
    key: "selectForwardIfNecessary",
    value: function selectForwardIfNecessary() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.value;
      if (!value || typeof value !== 'string') {
        return null;
      }
      var suggestion = this.props.suggestion;
      if (typeof suggestion !== 'string') {
        return null;
      }
      if (suggestion.toLowerCase().indexOf(value.toLowerCase()) === -1) {
        return null;
      }
      var firstPartLength = value.length;
      var inputNode = this.inputNode;
      this.inputNode.value = suggestion;
      this.inputNode.size = this.inputNode.value.length;
      this.inputNode.style.width = 'auto';
      (0, _setInputSelection.default)(inputNode, firstPartLength, suggestion.length);
      return true;
    }
  }, {
    key: "getSelectionStart",
    value: function getSelectionStart() {
      return (0, _getSelectionStart2.default)(this.inputNode);
    }
  }, {
    key: "getSelectionEnd",
    value: function getSelectionEnd() {
      return (0, _getSelectionEnd2.default)(this.inputNode);
    }
  }, {
    key: "hasSelection",
    value: function hasSelection() {
      return this.getSelectionStart() !== this.getSelectionEnd();
    }
  }, {
    key: "isCursorAtStartPosition",
    value: function isCursorAtStartPosition() {
      return this.getSelectionStart() === 0;
    }
  }, {
    key: "isCursorAtEndPosition",
    value: function isCursorAtEndPosition() {
      var cursorLastPissiblePosition = this.props.value && this.props.value.length;
      return (0, _getCursorPosition.default)(this.inputNode) === cursorLastPissiblePosition;
    }
  }]);
  return TextInput;
}(_react.Component);
function emptyFn() {}
TextInput.defaultProps = {
  onChange: emptyFn,
  value: '',
  autocomplete: true
};
TextInput.propTypes = {
  rootClassName: _propTypes.default.string,
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.arrayOf(_propTypes.default.number)]),
  placeholder: _propTypes.default.node,
  onChange: _propTypes.default.func,
  maxWidth: _propTypes.default.number,
  throttle: _propTypes.default.number,
  tabIndex: _propTypes.default.number,
  autocomplete: _propTypes.default.bool,
  autocompleteDelay: _propTypes.default.number,
  visible: _propTypes.default.bool,
  suggestion: _propTypes.default.any,
  searchable: _propTypes.default.bool
};
var _default = TextInput;
exports.default = _default;