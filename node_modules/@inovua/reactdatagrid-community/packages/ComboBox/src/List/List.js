/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _cleanProps = _interopRequireDefault(require("../../../../common/cleanProps"));
var _Overlay = _interopRequireDefault(require("../../../Overlay"));
var _FakeVirtualList = _interopRequireDefault(require("./FakeVirtualList"));
var _Item = _interopRequireDefault(require("./Item"));
var _getClassName = _interopRequireDefault(require("./utils/getClassName"));
var _isSelected = _interopRequireDefault(require("../utils/isSelected"));
var _getPositionRelativeToElement = _interopRequireDefault(require("../../../../common/getPositionRelativeToElement"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var List = function (_Component) {
  (0, _inherits2.default)(List, _Component);
  var _super = _createSuper(List);
  function List(props) {
    var _this;
    (0, _classCallCheck2.default)(this, List);
    _this = _super.call(this, props);
    _this.renderRow = _this.renderRow.bind((0, _assertThisInitialized2.default)(_this));
    _this.getOverlayTarget = _this.getOverlayTarget.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleOnClick = _this.handleOnClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleItemClick = _this.handleItemClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.virtualListShouldComponentUpdate = _this.virtualListShouldComponentUpdate.bind((0, _assertThisInitialized2.default)(_this));
    _this.setRootNode = function (ref) {
      _this.listNode = ref;
    };
    _this.addVirtualListRef = function (ref) {
      _this.virtualListNode = ref;
    };
    _this.state = {
      succesfullPosition: 'bottom'
    };
    _this.listAligned = false;
    return _this;
  }
  (0, _createClass2.default)(List, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.componentIsMounted = false;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      this.componentIsMounted = true;
      if (!this.props.relativeToViewport) {
        setTimeout(function () {
          _this2.updateListPosition();
        }, 0);
      }
      if (this.props.activeItemIndex != null) {
        setTimeout(function () {
          if (_this2.componentIsMounted) {
            _this2.scrollToIndex(_this2.props.activeItemIndex);
          }
        }, 16);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var state = this.state,
        props = this.props;
      var renderFooter = props.renderFooter,
        renderHeader = props.renderHeader,
        isNewCustomTagValid = props.isNewCustomTagValid;
      this.currentGroup = null;
      var className = (0, _getClassName.default)({
        state: state,
        props: props
      });
      var style = props.style;
      if (this.state.position) {
        style = _objectSpread(_objectSpread({}, style), this.state.position);
      }
      if (this.state.succesfullPosition && this.props.offset) {
        var positionName = this.state.succesfullPosition === 'bc-tc' ? 'top' : 'bottom';
        if (this.props.offset) {
          style = _objectSpread(_objectSpread({}, style), {}, (0, _defineProperty2.default)({}, positionName == 'top' ? 'marginBottom' : 'marginTop', this.props.offset));
        }
      }
      if (!this.props.relativeToViewport && !this.listAligned) {
        style = _objectSpread(_objectSpread({}, style), {}, {
          visibility: 'hidden',
          position: 'fixed'
        });
      }
      var result = _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props, List.propTypes)), {}, {
        className: className,
        style: style,
        ref: this.setRootNode,
        onClick: this.handleOnClick
      }), this.renderLoadingText(), isNewCustomTagValid && this.renderNewCustomTagText(), typeof renderHeader === 'function' && this.renderHeader(), this.renderEmptyText(), this.renderVirtualList(), typeof renderFooter === 'function' && this.renderFooter());
      if (this.props.relativeToViewport) {
        var overlayProps = _objectSpread(_objectSpread({}, props.overlayProps), {}, {
          target: this.getOverlayTarget,
          relativeToViewport: this.props.relativeToViewport,
          constrainTo: this.props.constrainTo,
          positions: this.props.positions
        });
        return _react.default.createElement(_Overlay.default, _objectSpread({}, overlayProps), result);
      }
      return result;
    }
  }, {
    key: "getOverlayTarget",
    value: function getOverlayTarget() {
      return this.props.getComboNode();
    }
  }, {
    key: "renderFooter",
    value: function renderFooter() {
      return this.props.renderFooter({
        props: this.props,
        data: this.props.data,
        value: this.props.value
      });
    }
  }, {
    key: "renderHeader",
    value: function renderHeader() {
      return this.props.renderHeader({
        props: this.props,
        data: this.props.data,
        value: this.props.value
      });
    }
  }, {
    key: "renderEmptyText",
    value: function renderEmptyText() {
      var data = this.props.data;
      if (data && data.length || this.props.loading) {
        return null;
      }
      if (this.props.isNewCustomTagValid) {
        return null;
      }
      return _react.default.createElement("div", {
        className: "".concat(this.props.rootClassName, "__empty-text")
      }, this.props.emptyText);
    }
  }, {
    key: "renderNewCustomTagText",
    value: function renderNewCustomTagText() {
      var text = this.props.text;
      if (this.props.newCustomTagText) {
        return typeof this.props.newCustomTagText === 'function' ? this.props.newCustomTagText({
          text: text
        }) : this.props.newCustomTagText;
      }
      return _react.default.createElement("div", {
        className: "".concat(this.props.rootClassName, "__new-custom-tag-text")
      }, "Create option \"", text, "\"");
    }
  }, {
    key: "renderLoadingText",
    value: function renderLoadingText() {
      if (!this.props.loading) {
        return null;
      }
      if (!this.props.loadingText) {
        return null;
      }
      return _react.default.createElement("div", {
        className: "".concat(this.props.rootClassName, "__loading-text")
      }, this.props.loadingText);
    }
  }, {
    key: "renderVirtualList",
    value: function renderVirtualList() {
      var className = "".concat(this.props.rootClassName, "__virtual-list");
      var count = this.props.dataLength;
      var VirtualList = this.props.virtualListFactory;
      var renderVirtualList = this.props.renderVirtualList;
      if (!count) {
        return null;
      }
      var style = {};
      if (this.props.maxHeight) {
        style.maxHeight = this.props.maxHeight;
      }
      if (this.state.constrainedHeight) {
        var constrainedOffset = 16;
        var constrainedHeight = this.props.maxHeight ? Math.min(this.props.maxHeight, this.state.constrainedHeight - constrainedOffset) : this.state.constrainedHeight - constrainedOffset;
        style.maxHeight = constrainedHeight;
      }
      if (typeof style.maxHeight === 'number' && typeof this.props.minHeight == 'number') {
        style.maxHeight = Math.max(style.maxHeight || 0, style.minHeight || 0);
      }
      var virtualListProps = {
        ref: this.addVirtualListRef,
        className: className,
        autoHide: false,
        count: count,
        theme: this.props.theme,
        renderRow: this.renderRow,
        minRowHeight: 10,
        tabIndex: null,
        shouldComponentUpdate: this.virtualListShouldComponentUpdate,
        scrollProps: {
          onContainerScrollVerticalMax: this.props.onScrollBottom
        },
        style: style
      };
      var result;
      if (renderVirtualList) {
        result = renderVirtualList(virtualListProps);
      }
      if (result === undefined) {
        if (VirtualList === _FakeVirtualList.default) {
          virtualListProps.renderListScroller = this.props.renderListScroller;
        }
        result = _react.default.createElement(VirtualList, _objectSpread({}, virtualListProps));
      }
      if (result && result.props) {
        this.rowHeight = result.props.rowHeight;
      }
      return result;
    }
  }, {
    key: "virtualListShouldComponentUpdate",
    value: function virtualListShouldComponentUpdate() {
      return true;
    }
  }, {
    key: "renderRow",
    value: function renderRow(_ref) {
      var index = _ref.index;
      var groups = this.props.groups;
      if (groups && groups[index]) {
        return this.renderGroup(groups[index], index);
      }
      var _this$props = this.props,
        data = _this$props.data,
        getIdProperty = _this$props.getIdProperty,
        getDisplayProperty = _this$props.getDisplayProperty,
        rootClassName = _this$props.rootClassName,
        itemEllipsis = _this$props.itemEllipsis,
        value = _this$props.value,
        activeItem = _this$props.activeItem,
        renderItem = _this$props.renderItem,
        rtl = _this$props.rtl;
      var renderIndex = this.currentGroup ? index - this.currentGroup.indexAjustment : index;
      var item = data[renderIndex];
      var id = getIdProperty(item);
      var label = getDisplayProperty(item);
      var selected = (0, _isSelected.default)({
        value: value,
        id: id
      });
      var active = id === activeItem;
      var itemProps = _objectSpread(_objectSpread({}, this.props.itemProps), {}, {
        index: renderIndex,
        itemHeight: this.rowHeight,
        itemEllipsis: itemEllipsis,
        item: item,
        id: id,
        label: label,
        selected: selected,
        active: active,
        renderItem: renderItem,
        rtl: rtl,
        rootClassName: "".concat(rootClassName, "__item"),
        onClick: this.handleItemClick,
        key: id || label
      });
      return _react.default.createElement(_Item.default, _objectSpread({}, itemProps));
    }
  }, {
    key: "renderGroup",
    value: function renderGroup(group, index) {
      this.currentGroup = group;
      var title = group.title;
      var groupProps = {
        children: title,
        key: title,
        className: "".concat(this.props.rootClassName, "__group")
      };
      var result;
      if (typeof this.props.renderGroup === 'function') {
        result = this.props.renderGroup({
          domProps: groupProps,
          index: index,
          group: group
        });
      }
      if (result === undefined) {
        result = _react.default.createElement("div", _objectSpread({}, groupProps));
      }
      return result;
    }
  }, {
    key: "handleOnClick",
    value: function handleOnClick(event) {
      event.stopPropagation();
    }
  }, {
    key: "handleItemClick",
    value: function handleItemClick(index) {
      this.props.onItemClick(index);
    }
  }, {
    key: "updateListPosition",
    value: function updateListPosition() {
      var comboNode = this.props.getComboNode();
      if (!comboNode) {
        return null;
      }
      var listNode = this.listNode;
      if (!listNode) {
        return null;
      }
      var positionConfig = (0, _getPositionRelativeToElement.default)({
        targetNode: comboNode,
        overlayNode: listNode,
        offset: this.props.offset,
        constrainTo: this.props.constrainTo,
        relativeToViewport: this.props.relativeToViewport,
        positions: this.props.positions
      });
      this.listAligned = true;
      if (positionConfig) {
        var constrainedHeight = positionConfig.constrainedHeight,
          positionRegion = positionConfig.positionRegion,
          succesfullPosition = positionConfig.succesfullPosition,
          position = positionConfig.position;
        this.setState({
          positionRegion: positionRegion,
          succesfullPosition: succesfullPosition,
          constrainedHeight: constrainedHeight ? positionRegion.getHeight() : null
        });
      }
    }
  }, {
    key: "getVirtualListNode",
    value: function getVirtualListNode() {
      return this.virtualListNode;
    }
  }, {
    key: "getlListNode",
    value: function getlListNode() {
      return this.listNode;
    }
  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(index) {
      var virtualListNode = this.getVirtualListNode();
      return virtualListNode && virtualListNode.scrollToIndex(index);
    }
  }]);
  return List;
}(_react.Component);
function emptyFn() {}
List.defaultProps = {
  selectedStyle: {},
  style: {},
  onItemClick: emptyFn,
  getComboNode: emptyFn,
  positions: ['bottom', 'top'],
  offset: 0,
  constrainTo: true,
  virtualListFactory: _FakeVirtualList.default,
  overlayProps: {
    theme: null,
    syncWidth: true,
    rafOnMount: false,
    adjustOnPositionBottom: false,
    updatePositionOnScroll: true,
    offset: 2,
    visible: true
  }
};
List.propTypes = {
  data: _propTypes.default.array,
  autoPosition: _propTypes.default.bool,
  emptyText: _propTypes.default.node,
  dataLength: _propTypes.default.number,
  rootClassName: _propTypes.default.string,
  highlightFirst: _propTypes.default.bool,
  maxHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  minHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  groups: _propTypes.default.object,
  itemEllipsis: _propTypes.default.bool,
  onScrollBottom: _propTypes.default.func,
  renderListScroller: _propTypes.default.func,
  renderGroup: _propTypes.default.func,
  renderFooter: _propTypes.default.func,
  renderHeader: _propTypes.default.func,
  renderItem: _propTypes.default.func,
  activeItemIndex: _propTypes.default.number,
  virtualListFactory: _propTypes.default.func,
  renderVirtualList: _propTypes.default.func,
  text: _propTypes.default.string,
  newCustomTagText: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  isNewCustomTagValid: _propTypes.default.bool,
  positions: _propTypes.default.arrayOf(_propTypes.default.string),
  constrainTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object, _propTypes.default.bool]),
  offset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.number
  }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.number
  })]))]),
  loadingText: _propTypes.default.node,
  loading: _propTypes.default.bool,
  relativeToViewport: _propTypes.default.bool,
  overlayProps: _propTypes.default.object,
  itemProps: _propTypes.default.object,
  activeItem: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
  selectedStyle: _propTypes.default.object,
  getIdProperty: _propTypes.default.func,
  getDisplayProperty: _propTypes.default.func,
  rtl: _propTypes.default.bool,
  onItemClick: _propTypes.default.func,
  getComboNode: _propTypes.default.func
};
var _default = List;
exports.default = _default;