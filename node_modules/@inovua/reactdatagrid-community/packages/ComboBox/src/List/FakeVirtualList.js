/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _cleanProps = _interopRequireDefault(require("../../../../common/cleanProps"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var FakeVirtualList = function (_Component) {
  (0, _inherits2.default)(FakeVirtualList, _Component);
  var _super = _createSuper(FakeVirtualList);
  function FakeVirtualList(props) {
    var _this;
    (0, _classCallCheck2.default)(this, FakeVirtualList);
    _this = _super.call(this, props);
    _this.handleOnScroll = _this.handleOnScroll.bind((0, _assertThisInitialized2.default)(_this));
    _this.targetRef = function (node) {
      if (!node) {
        _this.targetNode = null;
      }
      _this.targetNode = node;
    };
    return _this;
  }
  (0, _createClass2.default)(FakeVirtualList, [{
    key: "render",
    value: function render() {
      var props = this.props;
      var count = this.props.count;
      var list = [];
      if (count > 0) {
        for (var i = 0; i < count; i++) {
          list.push(props.renderRow({
            index: i
          }));
        }
      }
      var listProps = _objectSpread(_objectSpread({
        ref: this.targetRef,
        children: list
      }, (0, _cleanProps.default)(props, FakeVirtualList.propTypes)), {}, {
        onScroll: this.handleOnScroll
      });
      var result;
      if (this.props.renderListScroller) {
        result = this.props.renderListScroller(listProps);
      }
      if (result === undefined) {
        result = _react.default.createElement("div", _objectSpread({}, listProps));
      }
      return result;
    }
  }, {
    key: "getContainerNode",
    value: function getContainerNode() {
      return this.targetNode && this.targetNode.getContainerTargetNode ? this.targetNode.getContainerTargetNode() : this.targetNode;
    }
  }, {
    key: "getRootNode",
    value: function getRootNode() {
      return this.targetNode;
    }
  }, {
    key: "getScrollerNode",
    value: function getScrollerNode() {
      return this.targetNode && this.targetNode.getScrollerNode ? this.targetNode.getScrollerNode() : this.targetNode;
    }
  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(index) {
      var containerNode = this.getContainerNode();
      var rootNode = this.getRootNode();
      var scrollerNode = this.getScrollerNode();
      if (!containerNode) {
        return null;
      }
      if (containerNode && !containerNode.childNodes.length) {
        return null;
      }
      var itemNode = containerNode.childNodes[index];
      if (!itemNode) {
        return null;
      }
      var itemHeight = itemNode.offsetHeight;
      var itemOffsetTop = itemNode.offsetTop;
      var scrollTop = scrollerNode.scrollTop;
      var containerHeight = rootNode.offsetHeight;
      if (scrollTop > itemOffsetTop) {
        scrollerNode.scrollTop = itemOffsetTop;
      }
      if (scrollTop + containerHeight < itemHeight + itemOffsetTop) {
        scrollerNode.scrollTop = itemOffsetTop + itemHeight - containerHeight;
      }
      return true;
    }
  }, {
    key: "handleOnScroll",
    value: function handleOnScroll(event) {
      var rootNode = this.getRootNode();
      var scrollTop = event.target.scrollTop;
      var listHeight = rootNode.offsetHeight;
      var scrollHeight = rootNode.scrollHeight;
      if (scrollTop + listHeight + 5 >= scrollHeight) {
        this.props.scrollProps.onContainerScrollVerticalMax();
      }
    }
  }]);
  return FakeVirtualList;
}(_react.Component);
FakeVirtualList.propTypes = {
  autoHide: _propTypes.default.bool,
  count: _propTypes.default.number,
  renderRow: _propTypes.default.func,
  minRowHeight: _propTypes.default.number,
  tagIndex: _propTypes.default.number,
  shouldComponentUpdate: _propTypes.default.func,
  renderListScroller: _propTypes.default.func,
  scrollProps: _propTypes.default.object,
  virtualized: _propTypes.default.bool,
  showScrollbars: _propTypes.default.bool
};
var _default = FakeVirtualList;
exports.default = _default;