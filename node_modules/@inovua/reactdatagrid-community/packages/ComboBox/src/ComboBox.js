/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.REMAINING_ITEMS = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _NotifyResize = require("../../NotifyResize");
var _throttle = _interopRequireDefault(require("../../../common/throttle"));
var _containsNode = _interopRequireDefault(require("../../../common/containsNode"));
var _TextInput = _interopRequireDefault(require("./TextInput"));
var _Value = _interopRequireDefault(require("./Value"));
var _ClearButton = _interopRequireDefault(require("./ClearButton"));
var _ToggleButton = _interopRequireDefault(require("./ToggleButton"));
var _List = _interopRequireDefault(require("./List"));
var _Icons = require("./Icons");
var _shouldComponentUpdate2 = _interopRequireDefault(require("./utils/shouldComponentUpdate"));
var _getRootClassName = _interopRequireDefault(require("./utils/getRootClassName"));
var _getListProps2 = _interopRequireDefault(require("./utils/getListProps"));
var _getValueProps2 = _interopRequireDefault(require("./utils/getValueProps"));
var _getDataProp = _interopRequireDefault(require("./utils/getDataProp"));
var _getNewMultipleValue = _interopRequireDefault(require("./utils/getNewMultipleValue"));
var _getNewSingleValue = _interopRequireDefault(require("./utils/getNewSingleValue"));
var _findItemIndex = _interopRequireDefault(require("./utils/findItemIndex"));
var _filterByValue = _interopRequireDefault(require("./utils/filterByValue"));
var _filterByText = _interopRequireDefault(require("./utils/filterByText"));
var _deselectValue = _interopRequireDefault(require("./utils/deselectValue"));
var _getNewActiveTagOnRemove = _interopRequireDefault(require("./utils/getNewActiveTagOnRemove"));
var _getNextItem = _interopRequireDefault(require("./utils/getNextItem"));
var _groupItems = _interopRequireDefault(require("./utils/groupItems"));
var _getValueMap = _interopRequireDefault(require("./utils/getValueMap"));
var _getGroups = _interopRequireDefault(require("./utils/getGroups"));
var _PaginationToolbar = require("../../PaginationToolbar");
var _getGlobal = require("../../../getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var REMAINING_ITEMS = 'REMAINING_ITEMS';
exports.REMAINING_ITEMS = REMAINING_ITEMS;
var emptyObject = {};
var InovuaComboBox = function (_Component) {
  (0, _inherits2.default)(InovuaComboBox, _Component);
  var _super = _createSuper(InovuaComboBox);
  function InovuaComboBox(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaComboBox);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps) {
      if (_this.isExpandedControlled() && _this.props.expanded !== prevProps.expanded) {
        _this.onExpand();
      }
      if (prevProps.dataSource !== _this.props.dataSource) {
        _this.loadDataSource(_this.props.dataSource, _this.props);
      }
      if (_this.props.idProperty !== prevProps.idProperty) {
        _this.updateGetIdProperty(_this.props);
      }
      if (_this.props.displayProperty !== prevProps.displayProperty) {
        _this.updateGetDisplayProperty(_this.props);
      }
      if (_this.props.filterProperty !== prevProps.filterProperty) {
        _this.updateGetFilterProperty(_this.props);
      }
      if (_this.props.groupProperty !== prevProps.groupProperty) {
        _this.updateGroups({
          groupProperty: _this.props.groupProperty
        });
      }
      if (_this.isTextControled() && _this.props.text !== prevProps.text) {
        _this.onTextUpdate(_this.props.text);
      }
      if (_this.isActiveItemControlled() && prevProps.changeValueOnNavigation && !prevProps.multiple && prevProps.activeItem !== _this.props.activeItem) {
        _this.setValue(_this.props.activeItem, {
          action: 'navigate'
        });
      }
      if (_this.isExpandedControlled() && !prevProps.expanded && _this.props.expanded) {
        _this.loadLazyDataSource({
          action: 'expand',
          text: ''
        });
      }
    });
    _this.refTools = function (tools) {
      _this.toolsNode = tools;
    };
    _this.state = {
      loading: props.defaultLoading || !!(props.dataSource && props.dataSource.then),
      value: props.defaultValue,
      valueMap: {},
      text: props.defaultText,
      activeTag: props.defaultActiveTag,
      activeItem: props.defaultActiveItem || !props.multiple && props.defaultValue,
      expanded: props.defaultExpanded,
      toolsSize: {
        width: 0,
        height: 0
      },
      over: false,
      focus: false
    };
    _this.getData = _this.getData.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleItemClick = _this.handleItemClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleTextChange = _this.handleTextChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleTextInputClick = _this.handleTextInputClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleTagClick = _this.handleTagClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleRemoveTag = _this.handleRemoveTag.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleComboClick = _this.handleComboClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleComboKeyDown = _this.handleComboKeyDown.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleComboFocus = _this.handleComboFocus.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleComboBlur = _this.handleComboBlur.bind((0, _assertThisInitialized2.default)(_this));
    _this.getComboNode = _this.getComboNode.bind((0, _assertThisInitialized2.default)(_this));
    _this.clear = _this.clear.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMouseEnter = _this.handleMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleMouseLeave = _this.handleMouseLeave.bind((0, _assertThisInitialized2.default)(_this));
    _this.toggleExpand = _this.toggleExpand.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleToolsSize = _this.handleToolsSize.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleRemoveMultipleTag = _this.handleRemoveMultipleTag.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleListScrollBottom = _this.handleListScrollBottom.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleDelete = _this.handleDelete.bind((0, _assertThisInitialized2.default)(_this));
    _this.getListNode = _this.getListNode.bind((0, _assertThisInitialized2.default)(_this));
    _this.updateGetIdProperty();
    _this.updateGetDisplayProperty();
    _this.updateGetFilterProperty();
    _this.addTextInputRef = function (ref) {
      _this.textInput = ref;
    };
    _this.addRootRef = function (ref) {
      _this.comboNode = ref;
    };
    _this.addListRef = function (ref) {
      _this.listNode = ref;
    };
    _this.setActiveItem = (0, _throttle.default)(_this.setActiveItem, 16);
    return _this;
  }
  (0, _createClass2.default)(InovuaComboBox, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.autoFocus) {
        this.focus();
      }
      if (this.state.activeItem && this.state.activeItemIndex == null) {
        this.setState({
          activeItemIndex: this.getItemIndexById(this.state.activeItem)
        });
      }
      if (!this.isRemoteFilter()) {
        this.doFilter();
      }
      if (!this.props.lazyDataSource) {
        this.loadDataSource(this.props.dataSource);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props,
        state = this.state;
      var textInput = this.renderTextInput();
      var className = (0, _getRootClassName.default)({
        props: props,
        state: state,
        computed: {
          value: this.getValue()
        }
      });
      var expanded = this.getExpanded();
      var items = this.getSelectedItems();
      var groupedItems = this.groupedItems = this.getGroupedItems(this.getSelectedItems());
      this.areItemsGrouped = this.groupedItems && this.groupedItems.remainingItems && this.groupedItems.remainingItems.length;
      var style = this.getRootStyle();
      var filteredData = this.getFilteredData();
      var text = this.getText();
      this.isNewCustomTagValid = (!filteredData || filteredData.length === 0) && !!text && props.allowCustomTagCreation;
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props, InovuaComboBox.propTypes)), {}, {
        onClick: this.handleComboClick,
        onMouseDown: this.handleComboMouseDown,
        onKeyDown: this.handleComboKeyDown,
        onFocus: this.handleComboFocus,
        onBlur: this.handleComboBlur,
        className: className,
        style: style,
        ref: this.addRootRef,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        tabIndex: 0
      }), _react.default.createElement(_Value.default, _objectSpread(_objectSpread({}, this.getValueProps({
        items: items,
        groupedItems: groupedItems
      })), {}, {
        textInput: textInput,
        toolsSize: state.toolsSize
      })), _react.default.createElement("div", {
        className: "".concat(props.rootClassName, "__tools"),
        ref: this.refTools
      }, this.renderSpinner(), this.renderClearIcon(), this.renderToggleIcon(), this.props.tagEllipsis && _react.default.createElement(_NotifyResize.NotifyResize, {
        notifyOnMount: true,
        onResize: this.handleToolsSize
      })), expanded && this.renderList());
    }
  }, {
    key: "getRootStyle",
    value: function getRootStyle() {
      var props = this.props,
        state = this.state;
      var style = _objectSpread({}, props.style);
      if (props.borderRadius) {
        style.borderRadius = props.borderRadius;
      }
      if (props.padding) {
        style.padding = props.padding;
      }
      if (props.border) {
        style.border = props.border;
      }
      if (props.background) {
        style.background = props.background;
      }
      if (!this.getValue() && props.emptyStyle) {
        style = _objectSpread(_objectSpread({}, style), props.emptyStyle);
      }
      if (props.disabledStyle && props.disabled) {
        style = _objectSpread(_objectSpread({}, style), props.disabledStyle);
      }
      if (state.focus && props.focusedStyle) {
        style = _objectSpread(_objectSpread({}, style), props.focusedStyle);
      }
      return style;
    }
  }, {
    key: "renderList",
    value: function renderList() {
      var listProps = this.getListProps();
      var result;
      if (typeof this.props.renderList === 'function') {
        result = this.props.renderList({
          domProps: listProps,
          items: this.getFilteredData()
        });
      }
      if (result === undefined) {
        result = _react.default.createElement(_List.default, _objectSpread({}, listProps));
      }
      if (typeof this.props.renderListComponent === 'function') {
        var res = this.props.renderListComponent(result);
        if ((0, _typeof2.default)(res) !== undefined) {
          return res;
        }
        result = res;
      }
      return result;
    }
  }, {
    key: "renderClearIcon",
    value: function renderClearIcon() {
      var props = this.props,
        state = this.state;
      var searchable = props.searchable;
      var text = this.getText();
      var value = this.getValue();
      var showClearIcon = (text || value != null) && props.clearIcon;
      if (props.showClearIconOnMouseOver) {
        if (!state.over) {
          showClearIcon = false;
        }
      }
      if (searchable === false) {
        showClearIcon = false;
      }
      if (!showClearIcon) {
        return null;
      }
      var clearButton = _react.default.createElement(_ClearButton.default, {
        onClear: this.clear,
        closeIcon: props.clearIcon,
        className: "".concat(props.rootClassName, "__clear-icon")
      });
      return clearButton;
    }
  }, {
    key: "renderToggleIcon",
    value: function renderToggleIcon() {
      var props = this.props;
      if (!props.toggleIcon) {
        return null;
      }
      return _react.default.createElement(_ToggleButton.default, {
        onToggle: this.toggleExpand,
        className: "".concat(props.rootClassName, "__toggle-icon"),
        toggleIcon: props.toggleIcon,
        expanded: this.getExpanded()
      });
    }
  }, {
    key: "renderTextInput",
    value: function renderTextInput() {
      if (this.props.disabled) {
        return null;
      }
      var text = this.getText();
      var value = text;
      if (!this.props.multiple) {
        if (text == null) {
          value = this.getValue() == null ? '' : this.getItemLabel();
        } else {
          value = text;
        }
      }
      var data = this.getFilteredData();
      var suggestion = null;
      if (this.props.minAutocompleteLength <= (value && value.length) && data && data[0]) {
        suggestion = this.getDisplayProperty(data[0]);
      }
      var inputProps = {
        key: 'text_input',
        value: value,
        theme: this.props.theme,
        suggestion: suggestion,
        placeholder: this.props.placeholder,
        rootClassName: "".concat(this.props.rootClassName, "__input"),
        className: this.props.inputClassName,
        style: this.props.inputStyle,
        onChange: this.handleTextChange,
        ref: this.addTextInputRef,
        onClick: this.handleTextInputClick,
        throttle: this.props.filterDelay,
        autocomplete: this.props.autocomplete,
        tabIndex: this.props.tabIndex,
        autocompleteDelay: this.props.autocompleteDelay,
        searchable: this.props.searchable
      };
      var result;
      if (typeof this.props.renderInput === 'function') {
        result = this.props.renderInput({
          text: text,
          domProps: inputProps,
          onChange: inputProps.onChange
        });
      }
      if (result === undefined) {
        result = _react.default.createElement(_TextInput.default, _objectSpread({}, inputProps));
      }
      return result;
    }
  }, {
    key: "renderSpinner",
    value: function renderSpinner() {
      if (!this.props.loadingSpinner) {
        return null;
      }
      var loading = this.getLoading();
      if (!loading && !this.getExpanded()) {
        return null;
      }
      var spinner = this.props.loadingSpinner === true ? _react.default.createElement(_Icons.LoadingIcon, {
        className: "".concat(this.props.rootClassName, "__loading-spinner")
      }) : this.props.loadingSpinner;
      return loading ? spinner : (0, _react.cloneElement)(spinner, {
        style: spinner.props.style ? _objectSpread(_objectSpread({}, spinner.props.style), {}, {
          display: 'none'
        }) : {
          display: 'none'
        }
      });
    }
  }, {
    key: "getListProps",
    value: function getListProps() {
      var props = this.props,
        state = this.state;
      var data = this.getFilteredData();
      var groupsLength = this.state.groups && Object.keys(this.state.groups).length || 0;
      var listProps = (0, _getListProps2.default)({
        props: props,
        state: state,
        computed: {
          data: data,
          loading: this.getLoading(),
          activeItem: this.getActiveItem(),
          value: this.getValue(),
          dataLength: data && data.length + groupsLength || 0,
          getIdProperty: this.getIdProperty,
          getDisplayProperty: this.getDisplayProperty,
          onItemClick: this.handleItemClick,
          getComboNode: this.getComboNode,
          ref: this.addListRef,
          onScrollBottom: this.handleListScrollBottom,
          text: this.getText(),
          isNewCustomTagValid: this.isNewCustomTagValid
        }
      });
      return listProps;
    }
  }, {
    key: "getValueProps",
    value: function getValueProps(_ref) {
      var items = _ref.items,
        groupedItems = _ref.groupedItems,
        item = _ref.item;
      var props = this.props,
        state = this.state;
      var value = this.getValue();
      return (0, _getValueProps2.default)({
        props: props,
        state: state,
        computed: {
          items: items,
          item: item,
          groupedItems: groupedItems,
          value: value,
          label: this.getItemLabel(),
          activeTag: this.getActiveTag()
        },
        tagProps: {
          activeStyle: props.tagActiveStyle,
          onClick: this.handleTagClick,
          onCloseTagClick: this.handleRemoveTag,
          onMultipleTagClose: this.handleRemoveMultipleTag
        }
      });
    }
  }, {
    key: "loadDataSource",
    value: function loadDataSource(dataSource) {
      var _this2 = this;
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;
      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyObject,
        appendTo = _ref2.appendTo,
        action = _ref2.action,
        value = _ref2.value,
        text = _ref2.text,
        skip = _ref2.skip,
        limit = _ref2.limit,
        hasNextPage = _ref2.hasNextPage;
      if (Array.isArray(dataSource)) {
        if (this.getLoading()) {
          this.setLoading(false);
        }
        this.setData(dataSource, props, {
          appendTo: appendTo
        });
        return;
      }
      if (dataSource && Array.isArray(dataSource.data)) {
        if (this.getLoading()) {
          this.setLoading(false);
        }
        this.setData(dataSource.data, props, {
          remoteCount: dataSource.count != null ? dataSource.count * 1 : null,
          appendTo: appendTo
        });
        return;
      }
      if (dataSource && dataSource.then) {
        this.setLoading(true);
        dataSource.then(function (data) {
          _this2.props.onDataSourceLoad(data);
          _this2.loadDataSource(data, props, {
            appendTo: appendTo
          });
        });
        return;
      }
      if (typeof dataSource === 'function') {
        var config = _objectSpread(_objectSpread({}, props), {}, {
          data: this.state.data,
          hasNextPage: hasNextPage !== undefined ? hasNextPage : this.hasNextPage(),
          text: this.isRemoteFilter() ? text !== undefined ? text : this.getText() : undefined,
          skip: skip || 0,
          action: action,
          append: !!appendTo,
          value: value !== undefined ? value : this.getValue(),
          limit: limit !== undefined ? limit : this.props.limit
        });
        var dataResult = dataSource(config);
        this.loadDataSource(dataResult, undefined, {
          appendTo: config.append === false ? null : appendTo
        });
      }
      if (!dataSource) {
        this.setData(null, props);
      }
    }
  }, {
    key: "setData",
    value: function setData(data) {
      var _this3 = this;
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;
      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyObject,
        remoteCount = _ref3.remoteCount,
        appendTo = _ref3.appendTo;
      if (!data) {
        this.setState({
          data: null,
          dataMap: null,
          filteredData: null,
          remoteCount: null
        });
        return null;
      }
      if (Array.isArray(appendTo)) {
        data = appendTo.concat(data);
      }
      var dataMap = data.reduce(function (acc, item) {
        acc[_this3.getIdProperty(item)] = item;
        return acc;
      }, {});
      if (props.groupProperty) {
        this.updateGroups({
          data: data,
          groupProperty: props.groupProperty
        });
      }
      this.updateValueMap({
        value: this.getValue(props),
        dataMap: dataMap,
        oldValueMap: this.getValueMap()
      });
      this.updateFilteredData({
        data: data
      });
      this.setState({
        data: data,
        dataMap: dataMap,
        remoteCount: remoteCount
      });
    }
  }, {
    key: "getPageCount",
    value: function getPageCount() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var count = this.getDataCountForPagination(props);
      return (0, _PaginationToolbar.getPageCount)({
        count: count,
        limit: props.limit
      });
    }
  }, {
    key: "hasNextPage",
    value: function hasNextPage() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      return this.getCurrentPage(props) < this.getPageCount(props);
    }
  }, {
    key: "getCurrentPage",
    value: function getCurrentPage() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var limit = props.limit,
        skip = props.skip;
      return (0, _PaginationToolbar.getCurrentPage)({
        skip: this.previousSkip ? this.previousSkip : 0,
        limit: limit
      });
    }
  }, {
    key: "isLastPage",
    value: function isLastPage() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
    }
  }, {
    key: "getDataCountForPagination",
    value: function getDataCountForPagination() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var data = this.getData();
      var count = this.isPaginationEnabled(props) ? props.remoteCount || this.state.remoteCount : data ? data.length : 0;
      return count || 0;
    }
  }, {
    key: "getFilteredData",
    value: function getFilteredData() {
      return this.state.filteredData;
    }
  }, {
    key: "getData",
    value: function getData() {
      return this.state.data;
    }
  }, {
    key: "loadLazyDataSource",
    value: function loadLazyDataSource(_ref4) {
      var action = _ref4.action,
        text = _ref4.text;
      if (!this.props.lazyDataSource) {
        return null;
      }
      var params = {
        action: action,
        text: text,
        value: this.getValue()
      };
      this.setData(null);
      this.loadDataSource(this.props.dataSource, undefined, params);
      return null;
    }
  }, {
    key: "isPaginationEnabled",
    value: function isPaginationEnabled() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var hasLoadNextPage = typeof props.loadNextPage === 'function';
      var hasFunctionalDataSource = typeof props.dataSource === 'function';
      if (props.enablePagination === false) {
        return false;
      }
      return props.enablePagination ? hasLoadNextPage || hasFunctionalDataSource : hasLoadNextPage;
    }
  }, {
    key: "remoteFilterData",
    value: function remoteFilterData() {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref5$text = _ref5.text,
        text = _ref5$text === void 0 ? this.getText() : _ref5$text,
        _ref5$value = _ref5.value,
        value = _ref5$value === void 0 ? this.getValue() : _ref5$value,
        filterType = _ref5.filterType;
      this.previousSkip = null;
      this.loadDataSource(this.props.dataSource, undefined, {
        text: text,
        skip: 0
      });
    }
  }, {
    key: "loadNextPage",
    value: function loadNextPage() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var filteredData = this.getFilteredData();
      if (filteredData && filteredData.length < 3) {
        return null;
      }
      if (this.previousSkip == null) {
        this.previousSkip = props.skip;
      }
      var limit = props.limit;
      var hasNextPage = this.hasNextPage();
      var newSkip = this.previousSkip + limit;
      this.previousSkip = newSkip;
      if (!this.isPaginationEnabled()) {
        return;
      }
      var fn = typeof props.dataSource === 'function' ? props.dataSource : null;
      if (fn && hasNextPage) {
        var currentData = this.state.data;
        this.loadDataSource(this.props.dataSource, undefined, {
          appendTo: currentData,
          hasNextPage: hasNextPage,
          skip: newSkip,
          limit: limit,
          filter: this.currentFilter
        });
      }
    }
  }, {
    key: "isRemoteDataSource",
    value: function isRemoteDataSource() {
      return typeof this.props.dataSource === 'function';
    }
  }, {
    key: "isRemoteFilter",
    value: function isRemoteFilter() {
      return (0, _typeof2.default)(this.isRemoteDataSource()) && this.props.remoteFilter;
    }
  }, {
    key: "doFilter",
    value: function doFilter() {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        text = _ref6.text,
        value = _ref6.value,
        force = _ref6.force,
        data = _ref6.data,
        filterType = _ref6.filterType,
        action = _ref6.action;
      if (this.currentFilter === text && !force) {
        return;
      }
      this.currentFilter = text;
      if (this.isRemoteFilter()) {
        if (action === 'select') {
          return;
        }
        this.remoteFilterData({
          value: value,
          text: text,
          filterType: filterType
        });
      } else {
        this.updateFilteredData({
          text: text,
          value: value,
          data: data,
          filterType: filterType
        });
      }
    }
  }, {
    key: "updateFilteredData",
    value: function updateFilteredData() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref7$text = _ref7.text,
        text = _ref7$text === void 0 ? this.getText() : _ref7$text,
        _ref7$value = _ref7.value,
        value = _ref7$value === void 0 ? this.getValue() : _ref7$value,
        _ref7$data = _ref7.data,
        data = _ref7$data === void 0 ? this.state.data : _ref7$data,
        filterType = _ref7.filterType;
      var filteredData = data;
      if (!Array.isArray(filteredData)) {
        return filteredData;
      }
      if (!this.isRemoteFilter()) {
        filteredData = this.filterDataByText({
          text: text,
          data: filteredData
        });
        filteredData = this.filterDataByValue({
          value: value,
          text: text,
          data: filteredData
        });
      }
      var isFilteredByText = filterType === 'text' && data.length !== filteredData.length;
      if (isFilteredByText && this.props.activeFirstItemOnFilter) {
        var firstItem = filteredData && filteredData[0];
        if (firstItem) {
          var id = this.getIdProperty(firstItem);
          this.setActiveItem(id);
        } else {
          this.setActiveItem(null);
        }
      }
      this.setState({
        filteredData: filteredData
      });
    }
  }, {
    key: "filterDataByValue",
    value: function filterDataByValue(_ref8) {
      var _ref8$value = _ref8.value,
        value = _ref8$value === void 0 ? this.getValue() : _ref8$value,
        _ref8$data = _ref8.data,
        data = _ref8$data === void 0 ? this.state.data : _ref8$data;
      if (!Array.isArray(data)) {
        return data;
      }
      var newData = data;
      if (data && value && this.props.removeSelectedItems) {
        newData = (0, _filterByValue.default)({
          data: newData,
          getIdProperty: this.getIdProperty,
          value: value
        });
      }
      return newData;
    }
  }, {
    key: "filterDataByText",
    value: function filterDataByText(_ref9) {
      var _ref9$text = _ref9.text,
        text = _ref9$text === void 0 ? this.getText() : _ref9$text,
        _ref9$data = _ref9.data,
        data = _ref9$data === void 0 ? this.state.data : _ref9$data;
      if (!data || !text) {
        return data;
      }
      var newData = data;
      if (this.isFilterTextActive()) {
        var filterFunction = this.props.filterFunction;
        newData = (0, _filterByText.default)({
          data: data,
          text: text,
          filterFunction: filterFunction,
          getFilterProperty: this.getFilterProperty || this.getDisplayProperty,
          mode: this.props.filterMode,
          hightlight: this.props.highlightMatchedText
        });
      }
      return newData;
    }
  }, {
    key: "getDataMap",
    value: function getDataMap() {
      return this.state.dataMap;
    }
  }, {
    key: "getValueMap",
    value: function getValueMap() {
      return this.state.valueMap;
    }
  }, {
    key: "isValueControlled",
    value: function isValueControlled() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      return props.value !== undefined;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      return this.isValueControlled(props) ? props.value : this.state.value;
    }
  }, {
    key: "setValue",
    value: function setValue(newValue) {
      var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        action = _ref10.action;
      if (this.props.disabled) {
        return null;
      }
      if (this.props.readOnly) {
        return null;
      }
      if (this.props.maxValueLength && newValue && newValue.length > this.props.maxValueLength) {
        return null;
      }
      if (this.props.collapseOnSelect && action !== 'navigate') {
        this.collapse();
      }
      if (this.props.autoBlur) {
        this.blur();
      }
      if (!this.isValueControlled()) {
        this.setState({
          value: newValue
        });
      }
      this.setText(null, {
        skipFilter: true
      });
      this.updateValueMap({
        value: newValue
      });
      this.props.onChange(newValue);
    }
  }, {
    key: "isFilterTextActive",
    value: function isFilterTextActive() {
      var text = this.getText();
      var data = this.getFilteredData();
      return data && text && this.props.searchable && text.length >= this.props.filterMinLength;
    }
  }, {
    key: "updateValueMap",
    value: function updateValueMap(_ref11) {
      var _this4 = this;
      var value = _ref11.value,
        dataMap = _ref11.dataMap,
        oldValueMap = _ref11.oldValueMap;
      var newValueMap = (0, _getValueMap.default)({
        value: value,
        dataMap: dataMap || this.getDataMap(),
        oldValueMap: oldValueMap || this.getValueMap()
      });
      if (newValueMap) {
        newValueMap = Object.keys(newValueMap).reduce(function (acc, id) {
          var item = newValueMap[id];
          acc[id] = _objectSpread(_objectSpread({}, item), {}, {
            id: _this4.getIdProperty(item),
            label: _this4.getDisplayProperty(item) || item
          });
          return acc;
        }, {});
      }
      this.setState({
        valueMap: newValueMap
      });
    }
  }, {
    key: "selectItem",
    value: function selectItem(id) {
      var dataMap = this.getDataMap();
      var item = dataMap && dataMap[id];
      if (!item && !this.props.allowCustomTagCreation) {
        return null;
      }
      if (typeof this.props.isSelectedItemValid === 'function') {
        var isItemValid = this.props.isSelectedItemValid(item);
        if (!isItemValid) {
          return null;
        }
      }
      var value = this.getValue();
      var newValue;
      if (this.props.multiple) {
        newValue = (0, _getNewMultipleValue.default)({
          id: id,
          value: value
        });
      } else {
        newValue = (0, _getNewSingleValue.default)({
          id: id,
          value: value,
          toggle: this.props.changeValueOnNavigation ? false : this.props.allowSelectionToggle
        });
      }
      this.setValue(newValue, {
        action: 'select'
      });
      this.props.onItemClick({
        item: item,
        id: id
      });
    }
  }, {
    key: "deselectItem",
    value: function deselectItem(id) {
      var value = this.getValue();
      var newValue = (0, _deselectValue.default)({
        id: id,
        value: value,
        getIdProperty: this.getIdProperty
      });
      this.setValue(newValue);
    }
  }, {
    key: "deselectItems",
    value: function deselectItems() {
      var _this5 = this;
      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var value = this.getValue();
      var newValue = ids.reduce(function (acc, id) {
        acc = (0, _deselectValue.default)({
          id: id,
          value: acc,
          getIdProperty: _this5.getIdProperty
        });
        return acc;
      }, value);
      this.setValue(newValue);
    }
  }, {
    key: "getExpanded",
    value: function getExpanded() {
      return this.isExpandedControlled() ? this.props.expanded : this.expanded != null ? this.expanded : this.state.expanded;
    }
  }, {
    key: "isExpandedControlled",
    value: function isExpandedControlled() {
      return this.props.expanded !== undefined;
    }
  }, {
    key: "setExpanded",
    value: function setExpanded(expanded) {
      var _this6 = this;
      if (this.expandedPromise) {
        this.expandedPromise.then(function (result) {
          if (_this6.getExpanded() !== expanded) {
            _this6.setExpanded(expanded);
          }
        });
        return;
      }
      this.expandedPromise = this.doSetExpanded(expanded).then(function () {
        delete _this6.expandedPromise;
      });
    }
  }, {
    key: "doSetExpanded",
    value: function doSetExpanded(expanded) {
      var _this7 = this;
      if (this.props.disabled) {
        return Promise.resolve(null);
      }
      var currentExpanded = this.getExpanded();
      if (currentExpanded === expanded) {
        return Promise.resolve(expanded);
      }
      if (!expanded && this.isRemoteFilter()) {
        this.previousSkip = null;
      }
      globalObject.requestAnimationFrame(function () {
        if (_this7.toolsNode) {
          _this7.handleToolsSize();
        }
      });
      var promise;
      if (!this.isExpandedControlled()) {
        promise = new Promise(function (resolve, reject) {
          _this7.setState({
            expanded: expanded
          }, function () {
            resolve(expanded);
          });
        });
      } else {
        promise = Promise.resolve(expanded);
      }
      if (expanded) {
        if (this.isRemoteDataSource() && this.state.data === undefined) {
          this.loadDataSource(this.props.dataSource);
        } else {
          if (this.wasExpandedAtLeastOnce) {
            this.doFilter({
              text: '',
              action: 'expand',
              force: true
            });
          }
        }
      }
      if (expanded && !this.wasExpandedAtLeastOnce) {
        this.wasExpandedAtLeastOnce = true;
      }
      if (expanded) {
        this.onExpand();
      } else {
        this.props.onCollapse();
      }
      this.props.onExpandChange(expanded);
      this.props.onExpandedChange(expanded);
      return promise;
    }
  }, {
    key: "onExpand",
    value: function onExpand() {
      this.props.onExpand();
      if (this.props.highlightFirst) {
        var activeItem = this.getActiveItem();
        if (!activeItem) {
          var firstItem = this.getItemByIndex(0);
          if (firstItem) {
            var id = this.getIdProperty(firstItem);
            this.setActiveItem(id);
          }
        }
      }
    }
  }, {
    key: "isActiveTagControlled",
    value: function isActiveTagControlled() {
      return this.props.activeTag !== undefined;
    }
  }, {
    key: "setActiveTag",
    value: function setActiveTag(id) {
      if (this.props.disabled) {
        return null;
      }
      if (!this.isActiveTagControlled()) {
        this.setState({
          activeTag: id
        });
      }
      this.props.onActiveTagChange(id);
    }
  }, {
    key: "deselectActiveTag",
    value: function deselectActiveTag() {
      var activeTag = this.getActiveTag();
      if (activeTag) {
        this.setActiveTag(null);
      }
    }
  }, {
    key: "getActiveTag",
    value: function getActiveTag() {
      return this.isActiveTagControlled() ? this.props.activeTag : this.state.activeTag;
    }
  }, {
    key: "getSelectedItems",
    value: function getSelectedItems() {
      var _this8 = this;
      var valueMap = this.getValueMap();
      var value = this.getValue();
      var items = null;
      if (value) {
        value = Array.isArray(value) ? value : [value];
        items = value.map(function (id) {
          return valueMap[id] || {
            id: (0, _typeof2.default)(id) === 'object' ? _this8.getIdProperty(id) : id,
            label: (0, _typeof2.default)(id) === 'object' ? _this8.getDisplayProperty(id) : _this8.getItemLabel(id)
          };
        });
      }
      return items;
    }
  }, {
    key: "getItemLabel",
    value: function getItemLabel(id) {
      id = id === undefined ? this.getValue() : id;
      var valueMap = this.getValueMap();
      var dataMap = this.getDataMap();
      var label;
      if (valueMap && valueMap[id]) {
        label = valueMap[id].label;
      } else if (dataMap && dataMap[id]) {
        label = this.getDisplayProperty(dataMap[id]);
      }
      if (label === undefined) {
        label = this.props.defaultDisplayValue !== undefined && id != null ? this.props.defaultDisplayValue : id;
      }
      return label;
    }
  }, {
    key: "getGroupedItems",
    value: function getGroupedItems(items) {
      var maxTagsLength = this.props.maxTagsLength;
      if (maxTagsLength == null || !items) {
        return null;
      }
      return (0, _groupItems.default)({
        maxTagsLength: maxTagsLength,
        items: items
      });
    }
  }, {
    key: "isActiveItemControlled",
    value: function isActiveItemControlled() {
      return this.props.activeItem !== undefined;
    }
  }, {
    key: "setActiveItem",
    value: function setActiveItem(id) {
      if (this.props.disabled) {
        return null;
      }
      var activeItem = this.getActiveItem();
      if (activeItem === id) {
        return null;
      }
      if (!this.isActiveItemControlled()) {
        var activeItemIndex = null;
        if (id) {
          activeItemIndex = this.getItemIndexById(id);
        }
        this.setState({
          activeItemIndex: activeItemIndex,
          activeItem: id
        });
        if (this.props.changeValueOnNavigation && !this.props.multiple) {
          this.setValue(id, {
            action: 'navigate'
          });
        }
      }
      this.scrollToId(id);
      this.props.onActiveItemChange(id);
    }
  }, {
    key: "getActiveItem",
    value: function getActiveItem() {
      return this.isActiveItemControlled() ? this.props.activeItem : this.state.activeItem;
    }
  }, {
    key: "isTextControled",
    value: function isTextControled() {
      return this.props.text != null;
    }
  }, {
    key: "getText",
    value: function getText() {
      return this.isTextControled() ? this.props.text : this.state.text;
    }
  }, {
    key: "setText",
    value: function setText(text) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFn;
      if (typeof config === 'function') {
        callback = config;
        config = emptyObject;
      }
      if (text === this.getText()) {
        callback();
        return;
      }
      if (!this.isTextControled()) {
        this.setStateText(text, config, callback);
      }
      this.props.onTextChange(text);
    }
  }, {
    key: "setStateText",
    value: function setStateText(text) {
      var _this9 = this;
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFn;
      if (typeof config === 'function') {
        callback = config;
        config = emptyObject;
      }
      this.setState({
        text: text
      }, function () {
        _this9.onTextUpdate(text, config);
        callback();
      });
    }
  }, {
    key: "onTextUpdate",
    value: function onTextUpdate(text) {
      var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject,
        skipFilter = _ref12.skipFilter;
      this.clearValueOnEmptyIfNecessary(text);
      if (!skipFilter) {
        this.doFilter({
          text: text,
          filterType: 'text'
        });
      }
    }
  }, {
    key: "clearValueOnEmptyIfNecessary",
    value: function clearValueOnEmptyIfNecessary(text) {
      if (this.props.clearValueOnEmpty && !this.props.multiple && text === '') {
        this.setValue(null);
      }
    }
  }, {
    key: "getLoading",
    value: function getLoading() {
      return this.isLoadingControlled() ? this.props.loading : this.state.loading;
    }
  }, {
    key: "isLoadingControlled",
    value: function isLoadingControlled() {
      return this.props.loading != null;
    }
  }, {
    key: "setLoading",
    value: function setLoading(loading) {
      if (loading === this.state.loading) {
        return;
      }
      if (!this.isLoadingControlled()) {
        this.setState({
          loading: loading
        });
      }
      this.props.onLoadingChange(loading);
    }
  }, {
    key: "handleComboClick",
    value: function handleComboClick(event) {
      event.preventDefault();
      if (this.props.toggleExpandOnClick) {
        this.toggleExpand();
      } else if (this.props.expandOnClick) {
        this.expand();
      }
      if (this.props.focusOnClick && !this.hasFocus()) {
        this.focus();
      }
    }
  }, {
    key: "handleMouseEnter",
    value: function handleMouseEnter() {
      this.setState({
        over: true
      });
    }
  }, {
    key: "handleMouseLeave",
    value: function handleMouseLeave() {
      this.setState({
        over: false
      });
    }
  }, {
    key: "handleComboFocus",
    value: function handleComboFocus() {
      if (this.props.expandOnFocus) {
        this.expand();
      }
      this.setState({
        focus: true
      });
      this.props.onFocus();
    }
  }, {
    key: "handleComboBlur",
    value: function handleComboBlur(event) {
      var _this10 = this;
      if (this.isFocused() && event && event.relatedTarget && (0, _containsNode.default)(this.comboNode, event.relatedTarget)) {
        globalObject.requestAnimationFrame(function () {
          _this10.focus();
        });
        return;
      }
      if (this.props.collapseOnBlur) {
        this.collapse();
      }
      if (this.props.clearTextOnBlur) {
        this.setText(null);
      }
      this.setState({
        focus: false
      });
      this.props.onBlur();
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.state.focus;
    }
  }, {
    key: "handleItemClick",
    value: function handleItemClick(id) {
      if (!this.isFocused() && this.props.focusOnClick) {
        this.focus();
      }
      this.setActiveItem(id);
      this.selectItem(id);
    }
  }, {
    key: "handleTextChange",
    value: function handleTextChange(text) {
      var _this11 = this;
      this.deselectActiveTag();
      this.setText(text, {
        skipFilter: this.props.expandOnTextChange && !this.getExpanded()
      }, function () {
        if (_this11.props.expandOnTextChange) {
          _this11.expand();
        }
      });
    }
  }, {
    key: "handleTextInputClick",
    value: function handleTextInputClick() {
      this.deselectActiveTag();
    }
  }, {
    key: "handleRemoveTag",
    value: function handleRemoveTag(id) {
      this.removeTag(id);
    }
  }, {
    key: "handleRemoveMultipleTag",
    value: function handleRemoveMultipleTag(ids) {
      this.deselectItems(ids);
    }
  }, {
    key: "handleListScrollBottom",
    value: function handleListScrollBottom() {
      this.loadNextPage();
    }
  }, {
    key: "removeTag",
    value: function removeTag(id) {
      var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var activeTag = this.getActiveTag();
      if (activeTag === id && activeTag != null) {
        var value = this.getValue();
        var newActiveTag = (0, _getNewActiveTagOnRemove.default)({
          id: id,
          value: value,
          dir: dir
        });
        this.setActiveTag(newActiveTag);
      }
      this.deselectItem(id);
    }
  }, {
    key: "removeRemainingTags",
    value: function removeRemainingTags() {
      var ids = this.groupedItems.remainingItems.map(function (item) {
        return item.id;
      });
      var visibleItems = this.groupedItems.visibleItems;
      var activeTag = this.getActiveTag();
      if (activeTag === REMAINING_ITEMS) {
        var lastItem = Array.isArray(visibleItems) && visibleItems[visibleItems.length - 1];
        if (lastItem) {
          this.setActiveTag(lastItem.id);
        }
      } else {
        this.deselectActiveTag();
      }
      this.removeTags(ids);
    }
  }, {
    key: "removeTags",
    value: function removeTags(ids) {
      this.deselectItems(ids);
    }
  }, {
    key: "handleTagClick",
    value: function handleTagClick(id) {
      var activeTag = this.getActiveTag();
      if (activeTag === id) {
        this.setActiveTag(null);
      } else {
        this.setActiveTag(id);
      }
      this.props.onTagClick(this.getItemById(id));
      if (this.props.focusOnClick && !this.hasFocus()) {
        this.focus();
      }
    }
  }, {
    key: "handleComboMouseDown",
    value: function handleComboMouseDown(event) {
      event.preventDefault();
    }
  }, {
    key: "handleComboKeyDown",
    value: function handleComboKeyDown(event) {
      if (this.props.allowCustomTagCreation && event.key === 'Enter') {
        if (this.isNewCustomTagValid) {
          this.selectItem(this.getText());
          this.setText(null);
        }
      }
      if (this.props.enableNavigation) {
        if (this.props.enableListNavigation) {
          switch (event.key) {
            case 'ArrowDown':
              this.navigateToNextItem(1, event);
              break;
            case 'ArrowUp':
              this.navigateToNextItem(-1, event);
              break;
            case 'Enter':
              this.handleEnterKeyPress(event);
              break;
            case 'Space':
              this.selectActiveItem();
              break;
          }
        }
        if (this.props.enableTagNavigation) {
          switch (event.key) {
            case 'ArrowLeft':
              this.navigateToNextTag(-1, event);
              break;
            case 'ArrowRight':
              this.navigateToNextTag(1, event);
              break;
            case 'Backspace':
              this.handleBackspace(event);
              break;
            case 'Delete':
              this.handleDelete(event);
          }
        }
      }
      if (event.key === 'Escape') {
        var expanded = this.getExpanded();
        if (this.props.collapseOnEscape) {
          if (expanded) {
            this.collapse();
          }
        }
        if (!expanded && this.getActiveTag()) {
          this.setActiveTag(null);
        }
        if (!this.props.multiple) {
          this.setText(null);
        }
      }
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event, this);
      }
    }
  }, {
    key: "navigateToNextItem",
    value: function navigateToNextItem(direction, event) {
      var data = this.getFilteredData();
      if (event && event.preventDefault) {
        event.preventDefault();
      }
      if (this.getExpanded()) {
        var activeItem = this.getActiveItem();
        var newActiveItem;
        if (activeItem != null) {
          newActiveItem = (0, _getNextItem.default)({
            direction: direction,
            data: data,
            id: activeItem,
            activeItem: activeItem,
            getIdProperty: this.getIdProperty
          });
        } else {
          var firstItemId;
          var lastItemId;
          if (data && data.length) {
            firstItemId = this.getIdProperty(data[0]);
            lastItemId = this.getIdProperty(data[data.length - 1]);
            if (direction && firstItemId != null) {
              newActiveItem = firstItemId;
            }
            if (direction === -1 && lastItemId != null) {
              newActiveItem = lastItemId;
            }
          }
        }
        this.setActiveItem(newActiveItem);
      } else {
        this.expand();
      }
    }
  }, {
    key: "selectActiveItem",
    value: function selectActiveItem() {
      var activeItem = this.getActiveItem();
      if (activeItem) {
        this.selectItem(activeItem);
      }
    }
  }, {
    key: "handleEnterKeyPress",
    value: function handleEnterKeyPress(event) {
      var expanded = this.getExpanded();
      if (expanded) {
        this.selectActiveItem();
      }
      var activeItem = this.getActiveItem();
      if (this.props.collapseOnSelectWithEnter) {
        if (activeItem && expanded) {
          this.collapse();
        }
      }
      if (this.props.navigateToNextAfterSelection && this.props.multiple && activeItem) {
        this.navigateToNextItem(1, event);
      }
    }
  }, {
    key: "navigateToNextTag",
    value: function navigateToNextTag(direction, event) {
      if (!this.isNavigationAllowed(direction)) {
        return null;
      }
      if (event && event.preventDefault) {
        event.preventDefault();
      }
      var newActiveTag;
      var items = this.getSelectedItems();
      var itemsIds;
      if (this.areItemsGrouped) {
        var visibleItems = this.groupedItems.visibleItems.map(function (item) {
          return item.id;
        });
        itemsIds = [].concat((0, _toConsumableArray2.default)(visibleItems), [REMAINING_ITEMS]);
      } else {
        itemsIds = items.map(function (item) {
          return item.id;
        });
      }
      var currentActiveTag = this.getActiveTag();
      var currentIndex = itemsIds.indexOf(currentActiveTag);
      var lastIndex = itemsIds.length - 1;
      var lastTag = itemsIds[lastIndex];
      var firstTag = itemsIds[0];
      var isFirstTag = currentIndex === 0;
      var isLastTag = currentIndex === lastIndex;
      if (direction === -1 && isFirstTag) {
        this.setActiveTag(null);
        return null;
      }
      if (direction === 1 && isLastTag) {
        this.setActiveTag(null);
        return null;
      }
      if (currentActiveTag === null || currentIndex === -1) {
        newActiveTag = direction === -1 ? lastTag : firstTag;
      } else {
        if (direction === -1) {
          newActiveTag = isFirstTag ? lastTag : itemsIds[currentIndex - 1];
        } else if (direction === 1) {
          newActiveTag = isLastTag ? firstTag : itemsIds[currentIndex + 1];
        }
      }
      this.setActiveTag(newActiveTag);
      return null;
    }
  }, {
    key: "isNavigationAllowed",
    value: function isNavigationAllowed(direction) {
      if (!this.props.multiple) {
        return false;
      }
      var inputNode = this.getTextInputNode();
      if (inputNode.hasSelection()) {
        return false;
      }
      var currentActiveTag = this.getActiveTag();
      var canNavigateLeft = inputNode.isCursorAtStartPosition() && direction === -1;
      var canNavigateRight = inputNode.isCursorAtEndPosition() && direction === 1;
      if (!canNavigateRight && !canNavigateLeft && !currentActiveTag) {
        return false;
      }
      var items = this.getSelectedItems();
      if (!Array.isArray(items)) {
        return false;
      }
      if (items.length === 1 && currentActiveTag) {
        this.setActiveTag(null);
        return false;
      }
      return true;
    }
  }, {
    key: "handleBackspace",
    value: function handleBackspace(event) {
      if (this.props.multiple) {
        this.handleTagBackspaceRemove(event);
      }
    }
  }, {
    key: "handleDelete",
    value: function handleDelete(event) {
      var activeTag = this.getActiveTag();
      if (this.props.multiple && activeTag) {
        this.removeTag(activeTag, 1);
      }
    }
  }, {
    key: "handleTagBackspaceRemove",
    value: function handleTagBackspaceRemove(event) {
      if (!this.props.removeTagOnBackspace) {
        return null;
      }
      var value = this.getValue();
      if (!value) {
        return null;
      }
      var activeTag = this.getActiveTag();
      if (activeTag != null) {
        event.preventDefault();
        if (activeTag === REMAINING_ITEMS) {
          this.removeRemainingTags();
        } else {
          this.removeTag(activeTag, -1);
        }
        return null;
      }
      var inputNode = this.getTextInputNode();
      var canDeleteTag = value && value.length && inputNode.isCursorAtStartPosition();
      if (canDeleteTag) {
        if (this.areItemsGrouped) {
          var ids = this.groupedItems.remainingItems.map(function (item) {
            return item.id;
          });
          this.removeTags(ids);
        } else {
          var items = this.getSelectedItems();
          var lastItem = items[items.length - 1];
          var lastItemId = lastItem.id;
          if (this.props.keepTagTextOnRemove) {
            var label = lastItem.label;
            if (label && typeof label === 'string') {
              this.setText(label);
            }
          }
          this.removeTag(lastItemId);
        }
      }
      return null;
    }
  }, {
    key: "handleToolsSize",
    value: function handleToolsSize() {
      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toolsNode ? this.toolsNode.getBoundingClientRect() : {
        width: 0,
        height: 0
      };
      var node = this.comboNode;
      var computedStyle = globalObject.getComputedStyle(node);
      var width = size.width + parseInt(computedStyle.paddingLeft, 10) + parseInt(computedStyle.paddingRight, 10);
      this.setState({
        toolsSize: {
          height: size.height,
          width: width
        }
      });
    }
  }, {
    key: "expand",
    value: function expand() {
      this.setExpanded(true);
    }
  }, {
    key: "collapse",
    value: function collapse() {
      this.setExpanded(false);
    }
  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(index) {
      var listNode = this.getListNode();
      return listNode && listNode.scrollToIndex(index);
    }
  }, {
    key: "getItemIndexById",
    value: function getItemIndexById(id) {
      var index = (0, _findItemIndex.default)({
        id: id,
        data: this.getFilteredData(),
        getIdProperty: this.getIdProperty
      });
      return index;
    }
  }, {
    key: "scrollToId",
    value: function scrollToId(id) {
      var index = this.getItemIndexById(id);
      if (index != null) {
        this.scrollToIndex(index);
      }
    }
  }, {
    key: "toggleExpand",
    value: function toggleExpand() {
      var expanded = this.getExpanded();
      if (expanded) {
        this.collapse();
      } else {
        this.expand();
      }
    }
  }, {
    key: "getItemByIndex",
    value: function getItemByIndex(index) {
      var data = this.getFilteredData();
      if (!data || !Array.isArray(data) || !data[index]) {
        return null;
      }
      return data[index];
    }
  }, {
    key: "getItemById",
    value: function getItemById(id) {
      var dataMap = this.getDataMap();
      return dataMap && dataMap[id] || id;
    }
  }, {
    key: "updateGetIdProperty",
    value: function updateGetIdProperty(props) {
      props = props || this.props;
      this.getIdProperty = (0, _getDataProp.default)(props.idProperty);
    }
  }, {
    key: "updateGetDisplayProperty",
    value: function updateGetDisplayProperty(props) {
      props = props || this.props;
      this.getDisplayProperty = (0, _getDataProp.default)(props.displayProperty);
    }
  }, {
    key: "updateGetFilterProperty",
    value: function updateGetFilterProperty(props) {
      props = props || this.props;
      this.getFilterProperty = (0, _getDataProp.default)(props.filterProperty);
    }
  }, {
    key: "updateGroups",
    value: function updateGroups(_ref13) {
      var _ref13$groupProperty = _ref13.groupProperty,
        groupProperty = _ref13$groupProperty === void 0 ? this.props.groupProperty : _ref13$groupProperty,
        _ref13$data = _ref13.data,
        data = _ref13$data === void 0 ? this.getFilteredData() : _ref13$data;
      if (!data) {
        return null;
      }
      var groups = (0, _getGroups.default)(data, groupProperty);
      this.setState({
        groups: groups
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      var textInput = this.getTextInputNode();
      if (textInput && textInput.focus && !this.hasFocus()) {
        textInput.focus();
      }
    }
  }, {
    key: "blur",
    value: function blur() {
      var textInput = this.getTextInputNode();
      if (textInput && textInput.blur) {
        textInput.blur();
      }
    }
  }, {
    key: "hasFocus",
    value: function hasFocus() {
      var textInput = this.getTextInputNode();
      if (textInput && textInput.hasFocus) {
        return textInput.hasFocus();
      }
      return false;
    }
  }, {
    key: "getTextInputNode",
    value: function getTextInputNode() {
      return this.textInput;
    }
  }, {
    key: "getComboNode",
    value: function getComboNode() {
      return this.comboNode;
    }
  }, {
    key: "getListNode",
    value: function getListNode() {
      return this.listNode;
    }
  }, {
    key: "getVirtualListNode",
    value: function getVirtualListNode() {
      return this.listNode && this.listNode.getVirtualListNode();
    }
  }, {
    key: "getlListNode",
    value: function getlListNode() {
      return this.listNode && this.listNode.getlListNode();
    }
  }, {
    key: "addItem",
    value: function addItem(item) {
      var newData = [].concat((0, _toConsumableArray2.default)(this.getData()), [item]);
      this.setData(newData);
    }
  }, {
    key: "clear",
    value: function clear() {
      var _this12 = this;
      this.setValue(null);
      this.setText(null);
      globalObject.requestAnimationFrame(function () {
        if (_this12.toolsNode) {
          _this12.handleToolsSize();
        }
      });
    }
  }, {
    key: "getItem",
    value: function getItem(id) {
      return this.getItemById(id);
    }
  }, {
    key: "getItemCount",
    value: function getItemCount() {
      var data = this.getData();
      return Array.isArray(data) ? data.length : null;
    }
  }, {
    key: "insertItem",
    value: function insertItem(_ref14) {
      var index = _ref14.index,
        item = _ref14.item;
      var data = this.getData();
      var newData = [].concat((0, _toConsumableArray2.default)(data.slice(0, index)), [item], (0, _toConsumableArray2.default)(data.slice(index)));
      this.setData(newData);
    }
  }, {
    key: "removeItems",
    value: function removeItems(ids) {
      var _this13 = this;
      ids = Array.isArray(ids) ? ids : [ids];
      var data = this.getData();
      var newData = data.filter(function (item) {
        var id = _this13.getIdProperty(item);
        return ids.indexOf(id) === -1;
      });
      this.setData(newData);
    }
  }, {
    key: "toggle",
    value: function toggle() {
      var expanded = this.getExpanded();
      this.setExpanded(!expanded);
    }
  }]);
  return InovuaComboBox;
}(_react.Component);
function emptyFn() {}
InovuaComboBox.defaultProps = {
  rootClassName: 'inovua-react-toolkit-combo-box',
  inlineFlex: false,
  itemEllipsis: true,
  borderRadius: 0,
  shadow: true,
  showShadowOnMouseOver: false,
  clearTextOnBlur: true,
  onKeyDown: emptyFn,
  autoFocus: false,
  autoBlur: false,
  focusOnClick: true,
  onFocus: emptyFn,
  onBlur: emptyFn,
  defaultActiveItem: null,
  highlightFirst: false,
  onTextChange: emptyFn,
  searchable: true,
  tagCloseIconPosition: 'end',
  removeTagOnBackspace: true,
  tagEllipsis: true,
  filterMinLength: 0,
  filterDelay: 300,
  activeFirstItemOnFilter: true,
  clearIcon: true,
  toggleIcon: true,
  showClearIconOnMouseOver: false,
  clearTextOnSelect: true,
  filterMode: 'contains',
  highlightMatchedText: false,
  onActiveTagChange: emptyFn,
  enableTagNavigation: true,
  onTagClick: emptyFn,
  onActiveItemChange: emptyFn,
  keepTagTextOnRemove: true,
  onItemClick: emptyFn,
  onChange: emptyFn,
  minAutocompleteLength: 3,
  autocompleteDelay: 300,
  autocomplete: false,
  defaultValue: null,
  multiple: false,
  removeSelectedItems: false,
  allowSelectionToggle: true,
  clearValueOnEmpty: true,
  onDataSourceLoad: emptyFn,
  idProperty: 'id',
  displayProperty: 'label',
  groupProperty: 'group',
  limit: 50,
  skip: 0,
  onLoadingChange: emptyFn,
  listLoadingText: 'Loading...',
  loadingSpinner: true,
  listEmptyText: 'No data found',
  defaultText: null,
  defaultExpanded: false,
  onExpandedChange: emptyFn,
  onExpandChange: emptyFn,
  collapseOnEscape: true,
  expandOnClick: true,
  expandOnFocus: true,
  collapseOnBlur: true,
  onExpand: emptyFn,
  onCollapse: emptyFn,
  expandOnTextChange: true,
  toggleExpandOnClick: true,
  wrapMultiple: true,
  theme: 'default-light',
  enableNavigation: true,
  enableListNavigation: true,
  navigateToNextAfterSelection: true,
  positions: ['bottom', 'top'],
  offset: 2,
  constrainTo: true
};
var VALUE_TYPE = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool]))]);
InovuaComboBox.propTypes = {
  rootClassName: _propTypes.default.string,
  theme: _propTypes.default.string,
  inlineFlex: _propTypes.default.bool,
  shouldComponentUpdate: _propTypes.default.func,
  lazyDataSource: _propTypes.default.bool,
  remoteFilter: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  readOnly: _propTypes.default.bool,
  rtl: _propTypes.default.bool,
  tabIndex: _propTypes.default.number,
  collapseOnSelect: _propTypes.default.bool,
  clearTextOnBlur: _propTypes.default.bool,
  listEmptyText: _propTypes.default.node,
  listMaxHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  listMinHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  maxTagsLength: _propTypes.default.number,
  defaultLoading: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  onLoadingChange: _propTypes.default.func,
  listLoadingText: _propTypes.default.node,
  loadingSpinner: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool]),
  onKeyDown: _propTypes.default.func,
  onTagClick: _propTypes.default.func,
  clearIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func, _propTypes.default.node]),
  toggleIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func, _propTypes.default.node]),
  showClearIconOnMouseOver: _propTypes.default.bool,
  autoFocus: _propTypes.default.bool,
  autoBlur: _propTypes.default.bool,
  focusOnClick: _propTypes.default.bool,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  borderRadius: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  padding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  border: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  background: _propTypes.default.string,
  shadow: _propTypes.default.bool,
  showShadowOnMouseOver: _propTypes.default.bool,
  emptyClassName: _propTypes.default.string,
  emptyStyle: _propTypes.default.object,
  disabledClassName: _propTypes.default.string,
  disabledStyle: _propTypes.default.object,
  focusedClassName: _propTypes.default.string,
  focusedStyle: _propTypes.default.object,
  itemBackground: _propTypes.default.string,
  disabledItemStyle: _propTypes.default.object,
  disabledItemClassName: _propTypes.default.string,
  renderItem: _propTypes.default.func,
  itemEllipsis: _propTypes.default.bool,
  activeItemStyle: _propTypes.default.object,
  activeItemClassName: _propTypes.default.string,
  selectedItemStyle: _propTypes.default.object,
  limit: _propTypes.default.number,
  skip: _propTypes.default.number,
  loadNextPage: _propTypes.default.func,
  searchable: _propTypes.default.bool,
  placeholder: _propTypes.default.node,
  text: _propTypes.default.string,
  defaultText: _propTypes.default.string,
  onTextChange: _propTypes.default.func,
  filterFunction: _propTypes.default.func,
  filterProperty: _propTypes.default.string,
  loadLazyDataSource: _propTypes.default.func,
  filterMinLength: _propTypes.default.number,
  filterDelay: _propTypes.default.number,
  activeFirstItemOnFilter: _propTypes.default.bool,
  renderInput: _propTypes.default.func,
  inputClassName: _propTypes.default.string,
  inputStyle: _propTypes.default.object,
  clearTextOnSelect: _propTypes.default.bool,
  filterMode: _propTypes.default.oneOf(['startsWith', 'contains']),
  highlightMatchedText: _propTypes.default.bool,
  autocomplete: _propTypes.default.bool,
  minAutocompleteLength: _propTypes.default.number,
  autocompleteDelay: _propTypes.default.number,
  enableNavigatio: _propTypes.default.bool,
  keepTagTextOnRemove: _propTypes.default.bool,
  tagActiveStyle: _propTypes.default.object,
  enableTagNavigation: _propTypes.default.bool,
  activeTag: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  defaultActiveTag: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  onActiveTagChange: _propTypes.default.func,
  allowCustomTagCreation: _propTypes.default.bool,
  enableNavigation: _propTypes.default.bool,
  enableListNavigation: _propTypes.default.bool,
  highlightFirst: _propTypes.default.bool,
  activeItem: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  defaultActiveItem: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  onActiveItemChange: _propTypes.default.func,
  navigateToNextAfterSelection: _propTypes.default.bool,
  onItemClick: _propTypes.default.func,
  onChange: _propTypes.default.func,
  listClassName: _propTypes.default.string,
  selectedStyle: _propTypes.default.object,
  selectedClassName: _propTypes.default.string,
  renderGroup: _propTypes.default.func,
  renderFooter: _propTypes.default.func,
  renderHeader: _propTypes.default.func,
  renderList: _propTypes.default.func,
  renderListComponent: _propTypes.default.func,
  value: VALUE_TYPE,
  defaultValue: VALUE_TYPE,
  defaultDisplayValue: VALUE_TYPE,
  removeSelectedItems: _propTypes.default.bool,
  isSelectedItemValid: _propTypes.default.func,
  maxValueLength: _propTypes.default.number,
  changeValueOnNavigation: _propTypes.default.bool,
  allowSelectionToggle: _propTypes.default.bool,
  clearSelectedOnTextChange: _propTypes.default.bool,
  clearValueOnEmpty: _propTypes.default.bool,
  isNewCustomTagValid: _propTypes.default.func,
  multiple: _propTypes.default.bool,
  renderTag: _propTypes.default.func,
  renderTagLabel: _propTypes.default.func,
  renderRemainingTags: _propTypes.default.func,
  renderTags: _propTypes.default.func,
  tagStyle: _propTypes.default.object,
  tagBorder: _propTypes.default.string,
  tagPadding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  tagHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  tagWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  tagMinSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
    height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  })]),
  tagMaxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
    height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  })]),
  tagCloseIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node, _propTypes.default.func]),
  tagCloseIconPosition: _propTypes.default.oneOf(['start', 'end']),
  tagEllipsis: _propTypes.default.bool,
  removeTagOnBackspace: _propTypes.default.bool,
  renderDisplayValue: _propTypes.default.func,
  dataSource: function dataSource(props, propName) {
    var dataSource = props[propName];
    if (dataSource != null && typeof dataSource !== 'function' && !Array.isArray(dataSource) && !(dataSource && dataSource.then)) {
      return new Error('dataSource must be an array, null, a promise or a function returning a promise.');
    }
    return null;
  },
  onDataSourceLoad: _propTypes.default.func,
  idProperty: _propTypes.default.string,
  displayProperty: _propTypes.default.string,
  groupProperty: _propTypes.default.string,
  listStyle: _propTypes.default.object,
  relativeToViewport: _propTypes.default.bool,
  expanded: _propTypes.default.bool,
  defaultExpanded: _propTypes.default.bool,
  onExpandedChange: _propTypes.default.func,
  onExpandChange: _propTypes.default.func,
  collapseOnEscape: _propTypes.default.bool,
  expandOnClick: _propTypes.default.bool,
  expandOnFocus: _propTypes.default.bool,
  collapseOnBlur: _propTypes.default.bool,
  enablePagination: _propTypes.default.bool,
  onExpand: _propTypes.default.func,
  onCollapse: _propTypes.default.func,
  virtualListFactory: _propTypes.default.func,
  renderListScroller: _propTypes.default.func,
  renderVirtualList: _propTypes.default.func,
  expandOnTextChange: _propTypes.default.bool,
  toggleExpandOnClick: _propTypes.default.bool,
  collapseOnSelectWithEnter: _propTypes.default.bool,
  wrapMultiple: _propTypes.default.bool,
  newCustomTagText: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  positions: _propTypes.default.arrayOf(_propTypes.default.string),
  constrainTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object, _propTypes.default.bool]),
  offset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.number
  }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
    x: _propTypes.default.number,
    y: _propTypes.default.number
  })]))])
};
var _default = InovuaComboBox;
exports.default = _default;