/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _cleanProps = _interopRequireDefault(require("../../../common/cleanProps"));
var _join = _interopRequireDefault(require("./utils/join"));
var _getMinMaxSize = _interopRequireDefault(require("./utils/getMinMaxSize"));
var _Icons = require("./Icons");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Tag = function (_Component) {
  (0, _inherits2.default)(Tag, _Component);
  var _super = _createSuper(Tag);
  function Tag(props) {
    var _this;
    (0, _classCallCheck2.default)(this, Tag);
    _this = _super.call(this, props);
    _this.handleOnClose = _this.handleOnClose.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleOnMultipleClose = _this.handleOnMultipleClose.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }
  (0, _createClass2.default)(Tag, [{
    key: "render",
    value: function render() {
      var props = this.props;
      var item = props.item,
        index = props.index,
        items = props.items,
        rootClassName = props.rootClassName,
        closeIconPosition = props.closeIconPosition,
        _onClick = props.onClick,
        active = props.active,
        multiple = props.multiple,
        renderTag = props.renderTag,
        isMultiple = props.isMultiple;
      var className = this.getClassName({
        active: active
      });
      var labelClassName = "".concat(rootClassName, "__label");
      var style = this.getStyle();
      var closeIcon = this.renderCloseIcon();
      var label = this.renderLabel();
      var domProps = _objectSpread(_objectSpread({}, (0, _cleanProps.default)(props, Tag.propTypes)), {}, {
        key: "tag_".concat(index),
        style: style,
        className: className,
        onMouseDown: function onMouseDown(event) {
          event.preventDefault();
        },
        onClick: function onClick(event) {
          event.stopPropagation();
          _onClick(item.id);
        },
        children: [closeIconPosition === 'start' && closeIcon, _react.default.createElement("span", {
          key: "tag_label",
          className: labelClassName
        }, label), closeIconPosition === 'end' && closeIcon]
      });
      var result;
      if (typeof renderTag === 'function') {
        result = renderTag({
          domProps: domProps,
          item: item,
          index: index,
          items: items,
          isMultiple: isMultiple,
          props: props
        });
      }
      if (result === undefined) {
        return _react.default.createElement("div", _objectSpread({}, domProps));
      }
      return result || null;
    }
  }, {
    key: "getClassName",
    value: function getClassName(_ref) {
      var active = _ref.active;
      var _this$props = this.props,
        rootClassName = _this$props.rootClassName,
        ellipsis = _this$props.ellipsis,
        isMultiple = _this$props.isMultiple;
      var className = (0, _join.default)(rootClassName, active && "".concat(rootClassName, "--active"), ellipsis && "".concat(rootClassName, "--ellipsis"), isMultiple && "".concat(rootClassName, "--multiple"));
      return className;
    }
  }, {
    key: "getStyle",
    value: function getStyle() {
      var props = this.props;
      var border = props.border,
        padding = props.padding,
        height = props.height,
        width = props.width,
        maxWidth = props.maxWidth,
        activeStyle = props.activeStyle,
        active = props.active;
      var minMaxSize = (0, _getMinMaxSize.default)(props);
      var style = _objectSpread(_objectSpread({}, props.style), minMaxSize);
      if (border) {
        style.border = border;
      }
      if (padding) {
        style.padding = padding;
      }
      if (width) {
        style.width = width;
      }
      if (height) {
        style.height = height;
      }
      if (maxWidth) {
        style.maxWidth = maxWidth;
      }
      if (active && activeStyle) {
        style = _objectSpread(_objectSpread({}, style), activeStyle);
      }
      return style;
    }
  }, {
    key: "renderLabel",
    value: function renderLabel() {
      var _this$props2 = this.props,
        index = _this$props2.index,
        maxTagsLength = _this$props2.maxTagsLength,
        renderTagLabel = _this$props2.renderTagLabel,
        items = _this$props2.items,
        item = _this$props2.item,
        isMultiple = _this$props2.isMultiple;
      var label = item.label;
      if (isMultiple) {
        if (item.length === 1) {
          label = item[0].label;
        } else {
          label = items.length === item.length ? "".concat(item.length, " item").concat(item.length ? 's' : '', " selected") : "and other ".concat(item.length, " selected");
        }
      }
      if (renderTagLabel) {
        return renderTagLabel({
          label: label,
          item: item,
          items: items,
          count: items.length,
          index: index,
          isMultiple: isMultiple,
          maxTagsLength: maxTagsLength,
          combined: isMultiple
        });
      }
      return label;
    }
  }, {
    key: "renderCloseIcon",
    value: function renderCloseIcon() {
      var _this$props3 = this.props,
        closeIcon = _this$props3.closeIcon,
        rootClassName = _this$props3.rootClassName,
        isMultiple = _this$props3.isMultiple,
        item = _this$props3.item;
      var closeClassName = "".concat(rootClassName, "__clear-icon");
      if (!closeIcon) {
        return null;
      }
      var closeIconProps = {
        key: 'close_icon',
        onClick: isMultiple ? this.handleOnMultipleClose : this.handleOnClose,
        className: closeClassName
      };
      var closeIconEl = closeIcon;
      if (typeof closeIcon === 'function') {
        var closeIconParams = {
          item: item,
          onDeselect: closeIconProps.onClick,
          domProps: closeIconProps
        };
        closeIconEl = closeIcon(closeIconParams);
      } else {
        if (closeIcon && (0, _typeof2.default)(closeIcon) == 'object') {
          closeIconEl = (0, _react.cloneElement)(closeIcon, {
            className: (0, _join.default)(closeIcon.props && closeIcon.props.className, closeIconProps.className),
            onClick: closeIcon.props && closeIcon.props.onClick ? function (event) {
              closeIcon.props.onClick(event);
              closeIconProps.onClick(event);
            } : closeIconProps.onClick
          });
        }
      }
      if (closeIconEl === true || closeIconEl === undefined) {
        closeIconEl = _react.default.createElement(_Icons.CloseIcon, _objectSpread({}, closeIconProps));
      }
      return closeIconEl;
    }
  }, {
    key: "handleOnMultipleClose",
    value: function handleOnMultipleClose() {
      var ids = this.props.item.map(function (item) {
        return item.id;
      });
      this.props.onMultipleTagClose(ids);
    }
  }, {
    key: "handleOnClose",
    value: function handleOnClose(event) {
      var _this$props4 = this.props,
        onCloseTagClick = _this$props4.onCloseTagClick,
        item = _this$props4.item;
      event.preventDefault();
      event.stopPropagation();
      var id = item.id;
      onCloseTagClick(id);
    }
  }]);
  return Tag;
}(_react.Component);
Tag.displayName = 'Tag';
function emptyFn() {}
Tag.defaultProps = {
  onCloseTagClick: emptyFn,
  onMultipleTagClose: emptyFn,
  onClick: emptyFn,
  closeIconPosition: 'end',
  item: {},
  ellipsis: true,
  closeIcon: true
};
Tag.propTypes = {
  active: _propTypes.default.bool,
  renderTag: _propTypes.default.func,
  renderTagLabel: _propTypes.default.func,
  index: _propTypes.default.number,
  onCloseTagClick: _propTypes.default.func,
  onMultipleTagClose: _propTypes.default.func,
  closeIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node, _propTypes.default.func]),
  closeIconPosition: _propTypes.default.oneOf(['start', 'end']),
  isRemaining: _propTypes.default.bool,
  onClick: _propTypes.default.func,
  item: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  items: _propTypes.default.array,
  isMultiple: _propTypes.default.bool,
  rootClassName: _propTypes.default.string,
  tags: _propTypes.default.array,
  border: _propTypes.default.string,
  visibleItems: _propTypes.default.array,
  activeStyle: _propTypes.default.object,
  padding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  minSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
    height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  })]),
  maxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
    height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  })]),
  maxWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  maxTagsLength: _propTypes.default.number,
  ellipsis: _propTypes.default.bool
};
var _default = Tag;
exports.default = _default;