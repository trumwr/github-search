/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { Component } from 'react';
declare const REMAINING_ITEMS = "REMAINING_ITEMS";
declare class InovuaComboBox extends Component {
    constructor(props: any);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): any;
    componentDidUpdate: (prevProps: any) => void;
    render(): JSX.Element;
    getRootStyle(): any;
    renderList(): any;
    renderClearIcon(): JSX.Element | null;
    renderToggleIcon(): JSX.Element | null;
    renderTextInput(): any;
    renderSpinner(): any;
    getListProps(): any;
    getValueProps({ items, groupedItems, item }: {
        items: any;
        groupedItems: any;
        item: any;
    }): any;
    loadDataSource(dataSource: any, props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>, { appendTo, action, value, text, skip, limit, hasNextPage }?: {}): void;
    setData(data: any, props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>, { remoteCount, appendTo }?: {}): null | undefined;
    getPageCount(props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>): number;
    hasNextPage(props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>): boolean;
    getCurrentPage(props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>): number;
    isLastPage(props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>): void;
    getDataCountForPagination(props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>): any;
    getFilteredData(): any;
    getData(): any;
    loadLazyDataSource({ action, text }: {
        action: any;
        text: any;
    }): null;
    isPaginationEnabled(props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>): boolean;
    remoteFilterData({ text, value, filterType, }?: {
        text?: any;
        value?: any;
        filterType: any;
    }): void;
    loadNextPage(props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>): null | undefined;
    isRemoteDataSource(): boolean;
    isRemoteFilter(): any;
    doFilter({ text, value, force, data, filterType, action }?: {
        text: any;
        value: any;
        force: any;
        data: any;
        filterType: any;
        action: any;
    }): void;
    updateFilteredData({ text, value, data, filterType, }?: {
        text?: any;
        value?: any;
        data?: any;
        filterType: any;
    }): any;
    filterDataByValue({ value, data }: {
        value?: any;
        data?: any;
    }): any;
    filterDataByText({ text, data }: {
        text?: any;
        data?: any;
    }): any;
    getDataMap(): any;
    getValueMap(): any;
    isValueControlled(props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>): boolean;
    getValue(props?: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>): any;
    setValue(newValue: any, { action }?: {
        action: any;
    }): null | undefined;
    isFilterTextActive(): any;
    updateValueMap({ value, dataMap, oldValueMap }: {
        value: any;
        dataMap: any;
        oldValueMap: any;
    }): void;
    selectItem(id: any): null | undefined;
    deselectItem(id: any): void;
    deselectItems(ids?: never[]): void;
    getExpanded(): any;
    isExpandedControlled(): boolean;
    setExpanded(expanded: any): void;
    doSetExpanded(expanded: any): Promise<any>;
    onExpand(): void;
    isActiveTagControlled(): boolean;
    setActiveTag(id: any): null | undefined;
    deselectActiveTag(): void;
    getActiveTag(): any;
    getSelectedItems(): any;
    getItemLabel(id: any): any;
    getGroupedItems(items: any): {
        visibleItems: any;
        remainingItems: any;
    } | null;
    isActiveItemControlled(): boolean;
    setActiveItem(id: any): null | undefined;
    getActiveItem(): any;
    isTextControled(): boolean;
    getText(): any;
    setText(text: any, config?: {}, callback?: typeof emptyFn): void;
    setStateText(text: any, config?: {}, callback?: typeof emptyFn): void;
    onTextUpdate(text: any, { skipFilter }?: {}): void;
    clearValueOnEmptyIfNecessary(text: any): void;
    getLoading(): any;
    isLoadingControlled(): boolean;
    setLoading(loading: any): void;
    handleComboClick(event: any): void;
    handleMouseEnter(): void;
    handleMouseLeave(): void;
    handleComboFocus(): void;
    handleComboBlur(event: any): void;
    isFocused(): any;
    handleItemClick(id: any): void;
    handleTextChange(text: any): void;
    handleTextInputClick(): void;
    handleRemoveTag(id: any): void;
    handleRemoveMultipleTag(ids: any): void;
    handleListScrollBottom(): void;
    removeTag(id: any, dir?: number): void;
    removeRemainingTags(): void;
    removeTags(ids: any): void;
    handleTagClick(id: any): void;
    handleComboMouseDown(event: any): void;
    handleComboKeyDown(event: any): void;
    navigateToNextItem(direction: any, event: any): void;
    selectActiveItem(): void;
    handleEnterKeyPress(event: any): void;
    navigateToNextTag(direction: any, event: any): null;
    isNavigationAllowed(direction: any): boolean;
    handleBackspace(event: any): void;
    handleDelete(event: any): void;
    handleTagBackspaceRemove(event: any): null;
    handleToolsSize(size?: any): void;
    expand(): void;
    collapse(): void;
    scrollToIndex(index: any): any;
    getItemIndexById(id: any): any;
    scrollToId(id: any): void;
    toggleExpand(): void;
    getItemByIndex(index: any): any;
    getItemById(id: any): any;
    updateGetIdProperty(props: any): void;
    updateGetDisplayProperty(props: any): void;
    updateGetFilterProperty(props: any): void;
    updateGroups({ groupProperty, data, }: {
        groupProperty?: any;
        data?: any;
    }): null | undefined;
    focus(): void;
    blur(): void;
    hasFocus(): any;
    getTextInputNode(): any;
    getComboNode(): any;
    getListNode(): any;
    getVirtualListNode(): any;
    getlListNode(): any;
    addItem(item: any): void;
    clear(): void;
    getItem(id: any): any;
    getItemCount(): number | null;
    insertItem({ index, item }: {
        index: any;
        item: any;
    }): void;
    removeItems(ids: any): void;
    toggle(): void;
}
declare function emptyFn(): void;
export default InovuaComboBox;
export { REMAINING_ITEMS };
