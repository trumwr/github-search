/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHideHandler = createHideHandler;
exports.createShowHandler = createShowHandler;
exports.createToggleHandler = createToggleHandler;
var _matchesTarget = _interopRequireDefault(require("./matchesTarget"));
var _assign = _interopRequireDefault(require("../../../../common/assign"));
function createShowHandler(_ref) {
  var action = _ref.action,
    target = _ref.target,
    getDelay = _ref.getDelay,
    timeoutState = _ref.timeoutState;
  return function (event) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var delay = getDelay && getDelay();
    if (config.target) {
      event = (0, _assign.default)({}, event, {
        target: config.target
      });
    }
    var node = event.target;
    if (!(0, _matchesTarget.default)(target, node)) {
      return null;
    }
    var activeTargetNode = timeoutState.targetThatTriggeredEvent;
    timeoutState.targetThatTriggeredEvent = node;
    if (timeoutState.hideId) {
      clearTimeout(timeoutState.hideId);
      timeoutState.hideId = null;
    }
    if (delay) {
      if (timeoutState.showId && activeTargetNode === node) {
        return null;
      }
      if (timeoutState.showId) {
        clearTimeout(timeoutState.showId);
      }
      timeoutState.showId = setTimeout(function () {
        timeoutState.showId = null;
        action(event);
      }, delay);
    } else {
      action(event);
    }
  };
}
function createHideHandler(_ref2) {
  var action = _ref2.action,
    target = _ref2.target,
    getDelay = _ref2.getDelay,
    timeoutState = _ref2.timeoutState;
  return function (event) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var delay = getDelay && getDelay();
    if (config.target) {
      event = (0, _assign.default)({}, event, {
        target: config.target
      });
    }
    var node = event.target;
    if (config.target !== null) {
      if (!(0, _matchesTarget.default)(target, node)) {
        return null;
      }
    }
    var activeTargetNode = timeoutState.targetThatTriggeredEvent;
    timeoutState.targetThatTriggeredEvent = node;
    if (activeTargetNode === node && timeoutState.showId) {
      clearTimeout(timeoutState.showId);
      timeoutState.showId = null;
    }
    if (delay) {
      if (timeoutState.hideId && activeTargetNode === node) {
        return null;
      }
      timeoutState.hideId = setTimeout(function () {
        timeoutState.hideId = null;
        action(event);
      }, delay);
    } else {
      action(event);
    }
  };
}
function createToggleHandler(_ref3) {
  var onHide = _ref3.onHide,
    onShow = _ref3.onShow,
    target = _ref3.target,
    getActiveTargetNode = _ref3.getActiveTargetNode,
    getVisible = _ref3.getVisible;
  return function (event) {
    var activeTargetNode = getActiveTargetNode();
    var node = event.target;
    if (!(0, _matchesTarget.default)(target, node)) {
      return null;
    }
    if (getVisible() && node === activeTargetNode) {
      onHide(event);
    } else {
      onShow(event);
    }
  };
}