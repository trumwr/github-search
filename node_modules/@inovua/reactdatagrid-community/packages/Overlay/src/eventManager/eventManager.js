/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _separateEvents2 = _interopRequireDefault(require("./separateEvents"));
var _registerEvents = require("./registerEvents");
var _generateHandlers = require("./generateHandlers");
var _createHideOnClickOutsideAction = _interopRequireDefault(require("./createHideOnClickOutsideAction"));
function eventManager(config) {
  var _config$showEvent = config.showEvent,
    showEvent = _config$showEvent === void 0 ? [] : _config$showEvent,
    _config$hideEvent = config.hideEvent,
    hideEvent = _config$hideEvent === void 0 ? [] : _config$hideEvent,
    target = config.target,
    hideOnScroll = config.hideOnScroll,
    hideOnClickOutside = config.hideOnClickOutside,
    hideOnEscape = config.hideOnEscape,
    onShow = config.onShow,
    onHide = config.onHide,
    getShowDelay = config.getShowDelay,
    getHideDelay = config.getHideDelay,
    getVisible = config.getVisible,
    _config$getOverlayNod = config.getOverlayNode,
    getOverlayNode = _config$getOverlayNod === void 0 ? function () {} : _config$getOverlayNod,
    getActiveTargetNode = config.getActiveTargetNode;
  var timeoutState = {
    showId: null,
    hideId: null,
    targetThatTriggeredEvent: null
  };
  var _separateEvents = (0, _separateEvents2.default)({
      showEvent: showEvent,
      hideEvent: hideEvent
    }),
    normalizedShowEvents = _separateEvents.normalizedShowEvents,
    normalizedHideEvents = _separateEvents.normalizedHideEvents,
    toggleEvents = _separateEvents.toggleEvents;
  var showAction = (0, _generateHandlers.createShowHandler)({
    timeoutState: timeoutState,
    target: target,
    getActiveTargetNode: getActiveTargetNode,
    action: onShow,
    getDelay: getShowDelay
  });
  if (normalizedShowEvents && onShow) {
    (0, _registerEvents.registerListeners)({
      events: normalizedShowEvents,
      action: showAction
    });
  }
  var hideAction = (0, _generateHandlers.createHideHandler)({
    timeoutState: timeoutState,
    target: target,
    getActiveTargetNode: getActiveTargetNode,
    action: onHide,
    getDelay: getHideDelay
  });
  if (normalizedHideEvents && onHide) {
    (0, _registerEvents.registerListeners)({
      events: normalizedHideEvents,
      action: hideAction
    });
  }
  var toggleAction;
  if (toggleEvents.length) {
    toggleAction = (0, _generateHandlers.createToggleHandler)({
      target: target,
      getActiveTargetNode: getActiveTargetNode,
      getVisible: getVisible,
      onHide: hideAction,
      onShow: showAction
    });
    (0, _registerEvents.registerListeners)({
      events: toggleEvents,
      action: toggleAction
    });
  }
  var hideOnClickOutsideAction;
  if (hideOnClickOutside) {
    hideOnClickOutsideAction = (0, _createHideOnClickOutsideAction.default)({
      getOverlayNode: getOverlayNode,
      getActiveTargetNode: getActiveTargetNode,
      onHide: hideAction
    });
    (0, _registerEvents.registerListeners)({
      events: ['click'],
      action: hideOnClickOutsideAction
    });
  }
  var hideOnScrollAction;
  if (hideOnScroll) {
    hideOnScrollAction = function hideOnScrollAction(event) {
      if (getVisible()) {
        hideAction(event, {
          target: null
        });
      }
    };
    (0, _registerEvents.registerListeners)({
      events: ['scroll'],
      action: hideOnScrollAction
    });
  }
  var hideOnEscapeAction;
  if (hideOnEscape) {
    hideOnEscapeAction = function hideOnEscapeAction(event) {
      if (getVisible() && event.key === 'Escape') {
        hideAction(event, {
          target: null
        });
      }
    };
    (0, _registerEvents.registerListeners)({
      events: ['keydown'],
      action: hideOnEscapeAction
    });
  }
  var handleOverlayShowAction;
  var handleOverlayHideAction;
  if (normalizedHideEvents.indexOf('mouseleave') !== -1) {
    handleOverlayShowAction = function handleOverlayShowAction(event) {
      if (event.target === getOverlayNode()) {
        var activeTargetNode = getActiveTargetNode();
        showAction(event, {
          target: activeTargetNode
        });
      }
    };
    (0, _registerEvents.registerListeners)({
      events: ['mouseenter'],
      action: handleOverlayShowAction
    });
    handleOverlayHideAction = function handleOverlayHideAction(event) {
      if (event.target === getOverlayNode()) {
        var activeTargetNode = getActiveTargetNode();
        hideAction(event, {
          target: activeTargetNode
        });
      }
    };
    (0, _registerEvents.registerListeners)({
      events: ['mouseleave'],
      action: handleOverlayHideAction
    });
  }
  return {
    unregister: function unregister() {
      if (normalizedShowEvents && showAction) {
        (0, _registerEvents.unregisterListeners)({
          events: normalizedShowEvents,
          action: showAction
        });
      }
      if (normalizedHideEvents && hideAction) {
        (0, _registerEvents.unregisterListeners)({
          events: normalizedHideEvents,
          action: hideAction
        });
      }
      if (toggleEvents && toggleAction) {
        (0, _registerEvents.unregisterListeners)({
          events: toggleEvents,
          action: toggleAction
        });
      }
      if (hideOnClickOutsideAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['click'],
          action: hideOnClickOutsideAction
        });
      }
      if (hideOnScrollAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['scroll'],
          action: hideOnScrollAction
        });
      }
      if (handleOverlayShowAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['mouseenter'],
          action: handleOverlayShowAction
        });
      }
      if (handleOverlayHideAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['mouseleave'],
          action: handleOverlayHideAction
        });
      }
      if (hideOnEscapeAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['keydown'],
          action: hideOnEscapeAction
        });
      }
    }
  };
}
var _default = eventManager;
exports.default = _default;