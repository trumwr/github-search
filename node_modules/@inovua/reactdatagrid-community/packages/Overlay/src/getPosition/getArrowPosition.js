/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _clamp = _interopRequireDefault(require("../../../common/clamp"));
var topPositions = ['top', 'bc-tc', 'bl-tl', 'br-tr'];
var bottomPositions = ['bottom', 'tc-bc', 'tl-bl', 'tr-br'];
var rightPositions = ['right', 'lc-rc', 'tl-tr', 'bl-br'];
var leftPositions = ['left', 'rc-lc', 'tr-tl', 'br-bl'];
var noArrowPositions = ['br-tl', 'tl-br', 'tr-bl'];
function isTopPosition(position) {
  return topPositions.indexOf(position) !== -1;
}
function isBottomPosition(position) {
  return bottomPositions.indexOf(position) !== -1;
}
function isLeftPosition(position) {
  return leftPositions.indexOf(position) !== -1;
}
function isRightPosition(position) {
  return rightPositions.indexOf(position) !== -1;
}
function getLeftPosition(overlayRegion, targetRegion) {
  return targetRegion.left - overlayRegion.left + targetRegion.width / 2;
}
function getTopPosition(overlayRegion, targetRegion) {
  return targetRegion.top - overlayRegion.top + targetRegion.height / 2;
}
function getArrowPosition(_ref) {
  var overlayRegion = _ref.overlayRegion,
    targetRegion = _ref.targetRegion,
    position = _ref.position,
    arrowSize = _ref.arrowSize;
  var arrowPosition = null;
  var left = (0, _clamp.default)(getLeftPosition(overlayRegion, targetRegion), arrowSize / 2, overlayRegion.width - arrowSize / 2);
  var top = (0, _clamp.default)(getTopPosition(overlayRegion, targetRegion), arrowSize / 2, overlayRegion.height - arrowSize / 2);
  if (isTopPosition(position)) {
    arrowPosition = {
      position: {
        left: left,
        top: '100%'
      },
      location: 'top'
    };
  }
  if (isBottomPosition(position)) {
    arrowPosition = {
      position: {
        left: left,
        bottom: '100%'
      },
      location: 'bottom'
    };
  }
  if (isRightPosition(position)) {
    arrowPosition = {
      position: {
        top: top,
        right: '100%'
      },
      location: 'right'
    };
  }
  if (isLeftPosition(position)) {
    arrowPosition = {
      position: {
        top: top,
        left: '100%'
      },
      location: 'left'
    };
  }
  return arrowPosition;
}
var _default = getArrowPosition;
exports.default = _default;