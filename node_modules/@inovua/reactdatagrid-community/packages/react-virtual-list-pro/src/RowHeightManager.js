/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _binarySearch = _interopRequireDefault(require("../../../packages/binary-search"));
var _eventemitter = _interopRequireDefault(require("eventemitter3"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var sortAsc = function sortAsc(a, b) {
  return a - b;
};
var RowHeightManager = function (_EventEmitter) {
  (0, _inherits2.default)(RowHeightManager, _EventEmitter);
  var _super = _createSuper(RowHeightManager);
  function RowHeightManager(rowHeight) {
    var _this;
    var rowHeightsMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var config = arguments.length > 2 ? arguments[2] : undefined;
    (0, _classCallCheck2.default)(this, RowHeightManager);
    _this = _super.call(this);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowHeight", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowHeightFn", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "map", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "heights", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "indexes", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offsets", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "minHeight", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "maxHeight", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "indexesToOffsets", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offsetsToIndexes", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lazyRowHeightRafId", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowToOffsetCache", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cache", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "__id", '');
    _this.rowHeight = (0, _typeof2.default)(rowHeight) === 'object' ? typeof rowHeight.rowHeight === 'number' ? rowHeight.rowHeight : rowHeight.minRowHeight || 40 : 40;
    _this.map = rowHeightsMap;
    if ((0, _typeof2.default)(rowHeight) === 'object' && typeof rowHeight.rowHeight === 'function') {
      _this.rowHeightFn = rowHeight.rowHeight;
    }
    if (!config || config.cache !== false) {
      _this.setCache({});
    }
    _this.index(_this.rowHeight, rowHeightsMap);
    return _this;
  }
  (0, _createClass2.default)(RowHeightManager, [{
    key: "setRowHeight",
    value: function setRowHeight(_ref) {
      var index = _ref.index,
        height = _ref.height,
        defaultRowHeight = _ref.defaultRowHeight,
        skipIndex = _ref.skipIndex;
      if (this.map[index] === height && !defaultRowHeight) {
        console.warn('NOOP');
        return;
      }
      this.map[index] = height;
      if (defaultRowHeight) {
        this.rowHeight = defaultRowHeight;
      }
      if (this.cache) {
        this.setCache({});
      }
      if (!skipIndex) {
        this.index();
      }
    }
  }, {
    key: "indexRaf",
    value: function indexRaf() {
      var _this2 = this;
      if (this.lazyRowHeightRafId) {
        cancelAnimationFrame(this.lazyRowHeightRafId);
        this.lazyRowHeightRafId = 0;
      }
      this.lazyRowHeightRafId = requestAnimationFrame(function () {
        _this2.lazyRowHeightRafId = 0;
        _this2.index();
      });
    }
  }, {
    key: "setRowHeightLazy",
    value: function setRowHeightLazy(_ref2) {
      var index = _ref2.index,
        height = _ref2.height,
        defaultRowHeight = _ref2.defaultRowHeight;
      this.setRowHeight({
        index: index,
        height: height,
        defaultRowHeight: defaultRowHeight || this.rowHeight,
        skipIndex: true
      });
      this.indexRaf();
    }
  }, {
    key: "setHeights",
    value: function setHeights(map) {
      this.map = map;
      if (this.cache) {
        this.setCache({});
      }
      this.index(this.rowHeight, this.map);
    }
  }, {
    key: "setValues",
    value: function setValues(_ref3) {
      var defaultRowHeight = _ref3.defaultRowHeight,
        map = _ref3.map;
      if (defaultRowHeight) {
        this.rowHeight = defaultRowHeight;
      }
      if (this.map) {
        this.map = map;
      }
      if (this.cache) {
        this.setCache({});
      }
      this.index(this.rowHeight, this.map);
    }
  }, {
    key: "setDefaultRowHeight",
    value: function setDefaultRowHeight(defaultRowHeight) {
      this.rowHeight = defaultRowHeight;
      if (this.cache) {
        this.setCache({});
      }
      this.index(this.rowHeight, this.map);
    }
  }, {
    key: "index",
    value: function index() {
      var _this3 = this;
      var defaultRowHeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rowHeight;
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.map;
      this.rowToOffsetCache = {};
      var indexes = map ? Object.keys(map).map(function (x) {
        return +x;
      }).sort(sortAsc) : [];
      this.minHeight = defaultRowHeight;
      this.maxHeight = defaultRowHeight;
      this.__id = JSON.stringify(this.heights);
      this.heights = indexes.map(function (index) {
        var height = map[index];
        if (height > _this3.maxHeight) {
          _this3.maxHeight = height;
        }
        if (height < _this3.minHeight) {
          _this3.minHeight = height;
        }
        return [index, height];
      });
      var prev = 0;
      this.indexes = indexes;
      this.offsets = indexes.map(function (index, i) {
        var prevIndex = i === 0 ? -1 : indexes[i - 1];
        var prevIndexRowHeight = map[prevIndex] || 0;
        return prev = prev + (index - (prevIndex + 1)) * defaultRowHeight + prevIndexRowHeight;
      });
      this.offsetsToIndexes = {};
      this.indexesToOffsets = this.offsets.reduce(function (acc, offset, i) {
        var index = indexes[i];
        acc[index] = offset;
        _this3.offsetsToIndexes[offset] = index;
        return acc;
      }, {});
      var __id = JSON.stringify(this.heights);
      if (__id === this.__id) {
        return;
      }
      this.afterIndex();
    }
  }, {
    key: "afterIndex",
    value: function afterIndex() {
      this.emit('index');
    }
  }, {
    key: "setCache",
    value: function setCache(cache) {
      this.cache = cache;
    }
  }, {
    key: "getTotalSize",
    value: function getTotalSize(count) {
      if (count == null) {
        throw new Error('Specify a count when calling getTotalSize!');
      }
      if (count <= 0 || isNaN(count)) {
        return 0;
      }
      var sum = 0;
      for (var i = 0; i < count; i++) {
        var value = this.map[i];
        sum += value === undefined ? this.rowHeight : value;
      }
      return sum;
    }
  }, {
    key: "getDefaultRowHeight",
    value: function getDefaultRowHeight() {
      return this.rowHeight;
    }
  }, {
    key: "getMinHeight",
    value: function getMinHeight() {
      return this.minHeight || this.rowHeight;
    }
  }, {
    key: "getMaxHeight",
    value: function getMaxHeight() {
      return this.maxHeight || this.rowHeight;
    }
  }, {
    key: "getRowOffset",
    value: function getRowOffset(index) {
      var offset = this.indexesToOffsets[index];
      if (offset !== undefined) {
        return offset;
      }
      offset = this.rowToOffsetCache[index];
      if (offset !== undefined) {
        return offset;
      }
      var insertPos = ~(0, _binarySearch.default)(this.indexes, index, sortAsc);
      var closestIndex = this.indexes[insertPos - 1];
      if (insertPos === 0) {
        offset = index * this.rowHeight;
      } else {
        var closestOffset = this.indexesToOffsets[closestIndex];
        offset = closestOffset + this.map[closestIndex] + (index - closestIndex - 1) * this.rowHeight;
      }
      this.rowToOffsetCache[index] = offset;
      return offset;
    }
  }, {
    key: "getRowHeight",
    value: function getRowHeight(index, fn) {
      var value = this.map[index];
      if (value !== undefined) {
        return value;
      }
      if (fn) {
        return fn();
      }
      return this.rowHeight;
    }
  }, {
    key: "getRowAt",
    value: function getRowAt(offset) {
      if (offset < 0) {
        return 0;
      }
      var roundedOffset = Math.floor(offset / this.rowHeight) * this.rowHeight;
      var result = this.cache ? this.cache[roundedOffset] : undefined;
      if (result !== undefined) {
        return result;
      }
      if (!this.map) {
        result = roundedOffset / this.rowHeight;
        if (this.cache) {
          this.cache[roundedOffset] = result;
        }
        return result;
      }
      var index = (0, _binarySearch.default)(this.offsets, offset, sortAsc);
      if (index < 0) {
        var insertPos = ~index;
        var beforeKnownIndex = this.indexes[insertPos - 1];
        if (beforeKnownIndex !== undefined) {
          var beforeKnownOffset = this.indexesToOffsets[beforeKnownIndex];
          var nextOffset = beforeKnownOffset + this.map[beforeKnownIndex];
          if (offset < nextOffset) {
            result = beforeKnownIndex;
          } else {
            result = beforeKnownIndex + Math.floor((offset - nextOffset) / this.rowHeight) + 1;
          }
        } else {
          result = Math.floor(offset / this.rowHeight);
        }
      } else {
        result = this.indexes[index];
      }
      if (this.cache) {
        this.cache[roundedOffset] = result;
      }
      return result;
    }
  }]);
  return RowHeightManager;
}(_eventemitter.default);
var _default = RowHeightManager;
exports.default = _default;