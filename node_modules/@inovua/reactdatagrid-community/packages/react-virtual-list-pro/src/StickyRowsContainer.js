/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StickyRowsContainerClassName = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _hasSticky = require("../../../packages/hasSticky");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var StickyRowsContainerClassName = 'InovuaReactDataGrid__virtual-list-sticky-rows-container';
exports.StickyRowsContainerClassName = StickyRowsContainerClassName;
var StickyRowsContainer = function StickyRowsContainer(props) {
  var latestProps = (0, _react.useRef)(props);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    content = _useState2[0],
    setContent = _useState2[1];
  var currentHeightRef = (0, _react.useRef)(0);
  var domNodeRef = (0, _react.useRef)(null);
  var nonEmptyRowElementsRefRef = (0, _react.useRef)(null);
  var rowElementsRef = (0, _react.useRef)(null);
  var renderedRowsRef = (0, _react.useRef)([]);
  var scrollTopRef = (0, _react.useRef)(0);
  latestProps.current = props;
  var setEnteringRow = function setEnteringRow(_ref) {
    var scrollTop = _ref.scrollTop,
      enteringRow = _ref.enteringRow;
    if (enteringRow == null) {
      scrollTopRef.current = scrollTop;
      var domNode = domNodeRef.current;
      (0, _toConsumableArray2.default)(domNode.children).forEach(function (rowNode) {
        rowNode.style.transform = "translate3d(0px, 0px, 0px)";
      });
      return;
    }
    scrollTopRef.current = scrollTop;
    var rowsToTranslateIndexes = [];
    var rowsToTranslate = renderedRowsRef.current.filter(function (r, i) {
      var result = r.scale >= enteringRow.scale;
      if (result) {
        rowsToTranslateIndexes.push(i);
      }
      return result;
    });
    rowsToTranslate.forEach(function (_rowToTranslate, i) {
      var rowToTranslateIndex = rowsToTranslateIndexes[i];
      var domNode = domNodeRef.current;
      var rowNode = domNode.children[rowToTranslateIndex];
      if (rowNode) {
        var y = props.rowHeightManager.getRowOffset(enteringRow.index) - scrollTop - currentHeightRef.current;
        rowNode.style.transform = "translate3d(0px, ".concat(y, "px, 0px)");
      }
    });
  };
  var setStickyRows = function setStickyRows(content, rows, config) {
    var domNode = domNodeRef.current;
    var renderedContent = content;
    if (content == null) {
      renderedContent = nonEmptyRowElementsRefRef.current;
      if (domNode && rowElementsRef.current) {
        domNode.style.opacity = '0';
        domNode.style.pointerEvents = 'none';
      }
    } else {
      if (domNode && !rowElementsRef.current) {
        domNode.style.opacity = '1';
        domNode.style.pointerEvents = 'all';
      }
    }
    setContent(renderedContent);
    if (content) {
      nonEmptyRowElementsRefRef.current = content;
    }
    renderedRowsRef.current = rows;
    rowElementsRef.current = content;
    requestAnimationFrame(function () {
      setEnteringRow(config);
    });
  };
  var getCurrentVisibleStickyRowsCount = function getCurrentVisibleStickyRowsCount() {
    return rowElementsRef.current ? rowElementsRef.current.length : 0;
  };
  (0, _react.useLayoutEffect)(function () {
    var domNode = domNodeRef.current;
    var totalHeight = 0;
    if (domNode && domNode.children) {
      (0, _toConsumableArray2.default)(domNode.children).forEach(function (c, i) {
        c.style.zIndex = 1000 - i;
        totalHeight += c.offsetHeight;
      });
      currentHeightRef.current = totalHeight;
    }
  }, [content]);
  (0, _react.useLayoutEffect)(function () {
    if (props.handle) {
      props.handle({
        setStickyRows: setStickyRows,
        getCurrentVisibleStickyRowsCount: getCurrentVisibleStickyRowsCount,
        setEnteringRow: setEnteringRow
      });
    }
    return function () {
      var props = latestProps.current;
      if (props && typeof props.handle === 'function') {
        props.handle(null);
      }
    };
  }, []);
  return _react.default.createElement("div", {
    className: StickyRowsContainerClassName,
    ref: domNodeRef,
    style: (0, _defineProperty2.default)({
      position: _hasSticky.sticky,
      top: 0,
      left: 0,
      right: 0,
      height: 0,
      zIndex: 1,
      contain: 'layout'
    }, props.rtl ? 'transform' : '', props.rtl ? "translate3d(".concat(props.stickyOffset, "px, 0px, 0px)") : '')
  }, content);
};
var _default = _react.default.memo(StickyRowsContainer);
exports.default = _default;