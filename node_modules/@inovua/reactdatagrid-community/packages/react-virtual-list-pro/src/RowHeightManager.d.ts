/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import EventEmitter from 'eventemitter3';
type TypeNumberMap = {
    [key: number]: number;
};
declare class RowHeightManager extends EventEmitter {
    private rowHeight;
    private rowHeightFn?;
    private map;
    private heights;
    private indexes;
    private offsets;
    private minHeight;
    private maxHeight;
    private indexesToOffsets;
    private offsetsToIndexes;
    private lazyRowHeightRafId?;
    private rowToOffsetCache;
    private cache?;
    private __id;
    constructor(rowHeight: number | {
        rowHeight: number | ((rowIndex: number) => number) | undefined;
        minRowHeight: number | undefined;
    }, rowHeightsMap?: {}, config?: {
        cache: boolean;
    });
    setRowHeight({ index, height, defaultRowHeight, skipIndex, }: {
        index: number;
        height: number;
        defaultRowHeight?: number;
        skipIndex?: boolean;
    }): void;
    indexRaf(): void;
    setRowHeightLazy({ index, height, defaultRowHeight, }: {
        index: number;
        height: number;
        defaultRowHeight?: number;
    }): void;
    setHeights(map: TypeNumberMap): void;
    setValues({ defaultRowHeight, map, }: {
        defaultRowHeight?: number;
        map: TypeNumberMap;
    }): void;
    setDefaultRowHeight(defaultRowHeight: number): void;
    index(defaultRowHeight?: number, map?: TypeNumberMap): void;
    afterIndex(): void;
    setCache(cache: TypeNumberMap): void;
    getTotalSize(count: number): number;
    getDefaultRowHeight(): number;
    getMinHeight(): number;
    getMaxHeight(): number;
    getRowOffset(index: number): number;
    getRowHeight(index: number, fn?: () => number): number;
    getRowAt(offset: number): number;
}
export default RowHeightManager;
