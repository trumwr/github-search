/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { getScrollbarWidth } from '../../../packages/react-virtual-scroll-container-pro/src';
import RowHeightManager from './RowHeightManager';
import Row from './Row';
import shouldComponentUpdate from '../../../packages/shouldComponentUpdate';
import { TypeStickyRowInfo } from './TypeStickyRowInfo';
type TypeProps = {
    enableRowSpan: boolean;
    recycleCoveredRows: boolean;
    stickyRows: {
        [key: number]: number;
    };
};
export default class InovuaVirtualList extends Component<TypeProps> {
    private size;
    private rows;
    private rowSpans;
    private rowCoveredBy;
    private scrollTopPos;
    constructor(props: TypeProps);
    getContainerNode: () => any;
    renderScroller: (props: any) => any;
    renderScrollerSpacerOnNaturalRowHeight: (spacerProps: any) => void;
    renderView: (props: any) => any;
    getTotalRowHeight: (props?: Readonly<TypeProps> & Readonly<{
        children?: React.ReactNode;
    }>) => any;
    getScrollHeight: () => any;
    getScrollSize: (node: any) => {
        width: any;
        height: any;
    };
    getClientSize: (n: any) => {
        width: any;
        height: any;
    };
    initSizes: (props?: Readonly<TypeProps> & Readonly<{
        children?: React.ReactNode;
    }>) => void;
    setHeightForRows: (indexes: any, heights: any) => number;
    shouldComponentUpdate(nextProps: any, nextState: any): any;
    renderSizer: (scrollHeight: any) => any;
    renderRowContainer: () => any;
    renderStickyRowsContainer(): JSX.Element | null;
    render(): JSX.Element;
    onViewResize: () => void;
    onScrollbarsChange: ({ vertical, horizontal }: {
        vertical: any;
        horizontal: any;
    }) => void;
    onRowUnmount: (row: any) => void;
    onRowMount: (r: any) => void;
    onScrollStart: (...args: any[]) => void;
    getScrollerNode: () => any;
    onScrollStop: (...args: any[]) => void;
    getRows: () => any[];
    forEachRow: (fn: any, onlyVisible?: boolean) => void;
    sortRows: (rows: any) => any;
    getRowAt: (index: any) => any;
    getVisibleCount: (props?: Readonly<TypeProps> & Readonly<{
        children?: React.ReactNode;
    }>) => any;
    setRowIndex: (row: Row, index: number, callback?: () => void) => void;
    getSortedRows: (rows?: any[]) => any;
    onRowsUpdated: (newIndexes: any, range: any, updateScroll: any) => void;
    getVisibleRange: (args: any) => {
        start: number;
        end: number;
    };
    applyScrollStyle: ({ scrollTop, scrollLeft, force, reorder }: {
        scrollTop: any;
        scrollLeft: any;
        force: any;
        reorder: any;
    }, domNode: any) => void;
    updateRows(range: {
        start: number;
        end: number;
    }, reorder: boolean, updateScroll: any): void;
    get scrollTopMax(): any;
    get scrollLeftMax(): any;
    getScrollingElement: () => any;
    get scrollTop(): any;
    set scrollTop(value: any);
    get scrollLeft(): any;
    set scrollLeft(value: any);
    smoothScrollTo: (...args: any[]) => void;
    componentDidMount: () => void;
    componentWillUnmount(): void;
    transitionProps(nextProps: any, thisProps: any): void;
    componentDidUpdate(prevProps: any): void;
    fixEdgeScrollPosition: () => void;
    setupRowHeightManager: (rowHeightManager: any) => void;
    onIndex: () => void;
    refreshLayout: (config: any) => void;
    getOverlappingHeight: () => any;
    updateVisibleCount: (height: any, props: any) => void;
    getGapsFor: (startRowIndex: any, endRowIndex: any, sortedRows: any) => any[];
    getCleanupRows: (props?: Readonly<TypeProps> & Readonly<{
        children?: React.ReactNode;
    }>) => any[];
    cleanupRows: (props?: Readonly<TypeProps> & Readonly<{
        children?: React.ReactNode;
    }>) => void;
    getDOMNode(): any;
    onResize: () => void;
    setRowRowSpan: (rowIndex: number, rowSpan: number) => void;
    renderRows(): JSX.Element[];
    onRowKeyDown: (index: any, event: any) => void;
    getMaxRenderCount: (props?: Readonly<TypeProps> & Readonly<{
        children?: React.ReactNode;
    }>) => number;
    focusRow: (index: any, dir: any, callback: any) => void;
    isRowRendered: (index: any) => boolean;
    getStickyRowsArray: () => {
        rows: TypeStickyRowInfo[];
        scales: number[];
        rowsPerScales: TypeStickyRowInfo[][];
    };
    private currentStickyRows;
    updateStickyRows: (scrollTop?: number, firstVisibleRowIndex?: number, { force }?: {
        force: boolean;
    }) => void;
    getFirstVisibleRowIndexForSticky(scrollTop?: number): number;
    setStickyRows: (currentStickyRows: TypeStickyRowInfo[] | undefined, scrollTop: any, enteringRow: any) => void;
    renderStickyRow: (index: any) => JSX.Element;
    isRowVisible: (index: number) => boolean;
    getRowVisibilityInfo: (index: any, offset: any) => {
        rendered: boolean;
        visible: boolean;
        top: any;
        bottom: any;
        topDiff: number;
        bottomDiff: number;
    };
    scrollToIndex(index: any, { direction, force, duration, offset }: Readonly<{}> | undefined, callback: any): void;
    getRenderedIndexes: () => number[];
    onRowFocus: (index: any, event: any) => void;
    rafSync: () => void;
    adjustHeights: () => void;
    checkHeights: () => boolean;
    getEmptyScrollOffset(): any;
}
declare const propTypes: {
    applyScrollLeft: PropTypes.Requireable<(...args: any[]) => any>;
    naturalRowHeight: PropTypes.Requireable<boolean>;
    count: (props: any) => void;
    getRowFocusableElements: PropTypes.Requireable<(...args: any[]) => any>;
    contain: PropTypes.Requireable<NonNullable<string | boolean | null | undefined>>;
    rowContain: PropTypes.Requireable<NonNullable<string | boolean | null | undefined>>;
    handleRowKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
    rafOnResize: PropTypes.Requireable<boolean>;
    checkResizeDelay: PropTypes.Requireable<number>;
    extraRows: PropTypes.Requireable<number>;
    measureSize: PropTypes.Requireable<(...args: any[]) => any>;
    minRowHeight: PropTypes.Requireable<number>;
    minRowWidth: PropTypes.Requireable<number>;
    nativeScroll: PropTypes.Requireable<boolean>;
    onRenderRangeChange: PropTypes.Requireable<(...args: any[]) => any>;
    shouldFocusNextRow: PropTypes.Requireable<(...args: any[]) => any>;
    onResize: PropTypes.Requireable<(...args: any[]) => any>;
    onScrollStart: PropTypes.Requireable<(...args: any[]) => any>;
    onScrollbarsChange: PropTypes.Requireable<(...args: any[]) => any>;
    onScrollStop: PropTypes.Requireable<(...args: any[]) => any>;
    pureRows: PropTypes.Requireable<boolean>;
    rowHeight: PropTypes.Requireable<number>;
    renderRow: PropTypes.Validator<(...args: any[]) => any>;
    renderRowContainer: PropTypes.Requireable<(...args: any[]) => any>;
    renderSizer: PropTypes.Requireable<(...args: any[]) => any>;
    showEmptyRows: PropTypes.Requireable<boolean>;
    useTransformPosition: PropTypes.Requireable<boolean>;
    useTransformRowPosition: PropTypes.Requireable<boolean>;
    scrollProps: PropTypes.Requireable<object>;
    showWarnings: PropTypes.Requireable<boolean>;
    renderView: PropTypes.Requireable<(...args: any[]) => any>;
    renderScroller: PropTypes.Requireable<(...args: any[]) => any>;
    renderScrollerSpacer: PropTypes.Requireable<(...args: any[]) => any>;
    shouldComponentUpdate: PropTypes.Requireable<(...args: any[]) => any>;
    shouldPreventDefaultTabKeyOnRow: PropTypes.Requireable<(...args: any[]) => any>;
    theme: PropTypes.Requireable<string>;
    overscrollBehavior: PropTypes.Requireable<string>;
    virtualized: PropTypes.Requireable<boolean>;
    scrollOneDirectionOnly: PropTypes.Requireable<boolean>;
    onStickyRowUpdate: PropTypes.Requireable<(...args: any[]) => any>;
    stickyRows: PropTypes.Requireable<object>;
    recycleCoveredRows: PropTypes.Requireable<boolean>;
    stickyOffset: PropTypes.Requireable<number>;
    enableRowSpan: PropTypes.Requireable<boolean>;
    rowHeightManager: (props: any, propName: any) => Error | undefined;
};
export { RowHeightManager, propTypes, shouldComponentUpdate, getScrollbarWidth, };
