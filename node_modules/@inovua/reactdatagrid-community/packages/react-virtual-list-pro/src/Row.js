/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propTypes = exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _shouldComponentUpdate2 = _interopRequireDefault(require("../../../packages/shouldComponentUpdate"));
var _sealedObjectFactory = _interopRequireDefault(require("./sealedObjectFactory"));
var _getGlobal = require("../../../getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var sharedRowProps = (0, _sealedObjectFactory.default)({
  index: null,
  count: null,
  rowHeight: null,
  renderIndex: null,
  empty: null,
  sticky: null,
  rowSpan: null
});
var STR_HIDDEN = 'hidden';
var STR_ABSOLUTE = 'absolute';
var STR_ZERO_PX = '0px';
var STR_VISIBLE = 'visible';
var raf = globalObject.requestAnimationFrame;
var caf = globalObject.cancelAnimationFrame;
var InovuaVirtualListRow = function (_React$Component) {
  (0, _inherits2.default)(InovuaVirtualListRow, _React$Component);
  var _super = _createSuper(InovuaVirtualListRow);
  function InovuaVirtualListRow(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaVirtualListRow);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mounted", true);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_appliedIndex", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refetchNode", true);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visible", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "index", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offset", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowSpan", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "oldRowSpan", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "ref", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "row", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "node", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "prepareSetIndex", function () {
      var rowHeightManager = _this.props.rowHeightManager;
      if (rowHeightManager != null) {
        var index = _this.getIndex();
        delete _this.index;
        _this.setIndex(index, undefined, false);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowSpan", function () {
      return _this.rowSpan;
    });
    _this.ref = function (r) {
      _this.row = r;
    };
    _this.mounted = true;
    return _this;
  }
  (0, _createClass2.default)(InovuaVirtualListRow, [{
    key: "getInstance",
    value: function getInstance() {
      return this.row;
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (!nextProps.pure) {
        return true;
      }
      return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      if (this.props.onMount) {
        this.props.onMount(this);
      }
      var naturalRowHeight = this.props.naturalRowHeight;
      this.fetchNode();
      if (naturalRowHeight && this.node) {
        this.node.style.visibility = STR_HIDDEN;
        return;
      }
      this.updateRowHeight();
      this.updateRowSpan();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mounted = false;
      if (this.props.onUnmount) {
        this.props.onUnmount(this);
      }
      this.node = null;
      this.info = null;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.refetchNode) {
        this.fetchNode();
        this.refetchNode = false;
      }
      this.updateRowSpan();
    }
  }, {
    key: "updateRowSpan",
    value: function updateRowSpan() {
      if (this.rowSpan !== this.oldRowSpan) {
        this.props.notifyRowSpan(this.getIndex(), this.rowSpan);
        var node = this.getDOMNode();
        node.style.zIndex = this.rowSpan > 1 ? 1 : null;
      }
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      if (this.node) {
        return this.node;
      }
      if (!this.row) {
        return null;
      }
      this.node = this.row.domRef ? this.row.domRef.current : this.row;
      return this.node;
    }
  }, {
    key: "fetchNode",
    value: function fetchNode() {
      var node = this.getDOMNode();
      if (!this.props.virtualized) {
        this.prepareSetIndex();
        return;
      }
      if (node && !this.isVisible()) {
        node.style.visibility = STR_HIDDEN;
      }
      var contain = this.props.contain;
      if (node) {
        node.style.position = STR_ABSOLUTE;
        node.style.top = STR_ZERO_PX;
        if (contain) {
          if (contain === true) {
            node.style.contain = 'style layout paint';
          } else {
            node.style.contain = contain;
          }
        }
        this.prepareSetIndex();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        renderRow = _this$props.renderRow,
        count = _this$props.count,
        renderIndex = _this$props.index,
        showEmptyRows = _this$props.showEmptyRows,
        onKeyDown = _this$props.onKeyDown,
        onFocus = _this$props.onFocus,
        rowHeightManager = _this$props.rowHeightManager,
        sticky = _this$props.sticky,
        contain = _this$props.contain,
        virtualized = _this$props.virtualized,
        useTransformPosition = _this$props.useTransformPosition;
      var index = this.getIndex();
      sharedRowProps.empty = false;
      if (index >= count) {
        if (!showEmptyRows) {
          this.renderResult = false;
          return null;
        }
        sharedRowProps.empty = true;
      }
      var rowHeight = rowHeightManager ? rowHeightManager.getRowHeight(index) : this.props.rowHeight;
      sharedRowProps.rowHeight = rowHeight;
      sharedRowProps.count = count;
      sharedRowProps.index = index;
      sharedRowProps.renderIndex = renderIndex;
      sharedRowProps.rowSpan = 1;
      sharedRowProps.sticky = sticky;
      var row = renderRow(sharedRowProps);
      this.oldRowSpan = this.rowSpan || 1;
      this.rowSpan = sharedRowProps.rowSpan;
      if (this.renderResult === false && row) {
        this.refetchNode = true;
      }
      this.renderResult = !!row;
      if (!row) {
        return null;
      }
      var extraStyle = null;
      if (virtualized) {
        extraStyle = {
          top: 0,
          position: STR_ABSOLUTE,
          backfaceVisibility: STR_HIDDEN,
          visibility: this.isVisible() ? STR_VISIBLE : STR_HIDDEN
        };
        extraStyle[useTransformPosition ? 'transform' : 'top'] = useTransformPosition ? "translate3d(0px, ".concat(this.offset, "px, 0px)") : this.offset;
        if (contain) {
          if (contain === true) {
            extraStyle.contain = 'style layout paint';
          } else {
            extraStyle.contain = contain;
          }
        }
        if (row.props && row.props.style) {
          extraStyle = _objectSpread(_objectSpread({}, row.props.style), extraStyle);
        }
      }
      return (0, _react.cloneElement)(row, {
        key: this.props.index,
        ref: this.ref,
        onFocus: onFocus ? onFocus.bind(null, index) : null,
        onKeyDown: onKeyDown ? onKeyDown.bind(null, index) : null,
        style: extraStyle
      });
    }
  }, {
    key: "updateRowHeight",
    value: function updateRowHeight(config) {
      var _this2 = this;
      var _this$props2 = this.props,
        naturalRowHeight = _this$props2.naturalRowHeight,
        rowHeightManager = _this$props2.rowHeightManager;
      if (naturalRowHeight) {
        var index = this.index;
        var getDOMHeight = function getDOMHeight() {
          var _this2$node;
          return ((_this2$node = _this2.node) === null || _this2$node === void 0 ? void 0 : _this2$node.scrollHeight) || 0;
        };
        var rowHeight = rowHeightManager.getRowHeight(index);
        var offsetHeight = getDOMHeight();
        var height = offsetHeight;
        if (rowHeight != offsetHeight) {
          var info = {
            index: index,
            height: height
          };
          if (!offsetHeight) {
            return;
          }
          var useRaf = config && config.useRaf !== undefined ? !!config.useRaf : true;
          if (useRaf) {
            rowHeightManager.setRowHeightLazy(info);
          } else {
            rowHeightManager.setRowHeight(info);
          }
        }
      }
    }
  }, {
    key: "update",
    value: function update(callback) {
      var _this3 = this;
      if (this.mounted === false) {
        return;
      }
      if (this.props.rowHeightManager != null) {
        this.forceUpdate(function () {
          _this3.updateRowHeight();
          if (typeof callback === 'function') {
            callback();
          }
        });
        return;
      }
      this.forceUpdate(function () {
        if (typeof callback == 'function') {
          callback(_this3.getInfo(true));
        }
      });
    }
  }, {
    key: "setVisible",
    value: function setVisible(value, callback) {
      if (this.mounted === false) {
        return;
      }
      this.visible = value;
      if (this.node) {
        this.node.style.visibility = value ? STR_VISIBLE : STR_HIDDEN;
      }
      if (typeof callback == 'function') {
        callback(this.getInfo());
      }
    }
  }, {
    key: "setRowOffset",
    value: function setRowOffset() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
      var _this$props3 = this.props,
        rowHeightManager = _this$props3.rowHeightManager,
        useTransformPosition = _this$props3.useTransformPosition;
      if (!this.node) {
        return;
      }
      if (rowHeightManager) {
        var rowOffset = rowHeightManager.getRowOffset(index);
        this.offset = rowOffset;
        if (useTransformPosition) {
          this.node.style.transform = "translate3d(0px, ".concat(rowOffset, "px, 0px)");
        } else {
          this.node.style.top = "".concat(rowOffset, "px");
        }
      }
    }
  }, {
    key: "setIndex",
    value: function setIndex(index, callback) {
      var useRaf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var force = arguments.length > 3 ? arguments[3] : undefined;
      if (this.mounted === false) {
        return;
      }
      if (this.index === index && this.isVisible() && !force) {
        if (callback) {
          callback();
        }
        return;
      }
      this.index = index;
      this._appliedIndex = undefined;
      this.doSetIndex(index, callback, useRaf);
    }
  }, {
    key: "doSetIndex",
    value: function doSetIndex(index, callback, useRaf) {
      var _this4 = this;
      var sameIndex = this._appliedIndex === index;
      this._appliedIndex = index;
      if (useRaf !== true) {
        this.setVisible(true);
        this.setRowOffset(index);
        if (sameIndex) {
          if (callback) {
            callback();
          }
          return;
        }
        this.update(callback);
      } else {
        if (this.setIndexRafId) {
          caf(this.setIndexRafId);
        }
        this.setIndexRafId = raf(function () {
          delete _this4.setIndexRafId;
          _this4.setVisible(true);
          _this4.setRowOffset(index);
          if (sameIndex) {
            if (callback) {
              callback();
            }
            return;
          }
          _this4.update(callback);
        });
      }
    }
  }, {
    key: "isVisible",
    value: function isVisible() {
      return this.visible !== false;
    }
  }, {
    key: "setOffset",
    value: function setOffset(offset) {
      this.offset = offset;
      if (this.node) {
        var nodeStyle = this.node.style;
        nodeStyle.position = STR_ABSOLUTE;
        nodeStyle.top = STR_ZERO_PX;
        nodeStyle.backfaceVisibility = STR_HIDDEN;
        if (this.props.useTransformPosition) {
          nodeStyle.transform = "translate3d(0px, ".concat(offset, "px, 0px)");
        } else {
          nodeStyle.top = "".concat(offset, "px");
        }
      }
    }
  }, {
    key: "getIndex",
    value: function getIndex() {
      return this.index === undefined ? this.props.index : this.index;
    }
  }, {
    key: "getInfo",
    value: function getInfo(updateHeight) {
      if (this.mounted === false) {
        return this.info;
      }
      if (!this.info) {
        this.info = (0, _sealedObjectFactory.default)({
          row: null,
          node: null,
          height: null,
          index: null,
          key: null,
          offset: null
        });
      }
      this.info.row = this;
      this.info.node = this.node;
      this.info.height = updateHeight || this.height === undefined ? this.node ? this.node.offsetHeight : 0 : this.height;
      this.info.index = this.getIndex();
      this.info.key = this.props.index;
      this.info.offset = this.props.virtualized ? this.offset : this.node ? this.node.offsetTop : 0;
      return this.info;
    }
  }]);
  return InovuaVirtualListRow;
}(_react.default.Component);
exports.default = InovuaVirtualListRow;
InovuaVirtualListRow.defaultProps = {
  pure: false,
  useTransformPosition: false
};
var propTypes = {
  pure: _propTypes.default.bool,
  naturalRowHeight: _propTypes.default.bool,
  rowHeightManager: _propTypes.default.object,
  count: _propTypes.default.number,
  contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
  index: _propTypes.default.number.isRequired,
  onRowHeightChange: _propTypes.default.func,
  renderRow: _propTypes.default.func.isRequired,
  useTransformPosition: _propTypes.default.bool,
  virtualized: _propTypes.default.bool
};
exports.propTypes = propTypes;
InovuaVirtualListRow.propTypes = propTypes;