/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import PropTypes from 'prop-types';
import { RowHeightManager } from './RowHeightManager';
type TypeVirtualListRow = {
    useTransformPosition: boolean;
    pure: boolean;
    showEmptyRows?: boolean;
    rowHeightManager: RowHeightManager;
    naturalRowHeight?: boolean;
    virtualized?: boolean;
    contain?: boolean | string;
    index: number;
};
export default class InovuaVirtualListRow extends React.Component<TypeVirtualListRow> {
    private mounted;
    private _appliedIndex?;
    private refetchNode?;
    private visible?;
    private index?;
    private offset?;
    private rowSpan?;
    private oldRowSpan?;
    private ref;
    private row;
    private node;
    constructor(props: TypeVirtualListRow);
    getInstance(): any;
    shouldComponentUpdate(nextProps: TypeVirtualListRow, nextState: any): boolean;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    updateRowSpan(): void;
    getDOMNode(): HTMLElement | null;
    fetchNode(): void;
    prepareSetIndex: () => void;
    render(): React.DOMElement<{
        key: number;
        ref: (r: any) => void;
        onFocus: any;
        onKeyDown: any;
        style: React.CSSProperties | null;
    }, Element> | null;
    updateRowHeight(config?: {
        useRaf?: boolean;
    }): void;
    update(callback?: (info?: any) => void): void;
    setVisible(value: boolean, callback?: (info: any) => void): void;
    setRowOffset(index?: number | undefined): void;
    setIndex(index: number, callback?: () => void | undefined, useRaf?: boolean, force?: boolean): void;
    doSetIndex(index: number, callback: () => void | undefined, useRaf: boolean): void;
    isVisible(): boolean;
    setOffset(offset: number): void;
    getIndex(): number;
    getRowSpan: () => any;
    getInfo(updateHeight?: boolean): any;
}
declare const propTypes: {
    pure: PropTypes.Requireable<boolean>;
    naturalRowHeight: PropTypes.Requireable<boolean>;
    rowHeightManager: PropTypes.Requireable<object>;
    count: PropTypes.Requireable<number>;
    contain: PropTypes.Requireable<NonNullable<string | boolean | null | undefined>>;
    index: PropTypes.Validator<number>;
    onRowHeightChange: PropTypes.Requireable<(...args: any[]) => any>;
    renderRow: PropTypes.Validator<(...args: any[]) => any>;
    useTransformPosition: PropTypes.Requireable<boolean>;
    virtualized: PropTypes.Requireable<boolean>;
};
export { propTypes };
