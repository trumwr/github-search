/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _objectAssign = _interopRequireDefault(require("object-assign"));
var _ = _interopRequireDefault(require("../"));
var _testUtils = require("../testUtils");
require("../../style/index.scss");
var fakeEvent = function fakeEvent(props) {
  return (0, _objectAssign.default)({
    stopPropagation: function stopPropagation() {},
    preventDefault: function preventDefault() {}
  }, props);
};
var dragSetup = function dragSetup(gridInstance, _ref, dropProps) {
  var colIndex = _ref.index,
    diff = _ref.diff;
  var body = gridInstance.body;
  var header = body.columnLayout.headerLayout.header;
  var headerNode = (0, _reactDom.findDOMNode)(header);
  var headers = (0, _toConsumableArray2.default)(headerNode.children);
  var firstFlexIndex = body.props.visibleColumns.reduce(function (index, col, i) {
    if (col.flex != null && index == -1) {
      return i;
    }
    return index;
  }, -1);
  return {
    headers: headers,
    headerNode: headerNode,
    drag: function drag() {
      var colHeaderNode = headers[colIndex];
      var currentTarget = colHeaderNode.querySelector('.InovuaReactDataGrid__column-resize-handle');
      var shareSpace = dropProps && dropProps.shareSpace !== undefined ? dropProps.shareSpace : gridInstance.props.shareSpaceOnResize;
      var initialSize = parseInt(colHeaderNode.style.width, 10);
      var nextColumn = headers[colIndex + 1];
      var nextColumnSize = nextColumn ? parseInt(nextColumn.style.width, 10) : null;
      body.columnLayout.onResizeMouseDown({
        visibleIndex: colIndex
      }, {
        colHeaderNode: headers[colIndex],
        event: fakeEvent({
          currentTarget: currentTarget
        })
      });
      body.columnLayout.onResizeDrop((0, _objectAssign.default)({}, {
        index: colIndex,
        offset: 0,
        diff: diff,
        size: initialSize + diff,
        nextColumnSize: shareSpace ? nextColumnSize - diff : nextColumnSize,
        firstFlexIndex: firstFlexIndex,
        shareSpace: shareSpace
      }, dropProps));
    }
  };
};
describe('DataGrid Column resize (no groups)', function () {
  it('should correctly resize a flex column with keepFlex', function (done) {
    var columns = [{
      name: 'firstName'
    }, {
      name: 'lastName'
    }, {
      name: 'age',
      flex: 1,
      keepFlex: true
    }, {
      name: 'email'
    }];
    var dataSource = [{
      firstName: 'john',
      email: 'john@gmail.com',
      id: 1
    }];
    var resizeColumn = [];
    var resizeSize = [];
    var resizeFlex = [];
    var onColumnResize = function onColumnResize(_ref2) {
      var column = _ref2.column,
        size = _ref2.size,
        flex = _ref2.flex;
      resizeColumn.push(column);
      resizeSize.push(size);
      resizeFlex.push(flex);
    };
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
      onColumnResize: onColumnResize,
      dataSource: dataSource,
      idProperty: "id",
      style: {
        width: 900
      },
      columnDefaultWidth: 100,
      columns: columns
    }));
    setTimeout(function () {
      var _dragSetup = dragSetup(gridInstance, {
          index: 2,
          diff: -98
        }, {
          shareSpace: true,
          size: null
        }),
        headers = _dragSetup.headers,
        drag = _dragSetup.drag;
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '100px', '598px', '100px']);
      drag();
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '100px', '500px', '198px']);
      expect(resizeColumn[0].name).to.equal('email');
      expect(resizeSize[0]).to.equal(198);
      expect(resizeFlex[0]).to.equal(false);
      expect(resizeColumn[1].name).to.equal('age');
      expect(resizeSize[1]).to.equal(500);
      expect(resizeFlex[1]).to.equal(true);
      expect(resizeFlex.length).to.equal(2);
      var g = gridInstance.rerender(_react.default.createElement(_.default, {
        dataSource: dataSource,
        idProperty: "id",
        style: {
          width: 1000
        },
        columnDefaultWidth: 100,
        columns: columns
      }));
      expect(g).to.equal(gridInstance);
      setTimeout(function () {
        expect(headers.map(function (h) {
          return h.style.width;
        })).to.eql(['100px', '100px', '600px', '198px']);
        gridInstance.unmount();
        done();
      }, 50);
    }, 20);
  });
  it('should correctly resize a flex column without keepFlex', function (done) {
    var columns = [{
      name: 'firstName'
    }, {
      name: 'lastName'
    }, {
      name: 'age',
      flex: 1
    }, {
      name: 'email'
    }];
    var dataSource = [{
      firstName: 'john',
      email: 'john@gmail.com',
      id: 1
    }];
    var resizeColumn = [];
    var resizeSize = [];
    var resizeFlex = [];
    var onColumnResize = function onColumnResize(_ref3) {
      var column = _ref3.column,
        size = _ref3.size,
        flex = _ref3.flex;
      resizeColumn.push(column);
      resizeSize.push(size);
      resizeFlex.push(flex);
    };
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
      onColumnResize: onColumnResize,
      dataSource: dataSource,
      idProperty: "id",
      style: {
        width: 900
      },
      columnDefaultWidth: 100,
      columns: columns
    }));
    setTimeout(function () {
      var _dragSetup2 = dragSetup(gridInstance, {
          index: 2,
          diff: -98
        }, {
          shareSpace: false,
          size: null
        }),
        headers = _dragSetup2.headers,
        drag = _dragSetup2.drag;
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '100px', '598px', '100px']);
      drag();
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '100px', '500px', '100px']);
      expect(resizeColumn[0].name).to.equal('age');
      expect(resizeSize[0]).to.equal(500);
      expect(resizeFlex[0]).to.equal(true);
      expect(resizeColumn.length).to.equal(1);
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should correctly resize a flex column', function (done) {
    var columns = [{
      name: 'firstName'
    }, {
      name: 'lastName'
    }, {
      name: 'age',
      flex: 1
    }, {
      name: 'email'
    }];
    var dataSource = [{
      firstName: 'john',
      email: 'john@gmail.com',
      id: 1
    }];
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
      dataSource: dataSource,
      idProperty: "id",
      style: {
        width: 1000
      },
      columnDefaultWidth: 100,
      columns: columns
    }));
    setTimeout(function () {
      var _dragSetup3 = dragSetup(gridInstance, {
          index: 2,
          diff: -98
        }),
        headers = _dragSetup3.headers,
        drag = _dragSetup3.drag;
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '100px', '698px', '100px']);
      drag();
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '100px', '600px', '100px']);
      gridInstance.rerender(_react.default.createElement(_.default, {
        dataSource: dataSource,
        idProperty: "id",
        style: {
          width: 900
        },
        columnDefaultWidth: 100,
        columns: columns
      }));
      setTimeout(function () {
        expect(headers.map(function (h) {
          return h.style.width;
        })).to.eql(['100px', '100px', '500px', '100px']);
        gridInstance.unmount();
        done();
      }, 50);
    }, 20);
  });
  it('should correctly resize a nonflex column, with a flex sibling and shareSpaceOnResize', function (done) {
    var columns = [{
      name: 'firstName'
    }, {
      name: 'lastName'
    }, {
      name: 'age',
      flex: 1
    }, {
      name: 'email'
    }];
    var dataSource = [{
      firstName: 'john',
      email: 'john@gmail.com',
      id: 1
    }];
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
      dataSource: dataSource,
      idProperty: "id",
      style: {
        width: 900
      },
      columnDefaultWidth: 100,
      columns: columns,
      shareSpaceOnResize: true
    }));
    setTimeout(function () {
      var _dragSetup4 = dragSetup(gridInstance, {
          index: 1,
          diff: -30
        }),
        headers = _dragSetup4.headers,
        drag = _dragSetup4.drag;
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '100px', '598px', '100px']);
      drag();
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '70px', '628px', '100px']);
      gridInstance.rerender(_react.default.createElement(_.default, {
        dataSource: dataSource,
        idProperty: "id",
        style: {
          width: 1000
        },
        columnDefaultWidth: 100,
        shareSpaceOnResize: true,
        columns: columns
      }));
      setTimeout(function () {
        expect(headers.map(function (h) {
          return h.style.width;
        })).to.eql(['100px', '70px', '728px', '100px']);
        gridInstance.unmount();
        done();
      }, 50);
    }, 20);
  });
  it('should correctly resize columns in a simple case - all non-flex columns, shareSpaceOnResize=false', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1
      }],
      idProperty: "id",
      columnDefaultWidth: 100,
      columns: [{
        name: 'firstName'
      }, {
        name: 'lastName'
      }, {
        name: 'age'
      }, {
        name: 'email'
      }]
    }));
    setTimeout(function () {
      var _dragSetup5 = dragSetup(gridInstance, {
          index: 1,
          diff: 69
        }),
        headers = _dragSetup5.headers,
        drag = _dragSetup5.drag;
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '100px', '100px', '100px']);
      drag();
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '169px', '100px', '100px']);
      var _dragSetup6 = dragSetup(gridInstance, {
          index: 1,
          diff: 31
        }),
        dragAgain = _dragSetup6.drag;
      dragAgain();
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['100px', '200px', '100px', '100px']);
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should correctly resize columns with shareSpaceOnResize', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_.default, {
      shareSpaceOnResize: true,
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1
      }],
      idProperty: "id",
      columnDefaultWidth: 200,
      columns: [{
        name: 'firstName'
      }, {
        name: 'lastName'
      }, {
        name: 'age'
      }, {
        name: 'email'
      }]
    }));
    setTimeout(function () {
      var _dragSetup7 = dragSetup(gridInstance, {
          index: 1,
          diff: 50
        }),
        headers = _dragSetup7.headers,
        drag = _dragSetup7.drag;
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['200px', '200px', '200px', '200px']);
      drag();
      expect(headers.map(function (h) {
        return h.style.width;
      })).to.eql(['200px', '250px', '150px', '200px']);
      gridInstance.unmount();
      done();
    }, 20);
  });
});