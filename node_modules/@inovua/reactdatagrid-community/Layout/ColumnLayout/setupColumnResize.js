/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _dragHelper = _interopRequireDefault(require("../../packages/drag-helper"));
var emptyFn = function emptyFn() {};
function _default(_ref, _ref2, event) {
  var region = _ref.region,
    headerRegion = _ref.headerRegion,
    constrainTo = _ref.constrainTo,
    columnHeaderNodes = _ref.columnHeaderNodes,
    columns = _ref.columns,
    rtl = _ref.rtl,
    index = _ref.index,
    firstFlexIndex = _ref.firstFlexIndex,
    shareSpace = _ref.shareSpace,
    shareSpaceOnResize = _ref.shareSpaceOnResize,
    initialSize = _ref.initialSize,
    nextColumnSize = _ref.nextColumnSize,
    extraOffset = _ref.extraOffset,
    groupColumns = _ref.groupColumns;
  var _ref2$onResizeDragIni = _ref2.onResizeDragInit,
    onResizeDragInit = _ref2$onResizeDragIni === void 0 ? emptyFn : _ref2$onResizeDragIni,
    _ref2$onResizeDragSta = _ref2.onResizeDragStart,
    onResizeDragStart = _ref2$onResizeDragSta === void 0 ? emptyFn : _ref2$onResizeDragSta,
    _ref2$onResizeDrag = _ref2.onResizeDrag,
    onResizeDrag = _ref2$onResizeDrag === void 0 ? emptyFn : _ref2$onResizeDrag,
    _ref2$onResizeDrop = _ref2.onResizeDrop,
    onResizeDrop = _ref2$onResizeDrop === void 0 ? emptyFn : _ref2$onResizeDrop;
  var column = columns[index];
  var nextColumn = columns[index + 1];
  var initialPosition = rtl ? headerRegion.right - region.right : region.left - headerRegion.left;
  var isContrained = function isContrained(dragRegion) {
    var constrained = dragRegion.left <= constrainTo.left || dragRegion.right >= constrainTo.right;
    return constrained;
  };
  (0, _dragHelper.default)(event, {
    constrainTo: constrainTo,
    region: region,
    onDragInit: onResizeDragInit.bind(this, {
      offset: initialPosition,
      region: region,
      initialPosition: initialPosition,
      constrained: isContrained(region)
    }),
    onDragStart: function onDragStart(e, config) {
      var constrained = isContrained(config.dragRegion);
      onResizeDragStart({
        initialPosition: initialPosition,
        offset: initialPosition,
        constrained: constrained,
        resizing: true,
        region: region,
        column: column
      });
    },
    onDrag: function onDrag(e, config) {
      var diff = config.diff.left;
      var offset = initialPosition + (rtl ? -1 : 1) * diff;
      var constrained = isContrained(config.dragRegion);
      e.preventDefault();
      onResizeDrag({
        constrained: constrained,
        initialPosition: initialPosition,
        diff: diff,
        offset: offset,
        region: region,
        column: column
      });
    },
    onDrop: function onDrop(e, config) {
      var diff = (rtl ? -1 : 1) * Math.round(config.diff.left);
      var offset = initialPosition + diff;
      var constrained = isContrained(config.dragRegion);
      var size = initialSize + diff;
      var doShare = shareSpace;
      var nextColSize;
      if (doShare) {
        nextColSize = nextColumnSize - diff;
      }
      onResizeDrop({
        index: index,
        constrained: constrained,
        initialPosition: initialPosition,
        region: region,
        diff: diff,
        offset: offset,
        size: size,
        shareSpaceOnResize: shareSpaceOnResize,
        groupColumns: groupColumns,
        initialSize: initialSize,
        firstFlexIndex: firstFlexIndex,
        shareSpace: doShare,
        column: column,
        nextColumn: nextColumn,
        nextColumnSize: nextColSize
      });
    }
  });
}