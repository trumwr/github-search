/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { RefObject } from 'react';
import PropTypes from 'prop-types';
import getCellHeader from './getCellHeader';
import { FunctionNotifier } from '../../../../utils/notifier';
export { getCellHeader };
export declare const getParentGroups: (groupName: string, groups: any, { includeSelf }?: {
    includeSelf: boolean;
}) => any[];
type TypeHeaderProps = {
    notifyColumnFilterVisibleStateChange: FunctionNotifier<boolean>;
} | any;
type TypeHeaderState = {
    children?: any[];
};
export default class InovuaDataGridHeader extends React.Component<TypeHeaderProps, TypeHeaderState> {
    static defaultProps: {
        onResize: () => void;
        showWarnings: boolean;
    };
    static propTypes: {
        availableWidth: PropTypes.Requireable<number>;
        columnHeaderUserSelect: PropTypes.Requireable<boolean>;
        columnRenderCount: PropTypes.Requireable<number>;
        columnResizeHandleWidth: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        columnUserSelect: PropTypes.Requireable<boolean>;
        columns: PropTypes.Requireable<any[]>;
        columnsMap: PropTypes.Requireable<object>;
        lockedStartColumns: PropTypes.Requireable<any[]>;
        unlockedColumns: PropTypes.Requireable<any[]>;
        lockedEndColumns: PropTypes.Requireable<any[]>;
        deselectAll: PropTypes.Requireable<(...args: any[]) => any>;
        notifyColumnFilterVisibleStateChange: PropTypes.Requireable<(...args: any[]) => any>;
        firstLockedEndIndex: PropTypes.Requireable<number>;
        firstLockedStartIndex: PropTypes.Requireable<number>;
        isMultiSort: PropTypes.Requireable<boolean>;
        onGroupMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
        onResizeMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
        onResizeTouchStart: PropTypes.Requireable<(...args: any[]) => any>;
        resizable: PropTypes.Requireable<boolean>;
        resizeProxyStyle: PropTypes.Requireable<object>;
        scrollbarWidth: PropTypes.Requireable<number>;
        selectAll: PropTypes.Requireable<(...args: any[]) => any>;
        selectedCount: PropTypes.Requireable<number>;
        sortInfo: PropTypes.Requireable<any>;
        sortable: PropTypes.Requireable<boolean>;
        totalCount: PropTypes.Requireable<number>;
        unselectedCount: PropTypes.Requireable<number>;
        virtualListBorderLeft: PropTypes.Requireable<number>;
        virtualListBorderRight: PropTypes.Requireable<number>;
        nativeScroll: PropTypes.Requireable<boolean>;
        computedShowHeaderBorderRight: PropTypes.Requireable<any>;
        hasLockedEnd: PropTypes.Requireable<boolean>;
        hasLockedStart: PropTypes.Requireable<boolean>;
        showColumnContextMenu: PropTypes.Requireable<(...args: any[]) => any>;
        showColumnFilterContextMenu: PropTypes.Requireable<(...args: any[]) => any>;
        hideColumnFilterContextMenu: PropTypes.Requireable<(...args: any[]) => any>;
        onColumnHeaderFocus: PropTypes.Requireable<(...args: any[]) => any>;
        showColumnMenuTool: PropTypes.Requireable<boolean>;
        showColumnMenuToolOnHover: PropTypes.Requireable<boolean>;
        firstUnlockedIndex: PropTypes.Requireable<number>;
        lockedRows: PropTypes.Requireable<any>;
        i18n: PropTypes.Requireable<any>;
        filterable: PropTypes.Requireable<boolean>;
        filterTypes: PropTypes.Requireable<any>;
        computedGroupsDepth: PropTypes.Requireable<number>;
        computedGroupsMap: PropTypes.Requireable<{
            [x: string]: PropTypes.InferProps<{
                name: PropTypes.Validator<string>;
            }> | null | undefined;
        }>;
        headerHeight: PropTypes.Requireable<number>;
        maxWidth: PropTypes.Requireable<number>;
        renderSortTool: PropTypes.Requireable<(...args: any[]) => any>;
        minWidth: PropTypes.Requireable<number>;
        onCellMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
        onCellTouchStart: PropTypes.Requireable<(...args: any[]) => any>;
        onCellClick: PropTypes.Requireable<(...args: any[]) => any>;
        computedOnColumnFilterValueChange: PropTypes.Requireable<(...args: any[]) => any>;
        onSortClick: PropTypes.Requireable<(...args: any[]) => any>;
        onResize: PropTypes.Requireable<(...args: any[]) => any>;
        scrollLeft: PropTypes.Requireable<number>;
        showWarnings: PropTypes.Requireable<boolean>;
        unselected: PropTypes.Requireable<any>;
        virtualizeColumns: PropTypes.Requireable<boolean>;
        width: PropTypes.Requireable<number>;
        updateLockedWrapperPositions: PropTypes.Requireable<(...args: any[]) => any>;
        lastLockedEndIndex: PropTypes.Requireable<number>;
        lastLockedStartIndex: PropTypes.Requireable<number>;
        lastUnlockedIndex: PropTypes.Requireable<number>;
        getScrollLeftMax: PropTypes.Requireable<(...args: any[]) => any>;
        rtl: PropTypes.Requireable<boolean>;
        renderLockedEndCells: PropTypes.Requireable<(...args: any[]) => any>;
        renderLockedStartCells: PropTypes.Requireable<(...args: any[]) => any>;
        renderInPortal: PropTypes.Requireable<any>;
        onFilterValueChange: PropTypes.Requireable<(...args: any[]) => any>;
        setScrollLeft: PropTypes.Requireable<(...args: any[]) => any>;
        sortedColumnsInfo: PropTypes.Requireable<any>;
        renderMenuTool: PropTypes.Requireable<(...args: any[]) => any>;
        columnHoverClassName: PropTypes.Requireable<string>;
        onColumnMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onColumnMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        columnIndexHovered: PropTypes.Requireable<number>;
        enableColumnFilterContextMenu: PropTypes.Requireable<boolean>;
        computedEnableColumnHover: PropTypes.Requireable<boolean>;
        renderRowDetailsMoreIcon: PropTypes.Requireable<(...args: any[]) => any>;
        hideColumnContextMenu: PropTypes.Requireable<(...args: any[]) => any>;
        updateMenuPosition: PropTypes.Requireable<(...args: any[]) => any>;
        computedFilterable: PropTypes.Requireable<boolean>;
        filterRowHeight: PropTypes.Requireable<number>;
    };
    domRef: string | ((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null | undefined;
    unlockedCells: any;
    cells: any[] | null;
    columnRenderStartIndex?: number;
    scrollLeft: number;
    startIndex: number;
    endIndex: number;
    constructor(props: TypeHeaderProps);
    componentWillUnmount(): void;
    componentDidUpdate: (prevProps: TypeHeaderProps) => void;
    onCellMount: (cellProps: any, c: any) => void;
    onCellUnmount: (cellProps: any, cell: any) => void;
    findCellById: (cellId: string, cellsArray?: any) => any;
    getCells: () => any[];
    getGroupsAndCells: () => any[];
    setCellIndex: (cell: any, index: number) => void;
    getCellIndex: (cell: any) => any;
    sortCells: (cells: any[]) => any[];
    getUnlockedCells: (thisProps?: Readonly<any> & Readonly<{
        children?: React.ReactNode;
    }>) => any[];
    getSortedCells: () => any[];
    getGaps: (startIndex: number, endIndex: number) => number[];
    setColumnRenderStartIndex: (columnRenderStartIndex: number) => void;
    getColumnRenderRange: () => {
        start: any;
        end: any;
    } | null;
    prepareStyle: (props: TypeHeaderProps) => any;
    getDOMNode(): any;
    notifyScrollLeftMax: (scrollLeftMax: number) => void;
    setScrollLeft: (scrollLeft: number, scrollLeftMax?: number) => void;
    maybeUpdateColumns: () => void;
    updateColumns: () => void;
    render(): JSX.Element;
    onFocus: (event: MouseEvent) => void;
    getPropsForCells: (startIndex?: any, endIndex?: any) => any;
    onHeaderCellFocus: (headerCellProps: any, column: any, e: MouseEvent) => void;
    onTransitionEnd: (cellProps: any, column: any, e: MouseEvent) => void;
    onCellMouseDown: (headerCellProps: any, event: MouseEvent) => void;
    onCellTouchStart: (headerCellProps: any, event: MouseEvent) => void;
    renderColumns: () => any;
    getCellDOMNodeAt: (index: number) => any;
    renderHeaderGroup: (groupName: string, groupItems: any, _?: any) => JSX.Element;
    onResizeMouseDown: (groupProps: any, headerGroupInstance: any, event: any) => void;
    onResizeTouchStart: (groupProps: any, headerGroupInstance: any, event: any) => void;
    getItemsForDepth: (items: {
        props: any;
    }[], depth: string) => any[];
    renderItems: (items: any) => any;
    groupItemsForDepth: (items: any, depth: any) => any;
    getItemGroupName: (item: any) => any;
    fixDepth: (item: any, depthDiff: any) => any;
    renderGroupedCells: (cellProps: any[]) => any;
    onFilterValueChange: (filterValue: any, cellProps: any) => void;
    warn: (msg: string) => void;
}
