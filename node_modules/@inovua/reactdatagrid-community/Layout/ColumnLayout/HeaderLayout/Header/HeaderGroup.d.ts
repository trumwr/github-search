/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { CSSProperties, RefObject } from 'react';
import PropTypes from 'prop-types';
type TypeHeaderGroupProps = {
    showBorderLeft?: boolean;
    showBorderRight?: boolean;
    resizable?: boolean;
    children?: any;
    group?: any;
    dragging?: boolean;
    depth?: any;
    columnResizeHandleWidth: number;
    containsLastColumn?: boolean;
    firstInSection?: boolean;
    lastInSection?: boolean;
    adjustResizer?: any;
    locked: any;
    rtl?: boolean;
    resizeProxyStyle?: CSSProperties;
    style?: CSSProperties;
    firstIndex?: any;
    className?: string;
    inTransition?: boolean;
    filterable?: boolean;
    extraChildrenProps?: any;
    onResizeMouseDown?: (props: any, instance: any, event: MouseEvent) => void;
    onResizeTouchStart?: (props: any, instance: any, event: MouseEvent) => void;
    onMouseDown?: (event: MouseEvent, props: any, instance: any) => void;
};
type TypeHeaderGroupState = {
    dragging: boolean;
    top?: number;
    left?: number;
    width?: number;
    height?: number;
    right?: number;
};
export default class HeaderGroup extends React.Component<TypeHeaderGroupProps, TypeHeaderGroupState> {
    static defaultProps: {
        isHeaderGroup: boolean;
    };
    static propTypes: {
        columnResizeHandleWidth: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        group: PropTypes.Requireable<PropTypes.InferProps<{
            name: PropTypes.Validator<NonNullable<NonNullable<string | number | null | undefined>>>;
            className: PropTypes.Requireable<string>;
            style: PropTypes.Requireable<object>;
            headerClassName: PropTypes.Requireable<string>;
            headerStyle: PropTypes.Requireable<object>;
        }>>;
        depth: PropTypes.Validator<number>;
        columns: PropTypes.Validator<(NonNullable<string | number | null | undefined> | null | undefined)[]>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        extraChildrenProps: PropTypes.Requireable<object>;
        containsLastColumn: PropTypes.Requireable<boolean>;
        lastInSection: PropTypes.Requireable<boolean>;
        filterable: PropTypes.Requireable<boolean>;
        onResizeMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
        onResizeTouchStart: PropTypes.Requireable<(...args: any[]) => any>;
        parentGroups: PropTypes.Requireable<any[]>;
        showBorderLeft: PropTypes.Requireable<boolean>;
        showBorderRight: PropTypes.Requireable<boolean>;
        siblingCount: PropTypes.Requireable<number>;
        siblingIndex: PropTypes.Requireable<number>;
    };
    domRef: string | ((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null | undefined;
    constructor(props: TypeHeaderGroupProps);
    getDOMNode: () => any;
    setTop: (top: number) => void;
    setLeft: (left: number) => void;
    setRight: (right: number) => void;
    setHeight: (height: number) => void;
    setWidth: (width: number) => void;
    setDragging: (dragging: boolean, callback: () => void) => void;
    prepareStyle: () => React.CSSProperties;
    render(): JSX.Element;
    getProxyRegion: () => any;
    renderChild: (child: any, index: any) => React.DetailedReactHTMLElement<any, HTMLElement>;
    onResizeMouseDown: (event: MouseEvent) => void;
    onResizeTouchStart: (event: MouseEvent) => void;
    onMouseDown: (event: any) => void;
}
export {};
