/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
Object.defineProperty(exports, "getCellHeader", {
  enumerable: true,
  get: function get() {
    return _getCellHeader.default;
  }
});
exports.getParentGroups = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactCleanProps = _interopRequireDefault(require("../../../../packages/react-clean-props"));
var _region = _interopRequireDefault(require("../../../../packages/region"));
var _selectParent = _interopRequireDefault(require("../../../../common/selectParent"));
var _uglified = _interopRequireDefault(require("../../../../packages/uglified"));
var _Cell = _interopRequireDefault(require("../../Cell"));
var _HeaderGroup = _interopRequireDefault(require("./HeaderGroup"));
var _renderCellsMaybeLocked = _interopRequireDefault(require("../../Content/renderCellsMaybeLocked"));
var _join = _interopRequireDefault(require("../../../../packages/join"));
var _getCellHeader = _interopRequireDefault(require("./getCellHeader"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var emptyFn = function emptyFn() {};
var getParentGroups = function getParentGroups(groupName, groups) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      includeSelf: false
    },
    includeSelf = _ref.includeSelf;
  var parentGroups = [];
  if (!groups) {
    return parentGroups;
  }
  var nextGroup = groups[groupName] ? groups[groups[groupName].group] : null;
  if (includeSelf && groups[groupName]) {
    parentGroups.push(groups[groupName]);
  }
  while (nextGroup) {
    parentGroups.push(nextGroup);
    nextGroup = groups[nextGroup.group];
  }
  return parentGroups;
};
exports.getParentGroups = getParentGroups;
var defaultProps = {
  onResize: function onResize() {},
  showWarnings: !_uglified.default
};
var propTypes = {
  availableWidth: _propTypes.default.number,
  columnHeaderUserSelect: _propTypes.default.bool,
  columnRenderCount: _propTypes.default.number,
  columnResizeHandleWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  columnUserSelect: _propTypes.default.bool,
  columns: _propTypes.default.array,
  columnsMap: _propTypes.default.object,
  lockedStartColumns: _propTypes.default.array,
  unlockedColumns: _propTypes.default.array,
  lockedEndColumns: _propTypes.default.array,
  deselectAll: _propTypes.default.func,
  notifyColumnFilterVisibleStateChange: _propTypes.default.func,
  firstLockedEndIndex: _propTypes.default.number,
  firstLockedStartIndex: _propTypes.default.number,
  isMultiSort: _propTypes.default.bool,
  onGroupMouseDown: _propTypes.default.func,
  onResizeMouseDown: _propTypes.default.func,
  onResizeTouchStart: _propTypes.default.func,
  resizable: _propTypes.default.bool,
  resizeProxyStyle: _propTypes.default.object,
  scrollbarWidth: _propTypes.default.number,
  selectAll: _propTypes.default.func,
  selectedCount: _propTypes.default.number,
  sortInfo: _propTypes.default.any,
  sortable: _propTypes.default.bool,
  totalCount: _propTypes.default.number,
  unselectedCount: _propTypes.default.number,
  virtualListBorderLeft: _propTypes.default.number,
  virtualListBorderRight: _propTypes.default.number,
  nativeScroll: _propTypes.default.bool,
  computedShowHeaderBorderRight: _propTypes.default.any,
  hasLockedEnd: _propTypes.default.bool,
  hasLockedStart: _propTypes.default.bool,
  showColumnContextMenu: _propTypes.default.func,
  showColumnFilterContextMenu: _propTypes.default.func,
  hideColumnFilterContextMenu: _propTypes.default.func,
  onColumnHeaderFocus: _propTypes.default.func,
  showColumnMenuTool: _propTypes.default.bool,
  showColumnMenuToolOnHover: _propTypes.default.bool,
  firstUnlockedIndex: _propTypes.default.number,
  lockedRows: _propTypes.default.any,
  i18n: _propTypes.default.any,
  filterable: _propTypes.default.bool,
  filterTypes: _propTypes.default.any,
  computedGroupsDepth: _propTypes.default.number,
  computedGroupsMap: _propTypes.default.objectOf(_propTypes.default.shape({
    name: _propTypes.default.string.isRequired
  })),
  headerHeight: _propTypes.default.number,
  maxWidth: _propTypes.default.number,
  renderSortTool: _propTypes.default.func,
  minWidth: _propTypes.default.number,
  onCellMouseDown: _propTypes.default.func,
  onCellTouchStart: _propTypes.default.func,
  onCellClick: _propTypes.default.func,
  computedOnColumnFilterValueChange: _propTypes.default.func,
  onSortClick: _propTypes.default.func,
  onResize: _propTypes.default.func,
  scrollLeft: _propTypes.default.number,
  showWarnings: _propTypes.default.bool,
  unselected: _propTypes.default.any,
  virtualizeColumns: _propTypes.default.bool,
  width: _propTypes.default.number,
  updateLockedWrapperPositions: _propTypes.default.func,
  lastLockedEndIndex: _propTypes.default.number,
  lastLockedStartIndex: _propTypes.default.number,
  lastUnlockedIndex: _propTypes.default.number,
  getScrollLeftMax: _propTypes.default.func,
  rtl: _propTypes.default.bool,
  renderLockedEndCells: _propTypes.default.func,
  renderLockedStartCells: _propTypes.default.func,
  renderInPortal: _propTypes.default.any,
  onFilterValueChange: _propTypes.default.func,
  setScrollLeft: _propTypes.default.func,
  sortedColumnsInfo: _propTypes.default.any,
  renderMenuTool: _propTypes.default.func,
  columnHoverClassName: _propTypes.default.string,
  onColumnMouseEnter: _propTypes.default.func,
  onColumnMouseLeave: _propTypes.default.func,
  columnIndexHovered: _propTypes.default.number,
  enableColumnFilterContextMenu: _propTypes.default.bool,
  computedEnableColumnHover: _propTypes.default.bool,
  renderRowDetailsMoreIcon: _propTypes.default.func,
  hideColumnContextMenu: _propTypes.default.func,
  updateMenuPosition: _propTypes.default.func,
  computedFilterable: _propTypes.default.bool,
  filterRowHeight: _propTypes.default.number
};
var InovuaDataGridHeader = function (_React$Component) {
  (0, _inherits2.default)(InovuaDataGridHeader, _React$Component);
  var _super = _createSuper(InovuaDataGridHeader);
  function InovuaDataGridHeader(_props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaDataGridHeader);
    _this = _super.call(this, _props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "unlockedCells", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cells", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "columnRenderStartIndex", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollLeft", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startIndex", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "endIndex", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps) {
      if (_this.props.columnRenderCount < prevProps.columnRenderCount) {
        _this.getUnlockedCells(prevProps).forEach(function (cell) {
          cell.setStateProps(null);
        });
      }
      if (prevProps.hasLockedStart && !_this.props.hasLockedStart) {
        setTimeout(function () {
          return _this.updateColumns();
        }, 0);
      }
      if (_this.props.virtualizeColumns && prevProps.columnRenderCount !== _this.props.columnRenderCount || _this.props.selectedCount !== prevProps.selectedCount || _this.props.unselectedCount !== prevProps.unselectedCount || _this.props.columns !== prevProps.columns || _this.props.columnIndexHovered !== prevProps.columnIndexHovered || _this.props.lockedStartColumns.length !== prevProps.lockedStartColumns.length) {
        _this.setState({
          children: _this.renderColumns()
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellMount", function (cellProps, c) {
      if (cellProps.dragging) {
        return;
      }
      if (_this.props.virtualizeColumns && !cellProps.computedLocked) {
        _this.unlockedCells.push(c);
      }
      _this.cells.push(c);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellUnmount", function (cellProps, cell) {
      if (cellProps.dragging) {
        return;
      }
      if (_this.props.virtualizeColumns && !cellProps.computedLocked) {
        if (_this.unlockedCells) {
          _this.unlockedCells = _this.unlockedCells.filter(function (c) {
            return c !== cell;
          });
        }
      }
      if (_this.cells) {
        _this.cells = _this.cells.filter(function (c) {
          return c !== cell;
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "findCellById", function (cellId) {
      var cellsArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.cells;
      return cellsArray.filter(function (c) {
        return c.getProps().id === cellId;
      })[0];
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCells", function () {
      var result = [];
      _this.props.columns.forEach(function (c) {
        var cell = _this.findCellById(c.id);
        if (cell) {
          var props = cell.getProps();
          result[props.computedVisibleIndex] = cell;
        }
      });
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGroupsAndCells", function () {
      var cells = _this.getCells();
      var result = [];
      var add = function add(item) {
        if (result.indexOf(item) == -1) {
          result.push(item);
        }
      };
      cells.forEach(function (cell) {
        var target = cell;
        while (target && target.props.parent) {
          add(target);
          target = target.props.parent;
        }
        if (target) {
          add(target);
        }
      });
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setCellIndex", function (cell, index) {
      var cellProps = _this.getPropsForCells(index)[0];
      cell.setStateProps(cellProps);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCellIndex", function (cell) {
      return cell.getProps().index;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sortCells", function (cells) {
      return cells.sort(function (cell1, cell2) {
        return _this.getCellIndex(cell1) - _this.getCellIndex(cell2);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getUnlockedCells", function () {
      var thisProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;
      var lockedStartColumns = thisProps.lockedStartColumns;
      var result = [];
      thisProps.columns.forEach(function (c) {
        var cell = _this.findCellById(c.id, _this.unlockedCells);
        if (cell) {
          var props = cell.getProps();
          var index = props.computedVisibleIndex - lockedStartColumns.length;
          result[index] = cell;
        }
      });
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSortedCells", function () {
      return _this.sortCells(_this.getUnlockedCells());
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGaps", function (startIndex, endIndex) {
      var visibleCellPositions = {};
      _this.getSortedCells().forEach(function (cell) {
        visibleCellPositions[_this.getCellIndex(cell)] = true;
      });
      var gaps = [];
      for (; startIndex <= endIndex; startIndex++) {
        if (!visibleCellPositions[startIndex]) {
          gaps.push(startIndex);
        }
      }
      return gaps;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setColumnRenderStartIndex", function (columnRenderStartIndex) {
      _this.columnRenderStartIndex = columnRenderStartIndex;
      var renderRange = _this.getColumnRenderRange();
      if (!renderRange) {
        return;
      }
      var start = renderRange.start,
        end = renderRange.end;
      var gaps = _this.getGaps(start, end);
      if (!gaps.length) {
        return;
      }
      _this.getUnlockedCells().forEach(function (cell) {
        var cellProps = cell.getProps();
        var cellIndex = cellProps.computedVisibleIndex,
          computedLocked = cellProps.computedLocked;
        if (computedLocked) {
          return;
        }
        var outOfView = cellIndex < start || cellIndex > end;
        var newIndex;
        if (outOfView && gaps.length) {
          newIndex = gaps[gaps.length - 1];
          _this.setCellIndex(cell, newIndex);
          gaps.length -= 1;
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getColumnRenderRange", function () {
      var _this$props = _this.props,
        columnRenderCount = _this$props.columnRenderCount,
        lockedStartColumns = _this$props.lockedStartColumns,
        lockedEndColumns = _this$props.lockedEndColumns,
        virtualizeColumns = _this$props.virtualizeColumns,
        columns = _this$props.columns;
      if (!virtualizeColumns) {
        return null;
      }
      var minStartIndex = lockedStartColumns.length;
      var maxEndIndex = columns.length - lockedEndColumns.length - 1;
      var columnRenderStartIndex = _this.columnRenderStartIndex == null ? _this.props.columnRenderStartIndex || 0 : _this.columnRenderStartIndex;
      columnRenderStartIndex = Math.max(columnRenderStartIndex, minStartIndex);
      if (columnRenderCount != null) {
        var columnRenderEndIndex = columnRenderStartIndex + columnRenderCount;
        columnRenderEndIndex = Math.min(columnRenderEndIndex, maxEndIndex);
        if (columnRenderEndIndex - columnRenderCount != columnRenderStartIndex) {
          columnRenderStartIndex = Math.max(columnRenderEndIndex - columnRenderCount, minStartIndex);
        }
        return {
          start: columnRenderStartIndex,
          end: columnRenderEndIndex
        };
      }
      return null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "prepareStyle", function (props) {
      var headerHeight = props.headerHeight,
        width = props.width,
        minWidth = props.minWidth,
        index = props.index;
      var style = _objectSpread({}, props.style);
      if (width || minWidth) {
        if (width) {
          style.width = Math.max(width, minWidth || 0);
        }
        if (minWidth) {
          style.minWidth = minWidth;
        }
      }
      if (headerHeight) {
        style.height = headerHeight;
        if (props.computedFilterable) {
          style.height += props.filterRowHeight;
        }
      }
      style.zIndex = style.zIndex || 100 - (index || 0);
      var scrollLeft = _this.props.scrollLeft != null ? _this.props.scrollLeft : _this.scrollLeft;
      var transformPos = _this.props.rtl ? _this.props.getScrollLeftMax() - scrollLeft : -scrollLeft;
      style.transform = "translate3d(".concat(transformPos || 0, "px, 0px, 0px)");
      return style;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "notifyScrollLeftMax", function (scrollLeftMax) {
      var resizerClassName = 'InovuaReactDataGrid__column-resizer';
      var lastUnlockedResizer = _this.getDOMNode().querySelector(".".concat(resizerClassName, "--last-unlocked"));
      if (lastUnlockedResizer) {
        var columnResizeHandleWidth = _this.props.columnResizeHandleWidth;
        var remaining = scrollLeftMax - (_this.scrollLeft + columnResizeHandleWidth / 2);
        var visible = remaining <= 0;
        lastUnlockedResizer.style.pointerEvents = visible ? 'auto' : 'none';
        var classList = lastUnlockedResizer.classList;
        if (classList && classList.add && classList.remove) {
          if (visible) {
            classList.add("".concat(resizerClassName, "--active"));
          } else {
            classList.remove("".concat(resizerClassName, "--active"));
          }
        } else {
          lastUnlockedResizer.style.zIndex = visible ? 5000 : 2000;
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollLeft", function (scrollLeft, scrollLeftMax) {
      _this.scrollLeft = scrollLeft;
      var node = _this.props.hasLocked ? _this.getDOMNode().querySelector('.InovuaReactDataGrid__unlocked-wrapper') : _this.getDOMNode();
      if (node) {
        var transformPos = _this.props.rtl ? _this.props.getScrollLeftMax() - scrollLeft : -scrollLeft;
        node.style.transform = "translate3d(".concat(transformPos, "px, 0px, 0px)");
      }
      if (_this.props.updateLockedWrapperPositions) {
        _this.props.updateLockedWrapperPositions.call((0, _assertThisInitialized2.default)(_this), _this.props, scrollLeft, {
          isHeader: true
        });
      }
      if (_this.props.virtualizeColumns) {
        _this.maybeUpdateColumns();
        if (scrollLeft === 0 || scrollLeft === scrollLeftMax) {
          requestAnimationFrame(function () {
            return _this.maybeUpdateColumns();
          });
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "maybeUpdateColumns", function () {
      var range = _this.getColumnRenderRange();
      if (range && range.start !== _this.startIndex && range.end !== _this.endIndex) {
        _this.updateColumns();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateColumns", function () {
      var newColumns = _this.renderColumns();
      _this.setState({
        children: newColumns
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function (event) {
      var body = (0, _selectParent.default)('.InovuaReactDataGrid__body', event.target);
      if (!body) {
        return;
      }
      var OFFSET = 15;
      var headerRegion = _region.default.from(body);
      var targetRegion = _region.default.from(event.target);
      var scrollLeft = _this.scrollLeft || _this.props.scrollLeft || 0;
      if (!headerRegion.containsRegion(targetRegion)) {
        if (targetRegion.left < headerRegion.left) {
          var diff = headerRegion.left - targetRegion.left;
          var newScrollLeft = scrollLeft - (diff + OFFSET);
          _this.props.setScrollLeft(newScrollLeft);
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getPropsForCells", function (startIndex) {
      var endIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startIndex + 1;
      var props = _this.props;
      var renderInPortal = props.renderInPortal,
        columnHeaderUserSelect = props.columnHeaderUserSelect,
        columnResizeHandleWidth = props.columnResizeHandleWidth,
        columnUserSelect = props.columnUserSelect,
        data = props.data,
        showColumnContextMenu = props.showColumnContextMenu,
        showColumnFilterContextMenu = props.showColumnFilterContextMenu,
        hideColumnFilterContextMenu = props.hideColumnFilterContextMenu,
        deselectAll = props.deselectAll,
        notifyColumnFilterVisibleStateChange = props.notifyColumnFilterVisibleStateChange,
        firstLockedEndIndex = props.firstLockedEndIndex,
        firstUnlockedIndex = props.firstUnlockedIndex,
        filterable = props.filterable,
        computedShowHeaderBorderRight = props.computedShowHeaderBorderRight,
        hasLockedEnd = props.hasLockedEnd,
        hasLockedStart = props.hasLockedStart,
        lockedEndColumns = props.lockedEndColumns,
        nativeScroll = props.nativeScroll,
        resizeProxyStyle = props.resizeProxyStyle,
        rtl = props.rtl,
        i18n = props.i18n,
        scrollbarWidth = props.scrollbarWidth,
        selectAll = props.selectAll,
        selectedCount = props.selectedCount,
        filterTypes = props.filterTypes,
        totalCount = props.totalCount,
        renderSortTool = props.renderSortTool,
        unselectedCount = props.unselectedCount,
        virtualizeColumns = props.virtualizeColumns,
        showColumnMenuTool = props.showColumnMenuTool,
        showColumnMenuToolOnHover = props.showColumnMenuToolOnHover,
        lastUnlockedIndex = props.lastUnlockedIndex,
        lastLockedStartIndex = props.lastLockedStartIndex,
        lastLockedEndIndex = props.lastLockedEndIndex,
        theme = props.theme,
        renderMenuTool = props.renderMenuTool,
        sortedColumnsInfo = props.sortedColumnsInfo,
        onColumnMouseEnter = props.onColumnMouseEnter,
        onColumnMouseLeave = props.onColumnMouseLeave,
        columnIndexHovered = props.columnIndexHovered,
        columnHoverClassName = props.columnHoverClassName,
        enableColumnFilterContextMenu = props.enableColumnFilterContextMenu,
        computedEnableColumnHover = props.computedEnableColumnHover,
        renderRowDetailsMoreIcon = props.renderRowDetailsMoreIcon,
        hideColumnContextMenu = props.hideColumnContextMenu,
        updateMenuPosition = props.updateMenuPosition,
        filterRowHeight = props.filterRowHeight;
      var columns = props.columns;
      if (startIndex !== undefined) {
        columns = columns.slice(startIndex, endIndex);
      }
      var firstLockedIndex = hasLockedEnd ? props.columns.length - lockedEndColumns.length : -1;
      return columns.map(function (column, i) {
        var sortableColumn = column.computedSortable,
          resizableColumn = column.computedResizable;
        var isSortable = sortableColumn;
        var isResizable = resizableColumn;
        var cellStyle = column.style;
        if (props.headerHeight) {
          if (column.style) {
            cellStyle = Object.assign({}, cellStyle);
          }
          if (!cellStyle) {
            cellStyle = {};
          }
          cellStyle.height = props.headerHeight;
          if (props.computedFilterable) {
            cellStyle.height += props.filterRowHeight;
          }
        }
        var defaults = {
          filterable: filterable,
          renderSortTool: renderSortTool,
          renderMenuTool: renderMenuTool,
          showColumnMenuTool: showColumnMenuTool,
          showColumnMenuToolOnHover: showColumnMenuToolOnHover
        };
        if (columnUserSelect !== undefined) {
          defaults.userSelect = columnUserSelect;
        }
        if (columnHeaderUserSelect !== undefined) {
          defaults.headerUserSelect = columnHeaderUserSelect;
        }
        var displayColumnFilterContextMenu = enableColumnFilterContextMenu;
        if (column.enableColumnFilterContextMenu != null) {
          displayColumnFilterContextMenu = column.enableColumnFilterContextMenu;
        }
        var cellProps = Object.assign(defaults, column, {
          headerCell: true,
          headerHeight: props.headerHeight,
          i18n: i18n,
          selectedCount: selectedCount,
          unselectedCount: unselectedCount,
          totalCount: totalCount,
          showColumnContextMenu: showColumnContextMenu,
          showColumnFilterContextMenu: showColumnFilterContextMenu,
          hideColumnFilterContextMenu: hideColumnFilterContextMenu,
          selectAll: selectAll,
          deselectAll: deselectAll,
          style: cellStyle,
          resizeProxyStyle: resizeProxyStyle,
          renderInPortal: renderInPortal,
          lastUnlockedIndex: lastUnlockedIndex,
          lastLockedStartIndex: lastLockedStartIndex,
          lastLockedEndIndex: lastLockedEndIndex,
          notifyColumnFilterVisibleStateChange: notifyColumnFilterVisibleStateChange,
          filterTypes: filterTypes,
          onFilterValueChange: _this.onFilterValueChange,
          lastUnlocked: column.computedVisibleIndex === firstLockedIndex - 1,
          columnResizeHandleWidth: columnResizeHandleWidth,
          virtualizeColumns: virtualizeColumns,
          rtl: rtl,
          onResizeMouseDown: props.onResizeMouseDown,
          onResizeTouchStart: props.onResizeTouchStart,
          onMouseDown: _this.onCellMouseDown,
          onTouchStart: _this.onCellTouchStart,
          computedSortable: isSortable,
          computedResizable: isResizable,
          hasLockedStart: hasLockedStart,
          nativeScroll: nativeScroll,
          scrollbarWidth: scrollbarWidth,
          data: data,
          theme: theme,
          sortedColumnsInfo: sortedColumnsInfo,
          onColumnMouseEnter: onColumnMouseEnter,
          onColumnMouseLeave: onColumnMouseLeave,
          columnIndex: i,
          columnIndexHovered: columnIndexHovered,
          columnHoverClassName: columnHoverClassName,
          enableColumnFilterContextMenu: displayColumnFilterContextMenu,
          computedEnableColumnHover: computedEnableColumnHover,
          renderRowDetailsMoreIcon: renderRowDetailsMoreIcon,
          hideColumnContextMenu: hideColumnContextMenu,
          updateMenuPosition: updateMenuPosition,
          filterRowHeight: filterRowHeight
        });
        cellProps.onFocus = _this.onHeaderCellFocus.bind((0, _assertThisInitialized2.default)(_this), cellProps, column);
        if (cellProps.group) {
          cellProps.parentGroups = getParentGroups(cellProps.group, _this.props.computedGroupsMap, {
            includeSelf: true
          });
        }
        if (props.onCellClick) {
          cellProps.onClick = props.onCellClick;
        }
        if (cellProps.visibilityTransitionDuration || cellProps.hideTransitionDuration || cellProps.showTransitionDuration) {
          cellProps.onTransitionEnd = _this.onTransitionEnd.bind((0, _assertThisInitialized2.default)(_this), cellProps, column);
        }
        cellProps.onSortClick = (props.onSortClick || emptyFn).bind(null, cellProps);
        cellProps.value = (0, _getCellHeader.default)(cellProps, column, props);
        cellProps.onUnmount = _this.onCellUnmount;
        cellProps.onMount = _this.onCellMount;
        var showBorderLeft = cellProps.showBorderLeft,
          showBorderRight = cellProps.showBorderRight;
        cellProps.showBorderRight = cellProps.computedLocked === 'start' && cellProps.computedVisibleIndex == firstUnlockedIndex - 1 || computedShowHeaderBorderRight && column.computedVisibleIndex === column.computedVisibleCount - 1;
        cellProps.lastInSection = cellProps.computedLocked === 'start' ? cellProps.computedVisibleIndex === lastLockedStartIndex : cellProps.computedLocked === 'end' ? cellProps.computedVisibleIndex === lastLockedEndIndex : cellProps.computedVisibleIndex === lastUnlockedIndex;
        cellProps.firstInSection = cellProps.computedLocked === 'start' ? cellProps.computedVisibleIndex == 0 : cellProps.computedLocked === 'end' ? cellProps.computedVisibleIndex === firstLockedEndIndex : cellProps.computedVisibleIndex === firstUnlockedIndex;
        cellProps.showBorderLeft = cellProps.computedLocked === 'end' ? cellProps.computedVisibleIndex >= firstLockedEndIndex : cellProps.computedLocked === 'start' ? cellProps.computedVisibleIndex > 0 : cellProps.computedVisibleIndex > firstUnlockedIndex;
        var prevColumn = columns[i - 1];
        var nextColumn = columns[i + 1];
        if (prevColumn && prevColumn.nextBorderLeft !== undefined) {
          cellProps.showBorderLeft = prevColumn.nextBorderLeft;
        }
        if (nextColumn && nextColumn.prevBorderRight !== undefined) {
          cellProps.showBorderRight = nextColumn.prevBorderRight;
        }
        if (showBorderLeft !== undefined) {
          cellProps.showBorderLeft = showBorderLeft;
        }
        if (showBorderRight !== undefined) {
          cellProps.showBorderRight = showBorderRight;
        }
        return cellProps;
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onHeaderCellFocus", function (headerCellProps, column, e) {
      if (_this.props.onColumnHeaderFocus) {
        _this.props.onColumnHeaderFocus(headerCellProps, column, e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onTransitionEnd", function (cellProps, column, e) {
      e.stopPropagation();
      if (column.onTransitionEnd) {
        column.onTransitionEnd(e);
      }
      if (_this.props.onTransitionEnd) {
        _this.props.onTransitionEnd(e, cellProps);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellMouseDown", function (headerCellProps, event) {
      if (_this.props.onCellMouseDown) {
        _this.props.onCellMouseDown(headerCellProps, event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellTouchStart", function (headerCellProps, event) {
      if (_this.props.onCellTouchStart) {
        _this.props.onCellTouchStart(headerCellProps, event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderColumns", function () {
      var _result2;
      var props = _this.props;
      var groups = props.computedGroupsMap,
        hasLockedStart = props.hasLockedStart,
        hasLockedEnd = props.hasLockedEnd,
        lockedStartColumns = props.lockedStartColumns,
        lockedEndColumns = props.lockedEndColumns,
        columns = props.columns;
      var renderRange = _this.getColumnRenderRange();
      _this.startIndex = renderRange === null || renderRange === void 0 ? void 0 : renderRange.start;
      _this.endIndex = renderRange === null || renderRange === void 0 ? void 0 : renderRange.end;
      var cellProps = renderRange ? _this.getPropsForCells(renderRange.start, renderRange.end + 1) : _this.getPropsForCells();
      var lockedStartCells;
      var lockedEndCells;
      if (renderRange) {
        if (hasLockedStart) {
          lockedStartCells = _this.getPropsForCells(0, lockedStartColumns.length);
        }
        if (hasLockedEnd) {
          lockedEndCells = _this.getPropsForCells(columns.length - lockedEndColumns.length, columns.length);
        }
      }
      if (groups) {
        if (hasLockedStart || hasLockedEnd) {
          if (hasLockedStart) {
            lockedStartCells = lockedStartCells || _this.getPropsForCells(0, lockedStartColumns.length);
            lockedStartCells = _this.renderGroupedCells(lockedStartCells);
          }
          if (hasLockedEnd) {
            lockedEndCells = lockedEndCells || _this.getPropsForCells(columns.length - lockedEndColumns.length, columns.length);
            lockedEndCells = _this.renderGroupedCells(lockedEndCells);
          }
          var unlockedCells = renderRange ? cellProps : _this.getPropsForCells(lockedStartColumns.length, columns.length - lockedEndColumns.length);
          unlockedCells = _this.renderGroupedCells(unlockedCells);
          return (0, _renderCellsMaybeLocked.default)([], _this.props, props.scrollLeft, {
            lockedStartContent: lockedStartCells,
            lockedEndContent: lockedEndCells,
            unlockedContent: unlockedCells,
            isHeader: true
          });
        }
        return _this.renderGroupedCells(cellProps);
      }
      var result = [];
      if (hasLockedStart && lockedStartCells) {
        var _result;
        (_result = result).push.apply(_result, (0, _toConsumableArray2.default)(lockedStartCells));
      }
      (_result2 = result).push.apply(_result2, (0, _toConsumableArray2.default)(cellProps));
      if (hasLockedEnd && lockedEndCells) {
        var _result3;
        (_result3 = result).push.apply(_result3, (0, _toConsumableArray2.default)(lockedEndCells));
      }
      result = result.map(function (cProps, i) {
        var index = (renderRange === null || renderRange === void 0 ? void 0 : renderRange.start) + i;
        return _react.default.createElement(_Cell.default, _objectSpread(_objectSpread({}, cProps), {}, {
          timestamp: Date.now(),
          key: "".concat(index, "__").concat(cProps.id),
          left: _this.props.columnWidthPrefixSums[index]
        }));
      });
      return (0, _renderCellsMaybeLocked.default)(result, _this.props, props.scrollLeft, {
        isHeader: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCellDOMNodeAt", function (index) {
      var _this$props2 = _this.props,
        columns = _this$props2.columns,
        showWarnings = _this$props2.showWarnings,
        virtualizeColumns = _this$props2.virtualizeColumns;
      var column = columns[index];
      if (!column) {
        return null;
      }
      var arr = column.computedLocked || !virtualizeColumns ? _this.getCells() : _this.getUnlockedCells();
      var cell = arr.filter(function (c) {
        return c.getProps().computedVisibleIndex === index;
      })[0];
      if (!cell && showWarnings) {
        console.error("Cannot find dom cell at ".concat(index, "."));
      }
      if (cell) {
        return cell.getDOMNode ? cell.getDOMNode() : cell.domRef ? cell.domRef.current : null;
      }
      return;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderHeaderGroup", function (groupName, groupItems, _) {
      var _this$props3 = _this.props,
        groups = _this$props3.computedGroupsMap,
        columnsMap = _this$props3.columnsMap,
        hasLockedEnd = _this$props3.hasLockedEnd,
        lockedStartColumns = _this$props3.lockedStartColumns,
        lockedEndColumns = _this$props3.lockedEndColumns,
        firstLockedEndIndex = _this$props3.firstLockedEndIndex,
        lastLockedStartIndex = _this$props3.lastLockedStartIndex,
        lastLockedEndIndex = _this$props3.lastLockedEndIndex,
        firstUnlockedIndex = _this$props3.firstUnlockedIndex,
        lastUnlockedIndex = _this$props3.lastUnlockedIndex,
        resizeProxyStyle = _this$props3.resizeProxyStyle,
        rtl = _this$props3.rtl;
      var group = groups[groupName];
      var parentGroups = getParentGroups(groupName, groups);
      var depth = group ? group.computedDepth : 0;
      var columns = groupItems.filter(function (x) {
        return !!x;
      }).reduce(function (acc, item) {
        if (item.type == _HeaderGroup.default) {
          acc.push.apply(acc, (0, _toConsumableArray2.default)(item.props.columns));
        } else {
          acc.push(item.props.id);
        }
        return acc;
      }, []);
      var style = {
        width: columns.reduce(function (width, colId) {
          return width + columnsMap[colId].computedWidth;
        }, 0)
      };
      var resizable = group && group.resizable !== undefined ? group.resizable : _this.props.resizable;
      var allColumnsUnresizable = columns.reduce(function (acc, colId) {
        return acc && columnsMap[colId].computedResizable === false;
      }, true);
      if (allColumnsUnresizable) {
        resizable = false;
      }
      var firstColumn = columnsMap[columns[0]];
      var lastColumn = columnsMap[columns[columns.length - 1]];
      var firstIndex = firstColumn.computedVisibleIndex;
      var lastIndex = lastColumn.computedVisibleIndex;
      var showBorderLeft = firstIndex >= lockedStartColumns.length ? firstIndex > lockedStartColumns.length || firstColumn.computedLocked === 'end' : firstIndex > 0;
      var containsLastColumn = lastColumn.computedVisibleIndex === _this.props.columns.length - 1;
      var showBorderRight = lastColumn.computedVisibleIndex === lockedStartColumns.length - 1;
      var adjustResizer = hasLockedEnd && lastColumn.computedVisibleIndex === _this.props.columns.length - lockedEndColumns.length - 1;
      var firstInSection = firstColumn.computedLocked === 'start' ? firstIndex === 0 : firstColumn.computedLocked === 'end' ? firstIndex == firstLockedEndIndex : firstIndex === firstUnlockedIndex;
      var lastInSection = lastColumn.computedLocked === 'start' ? lastIndex === lastLockedStartIndex : lastColumn.computedLocked === 'end' ? lastIndex == lastLockedEndIndex : lastIndex === lastUnlockedIndex;
      if (firstColumn.inTransition) {
        var duration = firstColumn.inShowTransition ? firstColumn.showTransitionDuration : firstColumn.hideTransitionDuration;
        duration = duration || firstColumn.visibilityTransitionDuration;
        style.transitionDuration = typeof duration == 'number' ? "".concat(duration, "ms") : duration;
      }
      var key = "".concat(groupName, "-").concat(depth, "-").concat(columns.join('-'));
      return _react.default.createElement(_HeaderGroup.default, {
        key: key,
        depth: depth,
        group: group,
        style: style,
        rtl: rtl,
        firstIndex: firstIndex,
        lastUnlockedIndex: _this.props.lastUnlockedIndex,
        lastLockedStartIndex: _this.props.lastLockedStartIndex,
        lastLockedEndIndex: _this.props.lastLockedEndIndex,
        filterable: _this.props.filterable,
        inTransition: firstColumn.inTransition,
        inShowTransition: firstColumn.inShowTransition,
        inHideTransition: firstColumn.inHideTransition,
        showTransitionDuration: firstColumn.showTransitionDuration,
        hideTransitionDuration: firstColumn.hideTransitionDuration,
        visibilityTransitionDuration: firstColumn.visibilityTransitionDuration,
        onMouseDown: _this.props.onGroupMouseDown,
        columns: columns,
        resizeProxyStyle: resizeProxyStyle,
        locked: lastColumn.computedLocked === 'start' ? 'start' : firstColumn.computedLocked === 'end' ? 'end' : false,
        parentGroups: parentGroups,
        containsLastColumn: containsLastColumn,
        firstInSection: firstInSection,
        lastInSection: lastInSection,
        adjustResizer: adjustResizer,
        showBorderLeft: showBorderLeft,
        showBorderRight: showBorderRight,
        children: groupItems,
        resizable: resizable,
        columnResizeHandleWidth: _this.props.columnResizeHandleWidth,
        onResizeMouseDown: _this.onResizeMouseDown,
        onResizeTouchStart: _this.onResizeTouchStart
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeMouseDown", function (groupProps, headerGroupInstance, event) {
      if (_this.props.onResizeMouseDown) {
        var colId = groupProps.columns[groupProps.columns.length - 1];
        var visibleIndex = _this.props.columnsMap[colId].computedVisibleIndex;
        _this.props.onResizeMouseDown({
          visibleIndex: visibleIndex,
          computedVisibleIndex: visibleIndex
        }, {
          colHeaderNode: headerGroupInstance.domRef ? headerGroupInstance.domRef.current : null,
          event: event,
          groupColumns: groupProps.columns
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeTouchStart", function (groupProps, headerGroupInstance, event) {
      if (_this.props.onResizeTouchStart) {
        var colId = groupProps.columns[groupProps.columns.length - 1];
        var visibleIndex = _this.props.columnsMap[colId].computedVisibleIndex;
        _this.props.onResizeTouchStart({
          visibleIndex: visibleIndex
        }, {
          colHeaderNode: headerGroupInstance.domRef ? headerGroupInstance.domRef.current : null,
          event: event,
          groupColumns: groupProps.columns
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getItemsForDepth", function (items, depth) {
      return items.map(function (item) {
        return item.props.depth === depth ? item : null;
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderItems", function (items) {
      var computedGroupsDepth = _this.props.computedGroupsDepth;
      var currentDepth = computedGroupsDepth + 1;
      while (currentDepth > 0) {
        items = _this.groupItemsForDepth(items, currentDepth);
        currentDepth--;
      }
      return items;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "groupItemsForDepth", function (items, depth) {
      var depthItems = _this.getItemsForDepth(items, depth);
      var index = 0;
      var item = depthItems[index];
      var currentGroupName = _this.getItemGroupName(item);
      var itemGroupName;
      var groupItems;
      var headerGroup;
      var groupStartIndex = 0;
      var len = depthItems.length + 1;
      while (index <= len) {
        itemGroupName = _this.getItemGroupName(item);
        if (currentGroupName == null && itemGroupName != null) {
          groupStartIndex = index;
          currentGroupName = itemGroupName;
        } else if (itemGroupName != currentGroupName) {
          groupItems = items.slice(groupStartIndex, index);
          headerGroup = _this.renderHeaderGroup(currentGroupName, groupItems);
          items.splice(groupStartIndex, groupItems.length, headerGroup);
          depthItems.splice(groupStartIndex, groupItems.length, headerGroup);
          index = groupStartIndex;
          currentGroupName = null;
        }
        index++;
        item = depthItems[index];
      }
      return items;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getItemGroupName", function (item) {
      if (!item) {
        return null;
      }
      var groups = _this.props.computedGroupsMap;
      var groupName;
      if (item.type == _HeaderGroup.default) {
        groupName = item.props.group ? item.props.group.group : null;
      } else {
        groupName = item.props.group;
      }
      var group = groups[groupName];
      return group ? group.name || '' : '';
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "fixDepth", function (item, depthDiff) {
      while (depthDiff >= 0) {
        item = _this.renderHeaderGroup(_this.getItemGroupName(item), [item], {
          depth: item.props.depth - 1,
          forceHeader: true
        });
        depthDiff--;
      }
      return item;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderGroupedCells", function (cellProps) {
      var _this$props4 = _this.props,
        groups = _this$props4.computedGroupsMap,
        showWarnings = _this$props4.showWarnings;
      var items = cellProps.map(function (props) {
        var group = groups[props.group];
        if (showWarnings && props.group && !group) {
          _this.warn("Column \"".concat(props.id, "\" references group \"").concat(props.group, "\", but the group is never defined in the groups prop."));
        }
        var depth = group ? group.computedDepth + 1 : 0;
        return _react.default.createElement(_Cell.default, _objectSpread(_objectSpread({}, props), {}, {
          key: props.id,
          depth: depth,
          timestamp: Date.now()
        }));
      });
      return _this.renderItems(items);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFilterValueChange", function (filterValue, cellProps) {
      if (_this.props.onFilterValueChange) {
        _this.props.onFilterValueChange({
          filterValue: filterValue,
          columnId: cellProps.id,
          columnIndex: cellProps.computedVisibleIndex,
          cellProps: cellProps
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "warn", function (msg) {
      console.error(msg);
    });
    _this.cells = [];
    _this.unlockedCells = [];
    _this.startIndex = 0;
    _this.endIndex = 0;
    _this.domRef = _react.default.createRef();
    _this.state = {
      children: _this.renderColumns()
    };
    return _this;
  }
  (0, _createClass2.default)(InovuaDataGridHeader, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cells = null;
      this.unlockedCells = null;
    }
  }, {
    key: "getDOMNode",
    value: function getDOMNode() {
      var _this$domRef;
      return (_this$domRef = this.domRef) === null || _this$domRef === void 0 ? void 0 : _this$domRef.current;
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var rtl = props.rtl,
        virtualizeColumns = props.virtualizeColumns;
      var className = (0, _join.default)('InovuaReactDataGrid__header', "InovuaReactDataGrid__header--direction-".concat(rtl ? 'rtl' : 'ltr'), props.className);
      var style = this.prepareStyle(props);
      var children = virtualizeColumns ? this.state.children : this.renderColumns();
      var cleanedProps = (0, _reactCleanProps.default)(props, InovuaDataGridHeader.propTypes);
      delete cleanedProps.columnWidthPrefixSums;
      return _react.default.createElement("div", _objectSpread(_objectSpread({}, cleanedProps), {}, {
        className: className,
        data: null,
        style: style,
        ref: this.domRef,
        onFocus: this.onFocus
      }), children);
    }
  }]);
  return InovuaDataGridHeader;
}(_react.default.Component);
exports.default = InovuaDataGridHeader;
(0, _defineProperty2.default)(InovuaDataGridHeader, "defaultProps", defaultProps);
(0, _defineProperty2.default)(InovuaDataGridHeader, "propTypes", propTypes);