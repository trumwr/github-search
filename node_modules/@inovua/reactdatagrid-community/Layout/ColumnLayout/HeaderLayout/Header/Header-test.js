/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _src = _interopRequireDefault(require("../../../../../src"));
var _testUtils = require("../../../../testUtils");
require("../../../../../style/index.scss");
var HEADER_GROUP_SELECTOR = '.InovuaReactDataGrid__header-group';
var THE_GRID = _react.default.createElement(_src.default, {
  dataSource: [],
  idProperty: "id",
  columnDefaultWidth: 100,
  groups: [{
    name: 'height',
    group: 'personal info'
  }, {
    name: 'weight',
    group: 'personal info'
  }, {
    name: 'location'
  }, {
    name: 'street',
    group: 'location'
  }, {
    name: 'personal info'
  }],
  columns: [{
    name: 'height inch',
    group: 'height'
  }, {
    name: 'height cm',
    group: 'height'
  }, {
    name: 'weight cm',
    group: 'weight'
  }, {
    name: 'weight inch',
    group: 'weight'
  }, {
    name: 'street no',
    group: 'street'
  }, {
    name: 'id',
    width: 200
  }, {
    name: 'street name',
    group: 'street'
  }, {
    name: 'city',
    sortable: false,
    headerAlign: 'end',
    group: 'location',
    header: _react.default.createElement("span", {
      "data-id": "city"
    }, "City")
  }]
});
var toJSON = function toJSON() {
  return JSON.stringify(this);
};
var getRect = function getRect(node) {
  var rect = node.getBoundingClientRect();
  return {
    top: rect.top,
    left: rect.left,
    bottom: rect.bottom,
    right: rect.right,
    width: rect.width,
    height: rect.height,
    toString: toJSON
  };
};
describe('DataGrid.headerHeight', function () {
  it('headerHeight: 80, virtualizeColumns: true & resizable: true should render column headers in correct positions', function () {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      virtualizeColumns: true,
      columnDefaultWidth: 200,
      headerHeight: 80,
      columns: [{
        name: 'firstName'
      }, {
        name: 'lastName'
      }, {
        name: 'email'
      }, {
        name: 'age'
      }, {
        name: 'username'
      }, {
        name: 'password'
      }],
      idProperty: "username",
      dataSource: []
    }));
    return (0, _testUtils.wait)().then(function () {
      var node = (0, _reactDom.findDOMNode)(gridInstance);
      var resizeWrapperNodes = (0, _toConsumableArray2.default)(node.querySelectorAll('.InovuaReactDataGrid__column-header__resize-wrapper'));
      expect(resizeWrapperNodes.length).to.equal(6);
      var children = resizeWrapperNodes.map(function (n) {
        return n.firstChild;
      });
      var wrapperRects = resizeWrapperNodes.map(getRect).map(function (rect, index) {
        if (index) {
          rect.left += 1;
          rect.width -= 1;
        }
        return rect;
      }).toString();
      var childrenRects = children.map(getRect).toString();
      expect(wrapperRects).to.eql(childrenRects);
      expect(getRect(resizeWrapperNodes[0]).height).to.eql(80);
      gridInstance.unmount();
    });
  });
});
describe('DataGrid resizable header', function () {
  it('should render all groups as resizable', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      dataSource: [],
      idProperty: "id",
      columnDefaultWidth: 100,
      groups: [{
        name: 'height',
        group: 'personal info'
      }, {
        name: 'weight',
        group: 'personal info'
      }, {
        name: 'location',
        resizable: true
      }, {
        name: 'street',
        group: 'location'
      }, {
        name: 'personal info'
      }],
      columns: [{
        name: 'height inch',
        group: 'height'
      }, {
        name: 'height cm',
        group: 'height'
      }, {
        name: 'weight cm',
        group: 'weight'
      }, {
        name: 'weight inch',
        group: 'weight'
      }, {
        name: 'street no',
        group: 'street'
      }, {
        name: 'id',
        width: 200
      }, {
        name: 'street name',
        group: 'street'
      }, {
        name: 'city',
        sortable: false,
        headerAlign: 'end',
        group: 'location',
        header: _react.default.createElement("span", {
          "data-id": "city"
        }, "City")
      }]
    }));
    setTimeout(function () {
      var groupResizers = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__header-group-resizer'));
      expect(groupResizers.length).to.equal(7);
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should respect groups.resizable: false attr', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      dataSource: [],
      idProperty: "id",
      columnDefaultWidth: 100,
      groups: [{
        name: 'height',
        group: 'personal info'
      }, {
        name: 'weight',
        group: 'personal info'
      }, {
        name: 'location',
        resizable: false
      }, {
        name: 'street',
        group: 'location'
      }, {
        name: 'personal info'
      }],
      columns: [{
        name: 'height inch',
        group: 'height'
      }, {
        name: 'height cm',
        group: 'height'
      }, {
        name: 'weight cm',
        group: 'weight'
      }, {
        name: 'weight inch',
        group: 'weight'
      }, {
        name: 'street no',
        group: 'street'
      }, {
        name: 'id',
        width: 200
      }, {
        name: 'street name',
        group: 'street'
      }, {
        name: 'city',
        sortable: false,
        headerAlign: 'end',
        group: 'location',
        header: _react.default.createElement("span", {
          "data-id": "city"
        }, "City")
      }]
    }));
    setTimeout(function () {
      var groupResizers = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__header-group-resizer'));
      expect(groupResizers.length).to.equal(5);
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should respect DataGrid.props.resizable = false', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      dataSource: [],
      resizable: false,
      idProperty: "id",
      columnDefaultWidth: 100,
      groups: [{
        name: 'height',
        group: 'personal info'
      }, {
        name: 'weight',
        group: 'personal info'
      }, {
        name: 'location',
        resizable: true
      }, {
        name: 'street',
        group: 'location'
      }, {
        name: 'personal info'
      }],
      columns: [{
        name: 'height inch',
        group: 'height'
      }, {
        name: 'height cm',
        group: 'height'
      }, {
        name: 'weight cm',
        group: 'weight'
      }, {
        name: 'weight inch',
        group: 'weight'
      }, {
        name: 'street no',
        group: 'street'
      }, {
        name: 'id',
        width: 200
      }, {
        name: 'street name',
        group: 'street'
      }, {
        name: 'city',
        sortable: false,
        headerAlign: 'end',
        group: 'location',
        header: _react.default.createElement("span", {
          "data-id": "city"
        }, "City")
      }]
    }));
    setTimeout(function () {
      var groupResizers = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__header-group-resizer'));
      expect(groupResizers.length).to.equal(2);
      gridInstance.unmount();
      done();
    }, 20);
  });
});
describe('DataGrid grouped column headers', function () {
  it('should be displayed in correct positions', function (done) {
    var gridInstance = (0, _testUtils.render)(THE_GRID);
    setTimeout(function () {
      var headerNode = (0, _reactDom.findDOMNode)(gridInstance).querySelector(".InovuaReactDataGrid__header");
      var topLevelGroups = (0, _toConsumableArray2.default)(headerNode.children);
      expect(topLevelGroups.length).to.equal(4);
      var gridRect = headerNode.getBoundingClientRect();
      var _topLevelGroups = (0, _slicedToArray2.default)(topLevelGroups, 4),
        personalInfoGroup = _topLevelGroups[0],
        locationGroup = _topLevelGroups[1],
        idGroup = _topLevelGroups[2],
        secondLocationGroup = _topLevelGroups[3];
      var _topLevelGroups$map = topLevelGroups.map(function (g) {
          return g.getBoundingClientRect();
        }),
        _topLevelGroups$map2 = (0, _slicedToArray2.default)(_topLevelGroups$map, 4),
        personalInfoRect = _topLevelGroups$map2[0],
        locationRect = _topLevelGroups$map2[1],
        idRect = _topLevelGroups$map2[2],
        secondLocationRect = _topLevelGroups$map2[3];
      expect(personalInfoGroup.querySelectorAll(HEADER_GROUP_SELECTOR).length).to.equal(2);
      expect(personalInfoGroup.querySelectorAll('.InovuaReactDataGrid__column-header').length).to.equal(4);
      expect(personalInfoRect.left - gridRect.left).to.equal(0);
      expect(personalInfoRect.width).to.equal(400);
      expect(locationGroup.querySelectorAll(HEADER_GROUP_SELECTOR).length).to.equal(1);
      expect(personalInfoGroup.querySelectorAll('.InovuaReactDataGrid__column-header').length).to.equal(4);
      expect(locationRect.left - gridRect.left).to.equal(400);
      expect(idRect.left - gridRect.left).to.equal(500);
      expect(secondLocationRect.left - gridRect.left).to.equal(700);
      gridInstance.unmount();
      done();
    }, 30);
  });
  it('should render with correct nesting & innerText', function (done) {
    var gridInstance = (0, _testUtils.render)(THE_GRID);
    setTimeout(function () {
      var headerNode = (0, _reactDom.findDOMNode)(gridInstance).querySelector(".InovuaReactDataGrid__header");
      var topLevelGroups = (0, _toConsumableArray2.default)(headerNode.children);
      expect(topLevelGroups.length).to.equal(4);
      var _topLevelGroups2 = (0, _slicedToArray2.default)(topLevelGroups, 4),
        personalInfoGroup = _topLevelGroups2[0],
        locationGroup = _topLevelGroups2[1],
        idGroup = _topLevelGroups2[2],
        secondLocationGroup = _topLevelGroups2[3];
      var _ref = (0, _toConsumableArray2.default)(personalInfoGroup.querySelector("".concat(HEADER_GROUP_SELECTOR, "-cells")).children),
        heightGroup = _ref[0],
        weightGroup = _ref[1];
      expect(heightGroup.innerText).to.equal("Height\nHeight inch\nHeight cm\n");
      expect(weightGroup.innerText).to.equal("Weight\nWeight cm\nWeight inch\n");
      expect(locationGroup.innerText).to.equal("Location\nStreet\nStreet no\n");
      expect(idGroup.innerText).to.equal("Id\n");
      expect(secondLocationGroup.innerText).to.equal("Location\nStreet\nStreet name\nCity\n");
      var cityHeader = secondLocationGroup.querySelector('[data-id="city"]');
      expect(cityHeader.innerText).to.equal('City');
      expect(cityHeader.parentNode.parentNode.getBoundingClientRect().right + 1).to.equal(secondLocationGroup.getBoundingClientRect().right);
      gridInstance.unmount();
      done();
    }, 30);
  });
  it('should display correct configuration, with groupBy + hideGroupByColumns=false', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      dataSource: [],
      idProperty: "id",
      columnDefaultWidth: 100,
      groups: [{
        name: 'height',
        group: 'personal info'
      }, {
        name: 'weight',
        group: 'personal info'
      }, {
        name: 'location',
        xresizable: false
      }, {
        name: 'street',
        group: 'location'
      }, {
        name: 'personal info'
      }],
      groupBy: ['city'],
      hideGroupByColumns: false,
      columns: [{
        name: 'height inch',
        group: 'height',
        defaultLocked: true
      }, {
        name: 'height cm',
        group: 'height',
        defaultLocked: true
      }, {
        name: 'street name',
        group: 'street'
      }, {
        name: 'city',
        defaultLocked: 'end',
        sortable: false,
        headerAlign: 'end',
        group: 'location',
        header: _react.default.createElement("span", {
          "data-id": "city"
        }, "City")
      }]
    }));
    setTimeout(function () {
      var simpleColumnHeaders = (0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__column-header');
      expect(simpleColumnHeaders.length).to.equal(5);
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should display correct configuration, with groupBy + hideGroupByColumns=true', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      dataSource: [],
      idProperty: "id",
      columnDefaultWidth: 100,
      groups: [{
        name: 'height',
        group: 'personal info'
      }, {
        name: 'weight',
        group: 'personal info'
      }, {
        name: 'location',
        xresizable: false
      }, {
        name: 'street',
        group: 'location'
      }, {
        name: 'personal info'
      }],
      groupBy: ['city'],
      hideGroupByColumns: true,
      columns: [{
        name: 'height inch',
        group: 'height',
        defaultLocked: true
      }, {
        name: 'height cm',
        group: 'height',
        defaultLocked: true
      }, {
        name: 'street name',
        group: 'street'
      }, {
        name: 'city',
        defaultLocked: 'end',
        sortable: false,
        headerAlign: 'end',
        group: 'location',
        header: _react.default.createElement("span", {
          "data-id": "city"
        }, "City")
      }]
    }));
    setTimeout(function () {
      var simpleColumnHeaders = (0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__column-header');
      expect(simpleColumnHeaders.length).to.equal(4);
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should dispay correct configuration', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columnDefaultWidth: 200,
      columns: [{
        name: 'id'
      }, {
        name: 'firstName',
        group: 'personal info'
      }, {
        name: 'lastName',
        group: 'personal info'
      }, {
        name: 'birthDate',
        group: 'personal info'
      }, {
        name: 'index',
        group: 'other'
      }, {
        name: 'grade',
        group: 'other'
      }, {
        name: 'age'
      }, {
        name: 'email',
        group: 'info'
      }],
      hideGroupByColumns: false,
      idProperty: "id",
      groups: [{
        name: 'misc'
      }, {
        name: 'personal info',
        group: 'info'
      }, {
        name: 'info',
        group: 'misc'
      }, {
        name: 'other'
      }],
      dataSource: []
    }));
    var findTitle = function findTitle(node) {
      return node.querySelector('.InovuaReactDataGrid__header-group__title');
    };
    var findCells = function findCells(node) {
      return node.querySelector("".concat(HEADER_GROUP_SELECTOR, "-cells"));
    };
    setTimeout(function () {
      var headerNode = (0, _reactDom.findDOMNode)(gridInstance).querySelector('.InovuaReactDataGrid__header');
      var topLevelGroups = (0, _toConsumableArray2.default)(headerNode.children);
      expect(topLevelGroups.length).to.equal(5);
      var _topLevelGroups3 = (0, _slicedToArray2.default)(topLevelGroups, 5),
        idGroup = _topLevelGroups3[0],
        misc1Group = _topLevelGroups3[1],
        otherGroup = _topLevelGroups3[2],
        ageGroup = _topLevelGroups3[3],
        misc2Group = _topLevelGroups3[4];
      expect(idGroup.innerText).to.equal("Id\n");
      expect(findTitle(misc1Group).innerText).to.equal("Misc");
      expect(findTitle(otherGroup).innerText).to.equal("Other");
      expect(ageGroup.innerText).to.equal("Age\n");
      expect(findTitle(misc2Group).innerText).to.equal("Misc");
      var misc1Info = findCells(misc1Group);
      expect(findTitle(misc1Info).innerText).to.equal("Info");
      var personalInfo = findCells(misc1Info);
      expect(findTitle(personalInfo).innerText).to.equal("Personal info");
      var personalInfoCells = findCells(personalInfo);
      expect(personalInfoCells.innerText.split('\n').join('|')).to.equal("First name|Last name|Birth date|");
      var info2 = findCells(misc2Group);
      expect(findTitle(info2).innerText).to.equal('Info');
      var emailCell = findCells(info2);
      expect(emailCell.innerText).to.equal("Email\n");
      gridInstance.unmount();
      done();
    }, 30);
  });
});