/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="react" />
import Component from '../../../packages/react-class';
export default class InovuaDataGridHeaderLayout extends Component {
    constructor(props: any);
    notifyHeaderScrollLeftMax(scrollLeftMax: any): void;
    onContainerScrollHorizontal(scrollLeft: number, scrollLeftMax?: number): void;
    setScrollLeft(scrollLeft: any): void;
    getScrollLeft(): any;
    getScrollLeftMax(): any;
    setColumnRenderStartIndex(columnRenderStartIndex: any): void;
    render(): JSX.Element;
    renderGroupToolbar(): any;
    renderHeaderWrapper(): JSX.Element | null;
    renderDragCell(): JSX.Element;
    renderDragGroupItem(): any;
    renderDragHeaderGroup(): JSX.Element | undefined;
    onGroupItemMouseDown(column: any, index: any, event: any): void;
    getCellDOMNodeAt(index: any): any;
    getHeader(): any;
    onHeaderGroupMouseDown(event: any, headerGroupProps: any, headerGroup: any): void;
    onHeaderCellTouchStart(...args: any[]): void;
    onHeaderCellMouseDown({ computedVisibleIndex: visibleIndex }: {
        computedVisibleIndex: any;
    }, event: any, { dragTarget, dragIndex }?: {
        dragTarget?: string;
        dragIndex: any;
    }): void;
    maybeDragMouseDown(event: any, { dragTarget, dragIndex, allowTargetChange, ranges, parentsForColumns, dragTargetIndex, dragTargetDepth, dragTargetNode, dragTargetLength, }: {
        dragTarget: any;
        dragIndex: any;
        allowTargetChange: any;
        ranges: any;
        parentsForColumns: any;
        dragTargetIndex: any;
        dragTargetDepth: any;
        dragTargetNode: any;
        dragTargetLength: any;
    }): void;
    renderReorderIndicator(): JSX.Element;
    setReorderArrowAt(index: any, ranges: any, target: any, offset: number | undefined, visible: any): this;
    setReorderArrowPosition(pos: any, target: any): this;
    setReorderArrowVisible(visible: any): this;
    getGroupToolbar(): any;
    getGroupByItems(): any;
    getHeaderCells(): any;
    getBoxesFor(target: any): any;
    getDragBoxInstance(dragIndex: any, dragTarget: any, dragTargetDepth: any, dragTargetLength: any): any;
    setupDrag({ dragTarget, dragIndex, allowTargetChange, parentsForColumns, dragTargetIndex, dragTargetDepth, dragTargetLength, }: {
        dragTarget: any;
        dragIndex: any;
        allowTargetChange?: boolean | undefined;
        parentsForColumns: any;
        dragTargetIndex: any;
        dragTargetDepth: any;
        dragTargetLength: any;
    }, event: any): void;
    onHeaderCellDrop(): void;
    ungroupColumnToIndex(columnId: any, dropIndex: any): void;
    moveColumnsBeforeIndex(columnsIds: any, dropIndex: any, newLocked: any): void;
    onHeaderCellDrag({ left: diffLeft, top: diffTop }: {
        left: any;
        top: any;
    }): void;
    setColumnOrder(newColumnOrder: any): void;
    setGroupBy(groupBy: any): void;
    insertGroupBy(at: any, column: any): void;
}
