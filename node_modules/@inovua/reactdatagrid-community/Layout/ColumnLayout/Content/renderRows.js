/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _Row = _interopRequireDefault(require("./Row"));
var _getRowSpans = _interopRequireDefault(require("./getRowSpans"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var emptyObject = Object.freeze ? Object.freeze({}) : {};
var renderRows = function renderRows(_ref, _ref2) {
  var from = _ref.from,
    to = _ref.to,
    empty = _ref.empty,
    renderIndex = _ref.renderIndex,
    editRowIndex = _ref.editRowIndex,
    editValue = _ref.editValue,
    editColumnIndex = _ref.editColumnIndex,
    editColumnId = _ref.editColumnId,
    setRowSpan = _ref.setRowSpan,
    sticky = _ref.sticky,
    rowHeight = _ref.rowHeight,
    tryNextRowEdit = _ref.tryNextRowEdit,
    onEditStop = _ref.onEditStop,
    onEditStart = _ref.onEditStart,
    onEditValueChange = _ref.onEditValueChange,
    scrollLeft = _ref.scrollLeft,
    columnRenderCount = _ref.columnRenderCount,
    columnRenderStartIndex = _ref.columnRenderStartIndex,
    memorizedScrollLeft = _ref.memorizedScrollLeft;
  var availableWidth = _ref2.availableWidth,
    data = _ref2.data,
    onTransitionEnd = _ref2.onTransitionEnd,
    columns = _ref2.columns,
    computedPivot = _ref2.computedPivot,
    groupColumn = _ref2.groupColumn,
    activeRowRef = _ref2.activeRowRef,
    columnsMap = _ref2.columnsMap,
    renderLockedStartCells = _ref2.renderLockedStartCells,
    renderLockedEndCells = _ref2.renderLockedEndCells,
    computedOnCellMouseDown = _ref2.computedOnCellMouseDown,
    computedEnableRowspan = _ref2.computedEnableRowspan,
    lockedStartColumns = _ref2.lockedStartColumns,
    lockedEndColumns = _ref2.lockedEndColumns,
    renderDetailsGrid = _ref2.renderDetailsGrid,
    editable = _ref2.editable,
    rowDetailsWidth = _ref2.rowDetailsWidth,
    scrollbars = _ref2.scrollbars,
    scrollToColumn = _ref2.scrollToColumn,
    scrollToIndexIfNeeded = _ref2.scrollToIndexIfNeeded,
    hasLockedStart = _ref2.hasLockedStart,
    hasLockedEnd = _ref2.hasLockedEnd,
    computedShowEmptyRows = _ref2.computedShowEmptyRows,
    setRowSelected = _ref2.setRowSelected,
    setRowExpanded = _ref2.setRowExpanded,
    toggleRowExpand = _ref2.toggleRowExpand,
    toggleNodeExpand = _ref2.toggleNodeExpand,
    expandOnMouseDown = _ref2.expandOnMouseDown,
    loadNodeAsync = _ref2.loadNodeAsync,
    computedTreeEnabled = _ref2.computedTreeEnabled,
    computedActiveCell = _ref2.computedActiveCell,
    rtl = _ref2.rtl,
    naturalRowHeight = _ref2.naturalRowHeight,
    lastCellInRange = _ref2.lastCellInRange,
    getCellSelectionKey = _ref2.getCellSelectionKey,
    onRowContextMenu = _ref2.onRowContextMenu,
    columnUserSelect = _ref2.columnUserSelect,
    selectAll = _ref2.selectAll,
    deselectAll = _ref2.deselectAll,
    expandGroupTitle = _ref2.expandGroupTitle,
    expandColumn = _ref2.expandColumn,
    computedCellSelection = _ref2.computedCellSelection,
    lastLockedStartIndex = _ref2.lastLockedStartIndex,
    lastLockedEndIndex = _ref2.lastLockedEndIndex,
    lastUnlockedIndex = _ref2.lastUnlockedIndex,
    computedGroupBy = _ref2.computedGroupBy,
    computedIndexesInGroups = _ref2.computedIndexesInGroups,
    edition = _ref2.edition,
    computedLicenseValid = _ref2.computedLicenseValid,
    computedGroupCounts = _ref2.computedGroupCounts,
    rowHeightManager = _ref2.rowHeightManager,
    maxRowHeight = _ref2.maxRowHeight,
    minRowHeight = _ref2.minRowHeight,
    editStartEvent = _ref2.editStartEvent,
    getItemId = _ref2.getItemId,
    firstUnlockedIndex = _ref2.firstUnlockedIndex,
    firstLockedStartIndex = _ref2.firstLockedStartIndex,
    firstLockedEndIndex = _ref2.firstLockedEndIndex,
    maxVisibleRows = _ref2.maxVisibleRows,
    onRowMouseEnter = _ref2.onRowMouseEnter,
    onRowMouseLeave = _ref2.onRowMouseLeave,
    computedOnRowClick = _ref2.computedOnRowClick,
    computedRowDoubleClick = _ref2.computedRowDoubleClick,
    onCellClick = _ref2.onCellClick,
    computedCellDoubleClick = _ref2.computedCellDoubleClick,
    onCellSelectionDraggerMouseDown = _ref2.onCellSelectionDraggerMouseDown,
    onCellEnter = _ref2.onCellEnter,
    onColumnMouseEnter = _ref2.onColumnMouseEnter,
    onColumnMouseLeave = _ref2.onColumnMouseLeave,
    columnIndexHovered = _ref2.columnIndexHovered,
    onEditCancel = _ref2.onEditCancel,
    onEditComplete = _ref2.onEditComplete,
    computedCellMultiSelectionEnabled = _ref2.computedCellMultiSelectionEnabled,
    nativeScroll = _ref2.nativeScroll,
    renderRow = _ref2.renderRow,
    onRenderRow = _ref2.onRenderRow,
    rowClassName = _ref2.rowClassName,
    rowStyle = _ref2.rowStyle,
    rowFactory = _ref2.rowFactory,
    _ref2$rowProps = _ref2.rowProps,
    passedProps = _ref2$rowProps === void 0 ? emptyObject : _ref2$rowProps,
    rowKey = _ref2.rowKey,
    cellFactory = _ref2.cellFactory,
    computedSelected = _ref2.computedSelected,
    computedUnselected = _ref2.computedUnselected,
    treeColumn = _ref2.treeColumn,
    renderNodeTool = _ref2.renderNodeTool,
    renderTreeCollapseTool = _ref2.renderTreeCollapseTool,
    renderTreeExpandTool = _ref2.renderTreeExpandTool,
    renderGroupCollapseTool = _ref2.renderGroupCollapseTool,
    renderGroupExpandTool = _ref2.renderGroupExpandTool,
    renderTreeLoadingTool = _ref2.renderTreeLoadingTool,
    rowExpandHeight = _ref2.rowExpandHeight,
    isRowExpandedById = _ref2.isRowExpandedById,
    computedRenderRowDetails = _ref2.computedRenderRowDetails,
    isRowExpandableAt = _ref2.isRowExpandableAt,
    computedRowExpandEnabled = _ref2.computedRowExpandEnabled,
    computedRowMultiSelectionEnabled = _ref2.computedRowMultiSelectionEnabled,
    computedRowSelectionEnabled = _ref2.computedRowSelectionEnabled,
    computedActiveIndex = _ref2.computedActiveIndex,
    computedSkip = _ref2.computedSkip,
    computedShowZebraRows = _ref2.computedShowZebraRows,
    computedHasColSpan = _ref2.computedHasColSpan,
    initialRowHeight = _ref2.rowHeight,
    totalColumnCount = _ref2.totalColumnCount,
    totalComputedWidth = _ref2.totalComputedWidth,
    totalLockedStartWidth = _ref2.totalLockedStartWidth,
    totalLockedEndWidth = _ref2.totalLockedEndWidth,
    totalUnlockedWidth = _ref2.totalUnlockedWidth,
    currentDataSourceCount = _ref2.currentDataSourceCount,
    computedShowCellBorders = _ref2.computedShowCellBorders,
    emptyScrollOffset = _ref2.emptyScrollOffset,
    showHorizontalCellBorders = _ref2.showHorizontalCellBorders,
    showVerticalCellBorders = _ref2.showVerticalCellBorders,
    getScrollLeftMax = _ref2.getScrollLeftMax,
    shouldRenderCollapsedRowDetails = _ref2.shouldRenderCollapsedRowDetails,
    rowDetailsStyle = _ref2.rowDetailsStyle,
    minRowWidth = _ref2.minRowWidth,
    maxWidth = _ref2.maxWidth,
    _ref2$startIndex = _ref2.startIndex,
    startIndex = _ref2$startIndex === void 0 ? 0 : _ref2$startIndex,
    groupNestingSize = _ref2.groupNestingSize,
    treeNestingSize = _ref2.treeNestingSize,
    onGroupToggle = _ref2.onGroupToggle,
    computedCollapsedGroups = _ref2.computedCollapsedGroups,
    computedExpandedGroups = _ref2.computedExpandedGroups,
    groupPathSeparator = _ref2.groupPathSeparator,
    renderGroupTitle = _ref2.renderGroupTitle,
    renderGroupTool = _ref2.renderGroupTool,
    renderLockedEndGroupTitle = _ref2.renderLockedEndGroupTitle,
    renderUnlockedGroupTitle = _ref2.renderUnlockedGroupTitle,
    virtualizeColumns = _ref2.virtualizeColumns,
    computedLivePagination = _ref2.computedLivePagination,
    onRowReorder = _ref2.onRowReorder,
    onDragRowMouseDown = _ref2.onDragRowMouseDown,
    theme = _ref2.theme,
    onContextMenu = _ref2.onContextMenu,
    setActiveIndex = _ref2.setActiveIndex,
    currentEditCompletePromise = _ref2.currentEditCompletePromise,
    enableColumnAutosize = _ref2.enableColumnAutosize,
    columnHoverClassName = _ref2.columnHoverClassName,
    computedEnableColumnHover = _ref2.computedEnableColumnHover,
    renderRowDetailsExpandIcon = _ref2.renderRowDetailsExpandIcon,
    renderRowDetailsCollapsedIcon = _ref2.renderRowDetailsCollapsedIcon,
    computedOnRowMouseDown = _ref2.computedOnRowMouseDown,
    disabledRows = _ref2.disabledRows,
    rowFocusClassName = _ref2.rowFocusClassName,
    computedCellBulkUpdateMouseDown = _ref2.computedCellBulkUpdateMouseDown,
    computedCellBulkUpdateMouseUp = _ref2.computedCellBulkUpdateMouseUp,
    bulkUpdateMouseDown = _ref2.bulkUpdateMouseDown;
  var remoteOffset = computedLivePagination ? 0 : computedSkip || 0;
  var totalCount = data.length;
  var dataArray = data.slice(from, to);
  var isGrouped = computedGroupBy && computedGroupBy.length;
  var defaultRowHeight = rowHeightManager.getDefaultRowHeight();
  if (computedShowEmptyRows && !dataArray.length) {
    dataArray = [null];
  }
  var depth = null;
  if (isGrouped) {
    depth = computedGroupBy.length;
  }
  return dataArray.map(function (rowData, i) {
    var index = i + startIndex;
    var id = rowData ? getItemId(rowData) : i;
    var realIndex = index + from;
    var active = computedActiveIndex === realIndex;
    var focusedRow = computedActiveIndex === realIndex;
    var indexInGroup = isGrouped ? computedIndexesInGroups[realIndex] : null;
    if (empty) {
      indexInGroup = realIndex + (totalCount % 2 - 1);
    }
    var keyIndex = rowKey === 'realIndex' ? realIndex : index;
    var key = "row-".concat(keyIndex);
    var isSelected = !empty && computedRowSelectionEnabled && (computedRowMultiSelectionEnabled ? computedSelected === true ? computedUnselected ? computedUnselected[id] === undefined : true : computedSelected.hasOwnProperty(id) : computedSelected == id);
    var rowExpanded = isRowExpandedById(id);
    var rowProps = {
      rowspanZIndex: totalCount - realIndex,
      availableWidth: availableWidth,
      computedGroupBy: computedGroupBy,
      expandGroupTitle: expandGroupTitle,
      expandColumn: expandColumn,
      getCellSelectionKey: getCellSelectionKey,
      id: id,
      depth: depth,
      columns: columns,
      columnsMap: columnsMap,
      computedHasColSpan: computedHasColSpan,
      lockedStartColumns: lockedStartColumns,
      lockedEndColumns: lockedEndColumns,
      hasLockedStart: hasLockedStart,
      rowDetailsWidth: rowDetailsWidth,
      hasLockedEnd: hasLockedEnd,
      columnUserSelect: columnUserSelect,
      minWidth: minRowWidth,
      width: totalComputedWidth,
      active: active,
      activeRowRef: activeRowRef,
      emptyScrollOffset: emptyScrollOffset,
      empty: empty,
      editable: editable,
      key: key,
      scrollLeft: scrollLeft,
      getScrollLeftMax: getScrollLeftMax,
      groupColumn: groupColumn,
      renderRow: renderRow,
      onRenderRow: onRenderRow,
      cellFactory: cellFactory,
      computedActiveCell: computedActiveCell,
      computedShowZebraRows: computedShowZebraRows,
      lastCellInRange: lastCellInRange,
      groupNestingSize: groupNestingSize,
      treeNestingSize: treeNestingSize,
      columnRenderCount: columnRenderCount,
      rowStyle: rowStyle,
      rowClassName: rowClassName,
      onTransitionEnd: onTransitionEnd,
      onRowContextMenu: onRowContextMenu,
      renderNodeTool: renderNodeTool,
      indexInGroup: isGrouped ? indexInGroup : null,
      groupCount: isGrouped && computedGroupCounts ? computedGroupCounts[realIndex] : 0,
      editStartEvent: editStartEvent,
      virtualizeColumns: virtualizeColumns,
      firstUnlockedIndex: firstUnlockedIndex,
      firstLockedStartIndex: firstLockedStartIndex,
      columnRenderStartIndex: columnRenderStartIndex,
      firstLockedEndIndex: firstLockedEndIndex,
      tryNextRowEdit: tryNextRowEdit,
      totalComputedWidth: totalComputedWidth,
      totalLockedStartWidth: totalLockedStartWidth,
      totalLockedEndWidth: totalLockedEndWidth,
      totalUnlockedWidth: totalUnlockedWidth,
      sticky: sticky,
      computedCellSelection: computedCellSelection,
      computedCellMultiSelectionEnabled: computedCellMultiSelectionEnabled,
      shouldRenderCollapsedRowDetails: shouldRenderCollapsedRowDetails,
      rowDetailsStyle: rowDetailsStyle,
      renderDetailsGrid: renderDetailsGrid,
      renderIndex: renderIndex,
      realIndex: realIndex,
      rowIndex: realIndex,
      remoteRowIndex: remoteOffset + realIndex,
      maxVisibleRows: maxVisibleRows,
      last: !computedShowEmptyRows ? realIndex == totalCount - 1 : !!(maxVisibleRows && realIndex >= maxVisibleRows - 1 && realIndex == totalCount - 1),
      lastNonEmpty: realIndex === totalCount - 1,
      totalDataCount: totalCount,
      rowHeight: rowHeight,
      defaultRowHeight: defaultRowHeight,
      rowExpandHeight: rowExpandHeight,
      initialRowHeight: initialRowHeight,
      setRowSpan: setRowSpan,
      maxRowHeight: maxRowHeight,
      minRowHeight: minRowHeight,
      getItemId: getItemId,
      computedShowCellBorders: computedShowCellBorders,
      showHorizontalCellBorders: showHorizontalCellBorders,
      showVerticalCellBorders: showVerticalCellBorders,
      passedProps: passedProps,
      setRowSelected: setRowSelected,
      setRowExpanded: setRowExpanded,
      renderLockedStartCells: renderLockedStartCells,
      renderLockedEndCells: renderLockedEndCells,
      computedRowExpandEnabled: computedRowExpandEnabled,
      computedRenderRowDetails: computedRenderRowDetails,
      isRowExpandableAt: isRowExpandableAt,
      treeColumn: treeColumn,
      rtl: rtl,
      toggleRowExpand: toggleRowExpand,
      toggleNodeExpand: toggleNodeExpand,
      expandOnMouseDown: expandOnMouseDown,
      loadNodeAsync: loadNodeAsync,
      edition: edition,
      computedLicenseValid: computedLicenseValid,
      computedEnableRowspan: computedEnableRowspan,
      computedTreeEnabled: computedTreeEnabled,
      naturalRowHeight: naturalRowHeight,
      selectAll: selectAll,
      deselectAll: deselectAll,
      totalColumnCount: totalColumnCount,
      computedPivot: computedPivot,
      multiSelect: computedRowMultiSelectionEnabled,
      selection: computedSelected,
      selected: isSelected,
      expanded: rowExpanded,
      lastLockedStartIndex: lastLockedStartIndex,
      lastLockedEndIndex: lastLockedEndIndex,
      lastUnlockedIndex: lastUnlockedIndex,
      data: rowData,
      dataSourceArray: data,
      onMouseEnter: !empty ? onRowMouseEnter : null,
      onMouseLeave: !empty ? onRowMouseLeave : null,
      onClick: !empty ? computedOnRowClick : null,
      onMouseDown: !empty ? computedOnRowMouseDown : null,
      onRowDoubleClick: !empty ? computedRowDoubleClick : null,
      scrollToColumn: scrollToColumn,
      scrollToIndexIfNeeded: scrollToIndexIfNeeded,
      onCellClick: onCellClick,
      onCellDoubleClick: computedCellDoubleClick,
      onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,
      onCellMouseDown: computedOnCellMouseDown,
      onColumnMouseEnter: onColumnMouseEnter,
      onColumnMouseLeave: onColumnMouseLeave,
      columnIndexHovered: columnIndexHovered,
      onCellEnter: onCellEnter,
      onEditStop: onEditStop,
      onEditStart: onEditStart,
      onEditCancel: onEditCancel,
      onEditValueChange: onEditValueChange,
      onEditComplete: onEditComplete,
      scrollbars: scrollbars,
      even: false,
      odd: false,
      nativeScroll: nativeScroll,
      onRowReorder: onRowReorder,
      onDragRowMouseDown: onDragRowMouseDown,
      theme: theme,
      onContextMenu: onContextMenu,
      setActiveIndex: setActiveIndex,
      renderTreeCollapseTool: renderTreeCollapseTool,
      renderTreeExpandTool: renderTreeExpandTool,
      renderGroupCollapseTool: renderGroupCollapseTool,
      renderGroupExpandTool: renderGroupExpandTool,
      renderTreeLoadingTool: renderTreeLoadingTool,
      currentEditCompletePromise: currentEditCompletePromise,
      enableColumnAutosize: enableColumnAutosize,
      columnHoverClassName: columnHoverClassName,
      computedEnableColumnHover: computedEnableColumnHover,
      renderRowDetailsExpandIcon: renderRowDetailsExpandIcon,
      renderRowDetailsCollapsedIcon: renderRowDetailsCollapsedIcon,
      memorizedScrollLeft: memorizedScrollLeft,
      disabledRow: disabledRows ? disabledRows[realIndex] : null,
      focusedRow: focusedRow,
      rowFocusClassName: rowFocusClassName,
      onCellBulkUpdateMouseDown: computedCellBulkUpdateMouseDown,
      onMouseUp: computedCellBulkUpdateMouseUp,
      bulkUpdateMouseDown: bulkUpdateMouseDown
    };
    if (rowProps.rowIndex === editRowIndex) {
      rowProps.editing = true;
      rowProps.editValue = editValue;
      rowProps.editColumnIndex = editColumnIndex;
      rowProps.editColumnId = editColumnId;
    }
    if (rowData && rowData.__group) {
      rowProps.indexInGroup = null;
      var rowGroupKey = "".concat(rowData.keyPath.join(groupPathSeparator));
      var collapsed;
      if (computedCollapsedGroups === true) {
        collapsed = true;
        if (computedExpandedGroups[rowGroupKey]) {
          collapsed = false;
        }
      } else if (computedExpandedGroups === true) {
        collapsed = false;
        if (computedCollapsedGroups[rowGroupKey]) {
          collapsed = true;
        }
      } else {
        collapsed = computedCollapsedGroups[rowGroupKey];
      }
      rowProps.groupProps = {
        renderGroupTitle: renderGroupTitle,
        renderGroupTool: renderGroupTool,
        renderLockedEndGroupTitle: renderLockedEndGroupTitle,
        renderUnlockedGroupTitle: renderUnlockedGroupTitle,
        onGroupToggle: onGroupToggle,
        collapsed: collapsed,
        groupNestingSize: groupNestingSize,
        depth: rowData.depth - 1
      };
      rowProps.onGroupToggle = onGroupToggle;
      rowProps.groupSummary = rowData.groupSummary;
      rowProps.groupColumnSummaries = rowData.groupColumnSummaries;
    }
    if (isGrouped) {
      rowProps.parentGroupDataArray = [];
    }
    var even = !!((isGrouped && !computedPivot ? indexInGroup : realIndex) % 2);
    if (empty && isGrouped) {
      var tmpIndex = (computedIndexesInGroups[currentDataSourceCount - 1] || 0) + (realIndex - currentDataSourceCount - 1);
      even = !!(tmpIndex % 2);
    }
    if (rowData && rowData.__summary) {
      rowProps.summaryProps = {
        position: rowData.__summary,
        groupProps: rowData.__parentGroup,
        value: rowData.__parentGroup.groupColumnSummaries,
        depth: rowData.__parentGroup.depth - 1
      };
      even = true;
    }
    if (maxWidth != null) {
      rowProps.maxWidth = maxWidth;
    }
    rowProps.even = even;
    rowProps.odd = !even;
    var row;
    if (rowFactory) {
      row = rowFactory(rowProps);
    }
    if (computedEnableRowspan) {
      rowProps.computedRowspans = (0, _getRowSpans.default)(rowProps);
      setRowSpan(Math.max.apply(Math, (0, _toConsumableArray2.default)(Object.keys(rowProps.computedRowspans).map(function (key) {
        return rowProps.computedRowspans[key];
      }))));
    }
    if (row === undefined) {
      row = _react.default.createElement(_Row.default, _objectSpread({}, rowProps));
    }
    return row;
  });
};
var _default = renderRows;
exports.default = _default;