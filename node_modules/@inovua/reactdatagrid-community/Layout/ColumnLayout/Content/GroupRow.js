/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _reactClass = _interopRequireDefault(require("../../../packages/react-class"));
var _objectAssign = _interopRequireDefault(require("object-assign"));
var _join = _interopRequireDefault(require("../../../join"));
var _shouldComponentUpdate2 = _interopRequireDefault(require("../../../shouldComponentUpdate"));
var _Cell = _interopRequireDefault(require("../Cell"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var emptyFn = function emptyFn() {};
var GroupRow = function (_Component) {
  (0, _inherits2.default)(GroupRow, _Component);
  var _super = _createSuper(GroupRow);
  function GroupRow() {
    (0, _classCallCheck2.default)(this, GroupRow);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(GroupRow, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var data = props.data,
        rowHeight = props.rowHeight,
        minWidth = props.minWidth,
        maxWidth = props.maxWidth,
        depth = props.depth,
        groupNestingSize = props.groupNestingSize,
        onGroupToggle = props.onGroupToggle,
        collapsed = props.collapsed,
        realIndex = props.realIndex,
        indexInGroup = props.indexInGroup,
        active = props.active,
        last = props.last;
      var lastInGroup = indexInGroup == props.parentGroupCount - 1;
      var className = (0, _join.default)('InovuaReactDataGrid__group-row', active && 'InovuaReactDataGrid__group-row--active', "InovuaReactDataGrid__group-row--depth-".concat(depth), realIndex == 0 && 'InovuaReactDataGrid__group-row--first', collapsed && 'InovuaReactDataGrid__group-row--collapsed', indexInGroup == 0 && 'InovuaReactDataGrid__group-row--first-in-group', lastInGroup && 'InovuaReactDataGrid__group-row--last-in-group', last && 'InovuaReactDataGrid__group-row--last', props.className);
      var style = (0, _objectAssign.default)({}, props.style, {
        height: rowHeight,
        minWidth: minWidth
      });
      if (maxWidth != null) {
        style.maxWidth = maxWidth;
      }
      var column = this.props.columns[0];
      var cellProps = {
        data: data,
        groupCell: true,
        minWidth: minWidth,
        maxWidth: maxWidth,
        index: column.computedVisibleIndex,
        first: column.computedVisibleIndex == 0,
        last: this.props.columnGroupIndex == this.props.columnGroupCount - 1,
        groupNestingSize: groupNestingSize,
        collapsed: collapsed,
        onGroupToggle: onGroupToggle,
        visibleIndex: column.computedVisibleIndex,
        value: column.computedVisibleIndex == 0 ? this.renderGroupTitle(props) : null,
        depth: depth
      };
      var cell;
      if (this.props.cellFactory) {
        cell = this.props.cellFactory(cellProps);
      }
      if (cell === undefined) {
        cell = _react.default.createElement(_Cell.default, _objectSpread({}, cellProps));
      }
      return _react.default.createElement("div", _objectSpread({
        className: className,
        style: style,
        id: null,
        data: null,
        onClick: this.onClick
      }, props), cell);
    }
  }, {
    key: "onClick",
    value: function onClick(event) {
      var props = this.props;
      props.onClick(event, props);
    }
  }, {
    key: "renderGroupTitle",
    value: function renderGroupTitle(props) {
      var data = props.data;
      if (props.renderGroupTitle) {
        return props.renderGroupTitle(props.data, props);
      }
      return data.value;
    }
  }]);
  return GroupRow;
}(_reactClass.default);
exports.default = GroupRow;
GroupRow.defaultProps = {
  onClick: emptyFn
};