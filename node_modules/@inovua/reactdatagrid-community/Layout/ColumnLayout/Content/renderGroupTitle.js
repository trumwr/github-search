/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = require("react");
var _uglified = _interopRequireDefault(require("../../../packages/uglified"));
var emptyObject = {};
var isValid = function isValid(value) {
  if (value == null) {
    return true;
  }
  if (Array.isArray(value)) {
    return true;
  }
  var type = (0, _typeof2.default)(value);
  if (type == 'string' || type == 'number') {
    return true;
  }
  return (0, _react.isValidElement)(value);
};
var _default = function _default(_ref) {
  var cellProps = _ref.cellProps,
    rowProps = _ref.rowProps;
  var computedLocked = cellProps.computedLocked;
  var data = rowProps.data,
    _rowProps$groupProps = rowProps.groupProps,
    groupProps = _rowProps$groupProps === void 0 ? emptyObject : _rowProps$groupProps,
    hasLockedStart = rowProps.hasLockedStart;
  var renderGroupTitle = computedLocked === 'start' || !hasLockedStart && !computedLocked ? groupProps.renderGroupTitle : computedLocked === 'end' ? groupProps.renderLockedEndGroupTitle : groupProps.renderUnlockedGroupTitle;
  var groupColId;
  if (rowProps.data.fieldPath && rowProps.data.fieldPath.length) {
    groupColId = rowProps.data.fieldPath[rowProps.data.fieldPath.length - 1];
  }
  groupColId = groupColId || rowProps.data.name || rowProps.data.id;
  var col = rowProps.columnsMap[groupColId];
  if (col && col.renderGroupTitle) {
    return col.renderGroupTitle(rowProps.data.value, rowProps);
  }
  if (renderGroupTitle) {
    return renderGroupTitle(rowProps.data.value, rowProps);
  }
  if (col && col.groupToString) {
    return col.groupToString(rowProps.data.value, {
      data: rowProps.data,
      fieldName: col.name,
      renderGroupTitle: true
    });
  }
  if (computedLocked === 'start') {
    if (!_uglified.default && !isValid(data.value)) {
      return "Invalid group title for column \"".concat(groupColId, "\". Use \"renderGroupTitle\" column prop.");
    }
    return data.value;
  }
  if (!hasLockedStart && !computedLocked) {
    if (!_uglified.default && !isValid(data.value)) {
      return "Invalid group title for column \"".concat(groupColId, "\". Use \"renderGroupTitle\" column prop.");
    }
    return data.value;
  }
  return null;
};
exports.default = _default;