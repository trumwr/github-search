/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _renderGroupTitle = _interopRequireDefault(require("./renderGroupTitle"));
var _default = function _default(cellProps, rowProps) {
  var groupProps = rowProps.groupProps,
    totalLockedStartWidth = rowProps.totalLockedStartWidth,
    totalLockedEndWidth = rowProps.totalLockedEndWidth,
    totalUnlockedWidth = rowProps.totalUnlockedWidth,
    totalComputedWidth = rowProps.totalComputedWidth,
    totalColumnCount = rowProps.totalColumnCount,
    firstLockedEndIndex = rowProps.firstLockedEndIndex,
    firstUnlockedIndex = rowProps.firstUnlockedIndex,
    groupColumn = rowProps.groupColumn,
    hasLockedEnd = rowProps.hasLockedEnd,
    hasLockedStart = rowProps.hasLockedStart;
  var computedVisibleIndex = cellProps.computedVisibleIndex,
    computedLocked = cellProps.computedLocked,
    expandColumnIndex = cellProps.expandColumnIndex;
  var expandColumn = computedVisibleIndex === expandColumnIndex;
  var expandGroupTitle = rowProps.expandGroupTitle;
  if (!hasLockedStart && !hasLockedEnd) {
    expandGroupTitle = true;
  }
  var data = rowProps.data;
  var lockedStart = computedLocked === 'start';
  var lockedEnd = computedLocked === 'end';
  if (groupProps && computedVisibleIndex < groupProps.depth || expandColumnIndex != null && computedVisibleIndex < expandColumnIndex) {
    cellProps.value = null;
    cellProps.noBackground = true;
    return cellProps;
  }
  if (computedVisibleIndex === (groupProps === null || groupProps === void 0 ? void 0 : groupProps.depth)) {
    cellProps.value = null;
    cellProps.collapsed = groupProps.collapsed;
    cellProps.textAlign = 'center';
    cellProps.noBackground = false;
    cellProps.firstInSection = true;
    return cellProps;
  }
  if (computedVisibleIndex === (groupProps === null || groupProps === void 0 ? void 0 : groupProps.depth) + 1 || expandColumn) {
    var remainingWidth = lockedStart ? totalLockedStartWidth : totalComputedWidth - totalLockedEndWidth;
    if (expandGroupTitle || expandColumn) {
      remainingWidth = totalComputedWidth;
      cellProps.last = true;
      cellProps.computedColspan = Math.max(totalColumnCount - computedVisibleIndex, 1);
    } else {
      cellProps.computedColspan = Math.max(lockedStart ? firstUnlockedIndex - computedVisibleIndex : lockedEnd ? totalColumnCount - computedVisibleIndex : firstLockedEndIndex - computedVisibleIndex, 1);
    }
    cellProps.lastInSection = true;
    cellProps.noBackground = false;
    cellProps.computedWidth = remainingWidth - cellProps.computedOffset;
    if (!expandColumn) {
      cellProps.value = (0, _renderGroupTitle.default)({
        cellProps: cellProps,
        rowProps: rowProps,
        groupProps: groupProps
      });
    }
    cellProps.zIndex = 1;
    cellProps.textAlign = 'start';
    if (cellProps.render) {
      if (!expandColumn) {
        cellProps.render = function () {
          return cellProps.value;
        };
      }
    }
    return cellProps;
  }
  if (lockedStart) {
    cellProps.hidden = true;
  } else {
    var fakeHidden = lockedEnd ? computedVisibleIndex !== firstLockedEndIndex : computedVisibleIndex !== firstUnlockedIndex;
    if (!cellProps.hidden) {
      cellProps.textAlign = 'start';
      cellProps.value = fakeHidden ? null : (0, _renderGroupTitle.default)({
        cellProps: cellProps,
        rowProps: rowProps,
        groupProps: groupProps
      });
      if (cellProps.render) {
        cellProps.render = function () {
          return cellProps.value;
        };
      }
      cellProps.computedWidth = lockedEnd ? totalLockedEndWidth : totalUnlockedWidth;
      if (!lockedEnd && computedVisibleIndex >= firstUnlockedIndex + 1) {
        cellProps.hidden = true;
      }
      cellProps.firstInSection = true;
      cellProps.last = hasLockedEnd ? lockedEnd : true;
      cellProps.lastInSection = true;
      cellProps.computedColspan = Math.max(lockedEnd ? totalColumnCount - computedVisibleIndex : firstLockedEndIndex - computedVisibleIndex, 1);
    }
  }
  return cellProps;
};
exports.default = _default;