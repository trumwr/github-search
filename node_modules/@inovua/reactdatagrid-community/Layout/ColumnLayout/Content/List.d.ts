/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { Component } from 'react';
export type TypeScrollPos = {
    scrollTop: number;
    scrollLeft: number;
};
type ListProps = {
    virtualized: boolean;
    onContainerScroll?: (scrollPos: TypeScrollPos, prevScrollPos?: TypeScrollPos) => void;
};
export default class InovuaDataGridList extends Component<ListProps> {
    scrollingDirection?: 'horizontal' | 'vertical' | 'none';
    lastScrollTimestamp: number;
    scrollLeft: any;
    virtualListRef: any;
    constructor(props: any);
    shouldComponentUpdate(nextProps: any, nextState: any): any;
    componentDidMount(): void;
    componentWillUnmount(): void;
    isRowFullyVisible: (index: any) => any;
    setValue: () => void;
    computeRows: (props: any, { from, to, rowHeight, renderIndex, empty, setRowSpan, sticky, }?: {}) => any;
    getVirtualList: () => any;
    tryRowEdit: (nextEditRowIndex: any, dir: any, columnIndex: any, isEnterNavigation: any) => void;
    isEditing: () => boolean;
    isLazyEditing(): boolean;
    onEditStop: (args: any) => void;
    onEditValueChange: (args: any) => void;
    onEditStart: (args: any) => void;
    updateEditing: ({ value, rowIndex, columnId, columnIndex }: {
        value: any;
        rowIndex: any;
        columnId: any;
        columnIndex: any;
    }) => void;
    onScrollHorizontal: (scrollLeft: any, _: any, __: any, scrollLeftMax: any) => void;
    renderRowContainer: (props: any) => JSX.Element;
    setupActiveRowIndicatorHandle: (activeRowHandle: (handleProps: {
        setScrollLeft: (scrollLeft: number) => void;
    } | null) => void) => void;
    render(): JSX.Element;
    onStickyRowUpdate: () => void;
    shouldFocusNextRow({ index, nextIndex, dir }: {
        index: any;
        nextIndex: any;
        dir: any;
    }): boolean;
    renderEmptyContent: () => JSX.Element | null | undefined;
    renderView: (viewProps: any) => any;
    getEmptyScrollOffset(): any;
    renderSizer: (props: any, scrollHeight: any) => JSX.Element | null | undefined;
    renderScrollerSpacer: (spacerProps: any) => void;
    renderScroller: (scrollerProps: any) => any;
    getRowAt: (index: any) => any;
    startEdit: ({ rowIndex, columnIndex, value }: {
        rowIndex: any;
        columnIndex: any;
        value: any;
    }) => any;
    tryStartEdit({ rowIndex, columnIndex, dir }: {
        rowIndex: any;
        columnIndex: any;
        dir: any;
    }): any;
    completeEdit: ({ rowIndex, columnIndex, value }: {
        rowIndex: any;
        columnIndex: any;
        value: any;
    }) => void;
    cancelEdit: ({ rowIndex, columnIndex }: {
        rowIndex: any;
        columnIndex: any;
    }) => void;
    onContainerScroll: (scrollPos: TypeScrollPos, prevScrollPos?: TypeScrollPos) => void;
    onScrollStop: () => void;
    componentDidUpdate(prevProps: any): void;
    setColumnRenderStartIndex: (columnRenderStartIndex: any, force: any) => void;
    getRows: () => any;
    getScrollLeftMax(): any;
    onScrollbarsChange: (scrollbars: any) => void;
    onResize: (...args: any[]) => void;
    onContainerScrollHorizontal: (scrollLeft: number, force?: boolean, scrollLeftMax?: number) => void;
    updateOnScrollLeft: (scrollLeft?: any, force?: boolean, props?: Readonly<ListProps> & Readonly<{
        children?: React.ReactNode;
    }>) => void;
    getDOMNode: () => any;
    renderRow: (args: any) => any;
    getVisibleCount: () => any;
}
export {};
