/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var emptyObject = Object.freeze ? Object.freeze({}) : null;
var addTransitionDuration = function addTransitionDuration(cols, style) {
  var firstCol = cols[0];
  if (firstCol.inTransition) {
    var duration = firstCol.inShowTransition ? firstCol.showTransitionDuration : firstCol.hideTransitionDuration;
    duration = duration || firstCol.visibilityTransitionDuration;
    style.transitionDuration = typeof duration == 'number' ? "".concat(duration, "ms") : duration;
    return true;
  }
  return false;
};
var _default = function _default(initialCells, _ref, scrollLeft) {
  var renderLockedStartCells = _ref.renderLockedStartCells,
    renderLockedEndCells = _ref.renderLockedEndCells,
    lockedStartColumns = _ref.lockedStartColumns,
    lockedEndColumns = _ref.lockedEndColumns,
    availableWidth = _ref.availableWidth,
    virtualizeColumns = _ref.virtualizeColumns,
    sticky = _ref.sticky,
    rowHeight = _ref.rowHeight,
    columns = _ref.columns,
    depth = _ref.depth,
    data = _ref.data,
    initialRowHeight = _ref.initialRowHeight,
    groupNestingSize = _ref.groupNestingSize,
    nativeScroll = _ref.nativeScroll,
    scrollbarWidth = _ref.scrollbarWidth,
    groupProps = _ref.groupProps,
    expandGroupTitle = _ref.expandGroupTitle,
    computedRowExpandEnabled = _ref.computedRowExpandEnabled,
    expanded = _ref.expanded,
    shouldRenderCollapsedRowDetails = _ref.shouldRenderCollapsedRowDetails,
    virtualListBorderLeft = _ref.virtualListBorderLeft,
    virtualListBorderRight = _ref.virtualListBorderRight,
    getScrollLeftMax = _ref.getScrollLeftMax,
    rtl = _ref.rtl;
  var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : emptyObject,
    lockedStartContent = _ref2.lockedStartContent,
    lockedEndContent = _ref2.lockedEndContent,
    unlockedContent = _ref2.unlockedContent,
    isHeader = _ref2.isHeader;
  var style = arguments.length > 4 ? arguments[4] : undefined;
  var lockedStartCount = lockedStartColumns ? lockedStartColumns.length : 0;
  var lockedEndCount = lockedEndColumns ? lockedEndColumns.length : 0;
  var lockedEndStartIndex = initialCells.length - lockedEndCount;
  var groupDepth = data && data.__group ? data.depth - 1 : depth || 0;
  var lockedStartCells = null;
  var lockedEndCells = null;
  var unlockedCells = null;
  var hasRowDetails = computedRowExpandEnabled && (expanded || shouldRenderCollapsedRowDetails);
  var lockedStartEndArgs = {
    lockedStartCount: lockedStartCount,
    isHeader: isHeader,
    virtualListBorderLeft: virtualListBorderLeft,
    lockedStartColumns: lockedStartColumns,
    style: style,
    virtualizeColumns: virtualizeColumns,
    rtl: rtl,
    getScrollLeftMax: getScrollLeftMax,
    addTransitionDuration: addTransitionDuration,
    lockedStartContent: lockedStartContent,
    initialCells: initialCells,
    sticky: sticky,
    scrollLeft: scrollLeft,
    rowHeight: rowHeight,
    groupProps: groupProps,
    expandGroupTitle: expandGroupTitle,
    lockedEndColumns: lockedEndColumns,
    nativeScroll: nativeScroll,
    scrollbarWidth: scrollbarWidth,
    virtualListBorderRight: virtualListBorderRight,
    lockedEndContent: lockedEndContent,
    hasRowDetails: hasRowDetails,
    initialRowHeight: initialRowHeight,
    lockedEndStartIndex: lockedEndStartIndex,
    availableWidth: availableWidth
  };
  if (lockedStartCount && renderLockedStartCells) {
    lockedStartCells = renderLockedStartCells(lockedStartEndArgs);
  }
  if (lockedEndCount && renderLockedEndCells) {
    lockedEndCells = renderLockedEndCells(lockedStartEndArgs);
  }
  unlockedCells = unlockedContent || initialCells.slice(lockedStartCount, lockedEndStartIndex);
  if (lockedStartCount || lockedEndCount) {
    return [lockedStartCells, unlockedCells, lockedEndCells];
  }
  return initialCells;
};
exports.default = _default;