/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _assignDefined = _interopRequireDefault(require("../../../packages/assign-defined"));
var _src = _interopRequireWildcard(require("../../../packages/react-virtual-list-pro/src"));
var _shallowequal = _interopRequireDefault(require("../../../packages/shallowequal"));
var _renderRows = _interopRequireDefault(require("./renderRows"));
var _shouldComponentUpdate2 = _interopRequireDefault(require("../../../packages/shouldComponentUpdate"));
var _searchClosestSmallerValue = _interopRequireDefault(require("../../../utils/searchClosestSmallerValue"));
var _renderEmptyContent = _interopRequireDefault(require("../../../renderEmptyContent"));
var _detectUa = require("../../../detect-ua");
var _getGlobal = require("../../../getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var EMPTY_OBJECT = {};
var returnTrue = function returnTrue() {
  return true;
};
var CHUNKS_SIZE = 1;
var raf = globalObject.requestAnimationFrame;
var DEFAULT_SCROLL_POS = {
  scrollLeft: 0,
  scrollTop: 0
};
var initialSkip = 0;
var timeout = false;
var VirtualListClassName = 'InovuaReactDataGrid__virtual-list';
var InovuaDataGridList = function (_Component) {
  (0, _inherits2.default)(InovuaDataGridList, _Component);
  var _super = _createSuper(InovuaDataGridList);
  function InovuaDataGridList(_props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaDataGridList);
    _this = _super.call(this, _props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollingDirection", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastScrollTimestamp", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollLeft", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "virtualListRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowFullyVisible", function (index) {
      return _this.getVirtualList().isRowVisible(index);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setValue", function () {
      var _this$props = _this.props,
        hasValueSetter = _this$props.hasValueSetter,
        data = _this$props.data,
        columns = _this$props.columns,
        idProperty = _this$props.idProperty,
        setItemsAt = _this$props.setItemsAt;
      if (!hasValueSetter) {
        return;
      }
      var newDataMap = data.reduce(function (acc, current) {
        var _iterator = _createForOfIteratorHelper(columns),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var column = _step.value;
            if (column.setValue) {
              var columnName = column.name || column.id;
              var value = current[columnName];
              if (value) {
                var result = column.setValue(_objectSpread({
                  value: value,
                  data: current
                }, column));
                if (value !== result) {
                  var id = current[idProperty];
                  acc[id] = _objectSpread(_objectSpread({}, acc[id]), {}, (0, _defineProperty2.default)({}, columnName, result));
                }
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return acc;
      }, {});
      var newData = Object.keys(newDataMap).map(function (key) {
        var id = isNaN(Number(key)) ? key : Number(key);
        return _objectSpread({
          id: id
        }, newDataMap[key]);
      });
      setItemsAt(newData, {
        replace: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "computeRows", function (props) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EMPTY_OBJECT,
        from = _ref.from,
        to = _ref.to,
        rowHeight = _ref.rowHeight,
        renderIndex = _ref.renderIndex,
        empty = _ref.empty,
        setRowSpan = _ref.setRowSpan,
        sticky = _ref.sticky;
      var columnRenderCount = props.columnRenderCount;
      return (0, _renderRows.default)({
        empty: empty,
        renderIndex: renderIndex,
        setRowSpan: setRowSpan,
        sticky: sticky,
        from: from || _this.startIndex || 0,
        to: to || _this.endIndex || CHUNKS_SIZE,
        rowHeight: rowHeight,
        columnRenderStartIndex: _this.columnRenderStartIndex,
        columnRenderCount: columnRenderCount,
        onEditStop: _this.onEditStop,
        onEditStart: _this.onEditStart,
        onEditValueChange: _this.onEditValueChange,
        getScrollLeftMax: _this.props.getScrollLeftMax,
        tryNextRowEdit: _this.tryRowEdit,
        editValue: _this.editValue,
        editRowIndex: _this.editRowIndex,
        editColumnIndex: _this.editColumnIndex,
        editColumnId: _this.editColumnId,
        memorizedScrollLeft: _this.scrollLeft.current
      }, props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVirtualList", function () {
      var vl = _this.virtualListRef.current;
      return vl;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "tryRowEdit", function (nextEditRowIndex, dir, columnIndex, isEnterNavigation) {
      var columnEditIndex = columnIndex;
      var row = _this.getRowAt(nextEditRowIndex);
      if (!row) {
        return;
      }
      var setActiveIndex = function setActiveIndex() {
        return _this.props.setActiveIndex(nextEditRowIndex);
      };
      if (_this.props.livePagination) {
        var skip = _this.props.computedSkip;
        if (skip !== initialSkip) {
          initialSkip = skip;
          timeout = true;
        }
        timeout ? setTimeout(function () {
          return setActiveIndex();
        }, 50) : setActiveIndex();
      } else {
        setActiveIndex();
      }
      row.tryRowCellEdit(columnEditIndex, dir, isEnterNavigation);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isEditing", function () {
      return !!_this.editColumnId;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEditStop", function (args) {
      if (_this.editColumnIndex !== args.columnIndex || _this.editRowIndex !== args.rowIndex) {
        return;
      }
      if (_this.props.onEditStop) {
        _this.props.onEditStop(args);
      }
      _this.updateEditing({
        value: undefined,
        rowIndex: undefined,
        columnIndex: undefined
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEditValueChange", function (args) {
      if (_this.props.onEditValueChange) {
        _this.props.onEditValueChange(args);
      }
      _this.updateEditing(args);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEditStart", function (args) {
      if (_this.props.onEditStart) {
        _this.props.onEditStart(args);
      }
      _this.updateEditing(args);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateEditing", function (_ref2) {
      var value = _ref2.value,
        rowIndex = _ref2.rowIndex,
        columnId = _ref2.columnId,
        columnIndex = _ref2.columnIndex;
      var oldEditRowIndex = _this.editRowIndex;
      var oldEditValue = _this.editValue;
      var oldEditColumnIndex = _this.editColumnIndex;
      _this.editValue = value;
      _this.editRowIndex = rowIndex;
      _this.editColumnIndex = columnIndex;
      _this.editColumnId = columnId;
      if (_this.editTimeoutId) {
        clearTimeout(_this.editTimeoutId);
      }
      _this.lazyEditColumnId = _this.editColumnId || _this.lazyEditColumnId;
      _this.editTimeoutId = setTimeout(function () {
        delete _this.editTimeoutId;
        _this.lazyEditColumnId = _this.editColumnId;
      }, 50);
      if (oldEditRowIndex === rowIndex && oldEditColumnIndex === columnIndex && oldEditValue !== value) {
        _this.getVirtualList().getRows().forEach(function (r) {
          var row = r.getInstance();
          if (row && row.props.rowIndex === rowIndex) {
            r.update();
          }
        });
        return;
      }
      _this.forceUpdate();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollHorizontal", function (scrollLeft, _, __, scrollLeftMax) {
      _this.scrollLeft.current = scrollLeft;
      _this.onContainerScrollHorizontal(scrollLeft, undefined, scrollLeftMax);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRowContainer", function (props) {
      return _react.default.createElement("div", _objectSpread({}, props), props.children, _this.props.renderActiveRowIndicator && _this.props.renderActiveRowIndicator(_this.setupActiveRowIndicatorHandle));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupActiveRowIndicatorHandle", function (activeRowHandle) {
      _this.activeRowIndicatorHandle = activeRowHandle;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onStickyRowUpdate", function () {
      _this.updateOnScrollLeft(undefined, true);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderEmptyContent", function () {
      var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
      var _this$props2 = _this.props,
        i18n = _this$props2.i18n,
        data = _this$props2.data,
        loading = _this$props2.computedLoading,
        nativeScroll = _this$props2.nativeScroll;
      var emptyText = _this.props.emptyText;
      var length = data.length;
      emptyText = i18n(emptyText, emptyText);
      if (!length && !loading) {
        return (0, _renderEmptyContent.default)(emptyText, 'empty', {
          right: nativeScroll ? 0 : -SCROLLBAR_WIDTH,
          bottom: nativeScroll ? 0 : -SCROLLBAR_WIDTH
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderView", function (viewProps) {
      var _this$props3 = _this.props,
        data = _this$props3.data,
        loading = _this$props3.loading;
      var scrollbarOffset = _this.getEmptyScrollOffset();
      var length = data.length;
      if (!length && !loading) {
        viewProps.children = _react.default.Children.toArray(viewProps.children);
        viewProps.children.push(_this.renderEmptyContent());
        if (_detectUa.IS_EDGE) {
          viewProps.style.minHeight = '99%';
        }
      }
      var hasScrollbars = _this.scrollbars && _this.scrollbars.vertical && _this.scrollbars.horizontal;
      if (!!_this.props.renderRowDetails || !!_this.props.renderDetailsGrid) {
        if (_this.props.rtl && !(0, _src.getScrollbarWidth)() && !_this.props.nativeScroll) {
          viewProps.style.transform = "translateX(".concat(-(hasScrollbars ? 2 : 1) * scrollbarOffset, "px)");
        }
      } else {
        if (_this.props.rtl && !(0, _src.getScrollbarWidth)() && !_this.props.nativeScroll) {
          viewProps.style.transform = "translateX(".concat(-scrollbarOffset, "px)");
        }
      }
      var result;
      if (_this.props.renderView) {
        result = _this.props.renderView(viewProps);
      }
      if (result === undefined) {
        result = _react.default.createElement("div", _objectSpread({}, viewProps));
      }
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSizer", function (props, scrollHeight) {
      if (!_this.props.nativeScroll) {
        return;
      }
      if (!_this.props.virtualized) {
        return null;
      }
      var minWidth = Math.max(_this.props.availableWidth || 0, _this.props.minRowWidth || 0) || 0;
      var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
      var sizerStyle = _objectSpread(_objectSpread({}, props.style), {}, {
        minWidth: minWidth,
        minHeight: props.style ? (props.style.minHeight || 0) - (!SCROLLBAR_WIDTH ? _this.getEmptyScrollOffset() : 0) : 0
      });
      if (_this.props.naturalRowHeight) {
        sizerStyle.height = scrollHeight;
      }
      return _react.default.createElement("div", _objectSpread(_objectSpread({
        key: "grid-sizer",
        "data-name": "sizer"
      }, props), {}, {
        style: sizerStyle
      }));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollerSpacer", function (spacerProps) {
      if (!_this.props.totalFlexColumnCount) {
        spacerProps.style.width = _this.props.minRowWidth || 0;
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScroller", function (scrollerProps) {
      var _style;
      var _this$props4 = _this.props,
        data = _this$props4.data,
        loading = _this$props4.loading,
        virtualized = _this$props4.virtualized,
        maxVisibleRows = _this$props4.maxVisibleRows,
        nativeScroll = _this$props4.nativeScroll,
        availableWidth = _this$props4.availableWidth,
        minRowWidth = _this$props4.minRowWidth;
      var length = data.length;
      scrollerProps.children.push(_react.default.createElement("div", {
        key: "empty-spacer",
        "data-name": "empty-spacer",
        style: (_style = {
          position: _detectUa.IS_IE && nativeScroll ? 'static' : 'absolute',
          contain: 'strict'
        }, (0, _defineProperty2.default)(_style, _this.props.rtl ? 'right' : 'left', 0), (0, _defineProperty2.default)(_style, "height", 1), (0, _defineProperty2.default)(_style, "top", 0), (0, _defineProperty2.default)(_style, "pointerEvents", 'none'), (0, _defineProperty2.default)(_style, "minWidth", Math.max(availableWidth, minRowWidth) || 0), _style)
      }, _detectUa.IS_IE && nativeScroll ? _this.renderEmptyContent() : null));
      if (!virtualized && length < maxVisibleRows) {
        scrollerProps.style = scrollerProps.style || {};
        scrollerProps.style.overflow = 'hidden';
      }
      var hasHorizontalScrollbar = _this.scrollbars && _this.scrollbars.horizontal;
      if (!_this.props.renderRowDetails || !_this.props.renderDetailsGrid) {
        if (!(0, _src.getScrollbarWidth)() && !nativeScroll && hasHorizontalScrollbar) {
          scrollerProps.style.right = 0;
        }
      }
      var result;
      if (_this.props.renderScroller) {
        result = _this.props.renderScroller(scrollerProps);
      }
      if (result === undefined) {
        result = _react.default.createElement("div", _objectSpread({}, scrollerProps));
      }
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowAt", function (index) {
      return _this.getRows().filter(function (r) {
        var _r$props;
        return (r === null || r === void 0 ? void 0 : (_r$props = r.props) === null || _r$props === void 0 ? void 0 : _r$props.rowIndex) === index;
      })[0];
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startEdit", function (_ref3) {
      var rowIndex = _ref3.rowIndex,
        columnIndex = _ref3.columnIndex,
        value = _ref3.value;
      var row = _this.getRowAt(rowIndex);
      if (row) {
        var cell = row.getCellAt(columnIndex);
        if (cell) {
          return cell.startEdit(value);
        }
      }
      return Promise.reject(null);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "completeEdit", function (_ref4) {
      var rowIndex = _ref4.rowIndex,
        columnIndex = _ref4.columnIndex,
        value = _ref4.value;
      var row = _this.getRowAt(rowIndex);
      if (row) {
        var cell = row.getCellAt(columnIndex);
        if (cell) {
          cell.completeEdit(value);
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cancelEdit", function (_ref5) {
      var rowIndex = _ref5.rowIndex,
        columnIndex = _ref5.columnIndex;
      var row = _this.getRowAt(rowIndex);
      if (row) {
        var cell = row.getCellAt(columnIndex);
        if (cell) {
          cell.cancelEdit();
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScroll", function (scrollPos) {
      var prevScrollPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_SCROLL_POS;
      if (_this.props.onContainerScroll) {
        _this.props.onContainerScroll(scrollPos, prevScrollPos);
      }
      var oldScrollingDirection = _this.scrollingDirection;
      if (scrollPos.scrollTop === prevScrollPos.scrollTop && scrollPos.scrollLeft === prevScrollPos.scrollLeft) {
        return;
      }
      _this.scrollingDirection = scrollPos.scrollLeft === prevScrollPos.scrollLeft ? 'vertical' : 'horizontal';
      if (_this.scrollingDirection === oldScrollingDirection) {
        return;
      }
      if (_this.props.virtualized) {
        var _this$getDOMNode, _this$getDOMNode$clas;
        (_this$getDOMNode = _this.getDOMNode()) === null || _this$getDOMNode === void 0 ? void 0 : (_this$getDOMNode$clas = _this$getDOMNode.classList) === null || _this$getDOMNode$clas === void 0 ? void 0 : _this$getDOMNode$clas.add("".concat(VirtualListClassName, "--scrolling"));
        requestAnimationFrame(function () {
          _this.getRows().forEach(function (r) {
            return r ? r.setScrolling(_this.scrollingDirection) : null;
          });
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollStop", function () {
      _this.scrollingDirection = 'none';
      if (_this.props.virtualized) {
        var _this$getDOMNode2, _this$getDOMNode2$cla;
        (_this$getDOMNode2 = _this.getDOMNode()) === null || _this$getDOMNode2 === void 0 ? void 0 : (_this$getDOMNode2$cla = _this$getDOMNode2.classList) === null || _this$getDOMNode2$cla === void 0 ? void 0 : _this$getDOMNode2$cla.remove("".concat(VirtualListClassName, "--scrolling"));
        _this.getRows().forEach(function (r) {
          if (!r) {
            return;
          }
          r.setScrolling(false);
        });
      }
      if (_this.props.onScrollStop) {
        _this.props.onScrollStop();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setColumnRenderStartIndex", function (columnRenderStartIndex, force) {
      if (_this.__willUnmount) {
        return;
      }
      if (_this.resizing && !force) {
        return;
      }
      if (columnRenderStartIndex === _this.columnRenderStartIndex && !force) {
        return;
      }
      if (!_this.getVirtualList()) {
        return;
      }
      if (_this.props.onColumnRenderStartIndexChange) {
        _this.props.onColumnRenderStartIndexChange(columnRenderStartIndex);
      }
      _this.columnRenderStartIndex = columnRenderStartIndex;
      var rows = _this.getVirtualList().getRows();
      rows.forEach(function (row) {
        var rowInstance = row.getInstance();
        if (rowInstance) {
          requestAnimationFrame(function () {
            rowInstance.setColumnRenderStartIndex(columnRenderStartIndex);
          });
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRows", function () {
      var virtualList = _this.getVirtualList();
      if (!virtualList) {
        return [];
      }
      return virtualList.getRows().map(function (row) {
        return row.getInstance();
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollbarsChange", function (scrollbars) {
      _this.scrollbars = scrollbars;
      if (!scrollbars.horizontal) {
        raf(function () {
          _this.onContainerScrollHorizontal(0);
        });
      }
      if (_this.props.onScrollbarsChange) {
        raf(function () {
          _this.props.onScrollbarsChange(scrollbars);
        });
      }
      if (_this.props.scrollProps && _this.props.scrollProps.onScrollbarsChange) {
        _this.props.scrollProps.onScrollbarsChange(scrollbars);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function () {
      if (_this.props.onResize) {
        var _this$props5;
        (_this$props5 = _this.props).onResize.apply(_this$props5, arguments);
      }
      _this.visibleCount = _this.getVisibleCount();
      _this.resizing = true;
      raf(function () {
        _this.resizing = false;
        var force;
        _this.updateOnScrollLeft(undefined, force = true);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScrollHorizontal", function (scrollLeft, force, scrollLeftMax) {
      if (scrollLeft < 0) {
        scrollLeft = 0;
      }
      scrollLeft = Math.round(scrollLeft);
      _this._scrollLeft = scrollLeft;
      if (_this.__willUnmount) {
        return;
      }
      if (_this.props.onContainerScrollHorizontal) {
        _this.props.onContainerScrollHorizontal(scrollLeft, scrollLeftMax);
      }
      if (_this.props.scrollProps && _this.props.scrollProps.onContainerScrollHorizontal) {
        _this.props.scrollProps.onContainerScrollHorizontal(scrollLeft);
      }
      scrollLeft = _this._scrollLeft;
      _this.updateOnScrollLeft(scrollLeft);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateOnScrollLeft", function () {
      var scrollLeft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this._scrollLeft;
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this.props;
      if (_this.__willUnmount) {
        return;
      }
      var columnRenderStartIndex;
      if (props.virtualizeColumns) {
        var lockedStartColumns = props.lockedStartColumns,
          columnWidthPrefixSums = props.columnWidthPrefixSums;
        if (!columnRenderStartIndex) {
          var lockedOffset = lockedStartColumns.length && columnWidthPrefixSums[lockedStartColumns.length] ? columnWidthPrefixSums[lockedStartColumns.length] : 0;
          columnRenderStartIndex = (0, _searchClosestSmallerValue.default)(props.columnWidthPrefixSums, scrollLeft + lockedOffset);
        }
        _this.setColumnRenderStartIndex(columnRenderStartIndex, force);
      }
      if (_this.activeRowIndicatorHandle) {
        _this.activeRowIndicatorHandle.setScrollLeft(scrollLeft);
      }
      if (_this.props.updateLockedWrapperPositions) {
        _this.props.updateLockedWrapperPositions.call((0, _assertThisInitialized2.default)(_this), _this.props, scrollLeft);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMNode", function () {
      return _this.node || (_this.node = _this.getVirtualList().getDOMNode());
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRow", function (args) {
      var rowHeight = args.rowHeight,
        index = args.index,
        renderIndex = args.renderIndex,
        empty = args.empty,
        sticky = args.sticky;
      var setRowSpan = function setRowSpan(rowSpan) {
        args.rowSpan = rowSpan;
      };
      var result = _this.computeRows(_this.props, {
        empty: empty,
        from: index,
        sticky: sticky,
        to: index + 1,
        renderIndex: renderIndex,
        rowHeight: rowHeight,
        setRowSpan: setRowSpan
      })[0];
      return result;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVisibleCount", function () {
      return _this.getVirtualList() ? _this.getVirtualList().getVisibleCount() : -1;
    });
    _this.virtualListRef = (0, _react.createRef)();
    _this._scrollLeft = 0;
    _this._scrollTop = 0;
    _this.startIndex = 0;
    _this.endIndex = CHUNKS_SIZE;
    _this.state = {
      columnRenderCount: 0
    };
    _this.rows = [];
    _this.scrollbars = {};
    _this.scrollLeft = (0, _react.createRef)();
    return _this;
  }
  (0, _createClass2.default)(InovuaDataGridList, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (nextProps.shouldComponentUpdate) {
        return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
      }
      var equalProps = (0, _shallowequal.default)(this.props, nextProps);
      if (!equalProps) {
        return true;
      }
      return !(0, _shallowequal.default)(nextState, this.state);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      if (this.props.hasValueSetter) {
        setTimeout(function () {
          _this2.setValue();
        }, 100);
      }
      this.__willUnmount = false;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.__willUnmount = true;
    }
  }, {
    key: "isLazyEditing",
    value: function isLazyEditing() {
      return !!this.lazyEditColumnId;
    }
  }, {
    key: "render",
    value: function render() {
      var thisProps = this.props;
      var maybeProps = (0, _assignDefined.default)({}, {
        minRowHeight: thisProps.minRowHeight,
        rowHeight: thisProps.rowHeight
      });
      var pureRows = !!this.fromState;
      var shouldUpdate = returnTrue;
      var scrollProps = thisProps.scrollProps;
      if (scrollProps && scrollProps.onContainerScrollHorizontal) {
        scrollProps = _objectSpread({}, scrollProps);
        scrollProps.onContainerScrollHorizontal = this.onScrollHorizontal;
      }
      var minRowWidth = Math.max(this.props.availableWidth, this.props.minRowWidth) || 0;
      var naturalRowHeight = thisProps.naturalRowHeight;
      var renderRow = this.renderRow;
      if (naturalRowHeight) {
        if (this.__data !== thisProps.data || !this.__minRowWidth) {
          renderRow = renderRow.bind(this);
        }
        this.__minRowWidth = minRowWidth;
        this.__data = thisProps.data;
      }
      return _react.default.createElement(_src.default, _objectSpread(_objectSpread({
        rowHeight: null,
        extraRows: naturalRowHeight ? 1 : 0,
        style: thisProps.style,
        theme: this.props.theme,
        checkResizeDelay: thisProps.checkResizeDelay,
        rowContain: thisProps.rowContain,
        contain: thisProps.contain,
        rtl: thisProps.rtl,
        stickyOffset: thisProps.rtlOffset,
        stickyRows: thisProps.computedStickyRows,
        onStickyRowUpdate: this.onStickyRowUpdate,
        enableRowSpan: thisProps.computedEnableRowspan,
        recycleCoveredRows: false,
        className: VirtualListClassName,
        renderRowContainer: this.renderRowContainer
      }, maybeProps), {}, {
        overscrollBehavior: "auto",
        rowHeightManager: thisProps.rowHeightManager,
        before: thisProps.before,
        after: thisProps.after,
        showEmptyRows: thisProps.computedShowEmptyRows,
        scrollProps: scrollProps,
        emptyScrollOffset: this.getEmptyScrollOffset(),
        nativeScroll: thisProps.nativeScroll,
        onResize: this.onResize,
        virtualized: thisProps.virtualized,
        minRowWidth: minRowWidth,
        naturalRowHeight: naturalRowHeight,
        renderScroller: this.renderScroller,
        renderScrollerSpacer: this.renderScrollerSpacer,
        renderSizer: this.renderSizer,
        renderView: this.renderView,
        useTransformRowPosition: this.props.useTransformRowPosition,
        useTransformPosition: this.props.useTransformPosition,
        shouldComponentUpdate: shouldUpdate,
        ref: this.virtualListRef,
        count: thisProps.data.length || 0,
        pureRows: pureRows,
        renderRow: renderRow,
        onContainerScrollHorizontal: this.onScrollHorizontal,
        onContainerScroll: this.onContainerScroll,
        onScrollbarsChange: this.onScrollbarsChange,
        onContainerScrollVertical: this.props.onContainerScrollVertical,
        onScrollStop: this.onScrollStop,
        shouldFocusNextRow: this.shouldFocusNextRow
      }));
    }
  }, {
    key: "shouldFocusNextRow",
    value: function shouldFocusNextRow(_ref6) {
      var index = _ref6.index,
        nextIndex = _ref6.nextIndex,
        dir = _ref6.dir;
      var shouldFocus = !this.isLazyEditing();
      return shouldFocus;
    }
  }, {
    key: "getEmptyScrollOffset",
    value: function getEmptyScrollOffset() {
      return this.props.emptyScrollOffset || (0, _src.getScrollbarWidth)() || 17;
    }
  }, {
    key: "tryStartEdit",
    value: function tryStartEdit(_ref7) {
      var rowIndex = _ref7.rowIndex,
        columnIndex = _ref7.columnIndex,
        dir = _ref7.dir;
      var row = this.getRowAt(rowIndex);
      if (row) {
        return row.tryRowCellEdit(columnIndex, dir);
      }
      return Promise.reject(null);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this3 = this;
      if (prevProps.columnRenderCount != this.props.columnRenderCount) {
        raf(function () {
          _this3.updateOnScrollLeft(undefined, true, _this3.props);
        });
      }
      var _this$props6 = this.props,
        lockedStartColumns = _this$props6.lockedStartColumns,
        lockedEndColumns = _this$props6.lockedEndColumns;
      var hasLocked = lockedStartColumns && lockedStartColumns.length || lockedEndColumns && lockedEndColumns.length;
      if (hasLocked) {
        this.onContainerScrollHorizontal(this._scrollLeft);
      }
    }
  }, {
    key: "getScrollLeftMax",
    value: function getScrollLeftMax() {
      return this.getVirtualList() ? this.getVirtualList().scrollLeftMax : 0;
    }
  }]);
  return InovuaDataGridList;
}(_react.Component);
exports.default = InovuaDataGridList;
var propTypes = Object.assign({}, _src.propTypes, {
  count: _propTypes.default.number,
  columns: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    computedWidth: _propTypes.default.number,
    id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    render: _propTypes.default.func
  })),
  data: _propTypes.default.any,
  from: _propTypes.default.number,
  updateLockedWrapperPositions: _propTypes.default.any,
  idProperty: _propTypes.default.string,
  maxWidth: _propTypes.default.number,
  minRowHeight: _propTypes.default.number,
  minWidth: _propTypes.default.number,
  onColumnRenderStartIndexChange: _propTypes.default.func,
  rowHeight: _propTypes.default.number,
  renderScroller: _propTypes.default.func,
  renderScrollerSpacer: _propTypes.default.func,
  renderActiveRowIndicator: _propTypes.default.func,
  showWarnings: _propTypes.default.bool,
  to: _propTypes.default.number,
  virtualizeColumns: _propTypes.default.bool,
  hasValueSetter: _propTypes.default.bool
});
delete propTypes.renderRow;
InovuaDataGridList.propTypes = propTypes;
InovuaDataGridList.defaultProps = {
  showWarnings: false
};