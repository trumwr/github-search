/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { MouseEvent, ReactNode } from 'react';
import { TypeComputedProps } from '../../types';
export default class InovuaDataGridColumnLayout extends React.Component {
    private scrollTop;
    lastComputedProps?: TypeComputedProps | null;
    headerLayout: HTMLDivElement | null;
    constructor(props: any);
    tryStartEdit(args: any): any;
    render(): JSX.Element;
    getDOMNode: () => any;
    renderScrollingTopRegion: () => ReactNode;
    renderScrollingBottomRegion: () => ReactNode;
    renderReorderRowProxy(): ReactNode;
    renderDragRowArrow(): ReactNode;
    getContentRows: () => any;
    getScrollTop: () => number;
    renderHeaderLayout: (computedProps: any) => JSX.Element;
    renderContent: (computedProps: any) => JSX.Element;
    onDragRowMouseDownHandle: (ev: MouseEvent & TouchEvent, index: number, cellNode: any) => void;
    renderLockedEndRows: (computedProps: any) => null;
    renderLockedStartRows: (computedProps: any) => null;
    renderLockedRows: (rows: any, position: 'start' | 'end', computedProps: any) => null;
    renderResizeOverlay: (computedProps: any) => JSX.Element;
    onColumnRenderStartIndexChange: (columnRenderStartIndex: any) => void;
    onContainerScrollVertical: (computedProps: any, scrollTop: any) => void;
    updateLockedRows(scrollTop: any): void;
    onContainerScrollHorizontal: (computedProps: TypeComputedProps, scrollLeft: number, scrollLeftMax?: number) => void;
    updateStickyHeader(): void;
    getScrollLeft: () => any;
    getScrollLeftMax: () => any;
    getScrollTopMax: () => any;
    setScrollLeft: (scrollLeft: any) => void;
    setScrollTop: (scrollTop: number) => void;
    getVirtualList: () => any;
    startEdit: (args: any) => any;
    cancelEdit: (args: any) => any;
    completeEdit: (args: any) => any;
    getRenderRange: () => any;
    getHeaderLayout: () => HTMLDivElement | null;
    getHeaderCells: () => any;
    getHeader: () => any;
    getGroupToolbar: () => any;
    getDOMColumnHeaderAt: (index: any) => any;
    onResizeMouseDown: (...args: any[]) => void;
    onResizeDownAction: (computedProps: any, config: any, { colHeaderNode, event, groupColumns }: {
        colHeaderNode: any;
        event: any;
        groupColumns: any;
    }) => void;
    onResizeTouchStart: (...args: any[]) => void;
    setupColumnResize: (computedProps: any, { visibleIndex, groupColumns, colHeaderNode, event }: {
        visibleIndex: any;
        groupColumns: any;
        colHeaderNode: any;
        event: any;
    }) => void;
    onResizeDragInit: (computedProps: any, { offset, constrained }: {
        offset: any;
        constrained: any;
    }) => void;
    onResizeDrop: (computedProps: any, { index, offset, diff, groupColumns, constrained, size, nextColumnSize, firstFlexIndex, shareSpace, }: {
        index: any;
        offset: any;
        diff: any;
        groupColumns: any;
        constrained: any;
        size: any;
        nextColumnSize: any;
        firstFlexIndex: any;
        shareSpace: any;
    }) => void;
    onResizeDrag: (computedProps: any, { offset, constrained }: {
        offset: any;
        constrained: any;
    }) => void;
    isRowFullyVisible: (index: any) => any;
}
