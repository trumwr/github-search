/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _join = _interopRequireDefault(require("../../../packages/join"));
var _renderFilter = _interopRequireDefault(require("./renderFilter"));
var _ColumnResizer = _interopRequireDefault(require("./ColumnResizer"));
var _renderMenuTool = _interopRequireDefault(require("./renderMenuTool"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var RESIZE_WRAPPER_CLASS_NAME = 'InovuaReactDataGrid__column-header__resize-wrapper';
var HEADER_CONTENT_CLASS_NAME = 'InovuaReactDataGrid__column-header__content';
var EMPTY_OBJECT = {};
var renderContent = function renderContent(props) {
  if (!props) {
    return;
  }
  if (props.renderColumnReorderProxy) {
    return props.renderColumnReorderProxy(props);
  }
  return props.children;
};
var renderHeader = function renderHeader(props, domProps, cellInstance) {
  var state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : EMPTY_OBJECT;
  var dragging = props.dragging !== undefined ? props.dragging : state.dragging;
  var last = props.last || props.computedVisibleIndex == props.computedVisibleCount - 1;
  var depth = props.depth,
    showBorderRight = props.showBorderRight,
    showBorderLeft = props.showBorderLeft,
    computedLocked = props.computedLocked,
    firstInSection = props.firstInSection,
    lastInSection = props.lastInSection,
    group = props.group,
    rtl = props.rtl,
    virtualizeColumns = props.virtualizeColumns,
    headerProps = props.headerProps;
  var style = headerProps && headerProps.headerCellStyle ? headerProps.headerCellStyle : null;
  var content = _react.default.createElement("div", {
    key: "content",
    style: style,
    className: "".concat(HEADER_CONTENT_CLASS_NAME, " ").concat(props.headerEllipsis !== false ? 'InovuaReactDataGrid__box--ellipsis' : ''),
    children: renderContent(props)
  });
  var menuTool = (0, _renderMenuTool.default)(props, cellInstance);
  var headerAlign = props.headerAlign != null ? props.headerAlign : props.textAlign;
  content = [headerAlign == 'end' && menuTool, content, headerAlign != 'end' && menuTool];
  if (props.computedResizable || props.computedFilterable) {
    var innerStyle = Object.assign({}, domProps.style || EMPTY_OBJECT);
    if (!dragging) {
      delete innerStyle.width;
      delete innerStyle.minWidth;
    }
    if (virtualizeColumns) {
      delete innerStyle.position;
    }
    var resizeHandleStyle;
    var right;
    var resizerClassName;
    if (props.computedResizable) {
      right = props.computedVisibleIndex === props.computedVisibleCount - 1 && !showBorderRight || lastInSection ? 0 : -props.columnResizeHandleWidth / 2;
      resizeHandleStyle = {
        width: props.columnResizeHandleWidth,
        zIndex: 10000 * (depth || 0)
      };
      if (lastInSection && computedLocked === 'start') {
        right = -props.columnResizeHandleWidth + 1;
      }
      if (props.resizeProxyStyle) {
        resizeHandleStyle = Object.assign({}, props.resizeProxyStyle, resizeHandleStyle);
      }
      if (dragging) {
        delete innerStyle.top;
        if (rtl) {
          delete innerStyle.right;
        } else {
          delete innerStyle.left;
        }
      }
      resizerClassName = 'InovuaReactDataGrid__column-resizer';
      if (props.lastUnlocked && !props.last) {
        resizerClassName += " ".concat(resizerClassName, "--last-unlocked");
      }
      resizerClassName += " InovuaReactDataGrid__column-resizer--direction-".concat(rtl ? 'rtl' : 'ltr');
    }
    if (innerStyle.transform) {
      delete innerStyle.transform;
    }
    var theStyle = props.style;
    var styleCloned = false;
    if (computedLocked) {
      theStyle = _objectSpread({}, theStyle);
      styleCloned = true;
    }
    var resizeHandle;
    if (!dragging && !computedLocked && virtualizeColumns) {
      theStyle.left = props.computedOffset;
      theStyle.position = 'absolute';
    }
    if (props.computedResizable) {
      var _style;
      resizeHandle = _react.default.createElement(_ColumnResizer.default, {
        key: "columnResizer",
        className: resizerClassName,
        onMouseDown: props.onResizeMouseDown,
        onTouchStart: props.onResizeTouchStart,
        style: (_style = {
          width: props.columnResizeHandleWidth
        }, (0, _defineProperty2.default)(_style, props.rtl ? 'left' : 'right', right), (0, _defineProperty2.default)(_style, "zIndex", (depth || 0) * 10000 + (100 - props.computedVisibleIndex || 0)), (0, _defineProperty2.default)(_style, "height", props.headerHeight), _style),
        resizeHandleStyle: resizeHandleStyle,
        resizeHandleClassName: "InovuaReactDataGrid__column-resize-handle"
      });
    } else {
      if (dragging && props.computedFilterable) {
        if (!styleCloned) {
          styleCloned = true;
          theStyle = _objectSpread({}, theStyle);
        }
        if (rtl) {
          theStyle.right = state.right || 0;
        } else {
          theStyle.left = state.left || 0;
        }
        theStyle.top = state.top || 0;
      }
    }
    return _react.default.createElement("div", {
      ref: domProps.ref,
      style: theStyle,
      onFocus: domProps.onFocus,
      className: (0, _join.default)(RESIZE_WRAPPER_CLASS_NAME, dragging && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--dragging"), group ? "".concat(RESIZE_WRAPPER_CLASS_NAME, "--has-group") : "".concat(RESIZE_WRAPPER_CLASS_NAME, "--has-no-group"), showBorderLeft && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--show-border-").concat(rtl ? 'right' : 'left'), (showBorderRight || props.computedShowHeaderBorderRight && last && !firstInSection) && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--show-border-").concat(rtl ? 'left' : 'right'), "".concat(RESIZE_WRAPPER_CLASS_NAME, "--direction-").concat(rtl ? 'rtl' : 'ltr'), computedLocked && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--locked"), computedLocked && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--locked-").concat(computedLocked), firstInSection && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--first-in-section"), lastInSection && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--last-in-section"), last && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--last"), props.headerWrapperClassName)
    }, _react.default.createElement("div", _objectSpread(_objectSpread({}, cleanup(domProps)), {}, {
      style: innerStyle,
      children: content
    })), resizeHandle, props.computedFilterable && !dragging ? (0, _renderFilter.default)(props, cellInstance) : null);
  }
  var ref = domProps.ref;
  return _react.default.createElement("div", _objectSpread(_objectSpread({}, cleanup(domProps)), {}, {
    ref: ref,
    id: null,
    name: null,
    title: null,
    type: null,
    value: null,
    children: content
  }));
};
var cleanup = function cleanup(domProps) {
  delete domProps.ref;
  delete domProps.id;
  delete domProps.computedOffset;
  delete domProps.name;
  delete domProps.title;
  delete domProps.type;
  delete domProps.value;
  delete domProps.onFocus;
  return domProps;
};
var _default = renderHeader;
exports.default = _default;