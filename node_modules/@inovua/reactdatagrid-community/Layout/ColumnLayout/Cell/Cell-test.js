/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _src = _interopRequireDefault(require("../../../../src"));
var _testUtils = require("../../../testUtils");
require("../../../../style/index.scss");
describe('DataGrid HeaderCell', function () {
  it('should respect headerEllipsis: false for columns', function () {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      dataSource: [],
      columns: [{
        name: 'firstName',
        width: 100,
        headerEllipsis: false,
        header: _react.default.createElement("span", {
          className: "no-ellipsis"
        }, "FIRST")
      }, {
        name: 'email',
        flex: 1
      }],
      idProperty: "id"
    }));
    return (0, _testUtils.wait)().then(function () {
      var domNode = (0, _reactDom.findDOMNode)(gridInstance);
      var headersWithEllipsis = (0, _toConsumableArray2.default)(domNode.querySelectorAll('.InovuaReactDataGrid__column-header__content.InovuaReactDataGrid__box--ellipsis'));
      expect(headersWithEllipsis.length).to.equal(1);
      expect(headersWithEllipsis[0].innerText).to.equal('Email');
      var spanNoEllipsis = (0, _toConsumableArray2.default)(domNode.querySelectorAll('.no-ellipsis'));
      expect(spanNoEllipsis.length).to.equal(1);
      expect(spanNoEllipsis[0].innerText).to.equal('FIRST');
      gridInstance.unmount();
    });
  });
  it('should respect columnResizeHandleWidth', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columnResizeHandleWidth: 20,
      dataSource: [],
      columns: [{
        name: 'firstName',
        width: 100,
        resizable: false
      }, {
        name: 'email',
        flex: 1
      }],
      idProperty: "id"
    }));
    setTimeout(function () {
      var domNode = (0, _reactDom.findDOMNode)(gridInstance);
      var resizeHandles = (0, _toConsumableArray2.default)(domNode.querySelectorAll('.InovuaReactDataGrid__column-resize-handle'));
      expect(resizeHandles.length).to.equal(1);
      expect(resizeHandles[0].style.width).to.equal('20px');
      gridInstance.unmount();
      done();
    }, 20);
  });
});
describe('DataGrid Cell', function () {
  it('should render cells of correct width', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        width: 100
      }, {
        name: 'email',
        flex: 1
      }],
      idProperty: "id",
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3
      }]
    }));
    setTimeout(function () {
      var rows = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__row'));
      expect(rows.length).to.equal(3);
      var _rows$0$children = (0, _slicedToArray2.default)(rows[0].children, 2),
        firstCell = _rows$0$children[0],
        secondCell = _rows$0$children[1];
      expect(getComputedStyle(firstCell).width).to.equal('100px');
      var secondCellComputedStyle = getComputedStyle(secondCell);
      expect(secondCellComputedStyle.width).to.equal('898px');
      gridInstance.unmount();
      done();
    }, 50);
  });
  it('should render cells at correct positions, without virtualization', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        width: 100
      }, {
        name: 'email',
        flex: 1
      }],
      rowHeight: 40,
      idProperty: "id",
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3
      }]
    }));
    setTimeout(function () {
      var rows = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__row'));
      var _rows$0$children2 = (0, _slicedToArray2.default)(rows[0].children, 2),
        firstCell = _rows$0$children2[0],
        secondCell = _rows$0$children2[1];
      expect(secondCell.getBoundingClientRect().left).to.equal(firstCell.getBoundingClientRect().left + 100);
      expect(getComputedStyle(secondCell).position).to.equal('relative');
      gridInstance.unmount();
      done();
    }, 50);
  });
  it('should render cells at correct positions with virtualization', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        width: 100
      }, {
        name: 'email',
        flex: 1
      }],
      virtualizeColumns: true,
      rowHeight: 40,
      idProperty: "id",
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3
      }]
    }));
    setTimeout(function () {
      var rows = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__row'));
      var _rows$0$children3 = (0, _slicedToArray2.default)(rows[0].children, 2),
        firstCell = _rows$0$children3[0],
        secondCell = _rows$0$children3[1];
      expect(secondCell.getBoundingClientRect().left).to.equal(firstCell.getBoundingClientRect().left + 100);
      var secondPosition = getComputedStyle(secondCell).position;
      expect(secondPosition === 'absolute').to.equal(true);
      expect(secondCell.style.transform).to.equal('translate3d(100px, 0px, 0px)');
      gridInstance.unmount();
      done();
    }, 50);
  });
  it('should render virtualized cells when columns.length >= virtualizeColumnsThreshold', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        width: 100
      }, {
        name: 'email',
        flex: 1
      }],
      virtualizeColumnsThreshold: 2,
      idProperty: "id",
      rowHeight: 40,
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3
      }]
    }));
    setTimeout(function () {
      var rows = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__row'));
      var secondCell = rows[0].children[1];
      expect(getComputedStyle(secondCell).position).to.equal('absolute');
      expect(secondCell.style.transform).to.equal('translate3d(100px, 0px, 0px)');
      gridInstance.unmount();
      done();
    }, 50);
  });
  it('should render unvirtualized cells when columns.length < virtualizeColumnsThreshold', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        width: 100
      }, {
        name: 'email',
        flex: 1
      }],
      rowHeight: 40,
      virtualizeColumnsThreshold: 3,
      idProperty: "id",
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3
      }]
    }));
    setTimeout(function () {
      var rows = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.InovuaReactDataGrid__row'));
      var secondCell = rows[0].children[1];
      expect(getComputedStyle(secondCell).position).to.equal('relative');
      gridInstance.unmount();
      done();
    }, 50);
  });
  it('should respect textEllipsis: false & headerEllipsis: false', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        defaultWidth: 100,
        header: function header() {
          return _react.default.createElement("span", {
            className: "header-noellipsis"
          }, "First Name");
        },
        headerEllipsis: false,
        textEllipsis: false,
        render: function render(_ref) {
          var value = _ref.value;
          return _react.default.createElement("span", {
            className: "noellipsis"
          }, value);
        }
      }, {
        name: 'email',
        flex: 1,
        header: function header() {
          return _react.default.createElement("span", {
            className: "header-ellipsis"
          }, "Email");
        },
        render: function render(_ref2) {
          var value = _ref2.value;
          return _react.default.createElement("span", {
            className: "ellipsis"
          }, value);
        }
      }],
      virtualizeColumnsThreshold: 3,
      idProperty: "id",
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3
      }]
    }));
    setTimeout(function () {
      var noEllipsisCells = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.noellipsis'));
      var ellipsisCells = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.ellipsis'));
      expect(noEllipsisCells.length).to.equal(3);
      expect(ellipsisCells.length).to.equal(3);
      var hasEllipsis = function hasEllipsis(node) {
        return getComputedStyle(node.parentElement)['text-overflow'] === 'ellipsis';
      };
      expect(noEllipsisCells.map(hasEllipsis)).to.deep.equal([false, false, false]);
      expect(ellipsisCells.map(hasEllipsis)).to.deep.equal([true, true, true]);
      var noEllipsisHeaderCells = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.header-noellipsis'));
      var ellipsisHeaderCells = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll('.header-ellipsis'));
      expect(noEllipsisHeaderCells.length).to.equal(1);
      expect(ellipsisHeaderCells.length).to.equal(1);
      expect(noEllipsisHeaderCells.map(hasEllipsis)).to.deep.equal([false]);
      expect(ellipsisHeaderCells.map(hasEllipsis)).to.deep.equal([true]);
      gridInstance.unmount();
      done();
    }, 50);
  });
});