/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _StringFilter = _interopRequireDefault(require("../../../../StringFilter/StringFilter"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var filterWrapperClassName = 'InovuaReactDataGrid__column-header__filter-wrapper';
var GenericFilter = function (_React$Component) {
  (0, _inherits2.default)(GenericFilter, _React$Component);
  var _super = _createSuper(GenericFilter);
  function GenericFilter(props) {
    var _this;
    (0, _classCallCheck2.default)(this, GenericFilter);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSettingsClickListener", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "settings", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refSettings", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "ref", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "specificFilter", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "unsubscribeColumnFilterVisibility", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupEventListener", function () {
      _this.unsubscribeColumnFilterVisibility = _this.props.props.notifyColumnFilterVisibleStateChange.onCalled(function (visible) {
        if (!visible && _this.state.open) {
          _this.close(_this.settings);
        }
      });
      _this.refSettings = function (s) {
        if (s) {
          if (!_this.onSettingsClickListener) {
            _this.onSettingsClickListener = s.addEventListener('mousedown', _this.onSettingsClick);
          }
        } else {
          if (_this.settings && _this.onSettingsClickListener) {
            _this.settings.removeEventListener(_this.onSettingsClickListener);
          }
        }
        _this.settings = s;
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSettingsClick", function (e) {
      if (!_this.state.open) {
        _this.onMenuOpen(e);
      } else {
        _this.onMenuClose(e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function () {
      _this.setState({
        focused: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onBlur", function () {
      _this.setState({
        focused: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMenuOpen", function (e) {
      e.preventDefault();
      _this.props.cellInstance.showFilterContextMenu(_this.settings);
      _this.setState({
        focused: true,
        open: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMenuClose", function (e) {
      e.preventDefault();
      _this.close();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onKeyDown", function (event) {
      if (event.key === 'Enter') {
        _this.onMenuOpen(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "close", function (settings) {
      _this.setState({
        focused: false,
        open: false
      }, function () {
        _this.props.cellInstance.hideFilterContextMenu(settings);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setValue", function (value) {
      if (_this.specificFilter.setValue) {
        _this.specificFilter.setValue(value);
      }
    });
    _this.onSettingsClick = _this.onSettingsClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.onSettingsClickListener = null;
    _this.ref = function (specificFilter) {
      var inputRef = props.inputRef || props.props.filterEditorProps && props.props.filterEditorProps.inputRef;
      if (inputRef) {
        if (typeof inputRef === 'function') {
          inputRef(specificFilter);
        } else {
          inputRef.current = specificFilter;
        }
      }
      _this.specificFilter = specificFilter;
    };
    _this.state = {
      focused: false,
      open: false
    };
    return _this;
  }
  (0, _createClass2.default)(GenericFilter, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.cellInstance) {
        this.props.cellInstance.filter = this;
      }
      this.setupEventListener();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.cellInstance) {
        this.props.cellInstance.filter = null;
      }
      if (this.settings && this.onSettingsClickListener) {
        this.settings.removeEventListener(this.onSettingsClickListener);
      }
      this.onSettingsClickListener = null;
      this.settings = null;
      if (this.unsubscribeColumnFilterVisibility) {
        this.unsubscribeColumnFilterVisibility();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        props = _this$props.props,
        cellInstance = _this$props.cellInstance;
      var filterValue = props.computedFilterValue;
      var active = filterValue ? filterValue.active !== false : false;
      var filterType = filterValue ? filterValue.type || props.filterType || props.type : props.filterType || props.type || 'string';
      if (filterValue && !filterValue.type) {
        filterValue = _objectSpread(_objectSpread({}, filterValue), {}, {
          type: filterType
        });
      }
      var className = filterWrapperClassName;
      if (filterValue) {
        if (!active) {
          className += " ".concat(className, "--disabled");
        }
      }
      var settings;
      var style = {
        minHeight: props.filterRowHeight + 1
      };
      if (filterValue) {
        var settingsIconClassName = 'InovuaReactDataGrid__column-header__filter-settings-icon';
        var settingsIcon = props.filterEditorProps && props.filterEditorProps.renderSettings ? props.filterEditorProps.renderSettings({
          className: settingsIconClassName,
          filterValue: filterValue
        }) : _react.default.createElement("svg", {
          tabIndex: 0,
          className: settingsIconClassName,
          width: "14",
          height: "14",
          viewBox: "0 0 14 14"
        }, _react.default.createElement("path", {
          fillRule: "evenodd",
          d: "M13.222 2H.778C.348 2 0 1.552 0 1s.348-1 .778-1h12.444c.43 0 .778.448.778 1s-.348 1-.778 1zM1.556 3.111l3.888 4.667v5.444c0 .43.349.778.778.778h1.556c.43 0 .778-.348.778-.778V7.778l3.888-4.667H1.556z"
        }));
        settings = _react.default.createElement("div", {
          className: "InovuaReactDataGrid__column-header__filter-settings",
          ref: this.refSettings,
          onKeyDown: this.onKeyDown,
          onFocus: this.onFocus,
          onBlur: this.onBlur
        }, settingsIcon);
      }
      if (!filterValue) {
        className += " ".concat(filterWrapperClassName, "--empty");
        return _react.default.createElement("div", {
          style: style,
          className: className
        });
      }
      var filterTypes = props.filterTypes;
      var filterTypeDescription = filterTypes[filterType] || {
        operators: []
      };
      var operator = filterTypeDescription.operators.filter(function (op) {
        return op.name === filterValue.operator;
      })[0];
      var operatorDisabled = operator && operator.disableFilterEditor;
      var filterProps = _objectSpread(_objectSpread({
        i18n: props.i18n,
        rtl: props.rtl,
        nativeScroll: props.nativeScroll,
        filterDelay: props.filterDelay !== undefined ? props.filterDelay : 250
      }, props.filterEditorProps), {}, {
        filterEditorProps: props.filterEditorProps,
        ref: this.ref,
        cellProps: props,
        renderInPortal: props.renderInPortal,
        cell: cellInstance,
        filterValue: filterValue,
        emptyValue: filterTypeDescription.emptyValue,
        onChange: cellInstance.onFilterValueChange,
        active: active,
        disabled: !active || operatorDisabled,
        filterType: filterType,
        theme: props.theme,
        render: function render(node) {
          return _react.default.createElement("div", {
            style: style,
            className: className
          }, node, props.enableColumnFilterContextMenu && settings);
        }
      });
      var FilterEditor = props.filterEditor;
      if (FilterEditor && typeof FilterEditor != 'string') {
        return _react.default.createElement(FilterEditor, _objectSpread({}, filterProps));
      }
      if (props.renderFilterEditor) {
        return props.renderFilterEditor(filterProps, props, cellInstance);
      }
      return _react.default.createElement(_StringFilter.default, _objectSpread({}, filterProps));
    }
  }]);
  return GenericFilter;
}(_react.default.Component);
var _default = function _default(props, cellInstance) {
  return _react.default.createElement(GenericFilter, {
    key: "filter-".concat(cellInstance.getProps().id),
    props: props,
    rtl: props.rtl,
    cellInstance: cellInstance
  });
};
exports.default = _default;