/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _src = _interopRequireDefault(require("../../../../src"));
var _testUtils = require("../../../testUtils");
require("../../../../style/index.scss");
var GROUP_CELLS_SELECTOR = '.InovuaReactDataGrid__cell--group-cell:not(.InovuaReactDataGrid__cell--hidden)';
function simulateMouseEvent(eventType, target) {
  var evt = new MouseEvent(eventType, {
    bubbles: true,
    cancelable: true,
    view: window
  });
  target.dispatchEvent(evt);
}
describe('DataGrid.groupBy Cell', function () {
  it('should render group cells of correct width, when grid has no scroll', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        width: 100
      }, {
        name: 'email',
        width: 200
      }, {
        name: 'country',
        width: 300
      }],
      idProperty: "id",
      groupBy: ['country'],
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1,
        country: 'uk'
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2,
        country: 'uk'
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3,
        country: 'usa'
      }]
    }));
    setTimeout(function () {
      var countryGroupCells = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll(GROUP_CELLS_SELECTOR));
      expect(countryGroupCells.length).to.equal(4);
      expect(countryGroupCells[1].innerText).to.equal('uk\n');
      expect(countryGroupCells[3].innerText).to.equal('usa\n');
      expect(countryGroupCells[1].offsetWidth).to.equal(300);
      expect(countryGroupCells[3].offsetWidth).to.equal(300);
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should render group cells of correct width, when grid has scroll & hideGroupByColumns is false', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        width: 100
      }, {
        name: 'email',
        width: 200
      }, {
        name: 'country',
        width: 3000
      }],
      hideGroupByColumns: false,
      idProperty: "id",
      groupBy: ['country'],
      renderGroupTitle: function renderGroupTitle(_ref) {
        var value = _ref.value,
          namePath = _ref.namePath;
        return "".concat(namePath.toString(), ": ").concat(value, " ");
      },
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1,
        country: 'uk'
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2,
        country: 'uk'
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3,
        country: 'usa'
      }]
    }));
    setTimeout(function () {
      var countryGroupCells = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll(GROUP_CELLS_SELECTOR));
      expect(countryGroupCells.length).to.equal(4);
      expect(countryGroupCells[1].innerText).to.equal('country: uk\n');
      expect(countryGroupCells[3].innerText).to.equal('country: usa\n');
      expect(countryGroupCells[1].offsetWidth).to.equal(3300);
      expect(countryGroupCells[3].offsetWidth).to.equal(3300);
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should expand/collapse group on click on group tool', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        width: 100
      }, {
        name: 'email',
        width: 200
      }, {
        name: 'country',
        width: 300
      }],
      idProperty: "id",
      groupBy: ['country'],
      dataSource: [{
        firstName: 'john',
        email: _react.default.createElement("b", {
          className: "john"
        }, "john@gmail.com"),
        id: 1,
        country: 'uk'
      }, {
        firstName: 'marry',
        email: _react.default.createElement("span", {
          className: "marry"
        }, "marry@gmail.com"),
        id: 2,
        country: 'uk'
      }, {
        firstName: 'paul',
        email: _react.default.createElement("span", {
          className: "paul"
        }, "paul@gmail.com"),
        id: 3,
        country: 'usa'
      }]
    }));
    setTimeout(function () {
      var gridNode = (0, _reactDom.findDOMNode)(gridInstance);
      var countryGroupCells = (0, _toConsumableArray2.default)(gridNode.querySelectorAll(GROUP_CELLS_SELECTOR));
      expect(countryGroupCells.length).to.equal(4);
      var expandToolCells = [countryGroupCells[0], countryGroupCells[2]];
      simulateMouseEvent('mousedown', expandToolCells[0].querySelector('svg'));
      setTimeout(function () {
        var johnNodes = gridNode.querySelectorAll('.john');
        expect(johnNodes.length).to.equal(0);
        simulateMouseEvent('mousedown', expandToolCells[0].querySelector('svg'));
        setTimeout(function () {
          var johnNodes = gridNode.querySelectorAll('.john');
          expect(johnNodes.length).to.equal(1);
          gridInstance.unmount();
          done();
        }, 1);
      }, 1);
    }, 20);
  });
});
describe('DataGrid.groupBy Cell - with locked cells', function () {
  it('should render locked group cells of correct width, when grid has no scroll', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'firstName',
        width: 100,
        locked: true
      }, {
        name: 'lastName',
        width: 200,
        locked: true
      }, {
        name: 'email',
        width: 300
      }, {
        name: 'x',
        width: 400
      }, {
        name: 'country',
        width: 3000
      }],
      idProperty: "id",
      groupBy: ['country'],
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1,
        country: 'uk',
        lastName: 'silas'
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2,
        country: 'uk',
        lastName: 'bilas'
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3,
        country: 'usa',
        lastName: 'cilas'
      }]
    }));
    setTimeout(function () {
      var countryGroupCells = (0, _toConsumableArray2.default)((0, _reactDom.findDOMNode)(gridInstance).querySelectorAll(GROUP_CELLS_SELECTOR));
      expect(countryGroupCells.length).to.equal(6);
      expect(countryGroupCells[1].offsetWidth).to.equal(300);
      var row1 = (0, _reactDom.findDOMNode)(gridInstance).querySelector('.InovuaReactDataGrid__row');
      expect(row1.children.length).to.equal(3);
      expect(row1.children[1].offsetWidth).to.equal(700);
      expect(row1.children[1].innerText).to.equal('');
      expect(row1.children[2].style.visibility).to.equal('hidden');
      expect(row1.children[2].innerText).to.equal('');
      gridInstance.unmount();
      done();
    }, 20);
  });
  it('should render locked group cells of correct width, when grid has scroll & hideGroupByColumns is false', function (done) {
    var gridInstance = (0, _testUtils.render)(_react.default.createElement(_src.default, {
      columns: [{
        name: 'country',
        width: 3000
      }, {
        name: 'firstName',
        width: 100,
        locked: true
      }, {
        name: 'lastName',
        width: 200,
        locked: true
      }, {
        name: 'email',
        width: 300
      }, {
        name: 'x',
        width: 400
      }],
      hideGroupByColumns: false,
      groupNestingSize: 40,
      idProperty: "id",
      groupBy: ['country'],
      dataSource: [{
        firstName: 'john',
        email: 'john@gmail.com',
        id: 1,
        country: 'uk'
      }, {
        firstName: 'marry',
        email: 'marry@gmail.com',
        id: 2,
        country: 'uk'
      }, {
        firstName: 'paul',
        email: 'paul@gmail.com',
        id: 3,
        country: 'usa'
      }]
    }));
    setTimeout(function () {
      var row1 = (0, _reactDom.findDOMNode)(gridInstance).querySelector('.InovuaReactDataGrid__row');
      expect(row1.children.length).to.equal(4);
      var _row1$children = (0, _slicedToArray2.default)(row1.children, 4),
        one = _row1$children[0],
        two = _row1$children[1],
        three = _row1$children[2],
        four = _row1$children[3];
      expect(one.children[0].offsetWidth).to.equal(40);
      expect(one.children[1].innerText).to.equal('uk\n');
      expect(two.innerText).to.equal('');
      expect(two.offsetWidth).to.equal(3700);
      expect(three.style.visibility).to.equal('hidden');
      expect(four.style.visibility).to.equal('hidden');
      gridInstance.unmount();
      done();
    }, 50);
  });
});