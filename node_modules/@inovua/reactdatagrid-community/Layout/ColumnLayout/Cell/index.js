/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _region = _interopRequireDefault(require("../../../packages/region"));
var _shallowequal = _interopRequireWildcard(require("../../../packages/shallowequal"));
var _renderHeader = _interopRequireDefault(require("./renderHeader"));
var _renderGroupTool = _interopRequireDefault(require("./renderGroupTool"));
var _renderNodeTool = _interopRequireDefault(require("./renderNodeTool"));
var _sealedObjectFactory = _interopRequireDefault(require("../../../utils/sealedObjectFactory"));
var _join = _interopRequireDefault(require("../../../packages/join"));
var _isFocusable = _interopRequireDefault(require("../../../utils/isFocusable"));
var _bemFactory = _interopRequireDefault(require("../../../bemFactory"));
var _renderSortTool = _interopRequireDefault(require("./renderSortTool"));
var _defaultRowReorderColumnId = require("../../../normalizeColumns/defaultRowReorderColumnId");
var _Text = _interopRequireDefault(require("./editors/Text"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var cellBem = (0, _bemFactory.default)('InovuaReactDataGrid__cell');
var headerBem = (0, _bemFactory.default)('InovuaReactDataGrid__column-header');
var emptyObject = Object.freeze ? Object.freeze({}) : {};
var emptyFn = function emptyFn() {};
var CELL_RENDER_OBJECT = (0, _sealedObjectFactory.default)({
  empty: null,
  value: null,
  data: null,
  columnIndex: null,
  rowIndex: null,
  remoteRowIndex: null,
  rowIndexInGroup: null,
  nodeProps: null,
  rowSelected: null,
  rowExpanded: null,
  treeColumn: null,
  setRowSelected: null,
  setRowExpanded: null,
  isRowExpandable: null,
  toggleRowExpand: null,
  toggleNodeExpand: null,
  loadNodeAsync: null,
  toggleGroup: null,
  cellProps: null,
  totalDataCount: null,
  rendersInlineEditor: null,
  renderRowDetailsExpandIcon: null,
  renderRowDetailsCollapsedIcon: null,
  renderRowDetailsMoreIcon: null
});
var CELL_RENDER_SECOND_OBJ = (0, _sealedObjectFactory.default)({
  cellProps: null,
  column: null,
  headerProps: null
});
var wrapInContent = function wrapInContent(value) {
  return _react.default.createElement("div", {
    key: "content",
    className: "InovuaReactDataGrid__cell__content",
    children: value
  });
};
function InovuaDataGridCell(props) {
  var domRef = (0, _react.useRef)(null);
  var isCancelled = (0, _react.useRef)(false);
  var sortTimeoutId = (0, _react.useRef)(null);
  var lastEditCompleteTimestamp = (0, _react.useRef)(0);
  var unmounted = (0, _react.useRef)(false);
  var cleanupResizeObserver = (0, _react.useRef)(null);
  var callbackRef = (0, _react.useRef)(undefined);
  var _useState = (0, _react.useState)({
      props: props
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    theState = _useState2[0],
    setState = _useState2[1];
  var useInitialProps = !theState.props || props.timestamp > theState.props.timestamp;
  var state = useInitialProps ? _objectSpread(_objectSpread({}, theState), {}, {
    props: props,
    left: props.left || 0
  }) : theState;
  var latestPropsRef = (0, _react.useRef)(state.props);
  latestPropsRef.current = state.props;
  var getProps = (0, _react.useCallback)(function () {
    return latestPropsRef.current;
  }, []);
  var updateState = (0, _react.useCallback)(function (newState, callback) {
    callbackRef.current = callback;
    setState(function (oldState) {
      return _objectSpread(_objectSpread({}, oldState), newState);
    });
  }, []);
  var updateProps = (0, _react.useCallback)(function (props, callback) {
    props.timestamp = Date.now();
    var newState = {
      props: props
    };
    requestAnimationFrame(function () {
      updateState(newState, callback);
    });
  }, []);
  var setStateProps = (0, _react.useCallback)(function (stateProps) {
    if (unmounted.current) {
      return;
    }
    var newProps = Object.assign({}, InovuaDataGridCell.defaultProps, stateProps);
    if (!(0, _shallowequal.default)(newProps, getProps(), {
      timestamp: 1
    })) {
      updateProps(newProps);
    }
  }, [getProps]);
  (0, _react.useEffect)(function () {
    var callback = callbackRef.current;
    if (callback && typeof callback === 'function') {
      callback();
    }
    callbackRef.current = null;
  }, [state]);
  (0, _react.useEffect)(function () {
    var _props$cellRef;
    unmounted.current = false;
    if (props.onMount) {
      props.onMount(props, cellInstance);
    }
    (_props$cellRef = props.cellRef) === null || _props$cellRef === void 0 ? void 0 : _props$cellRef.call(props, cellInstance);
    return function () {
      if (cleanupResizeObserver.current) {
        var cleanupResizeObserverFn = cleanupResizeObserver.current;
        cleanupResizeObserverFn();
      }
      if (props.onUnmount) {
        props.onUnmount(props, cellInstance);
      }
      unmounted.current = true;
    };
  }, []);
  var getDOMNode = (0, _react.useCallback)(function () {
    return domRef.current;
  }, []);
  var onUpdate = (0, _react.useCallback)(function () {
    if (props.onUpdate) {
      props.onUpdate(getProps(), cellInstance);
    }
  }, [props.onUpdate]);
  var setDragging = (0, _react.useCallback)(function (dragging, callback) {
    var newState = {
      dragging: dragging
    };
    if (!dragging) {
      newState.top = 0;
      if (props.rtl) {
        newState.right = 0;
      } else {
        newState.left = 0;
      }
    }
    updateState(newState, callback);
  }, [props.rtl]);
  var setLeft = (0, _react.useCallback)(function (left) {
    updateState({
      left: left
    });
  }, []);
  var setRight = (0, _react.useCallback)(function (right) {
    updateState({
      right: right
    });
  }, []);
  var setTop = (0, _react.useCallback)(function (top) {
    updateState({
      top: top
    });
  }, []);
  var setHeight = (0, _react.useCallback)(function (height) {
    updateState({
      height: height
    });
  }, []);
  var setWidth = (0, _react.useCallback)(function (width) {
    updateState({
      width: width
    });
  }, []);
  var prepareStyle = function prepareStyle(thisProps) {
    var maxWidth = thisProps.maxWidth,
      minRowHeight = thisProps.minRowHeight,
      computedLocked = thisProps.computedLocked,
      computedWidth = thisProps.computedWidth,
      computedOffset = thisProps.computedOffset,
      rowHeight = thisProps.rowHeight,
      initialRowHeight = thisProps.initialRowHeight,
      naturalRowHeight = thisProps.naturalRowHeight,
      headerCell = thisProps.headerCell,
      hidden = thisProps.hidden,
      rtl = thisProps.rtl,
      inTransition = thisProps.inTransition,
      inShowTransition = thisProps.inShowTransition,
      computedRowspan = thisProps.computedRowspan,
      zIndex = thisProps.zIndex;
    var style = {};
    if (typeof thisProps.style === 'function') {
      if (!headerCell) {
        Object.assign(style, thisProps.style(thisProps));
      }
    } else {
      Object.assign(style, thisProps.style);
    }
    style.width = computedWidth;
    style.minWidth = computedWidth;
    if (minRowHeight) {
      style.minHeight = minRowHeight;
    }
    if (headerCell) {
      style.maxWidth = computedWidth;
    }
    if (maxWidth) {
      style.maxWidth = maxWidth;
    }
    if (!headerCell) {
      if (rowHeight && !naturalRowHeight) {
        style.height = rowHeight;
      }
      if (naturalRowHeight) {
        style.minHeight = minRowHeight;
      } else {
        if (initialRowHeight) {
          style.height = initialRowHeight;
        }
        if (rowHeight && computedRowspan > 1) {
          style.height = (initialRowHeight || rowHeight) * computedRowspan;
        }
      }
    }
    if (hidden) {
      style.display = 'none';
    }
    if (!headerCell && !computedLocked) {
      style.position = naturalRowHeight ? 'relative' : 'absolute';
      style.top = 0;
      if (!naturalRowHeight) {
        if (rtl) {
          style.right = computedOffset;
        } else {
          style.left = computedOffset;
        }
      }
    }
    if (state && state.dragging) {
      if (rtl) {
        style.right = state.right || 0;
      } else {
        style.left = state.left || 0;
      }
      style.top = state.top || 0;
      style.height = state.height || '';
      if (!thisProps.computedResizable && thisProps.computedFilterable) {
        if (rtl) {
          style.right = 0;
        } else {
          style.left = 0;
        }
        style.top = 0;
      }
      style.position = 'absolute';
      style.zIndex = 100;
    }
    if (zIndex) {
      style.zIndex = zIndex;
    }
    if (computedWidth === 0) {
      style.paddingLeft = 0;
      style.paddingRight = 0;
    }
    if (inTransition) {
      var duration = inShowTransition ? thisProps.showTransitionDuration : thisProps.hideTransitionDuration;
      duration = duration || thisProps.visibilityTransitionDuration;
      style.transitionDuration = typeof duration == 'number' ? "".concat(duration, "ms") : duration;
    }
    return style;
  };
  var prepareClassName = function prepareClassName(thisProps) {
    var isGroupCell = thisProps.groupCell,
      groupTitleCell = thisProps.groupTitleCell,
      groupExpandCell = thisProps.groupExpandCell,
      isHeaderCell = thisProps.headerCell,
      headerCellDefaultClassName = thisProps.headerCellDefaultClassName,
      cellDefaultClassName = thisProps.cellDefaultClassName,
      computedGroupBy = thisProps.computedGroupBy,
      depth = thisProps.depth,
      computedVisibleIndex = thisProps.computedVisibleIndex,
      headerCell = thisProps.headerCell,
      headerEllipsis = thisProps.headerEllipsis,
      groupProps = thisProps.groupProps,
      hidden = thisProps.hidden,
      showBorderRight = thisProps.showBorderRight,
      showBorderTop = thisProps.showBorderTop,
      showBorderBottom = thisProps.showBorderBottom,
      showBorderLeft = thisProps.showBorderLeft,
      firstInSection = thisProps.firstInSection,
      lastInSection = thisProps.lastInSection,
      noBackground = thisProps.noBackground,
      computedLocked = thisProps.computedLocked,
      computedWidth = thisProps.computedWidth,
      inTransition = thisProps.inTransition,
      rowSelected = thisProps.rowSelected,
      computedRowspan = thisProps.computedRowspan,
      cellSelected = thisProps.cellSelected,
      cellActive = thisProps.cellActive,
      groupSpacerColumn = thisProps.groupSpacerColumn,
      computedPivot = thisProps.computedPivot,
      computedResizable = thisProps.computedResizable,
      groupColumnVisible = thisProps.groupColumnVisible,
      computedFilterable = thisProps.computedFilterable,
      rtl = thisProps.rtl,
      inEdit = thisProps.inEdit,
      columnIndex = thisProps.columnIndex,
      columnIndexHovered = thisProps.columnIndexHovered,
      columnHoverClassName = thisProps.columnHoverClassName,
      bulkUpdate = thisProps.bulkUpdateMouseDown;
    var userSelect = thisProps.userSelect,
      headerUserSelect = thisProps.headerUserSelect;
    if (typeof userSelect === 'boolean') {
      userSelect = userSelect ? 'text' : 'none';
    }
    if (typeof headerUserSelect === 'boolean') {
      headerUserSelect = headerUserSelect ? 'text' : 'none';
    }
    var nested = depth != null && computedVisibleIndex == 0 && !headerCell && !groupColumnVisible;
    var baseClassName = isHeaderCell ? headerCellDefaultClassName : cellDefaultClassName;
    var commonClassName = (0, _join.default)(!computedLocked && "".concat(baseClassName, "--unlocked"), computedLocked && "".concat(baseClassName, "--locked"), computedLocked && "".concat(baseClassName, "--locked-").concat(computedLocked));
    var last = thisProps.last || thisProps.computedVisibleIndex == thisProps.computedVisibleCount - 1;
    var propsClassName = typeof thisProps.className === 'function' ? thisProps.className(thisProps) : thisProps.className;
    var className = (0, _join.default)(propsClassName, baseClassName, commonClassName, !isHeaderCell && thisProps.cellClassName, (nested || hidden) && "".concat(baseClassName, "--no-padding"), hidden && "".concat(baseClassName, "--hidden"), "".concat(baseClassName, "--direction-").concat(rtl ? 'rtl' : 'ltr'), computedRowspan > 1 && "".concat(baseClassName, "--rowspan"), inTransition && "".concat(baseClassName, "--transition"), inTransition && computedWidth && "".concat(baseClassName, "--showing"), inTransition && !computedWidth && "".concat(baseClassName, "--hiding"), computedWidth === 0 && "".concat(baseClassName, "--no-size"), nested && "".concat(baseClassName, "--stretch"), isHeaderCell && headerUserSelect == null || !isHeaderCell ? userSelect && "".concat(baseClassName, "--user-select-").concat(userSelect) : null, groupExpandCell && "".concat(baseClassName, "--group-expand-cell"), groupTitleCell && "".concat(baseClassName, "--group-title-cell"), rowSelected && "".concat(baseClassName, "--selected"), groupProps && "".concat(baseClassName, "--group-cell"), computedPivot && "".concat(baseClassName, "--pivot-enabled"), groupSpacerColumn && "".concat(baseClassName, "--group-column-cell"), inEdit && "".concat(baseClassName, "--in-edit"), cellSelected && "".concat(baseClassName, "--cell-selected"), cellActive && "".concat(baseClassName, "--cell-active"), bulkUpdate && cellSelected && "".concat(baseClassName, "--cell-bulk-update-mouse-down"), thisProps.textAlign && (isHeaderCell ? !thisProps.headerAlign : true) && "".concat(baseClassName, "--align-").concat(thisProps.textAlign), thisProps.textVerticalAlign && (isHeaderCell ? !thisProps.headerVerticalAlign : true) && "".concat(baseClassName, "--vertical-align-").concat(thisProps.textVerticalAlign), thisProps.virtualizeColumns && "".concat(baseClassName, "--virtualize-columns"), thisProps.computedVisibleIndex === 0 && "".concat(baseClassName, "--first"), thisProps.rowIndexInGroup === 0 && "".concat(baseClassName, "--first-row-in-group"), last && "".concat(baseClassName, "--last"), showBorderLeft && computedWidth !== 0 && (!isHeaderCell || !(computedResizable || computedFilterable)) && "".concat(baseClassName, "--show-border-").concat(rtl ? 'right' : 'left'), firstInSection && "".concat(baseClassName, "--first-in-section"), lastInSection && "".concat(baseClassName, "--last-in-section"), showBorderRight && computedWidth !== 0 && (!isHeaderCell || !(computedResizable || computedFilterable)) && "".concat(baseClassName, "--show-border-").concat(rtl ? 'left' : 'right'), showBorderTop && "".concat(baseClassName, "--show-border-top"), showBorderBottom && "".concat(baseClassName, "--show-border-bottom"), noBackground && "".concat(baseClassName, "--no-background"), columnIndex === columnIndexHovered ? columnHoverClassName ? (0, _join.default)("".concat(baseClassName, "--over"), columnHoverClassName) : "".concat(baseClassName, "--over") : '');
    if (cellSelected) {
      className = (0, _join.default)(className, thisProps.hasTopSelectedSibling && "".concat(baseClassName, "--cell-has-top-selected-sibling"), thisProps.hasBottomSelectedSibling && "".concat(baseClassName, "--cell-has-bottom-selected-sibling"), thisProps.hasLeftSelectedSibling && "".concat(baseClassName, "--cell-has-").concat(rtl ? 'right' : 'left', "-selected-sibling"), thisProps.hasRightSelectedSibling && "".concat(baseClassName, "--cell-has-").concat(rtl ? 'left' : 'right', "-selected-sibling"));
    }
    if (isHeaderCell) {
      className = (0, _join.default)(className, commonClassName, thisProps.headerClassName, thisProps.titleClassName, state && state.dragging && "".concat(baseClassName, "--dragging"), state && state.left && "".concat(baseClassName, "--reordered"), thisProps.computedSortable && "".concat(baseClassName, "--sortable"), headerUserSelect && "".concat(baseClassName, "--user-select-").concat(headerUserSelect), last && !headerEllipsis && "".concat(baseClassName, "--overflow-hidden"), "".concat(baseClassName, "--align-").concat(thisProps.headerAlign || 'start'), thisProps.group ? "".concat(baseClassName, "--has-group") : "".concat(baseClassName, "--has-no-group"), thisProps.headerVerticalAlign && "".concat(baseClassName, "--vertical-align-").concat(thisProps.headerVerticalAlign), thisProps.computedResizable ? "".concat(baseClassName, "--resizable") : "".concat(baseClassName, "--unresizable"), thisProps.computedLockable ? "".concat(baseClassName, "--lockable") : "".concat(baseClassName, "--unlockable"), thisProps.lastInGroup && "".concat(baseClassName, "--last-in-group"));
    } else {
      className = (0, _join.default)(className, (groupProps ? groupProps.depth == computedVisibleIndex : computedGroupBy ? computedGroupBy.length === computedVisibleIndex : computedVisibleIndex === 0) && "".concat(baseClassName, "--active-row-left-border"));
    }
    if (isGroupCell) {
      className = (0, _join.default)(className, 'InovuaReactDataGrid__group-cell');
    }
    return className;
  };
  var getInitialIndex = (0, _react.useCallback)(function () {
    return props.computedVisibleIndex;
  }, [props.computedVisibleIndex]);
  var getcomputedVisibleIndex = (0, _react.useCallback)(function () {
    return getProps().computedVisibleIndex;
  }, []);
  var renderNodeTool = function renderNodeTool(thisProps) {
    var data = thisProps.data,
      renderTreeCollapseTool = thisProps.renderTreeCollapseTool,
      renderTreeExpandTool = thisProps.renderTreeExpandTool,
      renderTreeLoadingTool = thisProps.renderTreeLoadingTool;
    var nodeProps = data.__nodeProps || emptyObject;
    var leafNode = nodeProps.leafNode;
    var loading = nodeProps.loading;
    var expanded = nodeProps.expanded;
    var collapsed = !expanded;
    var style = (0, _defineProperty2.default)({}, props.rtl ? 'marginRight' : 'marginLeft', (nodeProps.depth || 0) * thisProps.treeNestingSize);
    if (props.rtl && collapsed) {
      style.transform = 'rotate(180deg)';
    }
    var element = (0, _renderNodeTool.default)({
      render: thisProps.renderNodeTool,
      nodeExpanded: expanded,
      nodeCollapsed: collapsed,
      nodeLoading: loading,
      leafNode: leafNode,
      nodeProps: nodeProps,
      node: data,
      rtl: props.rtl,
      size: 20,
      style: style,
      toggleNodeExpand: thisProps.toggleNodeExpand,
      renderTreeCollapseTool: renderTreeCollapseTool,
      renderTreeExpandTool: renderTreeExpandTool,
      renderTreeLoadingTool: renderTreeLoadingTool
    }, thisProps);
    if (!element) {
      return;
    }
    return (0, _react.cloneElement)(element, {
      key: 'nodeTool'
    });
  };
  var getInitialDOMProps = (0, _react.useCallback)(function () {
    var thisProps = getProps();
    var domProps = thisProps.domProps;
    var specificDomProps = thisProps.headerCell ? thisProps.headerDOMProps : thisProps.cellDOMProps;
    if (typeof domProps == 'function') {
      domProps = domProps(thisProps);
    }
    if (typeof specificDomProps == 'function') {
      specificDomProps = specificDomProps(thisProps);
    }
    return Object.assign({}, domProps, specificDomProps);
  }, [getProps, props.domProps, props.headerCell, props.headerDOMProps, props.cellDOMProps]);
  var renderEditor = function renderEditor(_props) {
    var thisProps = getProps();
    var editorProps = _objectSpread(_objectSpread({
      nativeScroll: thisProps.nativeScroll
    }, thisProps.editorProps), {}, {
      editorProps: thisProps.editorProps,
      cell: cellInstance,
      cellProps: thisProps,
      value: thisProps.editValue,
      theme: thisProps.theme,
      rtl: thisProps.rtl,
      autoFocus: true,
      onChange: onEditValueChange,
      onComplete: onEditorComplete,
      onCancel: onEditorCancel,
      onEnterNavigation: onEditorEnterNavigation,
      onTabNavigation: onEditorTabNavigation,
      gotoNext: gotoNextEditor,
      gotoPrev: gotoPrevEditor,
      key: 'editor',
      onClick: onEditorClick
    });
    var Editor = thisProps.editor;
    if (Editor) {
      return _react.default.createElement(Editor, _objectSpread({}, editorProps));
    }
    if (thisProps.renderEditor) {
      return thisProps.renderEditor(editorProps, editorProps.cellProps, cellInstance);
    }
    return _react.default.createElement(_Text.default, _objectSpread({}, editorProps));
  };
  var isInEdit = (0, _react.useCallback)(function () {
    return getProps().inEdit;
  }, [props.inEdit]);
  var getEditable = (0, _react.useCallback)(function (editValue) {
    var thisProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getProps();
    if (thisProps.groupSpacerColumn || thisProps.groupProps) {
      return Promise.resolve(false);
    }
    var editable = thisProps.computedEditable;
    if (typeof editable === 'function') {
      return Promise.resolve(editable(editValue, thisProps));
    }
    return Promise.resolve(editable);
  }, [props.groupSpacerColumn, props.groupProps, props.computedEditable]);
  var onEditorTabLeave = function onEditorTabLeave(_direction) {};
  var gotoNextEditor = (0, _react.useCallback)(function () {
    return props.tryRowCellEdit && props.tryRowCellEdit(getProps().computedVisibleIndex + 1, +1);
  }, [props.tryRowCellEdit, props.computedVisibleIndex]);
  var gotoPrevEditor = (0, _react.useCallback)(function () {
    props.tryRowCellEdit && props.tryRowCellEdit(getProps().computedVisibleIndex - 1, -1);
  }, [props.tryRowCellEdit, props.computedVisibleIndex]);
  var onEditorEnterNavigation = (0, _react.useCallback)(function (complete, dir) {
    var thisProps = getProps();
    if (typeof dir !== 'number') {
      dir = 0;
    }
    var newIndex = props.rowIndex + dir;
    if (!complete) {
      stopEdit();
      if (newIndex != props.rowIndex) {
        thisProps.tryNextRowEdit && thisProps.tryNextRowEdit(dir, props.columnIndex, true);
      }
    } else {
      onEditorComplete();
      if (newIndex != thisProps.rowIndex) {
        thisProps.tryNextRowEdit && thisProps.tryNextRowEdit(dir, thisProps.columnIndex, true);
      }
    }
  }, [props.tryNextRowEdit, props.rowIndex, props.columnIndex]);
  var onEditorTabNavigation = (0, _react.useCallback)(function (complete, dir) {
    var thisProps = getProps();
    if (typeof dir !== 'number') {
      dir = 0;
    }
    var newIndex = thisProps.computedVisibleIndex + dir;
    if (!complete) {
      stopEdit();
      if (newIndex != thisProps.computedVisibleIndex) {
        thisProps.tryRowCellEdit && thisProps.tryRowCellEdit(newIndex, dir);
      }
    } else {
      onEditorComplete();
      if (newIndex != thisProps.computedVisibleIndex) {
        thisProps.tryRowCellEdit && thisProps.tryRowCellEdit(newIndex, dir);
      }
    }
  }, [props.computedVisibleIndex]);
  var onEditorClick = (0, _react.useCallback)(function (event) {
    event.stopPropagation();
  }, []);
  var onEditorCancel = (0, _react.useCallback)(function () {
    cancelEdit();
  }, []);
  var startEdit = (0, _react.useCallback)(function (editValue, errBack) {
    var thisProps = getProps();
    isCancelled.current = false;
    var editValuePromise = editValue === undefined ? getEditStartValue(thisProps) : Promise.resolve(editValue);
    return editValuePromise.then(function (editValue) {
      return getEditable(editValue, thisProps).then(function (editable) {
        if (!editable) {
          return Promise.reject(editable);
        }
        if (thisProps.onEditStart) {
          thisProps.onEditStart(editValue, thisProps);
        }
        if (thisProps.onEditStartForRow) {
          thisProps.onEditStartForRow(editValue, thisProps);
        }
        return editValue;
      });
    }).catch(errBack || function (_err) {});
  }, [props.onEditStart, props.onEditStartForRow]);
  var stopEdit = (0, _react.useCallback)(function () {
    var editValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getCurrentEditValue();
    var thisProps = getProps();
    if (thisProps.onEditStop) {
      thisProps.onEditStop(editValue, thisProps);
    }
    if (thisProps.onEditStopForRow) {
      thisProps.onEditStopForRow(editValue, thisProps);
    }
  }, [props.onEditStop, props.onEditStopForRow]);
  var cancelEdit = (0, _react.useCallback)(function () {
    isCancelled.current = true;
    stopEdit();
    var thisProps = getProps();
    if (thisProps.onEditCancel) {
      thisProps.onEditCancel(thisProps);
    }
    if (thisProps.onEditCancelForRow) {
      thisProps.onEditCancelForRow(thisProps);
    }
  }, [props.onEditCancel, props.onEditCancelForRow]);
  var onEditorComplete = (0, _react.useCallback)(function () {
    var now = Date.now();
    if (lastEditCompleteTimestamp.current && now - lastEditCompleteTimestamp.current < 50) {
      return;
    }
    lastEditCompleteTimestamp.current = now;
    if (!isCancelled.current) {
      completeEdit();
    }
    isCancelled.current = false;
  }, []);
  var getEditCompleteValue = (0, _react.useCallback)(function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getCurrentEditValue();
    if (props.getEditCompleteValue) {
      return props.getEditCompleteValue(value, getProps());
    }
    return value;
  }, [props.getEditCompleteValue, props.editValue]);
  var completeEdit = (0, _react.useCallback)(function () {
    var completeValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getEditCompleteValue();
    var thisProps = getProps();
    stopEdit();
    if (thisProps.onEditComplete) {
      thisProps.onEditComplete(completeValue, thisProps);
    }
    if (thisProps.onEditCompleteForRow) {
      thisProps.onEditCompleteForRow(completeValue, thisProps);
    }
  }, [props.onEditComplete, props.onEditCompleteForRow, getEditCompleteValue]);
  var getCurrentEditValue = function getCurrentEditValue() {
    var editValue = getProps().editValue;
    return editValue;
  };
  var onFilterValueChange = (0, _react.useCallback)(function (filterValue) {
    var thisProps = getProps();
    if (thisProps.onFilterValueChange) {
      thisProps.onFilterValueChange(filterValue, thisProps);
    }
  }, [props.onFilterValueChange]);
  var onEditValueChange = (0, _react.useCallback)(function (e) {
    var value = e && e.target ? e.target.value : e;
    var thisProps = getProps();
    if (thisProps.onEditValueChange) {
      thisProps.onEditValueChange(value, thisProps);
    }
    if (thisProps.onEditValueChangeForRow) {
      thisProps.onEditValueChangeForRow(value, thisProps);
    }
  }, [props.onEditValueChange, props.onEditValueChangeForRow]);
  var renderSelectionBox = (0, _react.useCallback)(function (_props) {
    var thisProps = getProps();
    var inTransition = thisProps.inTransition,
      inShowTransition = thisProps.inShowTransition,
      cellSelected = thisProps.cellSelected,
      cellActive = thisProps.cellActive,
      bulkUpdate = thisProps.bulkUpdateMouseDown;
    if (!cellSelected && !cellActive) {
      return null;
    }
    var style = {};
    if (inTransition) {
      var duration = inShowTransition ? props.showTransitionDuration : props.hideTransitionDuration;
      duration = duration || props.visibilityTransitionDuration;
      style.transitionDuration = typeof duration == 'number' ? "".concat(duration, "ms") : duration;
    }
    var className = (0, _join.default)('InovuaReactDataGrid__cell__selection', bulkUpdate && 'InovuaReactDataGrid__cell__selection__bulk-update-mouse-down');
    return _react.default.createElement("div", {
      key: "selectionBox",
      style: style,
      className: className
    }, props.lastInRange && props.computedCellMultiSelectionEnabled && _react.default.createElement("div", {
      className: "InovuaReactDataGrid__cell__selection-dragger InovuaReactDataGrid__cell__selection-dragger--direction-".concat(props.rtl ? 'rtl' : 'ltr'),
      onMouseDown: onCellSelectionDraggerMouseDown
    }));
  }, [props.computedCellMultiSelectionEnabled, props.lastInRange, props.rtl, props.inTransition, props.inShowTransition, props.cellSelected, props.cellActive, props.showTransitionDuration, props.hideTransitionDuration, props.visibilityTransitionDuration]);
  var onHeaderCellFocus = (0, _react.useCallback)(function (event) {
    var thisProps = getProps();
    if (thisProps.onFocus) {
      thisProps.onFocus(event, thisProps);
    }
    var initialProps = getInitialDOMProps();
    if (initialProps.onFocus) {
      initialProps.onFocus(event, thisProps);
    }
  }, [props.onFocus, getInitialDOMProps]);
  var onColumnHoverMouseEnter = (0, _react.useCallback)(function (thisProps) {
    if (thisProps.groupProps || thisProps.groupSpacerColumn || thisProps.isRowDetailsCell || thisProps.isCheckboxColumn) {
      return;
    }
    if (thisProps.onColumnMouseEnter) {
      thisProps.onColumnMouseEnter(thisProps);
    }
  }, [props.groupProps, props.groupSpacerColumn, props.isRowDetailsCell, props.isCheckboxColumn, props.onColumnMouseEnter]);
  var onColumnHoverMouseLeave = (0, _react.useCallback)(function (thisProps) {
    if (thisProps.groupProps || thisProps.groupSpacerColumn || thisProps.isRowDetailsCell || thisProps.isCheckboxColumn) {
      return;
    }
    if (thisProps.onColumnMouseLeave) {
      thisProps.onColumnMouseLeave(thisProps);
    }
  }, [props.groupProps, props.groupSpacerColumn, props.isRowDetailsCell, props.isCheckboxColumn, props.onColumnMouseLeave]);
  var onCellEnterHandle = (0, _react.useCallback)(function (event) {
    var thisProps = getProps();
    var initialProps = getInitialDOMProps();
    if (thisProps.onCellEnter) {
      thisProps.onCellEnter(event, thisProps);
    }
    if (thisProps.computedEnableColumnHover) {
      onColumnHoverMouseEnter(thisProps);
    }
    if (initialProps.onMouseEnter) {
      initialProps.onMouseEnter(event, thisProps);
    }
  }, [props.onCellEnter, props.computedEnableColumnHover, getInitialDOMProps]);
  var onCellLeave = (0, _react.useCallback)(function (event) {
    var thisProps = getProps();
    var initialProps = getInitialDOMProps();
    if (thisProps.onCellLeave) {
      thisProps.onCellLeave(event, thisProps);
    }
    if (thisProps.computedEnableColumnHover) {
      onColumnHoverMouseLeave(thisProps);
    }
    if (initialProps.onMouseLeave) {
      initialProps.onMouseLeave(event, thisProps);
    }
  }, [props.onCellLeave, props.computedEnableColumnHover, getInitialDOMProps]);
  var onCellSelectionDraggerMouseDown = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    event.stopPropagation();
    if (props.onCellSelectionDraggerMouseDown) {
      props.onCellSelectionDraggerMouseDown(event, getProps());
    }
    if (props.onCellBulkUpdateMouseDown) {
      props.onCellBulkUpdateMouseDown(event, getProps());
    }
  }, [props.onCellSelectionDraggerMouseDown, props.onCellBulkUpdateMouseDown]);
  var prepareHeaderCellProps = (0, _react.useCallback)(function (cellProps) {
    var thisProps = getProps();
    var children = cellProps.children,
      computedSortInfo = cellProps.computedSortInfo;
    var computedSortable = thisProps.computedSortable;
    var sortTools = computedSortable ? getSortTools(computedSortInfo ? computedSortInfo.dir : null, cellProps) : null;
    if (sortTools) {
      cellProps.children = [children && children.props ? (0, _react.cloneElement)(children, {
        key: 'content'
      }) : children, sortTools];
      if (thisProps.headerAlign === 'end' || !thisProps.headerAlign && thisProps.textAlign == 'end') {
        cellProps.children.reverse();
      }
    }
    if (cellProps.renderHeader) {
      if (!Array.isArray(cellProps.children)) {
        cellProps.children = [cellProps.children];
      }
      cellProps.children = cellProps.renderHeader(cellProps);
    }
    if (computedSortInfo && computedSortInfo.dir) {
      var dirName = computedSortInfo.dir === 1 ? 'asc' : 'desc';
      cellProps.className = (0, _join.default)(cellProps.className, "".concat(thisProps.headerCellDefaultClassName, "--sort-").concat(dirName));
    }
    cellProps.onResizeMouseDown = onResizeMouseDown.bind(cellInstance, cellProps);
    cellProps.onResizeTouchStart = onResizeTouchStart.bind(cellInstance, cellProps);
    return cellProps;
  }, [props.computedSortable, props.headerAlign, props.textAlign, props.headerCellDefaultClassName]);
  var onMouseDown = (0, _react.useCallback)(function (event) {
    var thisProps = getProps();
    var initialDOMProps = getInitialDOMProps();
    if (event.button === 2) {
      return;
    }
    if (thisProps.onMouseDown) {
      thisProps.onMouseDown(thisProps, event);
    }
    if (initialDOMProps.onMouseDown) {
      initialDOMProps.onMouseDown(event, thisProps);
    }
    if (thisProps.onCellMouseDown) {
      thisProps.onCellMouseDown(event, thisProps);
    }
    if (thisProps.onDragRowMouseDown && thisProps.id === _defaultRowReorderColumnId.id) {
      thisProps.onDragRowMouseDown(event, thisProps.rowIndex, domRef);
    }
  }, [props.onMouseDown, props.onCellMouseDown, props.onDragRowMouseDown, props.id, props.rowIndex]);
  var onContextMenu = (0, _react.useCallback)(function (event) {
    var thisProps = getProps();
    var initialDOMProps = getInitialDOMProps();
    if (event.nativeEvent) {
      event.nativeEvent.__cellProps = thisProps;
    }
    if (thisProps.onContextMenu) {
      thisProps.onContextMenu(event, thisProps);
    }
    if (initialDOMProps.onContextMenu) {
      initialDOMProps.onContextMenu(event, thisProps);
    }
  }, [props.onContextMenu, getProps]);
  var onTouchStart = (0, _react.useCallback)(function (event) {
    var thisProps = getProps();
    var initialDOMProps = getInitialDOMProps();
    if (thisProps.onTouchStart) {
      thisProps.onTouchStart(thisProps, event);
    }
    if (initialDOMProps.onTouchStart) {
      initialDOMProps.onTouchStart(event, thisProps);
    }
    if (thisProps.onCellTouchStart) {
      thisProps.onCellTouchStart(event, thisProps);
    }
    if (thisProps.onDragRowMouseDown && thisProps.id === _defaultRowReorderColumnId.id) {
      thisProps.onDragRowMouseDown(event, thisProps.rowIndex, domRef);
    }
    event.stopPropagation();
  }, [props.onTouchStart, props.onCellTouchStart, props.onDragRowMouseDown, props.id, props.rowIndex]);
  var onResizeMouseDown = (0, _react.useCallback)(function (cellProps, event) {
    var thisProps = getProps();
    hideFilterContextMenu();
    if (thisProps.hideColumnContextMenu) {
      thisProps.hideColumnContextMenu();
    }
    if (thisProps.onResizeMouseDown) {
      var node = getDOMNode();
      thisProps.onResizeMouseDown(cellProps, {
        colHeaderNode: node,
        event: event
      });
    }
  }, [props.hideColumnContextMenu, props.onResizeMouseDown]);
  var onResizeTouchStart = (0, _react.useCallback)(function (cellProps, event) {
    var thisProps = getProps();
    if (thisProps.onResizeTouchStart) {
      thisProps.onResizeTouchStart(cellProps, {
        colHeaderNode: getDOMNode(),
        event: event
      });
    }
  }, [props.onResizeTouchStart]);
  var onClick = (0, _react.useCallback)(function (event) {
    var thisProps = getProps();
    var initialDOMProps = getInitialDOMProps();
    if (thisProps.onClick) {
      thisProps.onClick(event, thisProps);
    }
    if (initialDOMProps.onClick) {
      initialDOMProps.onClick(event, thisProps);
    }
    if (!thisProps.headerCell && thisProps.onCellClick) {
      thisProps.onCellClick(event, thisProps);
    }
    if (!thisProps.headerCell) {
      if (thisProps.computedEditable && !thisProps.inEdit && (thisProps.editStartEvent === 'onClick' || thisProps.editStartEvent === 'click')) {
        startEdit();
      }
      return;
    }
    if (thisProps.preventSortOnClick) {
      if (thisProps.preventSortOnClick(event, thisProps) === true) {
        return;
      }
    }
    if (!thisProps.sortDelay || thisProps.sortDelay < 1) {
      return onSortClick();
    }
    if (sortTimeoutId.current) {
      clearTimeout(sortTimeoutId.current);
      sortTimeoutId.current = null;
    }
    sortTimeoutId.current = setTimeout(function () {
      onSortClick();
      sortTimeoutId.current = null;
    }, parseInt(thisProps.sortDelay, 10));
    return undefined;
  }, [props.onClick, props.onCellClick, props.headerCell, props.computedEditable, props.inEdit, props.editStartEvent, props.preventSortOnClick, props.sortDelay]);
  var onDoubleClick = function onDoubleClick(event) {
    var thisProps = getProps();
    var initialDOMProps = getInitialDOMProps();
    if (thisProps.onDoubleClick) {
      thisProps.onDoubleClick(event, thisProps);
    }
    if (initialDOMProps.onDoubleClick) {
      initialDOMProps.onDoubleClick(event, thisProps);
    }
    var headerProps = thisProps.headerProps,
      headerCell = thisProps.headerCell;
    if (!headerCell) {
      if (thisProps.computedEditable && !thisProps.inEdit && (thisProps.editStartEvent === 'onDoubleClick' || thisProps.editStartEvent === 'dblclick' || thisProps.editStartEvent === 'doubleclick')) {
        startEdit();
      }
      return;
    }
    if (headerProps && headerProps.onDoubleClick) {
      headerProps.onDoubleClick(event, thisProps);
    }
    if (sortTimeoutId.current) {
      clearTimeout(sortTimeoutId.current);
      sortTimeoutId.current = null;
    }
  };
  var getEditStartValue = function getEditStartValue() {
    var thisProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getProps();
    if (typeof thisProps.getEditStartValue == 'function') {
      return Promise.resolve(thisProps.getEditStartValue(thisProps.value, thisProps));
    }
    return Promise.resolve(thisProps.value);
  };
  var onSortClick = function onSortClick() {
    var thisProps = getProps();
    if (thisProps.headerCell && thisProps.computedSortable) {
      if (thisProps.onSortClick) {
        thisProps.onSortClick(thisProps);
      }
    }
  };
  var getSortTools = (0, _react.useCallback)(function () {
    var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var cellProps = arguments.length > 1 ? arguments[1] : undefined;
    var _getProps = getProps(),
      computedSortable = _getProps.computedSortable,
      render = _getProps.renderSortTool;
    return (0, _renderSortTool.default)({
      sortable: computedSortable,
      direction: direction,
      renderSortTool: render
    }, cellProps);
  }, [props.computedSortable, props.renderSortTool]);
  var showFilterContextMenu = (0, _react.useCallback)(function (node) {
    if (props.showColumnFilterContextMenu) {
      props.showColumnFilterContextMenu(node, getProps());
    }
  }, [props.showColumnFilterContextMenu]);
  var hideFilterContextMenu = (0, _react.useCallback)(function (node) {
    if (props.hideColumnFilterContextMenu) {
      props.hideColumnFilterContextMenu(node);
    }
  }, [props.hideColumnFilterContextMenu]);
  var showContextMenu = (0, _react.useCallback)(function (domRef, onHide) {
    if (props.showColumnContextMenu) {
      props.showColumnContextMenu(domRef ? domRef : null, getProps(), {
        computedVisibleIndex: props.computedVisibleIndex
      }, onHide);
    }
  }, [props.showColumnContextMenu]);
  var getProxyRegion = (0, _react.useCallback)(function () {
    var node = getDOMNode();
    var _getProps2 = getProps(),
      computedResizable = _getProps2.computedResizable,
      computedFilterable = _getProps2.computedFilterable;
    return computedFilterable ? _region.default.from(node.firstChild) : _region.default.from(computedResizable ? node.firstChild : node);
  }, [props.computedResizable, props.computedFilterable]);
  var renderGroupTool = (0, _react.useCallback)(function () {
    var thisProps = getProps();
    var rtl = thisProps.rtl,
      collapsed = thisProps.collapsed,
      groupProps = thisProps.groupProps,
      renderGroupCollapseTool = thisProps.renderGroupCollapseTool,
      renderGroupExpandTool = thisProps.renderGroupExpandTool;
    return (0, _renderGroupTool.default)({
      render: groupProps === null || groupProps === void 0 ? void 0 : groupProps.renderGroupTool,
      collapsed: collapsed,
      rtl: rtl,
      size: 20,
      renderGroupCollapseTool: renderGroupCollapseTool,
      renderGroupExpandTool: renderGroupExpandTool,
      toggleGroup: toggleGroup
    });
  }, [props.rtl, props.collapsed, props.groupProps]);
  var toggleGroup = (0, _react.useCallback)(function (event) {
    if (event && event.preventDefault) {
      event.preventDefault();
    }
    var props = getProps();
    if (typeof props.onGroupToggle === 'function') {
      var _data = props.data;
      props.onGroupToggle(_data.keyPath, props, event);
    }
  }, [props.onGroupToggle, props.data, getProps]);
  var cellInstance = {
    showContextMenu: showContextMenu,
    getProps: getProps,
    setLeft: setLeft,
    setRight: setRight,
    setTop: setTop,
    setHeight: setHeight,
    setWidth: setWidth,
    setDragging: setDragging,
    setStateProps: setStateProps,
    updateState: updateState,
    updateProps: updateProps,
    getDOMNode: getDOMNode,
    onUpdate: onUpdate,
    getInitialIndex: getInitialIndex,
    getcomputedVisibleIndex: getcomputedVisibleIndex,
    getInitialDOMProps: getInitialDOMProps,
    isInEdit: isInEdit,
    getEditable: getEditable,
    onEditorTabLeave: onEditorTabLeave,
    gotoNextEditor: gotoNextEditor,
    gotoPrevEditor: gotoPrevEditor,
    onEditorEnterNavigation: onEditorEnterNavigation,
    onEditorTabNavigation: onEditorTabNavigation,
    onEditorClick: onEditorClick,
    onEditorCancel: onEditorCancel,
    startEdit: startEdit,
    stopEdit: stopEdit,
    cancelEdit: cancelEdit,
    onEditorComplete: onEditorComplete,
    getEditCompleteValue: getEditCompleteValue,
    completeEdit: completeEdit,
    getCurrentEditValue: getCurrentEditValue,
    onFilterValueChange: onFilterValueChange,
    onEditValueChange: onEditValueChange,
    onHeaderCellFocus: onHeaderCellFocus,
    onColumnHoverMouseEnter: onColumnHoverMouseEnter,
    onColumnHoverMouseLeave: onColumnHoverMouseLeave,
    onCellEnterHandle: onCellEnterHandle,
    onCellLeave: onCellLeave,
    onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,
    prepareHeaderCellProps: prepareHeaderCellProps,
    onMouseDown: onMouseDown,
    onContextMenu: onContextMenu,
    onTouchStart: onTouchStart,
    onResizeMouseDown: onResizeMouseDown,
    onResizeTouchStart: onResizeTouchStart,
    onClick: onClick,
    onDoubleClick: onDoubleClick,
    getEditStartValue: getEditStartValue,
    onSortClick: onSortClick,
    getSortTools: getSortTools,
    showFilterContextMenu: showFilterContextMenu,
    hideFilterContextMenu: hideFilterContextMenu,
    getProxyRegion: getProxyRegion,
    renderGroupTool: renderGroupTool,
    toggleGroup: toggleGroup,
    domRef: getDOMNode(),
    props: props
  };
  var thisProps = getProps();
  var cellActive = thisProps.cellActive,
    cellSelected = thisProps.cellSelected,
    data = thisProps.data,
    empty = thisProps.empty,
    groupProps = thisProps.groupProps,
    headerCell = thisProps.headerCell,
    hidden = thisProps.hidden,
    name = thisProps.name,
    onRender = thisProps.onRender,
    treeColumn = thisProps.treeColumn,
    groupSpacerColumn = thisProps.groupSpacerColumn,
    loadNodeAsync = thisProps.loadNodeAsync,
    groupColumnVisible = thisProps.groupColumnVisible,
    rowIndex = thisProps.rowIndex,
    remoteRowIndex = thisProps.remoteRowIndex,
    rowSelected = thisProps.rowSelected,
    rowExpanded = thisProps.rowExpanded,
    setRowSelected = thisProps.setRowSelected,
    setRowExpanded = thisProps.setRowExpanded,
    isRowExpandable = thisProps.isRowExpandable,
    toggleRowExpand = thisProps.toggleRowExpand,
    toggleNodeExpand = thisProps.toggleNodeExpand,
    totalDataCount = thisProps.totalDataCount,
    computedVisibleIndex = thisProps.computedVisibleIndex,
    inEdit = thisProps.inEdit,
    renderRowDetailsMoreIcon = thisProps.renderRowDetailsMoreIcon,
    renderRowDetailsExpandIcon = thisProps.renderRowDetailsExpandIcon,
    renderRowDetailsCollapsedIcon = thisProps.renderRowDetailsCollapsedIcon,
    notifyColumnFilterVisibleStateChange = thisProps.notifyColumnFilterVisibleStateChange;
  var value = thisProps.value,
    renderCell = thisProps.render,
    renderSummary = thisProps.renderSummary;
  var className = prepareClassName(thisProps);
  var style = prepareStyle(thisProps);
  var headerProps = headerCell ? thisProps.headerProps || emptyObject : null;
  if (!headerCell && groupSpacerColumn && groupProps && groupProps.depth == computedVisibleIndex) {
    value = renderGroupTool();
  }
  var children = value;
  var cellProps = Object.assign({}, thisProps, headerCell ? headerProps : thisProps.cellProps, {
    instance: cellInstance,
    value: value,
    name: name,
    notifyColumnFilterVisibleStateChange: notifyColumnFilterVisibleStateChange,
    columnIndex: computedVisibleIndex,
    children: children,
    onClick: onClick,
    onDoubleClick: onDoubleClick,
    onContextMenu: onContextMenu,
    onMouseDown: onMouseDown,
    onTouchStart: onTouchStart,
    onMouseEnter: onCellEnterHandle,
    onMouseLeave: onCellLeave
  });
  cellProps.className = headerCell ? headerProps.className ? "".concat(className, " ").concat(headerProps.className) : className : thisProps.cellProps && thisProps.cellProps.className ? typeof thisProps.cellProps.className === 'function' ? "".concat(className, " ").concat(thisProps.cellProps.className(cellProps)) : "".concat(className, " ").concat(thisProps.cellProps.className) : className;
  if (!headerCell) {
    CELL_RENDER_OBJECT.empty = empty;
    CELL_RENDER_OBJECT.value = value;
    CELL_RENDER_OBJECT.data = data;
    CELL_RENDER_OBJECT.cellProps = cellProps;
    CELL_RENDER_OBJECT.columnIndex = computedVisibleIndex;
    CELL_RENDER_OBJECT.treeColumn = treeColumn;
    CELL_RENDER_OBJECT.rowIndex = rowIndex;
    CELL_RENDER_OBJECT.remoteRowIndex = remoteRowIndex;
    CELL_RENDER_OBJECT.rowIndexInGroup = thisProps.rowIndexInGroup;
    CELL_RENDER_OBJECT.rowSelected = rowSelected;
    CELL_RENDER_OBJECT.rowExpanded = rowExpanded;
    CELL_RENDER_OBJECT.nodeProps = data ? data.__nodeProps : emptyObject;
    CELL_RENDER_OBJECT.setRowSelected = setRowSelected;
    CELL_RENDER_OBJECT.setRowExpanded = setRowExpanded;
    CELL_RENDER_OBJECT.toggleGroup = toggleGroup;
    CELL_RENDER_OBJECT.toggleRowExpand = toggleRowExpand;
    CELL_RENDER_OBJECT.toggleNodeExpand = toggleNodeExpand;
    CELL_RENDER_OBJECT.loadNodeAsync = loadNodeAsync;
    CELL_RENDER_OBJECT.isRowExpandable = isRowExpandable;
    CELL_RENDER_OBJECT.totalDataCount = totalDataCount;
    CELL_RENDER_OBJECT.renderRowDetailsExpandIcon = renderRowDetailsExpandIcon;
    CELL_RENDER_OBJECT.renderRowDetailsCollapsedIcon = renderRowDetailsCollapsedIcon;
  }
  var rendersInlineEditor = headerCell ? false : cellProps.rendersInlineEditor;
  if (rendersInlineEditor && typeof rendersInlineEditor === 'function') {
    rendersInlineEditor = cellProps.rendersInlineEditor(CELL_RENDER_OBJECT);
  }
  CELL_RENDER_OBJECT.rendersInlineEditor = rendersInlineEditor;
  cellProps.style = headerCell ? headerProps.style ? Object.assign({}, style, headerProps.style) : style : thisProps.cellProps && thisProps.cellProps.style ? typeof thisProps.cellProps.style === 'function' ? Object.assign({}, style, thisProps.cellProps.style(cellProps)) : Object.assign({}, style, thisProps.cellProps.style) : style;
  if (inEdit || rendersInlineEditor) {
    cellProps.editProps = {
      inEdit: inEdit,
      startEdit: startEdit,
      value: thisProps.editValue,
      onClick: onEditorClick,
      onChange: onEditValueChange,
      onComplete: onEditorComplete,
      onCancel: onEditorCancel,
      onEnterNavigation: onEditorEnterNavigation,
      onTabNavigation: onEditorTabNavigation,
      gotoNext: gotoNextEditor,
      gotoPrev: gotoPrevEditor
    };
  }
  if (headerCell) {
    cellProps.onFocus = onHeaderCellFocus;
  }
  if (headerCell) {
    CELL_RENDER_OBJECT.renderRowDetailsMoreIcon = renderRowDetailsMoreIcon;
  }
  if (headerCell) {
    cellProps = prepareHeaderCellProps(cellProps);
  } else {
    if (data && (data.__summary || data.__group && data.groupColumnSummary) && renderSummary) {
      renderCell = renderSummary;
    }
    if (renderCell) {
      CELL_RENDER_SECOND_OBJ.cellProps = cellProps;
      CELL_RENDER_SECOND_OBJ.column = cellProps;
      CELL_RENDER_SECOND_OBJ.headerProps = null;
      if (data && (!data.__group || groupColumnVisible)) {
        cellProps.children = renderCell(CELL_RENDER_OBJECT, CELL_RENDER_SECOND_OBJ);
      }
    }
    if (!hidden && cellProps.children != null && cellProps.textEllipsis !== false) {
      cellProps.children = wrapInContent(cellProps.children);
    }
    if (onRender) {
      onRender(cellProps, CELL_RENDER_OBJECT);
    }
    if (cellSelected || cellActive || inEdit || rendersInlineEditor) {
      cellProps.children = [cellProps.children, renderSelectionBox(cellProps), inEdit && !rendersInlineEditor ? renderEditor(cellProps) : null];
    }
    if (treeColumn) {
      if (Array.isArray(cellProps.children)) {
        cellProps.children = [renderNodeTool(thisProps)].concat((0, _toConsumableArray2.default)(cellProps.children));
      } else {
        cellProps.children = [renderNodeTool(thisProps), cellProps.children];
      }
    }
  }
  var initialDOMProps = getInitialDOMProps();
  var domProps = Object.assign({}, initialDOMProps, {
    onFocus: cellProps.onFocus || initialDOMProps.onFocus,
    onClick: cellProps.onClick || initialDOMProps.onClick,
    onContextMenu: cellProps.onContextMenu || initialDOMProps.onContextMenu,
    onDoubleClick: cellProps.onDoubleClick || initialDOMProps.onDoubleClick,
    onMouseDown: cellProps.onMouseDown || initialDOMProps.onMouseDown,
    onTouchStart: cellProps.onTouchStart || initialDOMProps.onTouchStart,
    onMouseEnter: cellProps.onMouseEnter || initialDOMProps.onMouseEnter,
    onMouseLeave: cellProps.onMouseLeave || initialDOMProps.onMouseLeave,
    style: initialDOMProps.style ? Object.assign({}, initialDOMProps.style, cellProps.style) : cellProps.style,
    className: (0, _join.default)(initialDOMProps.className, cellProps.className)
  });
  domProps.ref = domRef;
  return headerCell ? (0, _renderHeader.default)(cellProps, domProps, cellInstance, state) : _react.default.createElement("div", _objectSpread(_objectSpread({}, domProps), {}, {
    children: cellProps.children,
    "data-props-id": props.id,
    "data-state-props-id": getProps().id,
    id: null,
    name: null,
    value: null,
    title: null,
    data: null
  }));
}
InovuaDataGridCell.defaultProps = {
  cellDefaultClassName: cellBem(),
  headerCellDefaultClassName: headerBem(),
  computedMinWidth: 40,
  groupNestingSize: 10,
  treeNestingSize: 10,
  checkboxTabIndex: null,
  onSortClick: emptyFn,
  preventSortOnClick: function preventSortOnClick(event) {
    var target = event.target;
    return (0, _isFocusable.default)(target);
  }
};
InovuaDataGridCell.propTypes = {
  computedAbsoluteIndex: _propTypes.default.number,
  checkboxTabIndex: _propTypes.default.number,
  cellActive: _propTypes.default.bool,
  cellClassName: _propTypes.default.string,
  cellDefaultClassName: _propTypes.default.string,
  cellDOMProps: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
  computedCellMultiSelectionEnabled: _propTypes.default.bool,
  cellSelectable: _propTypes.default.bool,
  cellSelected: _propTypes.default.bool,
  checkboxColumn: _propTypes.default.any,
  collapsed: _propTypes.default.bool,
  computedColspan: _propTypes.default.number,
  computedRowspan: _propTypes.default.number,
  columnIndex: _propTypes.default.number,
  columnResizeHandleWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  computedLocked: _propTypes.default.oneOf([false, 'start', 'end']),
  computedWidth: _propTypes.default.number,
  data: _propTypes.default.oneOfType([_propTypes.default.shape({}), _propTypes.default.array]),
  defaultWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  depth: _propTypes.default.number,
  deselectAll: _propTypes.default.func,
  domProps: _propTypes.default.object,
  empty: _propTypes.default.bool,
  first: _propTypes.default.bool,
  firstInSection: _propTypes.default.bool,
  computedFlex: _propTypes.default.number,
  flex: _propTypes.default.number,
  group: _propTypes.default.string,
  computedGroupBy: _propTypes.default.any,
  groupCell: _propTypes.default.bool,
  groupSpacerColumn: _propTypes.default.bool,
  groupNestingSize: _propTypes.default.number,
  groupProps: _propTypes.default.object,
  hasBottomSelectedSibling: _propTypes.default.bool,
  hasLeftSelectedSibling: _propTypes.default.bool,
  hasLockedStart: _propTypes.default.bool,
  hasRightSelectedSibling: _propTypes.default.bool,
  hasTopSelectedSibling: _propTypes.default.bool,
  header: _propTypes.default.any,
  headerAlign: _propTypes.default.oneOf(['start', 'center', 'end']),
  headerCell: _propTypes.default.bool,
  headerCellDefaultClassName: _propTypes.default.string,
  headerClassName: _propTypes.default.string,
  headerDOMProps: _propTypes.default.object,
  headerEllipsis: _propTypes.default.bool,
  headerHeight: _propTypes.default.number,
  headerProps: _propTypes.default.any,
  headerUserSelect: _propTypes.default.oneOf([true, false, 'text', 'none']),
  headerVerticalAlign: _propTypes.default.oneOf(['top', 'middle', 'center', 'bottom', 'start', 'end']),
  headerWrapperClassName: _propTypes.default.string,
  hidden: _propTypes.default.bool,
  hideIntermediateState: _propTypes.default.bool,
  hideTransitionDuration: _propTypes.default.number,
  hiding: _propTypes.default.bool,
  id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  inHideTransition: _propTypes.default.bool,
  inShowTransition: _propTypes.default.bool,
  inTransition: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
  index: _propTypes.default.number,
  initialIndex: _propTypes.default.number,
  isColumn: _propTypes.default.bool,
  last: _propTypes.default.bool,
  lastInRange: _propTypes.default.bool,
  lastInSection: _propTypes.default.bool,
  lastRowInGroup: _propTypes.default.bool,
  lastUnlocked: _propTypes.default.bool,
  locked: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
  maxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  computedMaxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  minWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  computedMinWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  minRowHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  multiSelect: _propTypes.default.bool,
  name: _propTypes.default.string,
  nativeScroll: _propTypes.default.bool,
  nextBorderLeft: _propTypes.default.bool,
  noBackground: _propTypes.default.bool,
  onCellClick: _propTypes.default.func,
  onCellEnter: _propTypes.default.func,
  onCellMouseDown: _propTypes.default.func,
  preventSortOnClick: _propTypes.default.func,
  onCellSelectionDraggerMouseDown: _propTypes.default.func,
  onGroupToggle: _propTypes.default.func,
  onMount: _propTypes.default.func,
  onRender: _propTypes.default.func,
  onResizeMouseDown: _propTypes.default.func,
  onResizeTouchStart: _propTypes.default.func,
  onSortClick: _propTypes.default.func,
  onUnmount: _propTypes.default.func,
  prevBorderRight: _propTypes.default.bool,
  render: _propTypes.default.func,
  renderCheckbox: _propTypes.default.func,
  renderGroupTitle: _propTypes.default.func,
  renderHeader: _propTypes.default.func,
  renderSortTool: _propTypes.default.func,
  computedResizable: _propTypes.default.bool,
  lockable: _propTypes.default.bool,
  resizeProxyStyle: _propTypes.default.object,
  rowActive: _propTypes.default.bool,
  rowHeight: _propTypes.default.number,
  initialRowHeight: _propTypes.default.number,
  rowIndex: _propTypes.default.number,
  rowIndexInGroup: _propTypes.default.number,
  rowRenderIndex: _propTypes.default.number,
  rowSelected: _propTypes.default.bool,
  scrollbarWidth: _propTypes.default.number,
  indexInHeaderGroup: _propTypes.default.number,
  parentGroups: _propTypes.default.array,
  selectAll: _propTypes.default.func,
  selectedCount: _propTypes.default.number,
  selection: _propTypes.default.any,
  setRowSelected: _propTypes.default.func,
  setRowExpanded: _propTypes.default.func,
  toggleRowExpand: _propTypes.default.func,
  toggleNodeExpand: _propTypes.default.func,
  shouldComponentUpdate: _propTypes.default.func,
  showBorderBottom: _propTypes.default.bool,
  showBorderLeft: _propTypes.default.bool,
  showBorderRight: _propTypes.default.any,
  showBorderTop: _propTypes.default.bool,
  showColumnContextMenu: _propTypes.default.func,
  showColumnMenuSortOptions: _propTypes.default.bool,
  showColumnMenuFilterOptions: _propTypes.default.bool,
  showColumnMenuLockOptions: _propTypes.default.bool,
  showColumnMenuGroupOptions: _propTypes.default.bool,
  showTransitionDuration: _propTypes.default.number,
  sort: _propTypes.default.any,
  sortDelay: _propTypes.default.number,
  computedSortInfo: _propTypes.default.any,
  computedSortable: _propTypes.default.bool,
  textAlign: _propTypes.default.oneOf(['start', 'center', 'end']),
  textEllipsis: _propTypes.default.bool,
  textVerticalAlign: _propTypes.default.oneOf(['top', 'middle', 'center', 'bottom', 'start', 'end']),
  titleClassName: _propTypes.default.string,
  tryRowCellEdit: _propTypes.default.func,
  totalCount: _propTypes.default.number,
  totalDataCount: _propTypes.default.number,
  unselectedCount: _propTypes.default.number,
  userSelect: _propTypes.default.oneOf([true, false, 'text', 'none']),
  value: _propTypes.default.any,
  virtualizeColumns: _propTypes.default.bool,
  visibilityTransitionDuration: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
  computedVisible: _propTypes.default.bool,
  computedVisibleCount: _propTypes.default.number,
  computedVisibleIndex: _propTypes.default.number,
  indexInColumns: _propTypes.default.number,
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  editable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
  onEditStop: _propTypes.default.func,
  onEditStart: _propTypes.default.func,
  onEditCancel: _propTypes.default.func,
  onEditValueChange: _propTypes.default.func,
  onEditComplete: _propTypes.default.func,
  onEditStopForRow: _propTypes.default.func,
  onEditStartForRow: _propTypes.default.func,
  onEditCancelForRow: _propTypes.default.func,
  onEditValueChangeForRow: _propTypes.default.func,
  onEditCompleteForRow: _propTypes.default.func,
  onDragRowMouseDown: _propTypes.default.func,
  isRowExpandable: _propTypes.default.func,
  editorProps: _propTypes.default.any,
  editValue: _propTypes.default.any,
  Editor: _propTypes.default.func,
  renderEditor: _propTypes.default.func,
  zIndex: _propTypes.default.number,
  computedOffset: _propTypes.default.number,
  groupTitleCell: _propTypes.default.bool,
  groupExpandCell: _propTypes.default.bool,
  rendersInlineEditor: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
  groupColumn: _propTypes.default.bool,
  treeColumn: _propTypes.default.bool,
  renderNodeTool: _propTypes.default.func,
  showInContextMenu: _propTypes.default.bool,
  naturalRowHeight: _propTypes.default.bool,
  rtl: _propTypes.default.bool,
  computedFilterable: _propTypes.default.bool,
  computedEditable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
  groupColumnVisible: _propTypes.default.bool,
  filterTypes: _propTypes.default.any,
  filterDelay: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
  getFilterValue: _propTypes.default.func,
  onFilterValueChange: _propTypes.default.func,
  getEditStartValue: _propTypes.default.func,
  getEditCompleteValue: _propTypes.default.func,
  editStartEvent: _propTypes.default.string,
  setActiveIndex: _propTypes.default.func,
  renderColumnReorderProxy: _propTypes.default.func,
  columnHoverClassName: _propTypes.default.string,
  renderRowDetailsExpandIcon: _propTypes.default.func,
  renderRowDetailsCollapsedIcon: _propTypes.default.func
};
var _default = _react.default.memo(InovuaDataGridCell, function (prevProps, nextProps) {
  var areEqual = (0, _shallowequal.equalReturnKey)(nextProps, prevProps, {
    computedActiveIndex: 1,
    activeRowRef: 1,
    active: 1,
    timestamp: 1,
    remoteRowIndex: 1,
    onResizeMouseDown: 1,
    onResizeTouchStart: 1,
    onFocus: 1,
    onSortClick: 1,
    onTouchStart: 1,
    onColumnMouseEnter: 1,
    onColumnMouseLeave: 1
  });
  var equalProps = areEqual.result;
  if (!equalProps) {
    return false;
  }
  return true;
});
exports.default = _default;