/** 
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DEFAULT_STYLE = {
  position: 'relative',
  verticalAlign: 'middle',
  cursor: 'pointer'
};
var stopPropagation = function stopPropagation(e) {
  return e.stopPropagation();
};
var _default = function _default(_ref, cellProps) {
  var render = _ref.render,
    nodeLoading = _ref.nodeLoading,
    nodeCollapsed = _ref.nodeCollapsed,
    leafNode = _ref.leafNode,
    node = _ref.node,
    nodeProps = _ref.nodeProps,
    toggleNodeExpand = _ref.toggleNodeExpand,
    style = _ref.style,
    size = _ref.size,
    renderTreeCollapseTool = _ref.renderTreeCollapseTool,
    renderTreeExpandTool = _ref.renderTreeExpandTool,
    renderTreeLoadingTool = _ref.renderTreeLoadingTool;
  size = size || 18;
  if (!leafNode) {
    style = style ? _objectSpread(_objectSpread({}, DEFAULT_STYLE), style) : DEFAULT_STYLE;
  }
  var domProps = {
    onMouseDown: leafNode ? null : toggleNodeExpand,
    onClick: leafNode ? null : stopPropagation,
    style: style
  };
  var result;
  if (render) {
    domProps.style = _objectSpread({}, domProps.style);
    result = render(domProps, _objectSpread(_objectSpread({}, cellProps), {}, {
      leafNode: leafNode,
      nodeCollapsed: nodeCollapsed,
      node: node,
      nodeLoading: nodeLoading,
      nodeProps: nodeProps,
      toggleNodeExpand: toggleNodeExpand,
      size: size
    }));
    if (result != undefined) {
      return result;
    }
  }
  if (leafNode) {
    var tools = true;
    if (renderTreeCollapseTool === null && renderTreeExpandTool === null) {
      tools = false;
    }
    return _react.default.createElement("div", _objectSpread(_objectSpread({}, domProps), {}, {
      style: _objectSpread(_objectSpread({}, domProps.style), {}, {
        width: tools ? size : 0,
        height: size
      })
    }));
  }
  var renderNodeLoading = function renderNodeLoading(_ref2) {
    var domProps = _ref2.domProps,
      size = _ref2.size;
    var className = "".concat(domProps.className || '', " InovuaReactDataGrid__cell__node-tool--loading");
    var loadingTool;
    if (renderTreeLoadingTool === null) {
      return _react.default.createElement("div", {
        style: domProps.style
      });
    }
    if (renderTreeLoadingTool) {
      loadingTool = renderTreeLoadingTool({
        domProps: domProps,
        size: size,
        className: className
      });
    }
    if (loadingTool === undefined) {
      loadingTool = _react.default.createElement("svg", _objectSpread(_objectSpread({}, domProps), {}, {
        className: className,
        height: size,
        width: size,
        viewBox: "0 0 24 24"
      }), _react.default.createElement("path", {
        d: "M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"
      }));
    }
    return loadingTool;
  };
  if (nodeLoading) {
    return renderNodeLoading({
      domProps: domProps,
      size: size
    });
  }
  var renderCollapseToolHandle = function renderCollapseToolHandle() {
    var result;
    if (renderTreeCollapseTool === null) {
      return _react.default.createElement("div", {
        style: domProps.style
      });
    }
    if (renderTreeCollapseTool) {
      result = renderTreeCollapseTool({
        domProps: domProps,
        size: size
      });
    }
    if (result === undefined) {
      result = _react.default.createElement("svg", _objectSpread(_objectSpread({}, domProps), {}, {
        height: size,
        viewBox: "0 0 24 24",
        width: size
      }), _react.default.createElement("path", {
        d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
      }));
    }
    return result;
  };
  var renderExpandToolHandle = function renderExpandToolHandle() {
    var result;
    if (renderTreeExpandTool === null) {
      return _react.default.createElement("div", {
        style: domProps.style
      });
    }
    if (renderTreeExpandTool) {
      result = renderTreeExpandTool({
        domProps: domProps,
        size: size
      });
    }
    if (result === undefined) {
      result = _react.default.createElement("svg", _objectSpread(_objectSpread({}, domProps), {}, {
        height: size,
        viewBox: "0 0 24 24",
        width: size
      }), _react.default.createElement("path", {
        d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
      }));
    }
    return result;
  };
  if (nodeCollapsed) {
    return renderCollapseToolHandle();
  }
  return renderExpandToolHandle();
};
exports.default = _default;